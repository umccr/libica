{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to libica.openapi documentation","text":"<p>Python SDK for Illumina Connected Analytics (ICA) -- https://umccr.github.io/libica/</p> <ul> <li>Tested for Python 3.8, 3.9, 3.10, 3.11, 3.12, 3.13</li> <li>PyDoc</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install libica\n</code></pre>"},{"location":"#sdk-for-ica","title":"SDK for ICA","text":"<ul> <li>v2</li> <li>v3</li> </ul>"},{"location":"#release","title":"Release","text":"<p>There are two SDK Python packages, namely <code>v2</code> and <code>v3</code>. If you are a new starter, please use <code>v3</code> SDK package. If you are an existing user, please upgrade to <code>v3</code> when you can. Most of the time, this should be straight forward with minor tuning to application code. Since <code>v3</code> release, the SDK <code>v2</code> package now enter into maintenance mode and deprecate by 2026 Oct.</p>"},{"location":"#example","title":"Example","text":"<ul> <li>See examples directory for some example scripts</li> <li>See wrapica and icav2-cli-plugins for client application that build on top of SDK</li> </ul>"},{"location":"#notice","title":"Notice","text":"<ul> <li>MIT License and DISCLAIMER</li> <li>The Advanced Genomics Collaboration (TAGC)</li> </ul>"},{"location":"v2/","title":"libica.openapi.v2","text":"<p>This API can be used to interact with Illumina Connected Analytics. Authentication <p> Authentication to the  API can be done in multiple ways: <ul><li>For the entire API, except for the POST /tokens endpoint: API-key + JWT</li> <li>Only for the POST /tokens endpoint: API-key + Basic Authentication</li></ul> </p> <p> API-key API keys are managed within the Illumina portal where you can manage your profile after you have logged on. The API-key has to be provided in the X-API-Key header parameter when executing API calls to ICA. In the background, a JWT will be requested at the IDP of Illumina to create a session. A good practice is to not use the API-key for every API call, but to first generate a JWT and to use that for authentication in subsequent calls. </p> <p> JWT To avoid using an API-key for each call, we recommend to request a JWT via the POST /tokens endpoint  using this API-key. The JWT will expire after a pre-configured period specified by a tenant administrator through the IAM console in the Illumina portal. The JWT is the preferred way for authentication.A not yet expired, still valid JWT could be refreshed using the POST /tokens:refresh endpoint.Refreshing the JWT is not possible if the JWT was generated by using an API-key. </p> <p> Basic Authentication Basic authentication is only supported by the POST /tokens endpoint for generating a JWT. Use \\\"Basic base64encoded(emailaddress:password)\\\" in the \\\"Authorization\\\" header parameter for this authentication method. In case having access to multiple tenants using the same email-address, also provide the \\\"tenant\\\" request parameter to indicate what tenant you would like to request a JWT for. </p> <p> Compression If the API client provides request header 'Accept-Encoding' with value 'gzip', then the API applies GZIP compression on the JSON response. This significantly reduces the size and thus the download time of the response, which results in faster end-to-end API calls. In case of compression, the API also provides response header 'Content-Encoding' with value 'gzip', as indication for the client that decompression is required. </p> </p> <p>The <code>libica.openapi.v2</code> package is automatically generated by the OpenAPI Generator project:</p> <ul> <li>API version: 3</li> <li>Package version: 1.0.0</li> <li>Build date: 2025-06-05T14:43:12.864218+10:00[Australia/Melbourne]</li> <li>Build package: org.openapitools.codegen.languages.PythonClientCodegen</li> </ul>"},{"location":"v2/#requirements","title":"Requirements.","text":"<p>Python &gt;=3.6</p>"},{"location":"v2/#installation-usage","title":"Installation &amp; Usage","text":"<p>This python library package is generated without supporting files like setup.py or requirements files</p> <p>To be able to use it, you will need these dependencies in your own package that uses this library:</p> <ul> <li>urllib3 &gt;= 1.25.3</li> <li>python-dateutil</li> </ul>"},{"location":"v2/#getting-started","title":"Getting Started","text":"<p>In your own code, to use this library to connect and interact with libica.openapi.v2, you can run the following:</p> <pre><code>import time\nimport libica.openapi.v2\nfrom pprint import pprint\nfrom libica.openapi.v2.api import analysis_storage_api\nfrom libica.openapi.v2.model.analysis_storage_list_v3 import AnalysisStorageListV3\nfrom libica.openapi.v2.model.problem import Problem\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = analysis_storage_api.AnalysisStorageApi(api_client)\n\n    try:\n        # Retrieve the list of analysis storage options.\n        api_response = api_instance.get_analysis_storage_options()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling AnalysisStorageApi-&gt;get_analysis_storage_options: %s\\n\" % e)\n</code></pre>"},{"location":"v2/#documentation-for-api-endpoints","title":"Documentation for API Endpoints","text":"<p>All URIs are relative to /ica/rest</p> Class Method HTTP request Description AnalysisStorageApi get_analysis_storage_options GET /api/analysisStorages Retrieve the list of analysis storage options. BundleApi accept_terms_of_use_bundle POST /api/bundles/{bundleId}/termsOfUse:accept accept terms of use for a bundle BundleApi create_bundle POST /api/bundles Create a new bundle BundleApi deprecate_bundle POST /api/bundles/{bundleId}:deprecate deprecate a bundle BundleApi get_bundle GET /api/bundles/{bundleId} Retrieve a bundle. BundleApi get_bundle_terms_of_use GET /api/bundles/{bundleId}/termsOfUse Retrieve the last version of terms of use for a bundle. BundleApi get_bundles GET /api/bundles Retrieve a list of bundles. BundleApi get_terms_of_use_acceptance GET /api/bundles/{bundleId}/termsOfUse/userAcceptance/currentUser Retrieve the acceptance record for a bundle for the current user. BundleApi insert_bundle_terms_of_use POST /api/bundles/{bundleId}/termsOfUse:new Insert a new version of the terms of use for a bundle BundleApi release_bundle POST /api/bundles/{bundleId}:release release a bundle BundleDataApi get_bundle_data GET /api/bundles/{bundleId}/data Retrieve the list of bundle data. BundleDataApi link_data_to_bundle POST /api/bundles/{bundleId}/data/{dataId} Link data to this bundle. BundleDataApi unlink_data_from_bundle DELETE /api/bundles/{bundleId}/data/{dataId} Unlink data from this bundle. BundleDataLinkingBatchApi create_bundle_data_linking_batch POST /api/bundles/{bundleId}/dataLinkingBatch Create a bundle data linking batch. BundleDataLinkingBatchApi get_bundle_data_linking_batch GET /api/bundles/{bundleId}/dataLinkingBatch/{batchId} Retrieve a bundle data linking batch. BundleDataLinkingBatchApi get_bundle_data_linking_batch_item GET /api/bundles/{bundleId}/dataLinkingBatch/{batchId}/items/{itemId} Retrieve a bundle data linking batch item. BundleDataLinkingBatchApi get_bundle_data_linking_batch_items GET /api/bundles/{bundleId}/dataLinkingBatch/{batchId}/items Retrieve a list of bundle data linking batch items. BundleDataUnlinkingBatchApi create_bundle_data_unlinking_batch POST /api/bundles/{bundleId}/dataUnlinkingBatch Create a bundle data unlinking batch. BundleDataUnlinkingBatchApi get_bundle_data_unlinking_batch GET /api/bundles/{bundleId}/dataUnlinkingBatch/{batchId} Retrieve a bundle data unlinking batch. BundleDataUnlinkingBatchApi get_bundle_data_unlinking_batch_item GET /api/bundles/{bundleId}/dataUnlinkingBatch/{batchId}/items/{itemId} Retrieve a bundle data unlinking batch item. BundleDataUnlinkingBatchApi get_bundle_data_unlinking_batch_items GET /api/bundles/{bundleId}/dataUnlinkingBatch/{batchId}/items Retrieve a list of bundle data unlinking batch items. BundlePipelineApi get_bundle_pipelines GET /api/bundles/{bundleId}/pipelines Retrieve a list of bundle pipelines. BundlePipelineApi link_pipeline_to_bundle POST /api/bundles/{bundleId}/pipelines/{pipelineId} Link a pipeline to a bundle. BundlePipelineApi unlink_pipeline_from_bundle DELETE /api/bundles/{bundleId}/pipelines/{pipelineId} Unlink a pipeline from a bundle. BundleSampleApi get_bundle_samples GET /api/bundles/{bundleId}/samples Retrieve a list of bundle samples. BundleSampleApi link_sample_to_bundle POST /api/bundles/{bundleId}/samples/{sampleId} Link a sample to a bundle. BundleSampleApi unlink_sample_from_bundle DELETE /api/bundles/{bundleId}/samples/{sampleId} Unlink a sample from a bundle. BundleToolApi get_bundle_tools GET /api/bundles/{bundleId}/tools Retrieve a list of bundle tools. BundleToolApi get_tools_eligible_for_linking_to_bundle GET /api/bundles/{bundleId}/tools/eligibleForLinking Retrieve a list of tools eligible for linking to the bundle. BundleToolApi link_tool_to_bundle POST /api/bundles/{bundleId}/tools/{toolId} Link a tool to a bundle BundleToolApi unlink_tool_from_bundle DELETE /api/bundles/{bundleId}/tools/{toolId} Unlink a tool from this bundle. ConnectorApi cancel_connector POST /api/connectors/{connectorId}:cancel Cancel a connector. ConnectorApi create_connector POST /api/connectors Create a connector. ConnectorApi create_download_rule POST /api/connectors/{connectorId}/downloadRules Create a download rule. ConnectorApi create_upload_rule POST /api/connectors/{connectorId}/uploadRules Create an upload rule. ConnectorApi delete_download_rule DELETE /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Delete a download rule. ConnectorApi delete_upload_rule DELETE /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Delete an upload rule. ConnectorApi disable_connector POST /api/connectors/{connectorId}:disable Disable a connector. ConnectorApi enable_connector POST /api/connectors/{connectorId}:enable Enable a connector. ConnectorApi get_connector GET /api/connectors/{connectorId} Retrieve a connector. ConnectorApi get_connectors GET /api/connectors Retrieve a list of connectors. ConnectorApi get_download_rule GET /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Retrieve a download rule. ConnectorApi get_download_rules GET /api/connectors/{connectorId}/downloadRules Retrieve a list of download rules. ConnectorApi get_upload_rule GET /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Retrieve an upload rule. ConnectorApi get_upload_rules GET /api/connectors/{connectorId}/uploadRules Retrieve a list of upload rules. ConnectorApi update_download_rule PUT /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Update a download rule. ConnectorApi update_upload_rule PUT /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Update an upload rule. DataApi create_download_url_for_data_without_project_context POST /api/data/{dataUrn}:createDownloadUrl Retrieve a download URL for this data. DataApi create_inline_view_url_for_data_without_project_context POST /api/data/{dataUrn}:createInlineViewUrl Retrieve an URL for this data to use for inline view in a browser. DataApi get_data GET /api/data/{dataUrn} Retrieve a data. DataFormatApi get_data_formats GET /api/dataFormats Retrieve a list of data formats. DockerImageApi add_regions POST /api/dockerImages/{imageId}:addRegions Add regions to an existing Docker image. DockerImageApi create_external_docker_image POST /api/dockerImages:createExternal Create an external Docker image. DockerImageApi create_internal_docker_image POST /api/dockerImages:createInternal Create an internal Docker image. DockerImageApi get_docker_image GET /api/dockerImages/{imageId} Retrieve a Docker image. Only the Docker image the user has access to can be retrieved. DockerImageApi get_docker_images GET /api/dockerImages Retrieve a list of Docker images. Only the Docker images the user has access to are returned. DockerImageApi remove_regions POST /api/dockerImages/{imageId}:removeRegions Remove regions to an existing Docker image. EntitledBundleApi accept_terms_of_use_entitled_bundle POST /api/entitledbundles/{entitledBundleId}/termsOfUse:accept Accept terms of use for an entitled bundle EntitledBundleApi get_entitled_bundle GET /api/entitledbundles/{entitledBundleId} Retrieve an entitled bundle. EntitledBundleApi get_entitled_bundle_terms_of_use GET /api/entitledbundles/{entitledBundleId}/termsOfUse Retrieve the last version of terms of use for an entitled bundle. EntitledBundleApi get_entitled_bundle_terms_of_use_acceptance GET /api/entitledbundles/{entitledBundleId}/termsOfUse/userAcceptance/currentUser Retrieve the acceptance record for an entitled bundle for the current user. EntitledBundleApi get_entitled_bundles GET /api/entitledbundles Retrieve a list of entitled bundles. EntitlementDetailApi find_all_matching_activation_codes_for_cwl POST /api/activationCodes:findAllMatchingForCwl Search all matching activation code details for a Cwl pipeline. EntitlementDetailApi find_all_matching_activation_codes_for_nextflow POST /api/activationCodes:findAllMatchingForNextflow Search all matching activation code details for a Nextflow pipeline. EntitlementDetailApi find_best_matching_activation_code_for_cwl POST /api/activationCodes:findBestMatchingForCwl Search the best matching activation code detail for Cwl pipeline. EntitlementDetailApi find_best_matching_activation_codes_for_nextflow POST /api/activationCodes:findBestMatchingForNextflow Search the best matching activation code details for Nextflow pipeline. EventCodeApi get_event_codes GET /api/eventCodes Retrieve event codes EventLogApi get_event_logs GET /api/eventLog Retrieve a list of event logs. EventLogApi search_event_logs POST /api/eventLog:search Search event logs. JobApi get_job GET /api/jobs/{jobId} Retrieve a job. JobApi get_jobs GET /api/jobs Retrieve a list of jobs. MetadataModelApi get_metadata_model GET /api/metadataModels/{metadataModelId} Retrieve a metadata model. Only metadata models that the user has access to can be retrieved. MetadataModelApi get_metadata_model_fields GET /api/metadataModels/{metadataModelId}/fields Retrieve the fields of a metadata model. Only metadata models that the user has access to can be retrieved. MetadataModelApi get_metadata_models GET /api/metadataModels Retrieve the metadata models for the tenant associated to the security context. MetadataModelApi get_tenant_model GET /api/metadataModels/tenantModel Retrieve the tenant model for the tenant associated to the security context. NotificationChannelApi create_notification_channel POST /api/notificationChannels Create a notification channel NotificationChannelApi delete_notification_channel DELETE /api/notificationChannels/{channelId} Delete a notification channel NotificationChannelApi get_notification_channel GET /api/notificationChannels/{channelId} Retrieve a notification channel NotificationChannelApi get_notification_channels GET /api/notificationChannels Retrieve notification channels NotificationChannelApi update_notification_channel PUT /api/notificationChannels/{channelId} Update a notification channel PipelineApi download_pipeline_file_content GET /api/pipelines/{pipelineId}/files/{fileId}/content Download the contents of a pipeline file. PipelineApi get_pipeline GET /api/pipelines/{pipelineId} Retrieve a pipeline. PipelineApi get_pipeline_configuration_parameters GET /api/pipelines/{pipelineId}/configurationParameters Retrieve configuration parameters for a pipeline. PipelineApi get_pipeline_files GET /api/pipelines/{pipelineId}/files Retrieve files for a pipeline. PipelineApi get_pipeline_html_documentation GET /api/pipelines/{pipelineId}/documentation/HTML Retrieve HTML documentation for a project pipeline. PipelineApi get_pipeline_input_parameters GET /api/pipelines/{pipelineId}/inputParameters Retrieve input parameters for a pipeline. PipelineApi get_pipeline_reference_sets GET /api/pipelines/{pipelineId}/referenceSets Retrieve the reference sets of a pipeline. PipelineApi get_pipelines GET /api/pipelines Retrieve a list of pipelines. PipelineLanguageApi get_nextflow_versions GET /api/pipelineLanguages/nextflow/versions Retrieve a list of nextflow versions. ProjectApi change_project_owner POST /api/projects/{projectId}:changeOwner Change the project owner. ProjectApi create_project POST /api/projects Create a new project. ProjectApi get_project GET /api/projects/{projectId} Retrieve a project. ProjectApi get_project_bundle GET /api/projects/{projectId}/bundles/{bundleId} Retrieve a project bundle. ProjectApi get_project_bundles GET /api/projects/{projectId}/bundles Retrieve project bundles. ProjectApi get_projects GET /api/projects Retrieve a list of projects. ProjectApi hide_project POST /api/projects/{projectId}:hide Hide a project. ProjectApi link_project_bundle POST /api/projects/{projectId}/bundles/{bundleId} Link a bundle to a project. ProjectApi unlink_project_bundle DELETE /api/projects/{projectId}/bundles/{bundleId} Unlink a bundle from a project. ProjectApi update_project PUT /api/projects/{projectId} Update a project. ProjectAnalysisApi abort_analysis POST /api/projects/{projectId}/analyses/{analysisId}:abort Abort an analysis. ProjectAnalysisApi create_cwl_analysis POST /api/projects/{projectId}/analysis:cwl Create and start an analysis for a CWL pipeline. ProjectAnalysisApi create_cwl_analysis_with_json_input POST /api/projects/{projectId}/analysis:cwlWithJsonInput Create and start an analysis for a CWL pipeline with an input.json. ProjectAnalysisApi create_cwl_analysis_with_structured_input POST /api/projects/{projectId}/analysis:cwlWithStructuredInput Create and start an analysis for a CWL pipeline with a structured input. ProjectAnalysisApi create_cwl_json_analysis POST /api/projects/{projectId}/analysis:cwlJson Create and start an analysis for a JSON based CWL pipeline. ProjectAnalysisApi create_nextflow_analysis POST /api/projects/{projectId}/analysis:nextflow Create and start an analysis for a Nextflow pipeline. ProjectAnalysisApi create_nextflow_analysis_with_custom_input POST /api/projects/{projectId}/analysis:nextflowWithCustomInput Create and initiate an analysis for a Nextflow pipeline using a custom input, provided in either YAML format or an escaped JSON string. ProjectAnalysisApi create_nextflow_json_analysis POST /api/projects/{projectId}/analysis:nextflowJson Create and start an analysis for a JSON based Nextflow pipeline. ProjectAnalysisApi get_analyses GET /api/projects/{projectId}/analyses Retrieve the list of analyses. ProjectAnalysisApi get_analysis GET /api/projects/{projectId}/analyses/{analysisId} Retrieve an analysis. ProjectAnalysisApi get_analysis_configurations GET /api/projects/{projectId}/analyses/{analysisId}/configurations Retrieve the configurations of an analysis. ProjectAnalysisApi get_analysis_inputs GET /api/projects/{projectId}/analyses/{analysisId}/inputs Retrieve the inputs of an analysis. ProjectAnalysisApi get_analysis_outputs GET /api/projects/{projectId}/analyses/{analysisId}/outputs Retrieve the outputs of an analysis (limited to the first 200.000 files per output folder). When trying to retrieve the listed data with an endpoint such as GET /api/data/{dataUrn}, data which has already been deleted will be skipped. ProjectAnalysisApi get_analysis_reports GET /api/projects/{projectId}/analyses/{analysisId}/reports Retrieve the report configs and associated reports. ProjectAnalysisApi get_analysis_steps GET /api/projects/{projectId}/analyses/{analysisId}/steps Retrieve the individual steps of an analysis. ProjectAnalysisApi get_analysis_usage_details GET /api/projects/{projectId}/analyses/{analysisId}/usage Retrieve the analysis usage details. ProjectAnalysisApi get_cwl_input_json GET /api/projects/{projectId}/analyses/{analysisId}/cwl/inputJson Retrieve the input json of a CWL analysis. ProjectAnalysisApi get_cwl_output_json GET /api/projects/{projectId}/analyses/{analysisId}/cwl/outputJson Retrieve the output json of a CWL analysis. ProjectAnalysisApi get_project_analysis_input_form_values GET /api/projects/{projectId}/analyses/{analysisId}/inputFormValues Retrieve the values from an input form. ProjectAnalysisApi get_raw_analysis_output GET /api/projects/{projectId}/analyses/{analysisId}/rawOutput Retrieve the raw output of an analysis. ProjectAnalysisApi search_analyses POST /api/projects/{projectId}/analysis:search Search analyses. ProjectAnalysisApi update_analysis PUT /api/projects/{projectId}/analyses/{analysisId} Update an analysis. ProjectAnalysisCreationBatchApi create_analysis_creation_batch POST /api/projects/{projectId}/analysisCreationBatch Create and start multiple analyses in batch. ProjectAnalysisCreationBatchApi get_analysis_creation_batch GET /api/projects/{projectId}/analysisCreationBatch/{batchId} Retrieve a analysis creation batch. ProjectAnalysisCreationBatchApi get_analysis_creation_batch_item GET /api/projects/{projectId}/analysisCreationBatch/{batchId}/items/{itemId} Retrieve a analysis creation batch item. ProjectAnalysisCreationBatchApi get_analysis_creation_batch_items GET /api/projects/{projectId}/analysisCreationBatch/{batchId}/items Retrieve a list of analysis creation batch items. ProjectAnalysisStorageApi get_project_analysis_storage_options GET /api/projects/{projectId}/analysisStorages Retrieve the list of project analysis storage options. ProjectBaseApi create_base_connection_details POST /api/projects/{projectId}/base:connectionDetails Creates the connection details to snowflake instance. ProjectBaseApi get_base_job GET /api/projects/{projectId}/base/jobs/{baseJobId} Retrieve a base job. ProjectBaseApi get_base_jobs GET /api/projects/{projectId}/base/jobs Retrieve a list of base jobs ProjectBaseApi get_base_tables GET /api/projects/{projectId}/base/tables Retrieve a list of base tables. ProjectBaseApi load_data POST /api/projects/{projectId}/base/tables/{tableId}:loadData Load data in a base table. ProjectCustomEventsApi create_custom_event POST /api/projects/{projectId}/customEvents Create a new custom event. ProjectCustomNotificationSubscriptionsApi create_custom_notification_subscription POST /api/projects/{projectId}/customNotificationSubscriptions Create a custom notification subscription ProjectCustomNotificationSubscriptionsApi delete_custom_notification_subscription DELETE /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Delete a custom notification subscription ProjectCustomNotificationSubscriptionsApi get_custom_notification_subscription GET /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Retrieve a notification subscription ProjectCustomNotificationSubscriptionsApi get_custom_notification_subscriptions GET /api/projects/{projectId}/customNotificationSubscriptions Retrieve notification subscriptions ProjectCustomNotificationSubscriptionsApi update_custom_notification_subscription PUT /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Update a notification subscription ProjectDataApi add_secondary_data POST /api/projects/{projectId}/data/{dataId}/secondaryData/{secondaryDataId} Add secondary data to data. ProjectDataApi archive_data POST /api/projects/{projectId}/data/{dataId}:archive Schedule this data for archival. ProjectDataApi complete_folder_upload_session POST /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId}:complete Complete a trackable folder upload session. ProjectDataApi create_data_in_project POST /api/projects/{projectId}/data Create data in this project. ProjectDataApi create_download_url_for_data POST /api/projects/{projectId}/data/{dataId}:createDownloadUrl Retrieve a download URL for this data. ProjectDataApi create_download_urls_for_data POST /api/projects/{projectId}/data:createDownloadUrls Retrieve download URLs for the data. ProjectDataApi create_file POST /api/projects/{projectId}/data:createFile Create a file in this project. ProjectDataApi create_file_with_temporary_credentials POST /api/projects/{projectId}/data:createFileWithTemporaryCredentials Create a file in this project, and retrieve temporary credentials for it. ProjectDataApi create_file_with_upload_url POST /api/projects/{projectId}/data:createFileWithUploadUrl Create a file in this project, and retrieve an upload url for it. ProjectDataApi create_folder POST /api/projects/{projectId}/data:createFolder Create a folder in this project. ProjectDataApi create_folder_upload_session POST /api/projects/{projectId}/data/{dataId}/folderUploadSessions Create a trackable folder upload session. ProjectDataApi create_folder_with_temporary_credentials POST /api/projects/{projectId}/data:createFolderWithTemporaryCredentials Create a folder in this project, and and retrieve temporary credentials for it. ProjectDataApi create_folder_with_upload_session POST /api/projects/{projectId}/data:createFolderWithUploadSession Create a folder in this project, and create a trackable folder upload session. ProjectDataApi create_inline_view_url_for_data POST /api/projects/{projectId}/data/{dataId}:createInlineViewUrl Retrieve an URL for this data to use for inline view in a browser. ProjectDataApi create_non_indexed_folder POST /api/projects/{projectId}/data:createNonIndexedFolder Create a non indexed folder in this project. The folder will be created as a top-level folder. ProjectDataApi create_temporary_credentials_for_data POST /api/projects/{projectId}/data/{dataId}:createTemporaryCredentials Retrieve temporary credentials for this data. ProjectDataApi create_upload_url_for_data POST /api/projects/{projectId}/data/{dataId}:createUploadUrl Retrieve an upload URL for this data. ProjectDataApi delete_data POST /api/projects/{projectId}/data/{dataId}:delete Schedule this data for deletion. ProjectDataApi get_data_eligible_for_linking GET /api/projects/{projectId}/data/eligibleForLinking Retrieve a list of data eligible for linking to the current project. ProjectDataApi get_folder_upload_session GET /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId} Retrieve folder upload session details. ProjectDataApi get_non_sample_project_data GET /api/projects/{projectId}/data/nonSampleData Retrieve a list of project data not linked to a sample. ProjectDataApi get_project_data GET /api/projects/{projectId}/data/{dataId} Retrieve a project data. ProjectDataApi get_project_data_children GET /api/projects/{projectId}/data/{dataId}/children Retrieve the children of this data. ProjectDataApi get_project_data_list GET /api/projects/{projectId}/data Retrieve the list of project data. ProjectDataApi get_projects_linked_to_data GET /api/projects/{projectId}/data/{dataId}/linkedProjects Retrieve a list of projects to which this data is linked. ProjectDataApi get_secondary_data GET /api/projects/{projectId}/data/{dataId}/secondaryData Retrieve a list of secondary data for data. ProjectDataApi link_data_to_project POST /api/projects/{projectId}/data/{dataId} Link data to this project. ProjectDataApi remove_secondary_data DELETE /api/projects/{projectId}/data/{dataId}/secondaryData/{secondaryDataId} Remove secondary data from data. ProjectDataApi schedule_download_for_data POST /api/projects/{projectId}/data/{dataId}:scheduleDownload Schedule a download. ProjectDataApi unarchive_data POST /api/projects/{projectId}/data/{dataId}:unarchive Schedule this data for unarchival. ProjectDataApi unlink_data_from_project POST /api/projects/{projectId}/data/{dataId}:unlink Unlink data from this project. ProjectDataApi update_project_data PUT /api/projects/{projectId}/data/{dataId} Update this project data. ProjectDataCopyBatchApi create_project_data_copy_batch POST /api/projects/{projectId}/dataCopyBatch Create a project data copy batch. ProjectDataCopyBatchApi get_project_data_copy_batch GET /api/projects/{projectId}/dataCopyBatch/{batchId} Retrieve a project data copy batch. ProjectDataCopyBatchApi get_project_data_copy_batch_item GET /api/projects/{projectId}/dataCopyBatch/{batchId}/items/{itemId} Retrieve a project data copy batch item. ProjectDataCopyBatchApi get_project_data_copy_batch_items GET /api/projects/{projectId}/dataCopyBatch/{batchId}/items Retrieve a list of project data copy batch items. ProjectDataLinkingBatchApi create_project_data_linking_batch POST /api/projects/{projectId}/dataLinkingBatch Create a project data linking batch. ProjectDataLinkingBatchApi get_project_data_linking_batch GET /api/projects/{projectId}/dataLinkingBatch/{batchId} Retrieve a project data linking batch. ProjectDataLinkingBatchApi get_project_data_linking_batch_item GET /api/projects/{projectId}/dataLinkingBatch/{batchId}/items/{itemId} Retrieve a project data linking batch item. ProjectDataLinkingBatchApi get_project_data_linking_batch_items GET /api/projects/{projectId}/dataLinkingBatch/{batchId}/items Retrieve a list of project data linking batch items. ProjectDataMoveBatchApi create_project_data_move_batch POST /api/projects/{projectId}/dataMoveBatch Create a project data move batch. ProjectDataMoveBatchApi get_project_data_move_batch GET /api/projects/{projectId}/dataMoveBatch/{batchId} Retrieve a project data move batch. ProjectDataMoveBatchApi get_project_data_move_batch_item GET /api/projects/{projectId}/dataMoveBatch/{batchId}/items/{itemId} Retrieve a project data move batch item. ProjectDataMoveBatchApi get_project_data_move_batch_items POST /api/projects/{projectId}/dataMoveBatch/{batchId}/items:search Retrieve a list of project data move batch items. ProjectDataTransferApi abort_data_transfer POST /api/projects/{projectId}/dataTransfers/{dataTransferId}:abort Abort a data transfer. ProjectDataTransferApi get_data_transfer GET /api/projects/{projectId}/dataTransfers/{dataTransferId} Retrieve a data transfer. ProjectDataTransferApi get_data_transfers GET /api/projects/{projectId}/dataTransfers Retrieve a list of data transfers. ProjectDataUnlinkingBatchApi create_project_data_unlinking_batch POST /api/projects/{projectId}/dataUnlinkingBatch Create a project data unlinking batch. ProjectDataUnlinkingBatchApi get_project_data_unlinking_batch GET /api/projects/{projectId}/dataUnlinkingBatch/{batchId} Retrieve a project data unlinking batch. ProjectDataUnlinkingBatchApi get_project_data_unlinking_batch_item GET /api/projects/{projectId}/dataUnlinkingBatch/{batchId}/items/{itemId} Retrieve a project data unlinking batch item. ProjectDataUnlinkingBatchApi get_project_data_unlinking_batch_items GET /api/projects/{projectId}/dataUnlinkingBatch/{batchId}/items Retrieve a list of project data unlinking batch items. ProjectDataUpdateBatchApi create_project_data_update_batch POST /api/projects/{projectId}/dataUpdateBatch Create a project data update batch.  Folder contents will be updated recursively.  Time archive/delete cannot be defined for folders. ProjectDataUpdateBatchApi get_project_data_update_batch GET /api/projects/{projectId}/dataUpdateBatch/{batchId} Retrieve a project data update batch. ProjectDataUpdateBatchApi get_project_data_update_batch_item GET /api/projects/{projectId}/dataUpdateBatch/{batchId}/items/{itemId} Retrieve a project data update batch item. ProjectDataUpdateBatchApi get_project_data_update_batch_items GET /api/projects/{projectId}/dataUpdateBatch/{batchId}/items Retrieve a list of project data update batch items. ProjectNotificationSubscriptionsApi create_notification_subscription POST /api/projects/{projectId}/notificationSubscriptions Create a notification subscription ProjectNotificationSubscriptionsApi delete_notification_subscription DELETE /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Delete a notification subscription ProjectNotificationSubscriptionsApi get_notification_subscription GET /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Retrieve a notification subscription ProjectNotificationSubscriptionsApi get_notification_subscriptions GET /api/projects/{projectId}/notificationSubscriptions Retrieve notification subscriptions ProjectNotificationSubscriptionsApi update_notification_subscription PUT /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Update a notification subscription ProjectPermissionApi create_project_permission POST /api/projects/{projectId}/permissions Create a project permission. ProjectPermissionApi get_project_permission GET /api/projects/{projectId}/permissions/{permissionId} Retrieve a project permission. ProjectPermissionApi get_project_permissions GET /api/projects/{projectId}/permissions Retrieve a list of project permissions. ProjectPermissionApi update_project_permission PUT /api/projects/{projectId}/permissions/{permissionId} Update a project permission. ProjectPipelineApi create_additional_project_pipeline_file POST /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles Create an additional input form file for a pipeline. ProjectPipelineApi create_cwl_json_pipeline POST /api/projects/{projectId}/pipelines:createCwlJsonPipeline Create a JSON based CWL pipeline within a project. ProjectPipelineApi create_cwl_pipeline POST /api/projects/{projectId}/pipelines:createCwlPipeline Create a CWL pipeline within a project. ProjectPipelineApi create_nextflow_json_pipeline POST /api/projects/{projectId}/pipelines:createNextflowJsonPipeline Create a JSON based Nextflow pipeline within a project. ProjectPipelineApi create_nextflow_pipeline POST /api/projects/{projectId}/pipelines:createNextflowPipeline Create a Nextflow pipeline within a project. ProjectPipelineApi create_project_pipeline_file POST /api/projects/{projectId}/pipelines/{pipelineId}/files Create a file for a pipeline. ProjectPipelineApi delete_additional_project_pipeline_file DELETE /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles/{fileId} Delete an additional input form file for a pipeline. ProjectPipelineApi delete_project_pipeline_file DELETE /api/projects/{projectId}/pipelines/{pipelineId}/files/{fileId} Delete a file for a pipeline. ProjectPipelineApi download_additional_file_content GET /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles/{fileId}/content Download the contents of an additional input form file. ProjectPipelineApi download_input_form_file_content GET /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/inputFormFile Download the contents of the input form file. ProjectPipelineApi download_on_render_file_content GET /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/onRenderFile Download the contents of the onRender file. ProjectPipelineApi download_on_submit_file_content GET /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/onSubmitFile Download the contents of the onSubmit file. ProjectPipelineApi download_project_pipeline_file_content GET /api/projects/{projectId}/pipelines/{pipelineId}/files/{fileId}/content Download the contents of a pipeline file. ProjectPipelineApi get_project_pipeline GET /api/projects/{projectId}/pipelines/{pipelineId} Retrieve a project pipeline. ProjectPipelineApi get_project_pipeline_additional_files GET /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles Retrieve additional input form files for a project pipeline. ProjectPipelineApi get_project_pipeline_configuration_parameters GET /api/projects/{projectId}/pipelines/{pipelineId}/configurationParameters Retrieve configuration parameters for a project pipeline. ProjectPipelineApi get_project_pipeline_files GET /api/projects/{projectId}/pipelines/{pipelineId}/files Retrieve files for a project pipeline. ProjectPipelineApi get_project_pipeline_html_documentation GET /api/projects/{projectId}/pipelines/{pipelineId}/documentation/HTML Retrieve HTML documentation for a project pipeline. ProjectPipelineApi get_project_pipeline_input_parameters GET /api/projects/{projectId}/pipelines/{pipelineId}/inputParameters Retrieve input parameters for a project pipeline. ProjectPipelineApi get_project_pipeline_reference_sets GET /api/projects/{projectId}/pipelines/{pipelineId}/referenceSets Retrieve the reference sets of a project pipeline. ProjectPipelineApi get_project_pipelines GET /api/projects/{projectId}/pipelines Retrieve a list of project pipelines. ProjectPipelineApi link_pipeline_to_project POST /api/projects/{projectId}/pipelines/{pipelineId} Link a pipeline to a project. ProjectPipelineApi release_project_pipeline POST /api/projects/{projectId}/pipelines/{pipelineId}:release Release a pipeline. ProjectPipelineApi unlink_pipeline_from_project DELETE /api/projects/{projectId}/pipelines/{pipelineId} Unlink a pipeline from a project. ProjectPipelineApi update_additional_file PUT /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles/{fileId}/content Update the contents of an additional input form file. ProjectPipelineApi update_general_attributes_project_pipeline POST /api/projects/{projectId}/pipelines/{pipelineId}/generalAttributes Update the general attributes of a project pipeline. ProjectPipelineApi update_input_form_file PUT /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/inputFormFile Update the contents of the input form file for a pipeline. ProjectPipelineApi update_on_render_file PUT /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/onRenderFile Update the contents of the onRender file for a pipeline. ProjectPipelineApi update_on_submit_file PUT /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/onSubmitFile Update the contents of the onSubmit file for a pipeline. ProjectPipelineApi update_project_pipeline_file PUT /api/projects/{projectId}/pipelines/{pipelineId}/files/{fileId}/content Update the contents of a file for a pipeline. ProjectSampleApi add_metadata_model_to_sample POST /api/projects/{projectId}/samples/{sampleId}/metadata/{metadataModelId} Add a metadata model to a sample. ProjectSampleApi complete_project_sample POST /api/projects/{projectId}/samples/{sampleId}:complete Completes the sample after data has been linked to it. ProjectSampleApi create_sample_in_project POST /api/projects/{projectId}/samples Create a new sample in this project ProjectSampleApi deep_delete_sample POST /api/projects/{projectId}/samples/{sampleId}:deleteDeep Delete a sample together with all of its data. ProjectSampleApi delete_and_unlink_sample POST /api/projects/{projectId}/samples/{sampleId}:deleteUnlink Delete a sample and unlink its data. ProjectSampleApi delete_sample_with_input POST /api/projects/{projectId}/samples/{sampleId}:deleteWithInput Delete a sample as well as its input data. ProjectSampleApi get_project_sample GET /api/projects/{projectId}/samples/{sampleId} Retrieve a project sample. ProjectSampleApi get_project_sample_analyses GET /api/projects/{projectId}/samples/{sampleId}/analyses Retrieve the list of analyses. ProjectSampleApi get_project_samples POST /api/projects/{projectId}/samples:search Retrieve project samples. ProjectSampleApi get_projects_for_sample GET /api/projects/{projectId}/samples/{sampleId}/projects Retrieve a list of projects for this sample. ProjectSampleApi get_sample_data_list GET /api/projects/{projectId}/samples/{sampleId}/data Retrieve the list of sample data. ProjectSampleApi get_sample_history GET /api/projects/{projectId}/samples/{sampleId}/history Retrieve sample history. ProjectSampleApi get_sample_metadata_field GET /api/projects/{projectId}/samples/{sampleId}/metadata/field/{fieldId} Retrieve a metadata field. ProjectSampleApi get_sample_metadata_field_count GET /api/projects/{projectId}/samples/{sampleId}/metadata/{fieldId}/fieldCount Retrieves the number of occurrences of a given field. ProjectSampleApi link_data_to_sample POST /api/projects/{projectId}/samples/{sampleId}/data/{dataId} Link data to a sample. ProjectSampleApi link_sample_to_project POST /api/projects/{projectId}/samples/{sampleId} Link a sample to a project. ProjectSampleApi mark_sample_deleted POST /api/projects/{projectId}/samples/{sampleId}:deleteMark Mark a sample deleted. ProjectSampleApi search_project_sample_analyses POST /api/projects/{projectId}/samples/{sampleId}/analyses:search Search analyses for sample. ProjectSampleApi unlink_data_from_sample POST /api/projects/{projectId}/samples/{sampleId}/data/{dataId}:unlink Unlink data from a sample. ProjectSampleApi unlink_sample_from_project POST /api/projects/{projectId}/samples/{sampleId}:unlink Unlink a sample from a project. ProjectSampleApi update_project_sample PUT /api/projects/{projectId}/samples/{sampleId} Update a project sample. ProjectSampleApi update_sample_metadata_fields POST /api/projects/{projectId}/samples/{sampleId}/metadata:updateFields Update metadata fields. ProjectSampleBatchApi create_sample_creation_batch POST /api/projects/{projectId}/sampleCreationBatch Create a sample creation batch. ProjectSampleBatchApi get_sample_creation_batch GET /api/projects/{projectId}/sampleCreationBatch/{batchId} Retrieve a sample creation batch. ProjectSampleBatchApi get_sample_creation_batch_item GET /api/projects/{projectId}/sampleCreationBatch/{batchId}/items/{itemId} Retrieve a sample creation batch item. ProjectSampleBatchApi get_sample_creation_batch_items GET /api/projects/{projectId}/sampleCreationBatch/{batchId}/items Retrieve a list of sample creation batch items. ProjectWorkflowSessionApi get_workflow_session_configurations GET /api/projects/{projectId}/workflowSessions/{workflowSessionId}/configurations Retrieve the configurations of a workflow session. ProjectWorkflowSessionApi get_workflow_session_inputs GET /api/projects/{projectId}/workflowSessions/{workflowSessionId}/inputs Retrieve the inputs of a workflow session. ProjectWorkflowSessionApi get_workflow_sessions GET /api/projects/{projectId}/workflowSessions Retrieve the list of workflow sessions. ProjectWorkflowSessionApi search_orchestrated_analyses POST /api/projects/{projectId}/workflowSessions/{workflowSessionId}/analyses:search Search analyses orchestrated by the workflow session. ProjectWorkflowSessionApi search_workflow_sessions POST /api/projects/{projectId}/workflowSessions:search Search workflow sessions. ReferenceSetApi get_reference_sets GET /api/referenceSets Retrieve a list of of reference sets. ReferenceSetApi get_species GET /api/referenceSets/{referenceSetId}/species Retrieve a list of species linked to the reference set. RegionApi get_region GET /api/regions/{regionId} Retrieve a region. Only the regions the user has access to through his/her entitlements can be retrieved. RegionApi get_regions GET /api/regions Retrieve a list of regions. Only the regions the user has access to through his/her entitlements are returned. SampleApi get_samples GET /api/samples Retrieve a list of samples. SequencingRunApi get_sequencing_run GET /api/sequencingRuns/{sequencingRunId} Retrieve a sequencing run. StorageBundleApi get_storage_bundles GET /api/storageBundles Retrieve a list of storage bundles. StorageConfigurationApi create_storage_configuration POST /api/storageConfigurations Create a new storage configuration StorageConfigurationApi get_storage_configuration GET /api/storageConfigurations/{storageConfigurationId} Retrieve a storage configuration. StorageConfigurationApi get_storage_configuration_details GET /api/storageConfigurations/{storageConfigurationId}/details Retrieve a storage configuration detail. StorageConfigurationApi get_storage_configurations GET /api/storageConfigurations Retrieve a list of storage configurations. StorageConfigurationApi share_storage_configuration POST /api/storageConfigurations/{storageConfigurationId}:share Share your own storage configuration with tenant. StorageConfigurationApi validate_storage_configuration POST /api/storageConfigurations/{storageConfigurationId}:validate Start validation of your storage configuration. StorageCredentialsApi create_storage_credential POST /api/storageCredentials Create a new storage credential StorageCredentialsApi get_storage_credential GET /api/storageCredentials/{storageCredentialId} Retrieve a storage credential. StorageCredentialsApi get_storage_credentials GET /api/storageCredentials Retrieve a list of storage credentials. StorageCredentialsApi share_storage_credential POST /api/storageCredentials/{storageCredentialId}:share Share your own storage credentials with tenant. StorageCredentialsApi update_storage_credential_secrets POST /api/storageCredentials/{storageCredentialId}:updateSecrets Update a storage credential's secrets. SystemApi get_system_info GET /api/system/info Retrieve system information. TokenApi create_jwt_token POST /api/tokens Generate a JWT using an API-key, Basic Authentication or a psToken. TokenApi refresh_jwt_token POST /api/tokens:refresh Refresh a JWT using a not yet expired, still valid JWT. UserApi approve_user POST /api/users/{userId}:approve Approve a user. UserApi assign_tenant_admin_rights_to_user POST /api/users/{userId}:assignTenantAdministratorRights Assign tenant administrator rights to a user. UserApi get_user GET /api/users/{userId} Retrieve a user. UserApi get_users GET /api/users Retrieve a list of users. UserApi revoke_tenant_admin_rights_to_user POST /api/users/{userId}:revokeTenantAdministratorRights Revoke tenant administrator rights to a user. UserApi update_user PUT /api/users/{userId} Update a user. WorkgroupApi get_workgroup GET /api/workgroups/{workgroupId} Retrieve a workgroup. WorkgroupApi get_workgroups GET /api/workgroups Retrieve a list of workgroups."},{"location":"v2/#documentation-for-models","title":"Documentation For Models","text":"<ul> <li>AWSDetails</li> <li>ActivationCodeDetail</li> <li>ActivationCodeDetailList</li> <li>ActivationCodeDetailUsage</li> <li>AnalysisBaseSpaceDataDetails</li> <li>AnalysisCreationBatch</li> <li>AnalysisCreationBatchItemPagedListV3</li> <li>AnalysisCreationBatchItemPagedListV4</li> <li>AnalysisCreationBatchItemProcessing</li> <li>AnalysisCreationBatchItemRequest</li> <li>AnalysisCreationBatchItemV3</li> <li>AnalysisCreationBatchItemV4</li> <li>AnalysisData</li> <li>AnalysisDataInput</li> <li>AnalysisExternalData</li> <li>AnalysisInput</li> <li>AnalysisInputDataMount</li> <li>AnalysisInputExternalData</li> <li>AnalysisInputList</li> <li>AnalysisOutput</li> <li>AnalysisOutputList</li> <li>AnalysisOutputMapping</li> <li>AnalysisPagedListV3</li> <li>AnalysisPagedListV4</li> <li>AnalysisParameterInput</li> <li>AnalysisPrice</li> <li>AnalysisQueryParameters</li> <li>AnalysisRawOutput</li> <li>AnalysisReferenceDataParameter</li> <li>AnalysisReportData</li> <li>AnalysisReportEntry</li> <li>AnalysisReportEntryList</li> <li>AnalysisS3DataDetails</li> <li>AnalysisStep</li> <li>AnalysisStepList</li> <li>AnalysisStepLogs</li> <li>AnalysisStorageListV3</li> <li>AnalysisStorageListV4</li> <li>AnalysisStorageV3</li> <li>AnalysisStorageV4</li> <li>AnalysisTag</li> <li>AnalysisUsageDetails</li> <li>AnalysisV3</li> <li>AnalysisV4</li> <li>Application</li> <li>ApplicationV4</li> <li>AwsCredentials</li> <li>AwsTempCredentials</li> <li>BaseConnection</li> <li>BaseJob</li> <li>BaseJobList</li> <li>BenchSettings</li> <li>Bundle</li> <li>BundleData</li> <li>BundleDataLinkingBatch</li> <li>BundleDataLinkingBatchItem</li> <li>BundleDataLinkingBatchItemPagedList</li> <li>BundleDataLinkingBatchItemProcessing</li> <li>BundleDataLinkingBatchItemRequest</li> <li>BundleDataPagedList</li> <li>BundleDataUnlinkingBatch</li> <li>BundleDataUnlinkingBatchItem</li> <li>BundleDataUnlinkingBatchItemPagedList</li> <li>BundleDataUnlinkingBatchItemProcessing</li> <li>BundleDataUnlinkingBatchItemRequest</li> <li>BundleList</li> <li>BundlePagedList</li> <li>BundlePipeline</li> <li>BundlePipelineList</li> <li>BundleSample</li> <li>BundleSamplePagedList</li> <li>BundleTool</li> <li>BundleToolsList</li> <li>CWLToolDefinition</li> <li>ChangeProjectOwner</li> <li>CompleteFolderUploadSession</li> <li>Config</li> <li>Connector</li> <li>ConnectorList</li> <li>Country</li> <li>CreateAnalysisCreationBatch</li> <li>CreateAnalysisTag</li> <li>CreateBundle</li> <li>CreateBundleDataLinkingBatch</li> <li>CreateBundleDataLinkingBatchItem</li> <li>CreateBundleDataUnlinkingBatch</li> <li>CreateBundleDataUnlinkingBatchItem</li> <li>CreateConnector</li> <li>CreateCustomEvent</li> <li>CreateCustomNotificationSubscription</li> <li>CreateCwlAnalysis</li> <li>CreateCwlJsonAnalysis</li> <li>CreateCwlWithJsonInputAnalysis</li> <li>CreateCwlWithStructuredInputAnalysis</li> <li>CreateData</li> <li>CreateDownloadRule</li> <li>CreateExternalDockerImage</li> <li>CreateFileAndTemporaryCredentials</li> <li>CreateFileAndUploadUrl</li> <li>CreateFileData</li> <li>CreateFolder</li> <li>CreateFolderAndTemporaryCredentials</li> <li>CreateInternalDockerImage</li> <li>CreateNextflowAnalysis</li> <li>CreateNextflowJsonAnalysis</li> <li>CreateNextflowWithCustomInputAnalysis</li> <li>CreateNonIndexedFolder</li> <li>CreateNotificationChannel</li> <li>CreateNotificationSubscription</li> <li>CreateProject</li> <li>CreateProjectDataCopyBatch</li> <li>CreateProjectDataCopyBatchItem</li> <li>CreateProjectDataLinkingBatch</li> <li>CreateProjectDataLinkingBatchItem</li> <li>CreateProjectDataMoveBatch</li> <li>CreateProjectDataMoveBatchItem</li> <li>CreateProjectDataUnlinkingBatch</li> <li>CreateProjectDataUnlinkingBatchItem</li> <li>CreateProjectDataUpdateBatch</li> <li>CreateProjectPermission</li> <li>CreateProjectPermissionV4</li> <li>CreateSample</li> <li>CreateSampleCreationBatch</li> <li>CreateSampleCreationBatchDataItem</li> <li>CreateSampleCreationBatchSampleItem</li> <li>CreateStorageConfiguration</li> <li>CreateStorageCredential</li> <li>CreateTemporaryCredentials</li> <li>CreateTermsOfUse</li> <li>CreateUploadRule</li> <li>CustomNotificationSubscription</li> <li>CustomNotificationSubscriptionList</li> <li>CwlAnalysisInput</li> <li>CwlAnalysisInputJson</li> <li>CwlAnalysisJsonInput</li> <li>CwlAnalysisOutputJson</li> <li>CwlAnalysisStructuredInput</li> <li>CwlAnalysisWithJsonInput</li> <li>CwlAnalysisWithStructuredInput</li> <li>CwlJsonAnalysisInput</li> <li>CwlToolDefinitionList</li> <li>Data</li> <li>DataDetails</li> <li>DataFormat</li> <li>DataFormatPagedList</li> <li>DataIdOrPathList</li> <li>DataList</li> <li>DataPagedList</li> <li>DataTag</li> <li>DataTransfer</li> <li>DataTransferPagedList</li> <li>DataUpdateGroup</li> <li>DataUrlWithPath</li> <li>DataUrlWithPathList</li> <li>DockerImage</li> <li>DockerImageAccess</li> <li>DockerImageList</li> <li>DockerImageRegion</li> <li>DockerImageRegionList</li> <li>Download</li> <li>DownloadRule</li> <li>DownloadRuleList</li> <li>EventCode</li> <li>EventCodeList</li> <li>EventLogListV3</li> <li>EventLogPagedListV4</li> <li>EventLogQueryParametersV4</li> <li>EventLogV3</li> <li>EventLogV4</li> <li>ExecutionConfiguration</li> <li>ExecutionConfigurationList</li> <li>ExternalDockerImageSettings</li> <li>Field</li> <li>FieldId</li> <li>FieldList</li> <li>FindProjectSamples</li> <li>FindSampleBooleanCondition</li> <li>FindSampleCondition</li> <li>FindSampleDateCondition</li> <li>FindSampleNumberCondition</li> <li>FolderDetails</li> <li>FolderUploadSession</li> <li>InlineView</li> <li>InputFormBaseSpaceDataDetails</li> <li>InputFormData</li> <li>InputFormExternalData</li> <li>InputFormField</li> <li>InputFormFieldChoice</li> <li>InputFormFieldDataFilter</li> <li>InputFormFieldList</li> <li>InputFormFieldValues</li> <li>InputFormGroup</li> <li>InputFormGroupField</li> <li>InputFormGroupFieldValues</li> <li>InputFormS3DataDetails</li> <li>InputFormWithExternalData</li> <li>InputParameter</li> <li>InputParameterList</li> <li>InputPart</li> <li>InputPartMediaType</li> <li>IntegerSettings</li> <li>InternalDockerImageSettings</li> <li>Job</li> <li>JobPagedList</li> <li>Link</li> <li>Links</li> <li>LoadDataInBaseRequest</li> <li>MetadataField</li> <li>MetadataModel</li> <li>MetadataModelList</li> <li>Model</li> <li>MultipartFormDataInput</li> <li>NextflowAnalysisInput</li> <li>NextflowAnalysisWithCustomInput</li> <li>NextflowJsonAnalysisInput</li> <li>NotificationChannel</li> <li>NotificationChannelList</li> <li>NotificationSubscription</li> <li>NotificationSubscriptionList</li> <li>OptionSettings</li> <li>OptionalSampleTags</li> <li>PipelineBundle</li> <li>PipelineConfigurationParameter</li> <li>PipelineConfigurationParameterList</li> <li>PipelineFile</li> <li>PipelineFileList</li> <li>PipelineHtmlDocumentation</li> <li>PipelineLanguageVersion</li> <li>PipelineLanguageVersionList</li> <li>PipelineList</li> <li>PipelineReportConfig</li> <li>PipelineTag</li> <li>PipelineUpdate</li> <li>PipelineV3</li> <li>PipelineV4</li> <li>Problem</li> <li>Project</li> <li>ProjectBaseTable</li> <li>ProjectBaseTableList</li> <li>ProjectBundle</li> <li>ProjectBundleList</li> <li>ProjectData</li> <li>ProjectDataAndTemporaryCredentials</li> <li>ProjectDataCopyBatch</li> <li>ProjectDataCopyBatchItem</li> <li>ProjectDataCopyBatchItemPagedList</li> <li>ProjectDataCopyBatchItemProcessing</li> <li>ProjectDataCopyBatchItemRequest</li> <li>ProjectDataLinkingBatch</li> <li>ProjectDataLinkingBatchItem</li> <li>ProjectDataLinkingBatchItemPagedList</li> <li>ProjectDataLinkingBatchItemPagedListV4</li> <li>ProjectDataLinkingBatchItemProcessing</li> <li>ProjectDataLinkingBatchItemProcessingV4</li> <li>ProjectDataLinkingBatchItemRequest</li> <li>ProjectDataLinkingBatchItemV4</li> <li>ProjectDataMoveBatch</li> <li>ProjectDataMoveBatchItem</li> <li>ProjectDataMoveBatchItemPagedList</li> <li>ProjectDataMoveBatchItemProcessing</li> <li>ProjectDataMoveBatchItemQueryParameters</li> <li>ProjectDataMoveBatchItemRequest</li> <li>ProjectDataPagedList</li> <li>ProjectDataUnlinkingBatch</li> <li>ProjectDataUnlinkingBatchItem</li> <li>ProjectDataUnlinkingBatchItemPagedList</li> <li>ProjectDataUnlinkingBatchItemProcessing</li> <li>ProjectDataUnlinkingBatchItemRequest</li> <li>ProjectDataUpdateBatch</li> <li>ProjectDataUpdateBatchItem</li> <li>ProjectDataUpdateBatchItemPagedList</li> <li>ProjectDataUpdateBatchItemProcessing</li> <li>ProjectDataUpdateBatchItemRequest</li> <li>ProjectFileAndUploadUrl</li> <li>ProjectFolderAndUploadSession</li> <li>ProjectList</li> <li>ProjectPagedList</li> <li>ProjectPermission</li> <li>ProjectPermissionList</li> <li>ProjectPermissionListV4</li> <li>ProjectPermissionV4</li> <li>ProjectPipeline</li> <li>ProjectPipelineList</li> <li>ProjectPipelineV4</li> <li>ProjectSample</li> <li>ProjectSamplePagedList</li> <li>ProjectTag</li> <li>RcloneTempCredentials</li> <li>ReferenceData</li> <li>ReferenceDataList</li> <li>ReferenceDataType</li> <li>ReferenceDataTypeList</li> <li>ReferenceSet</li> <li>ReferenceSetList</li> <li>Region</li> <li>RegionList</li> <li>RegionV4</li> <li>Sample</li> <li>SampleCreationBatch</li> <li>SampleCreationBatchItemPagedList</li> <li>SampleCreationBatchItemProcessing</li> <li>SampleCreationBatchItemRequest</li> <li>SampleCreationBatchSampleItem</li> <li>SampleHistory</li> <li>SampleHistoryList</li> <li>SamplePagedList</li> <li>SampleTag</li> <li>ScheduleDownload</li> <li>SearchMatchingActivationCodesForCwlAnalysis</li> <li>SearchMatchingActivationCodesForNextflowAnalysis</li> <li>SequencingRun</li> <li>Settings</li> <li>Species</li> <li>SpeciesList</li> <li>StorageBundle</li> <li>StorageBundleList</li> <li>StorageConfiguration</li> <li>StorageConfigurationDetails</li> <li>StorageConfigurationWithDetails</li> <li>StorageConfigurationWithDetailsList</li> <li>StorageCredential</li> <li>StorageCredentialList</li> <li>StringSettings</li> <li>SystemInfo</li> <li>TagUpdate</li> <li>TempCredentials</li> <li>TenantIdentifier</li> <li>TermsOfUse</li> <li>TermsOfUseAcceptance</li> <li>Token</li> <li>UpdateMetadata</li> <li>UpdateMetadataFieldGroup</li> <li>UpdateSingleMetadataField</li> <li>UpdateStorageCredentialSecrets</li> <li>Upload</li> <li>UploadRule</li> <li>UploadRuleList</li> <li>User</li> <li>UserIdentifier</li> <li>UserList</li> <li>WorkflowSessionAnalysisPagedListV4</li> <li>WorkflowSessionAnalysisV4</li> <li>WorkflowSessionConfiguration</li> <li>WorkflowSessionConfigurationList</li> <li>WorkflowSessionData</li> <li>WorkflowSessionExternalData</li> <li>WorkflowSessionInput</li> <li>WorkflowSessionInputList</li> <li>WorkflowSessionPagedListV3</li> <li>WorkflowSessionPagedListV4</li> <li>WorkflowSessionTag</li> <li>WorkflowSessionV3</li> <li>WorkflowSessionV4</li> <li>WorkflowV3</li> <li>WorkflowV4</li> <li>Workgroup</li> <li>WorkgroupList</li> </ul>"},{"location":"v2/#documentation-for-authorization","title":"Documentation For Authorization","text":""},{"location":"v2/#apikeyauth","title":"ApiKeyAuth","text":"<ul> <li>Type: API key</li> <li>API key parameter name: X-API-Key</li> <li>Location: HTTP header</li> </ul>"},{"location":"v2/#basicauth","title":"BasicAuth","text":"<ul> <li>Type: HTTP basic authentication</li> </ul>"},{"location":"v2/#jwtauth","title":"JwtAuth","text":"<ul> <li>Type: Bearer authentication (JWT)</li> </ul>"},{"location":"v2/#pstokenauth","title":"PsTokenAuth","text":"<ul> <li>Type: Bearer authentication (psToken)</li> </ul>"},{"location":"v2/#author","title":"Author","text":""},{"location":"v2/#notes-for-large-openapi-documents","title":"Notes for Large OpenAPI documents","text":"<p>If the OpenAPI document is large, imports in libica.openapi.v2.apis and libica.openapi.v2.models may fail with a RecursionError indicating the maximum recursion limit has been exceeded. In that case, there are a couple of solutions:</p> <p>Solution 1: Use specific imports for apis and models like: - <code>from libica.openapi.v2.api.default_api import DefaultApi</code> - <code>from libica.openapi.v2.model.pet import Pet</code></p> <p>Solution 2: Before importing the package, adjust the maximum recursion limit as shown below:</p> <pre><code>import sys\nsys.setrecursionlimit(1500)\nimport libica.openapi.v2\nfrom libica.openapi.v2.apis import *\nfrom libica.openapi.v2.models import *\n</code></pre>"},{"location":"v2/docs/AWSDetails/","title":"AWSDetails","text":""},{"location":"v2/docs/AWSDetails/#properties","title":"Properties","text":"Name Type Description Notes bucket_name str The name of the s3 bucket key_prefix str, none_type Key prefix within the bucket for ICA to operate within. Data may only be created having this prefix and the given credentials will only give access to it. If not set, default is to allow operation on the full bucket. No leading slash, and must end with a trailing slash. [optional] server_side_encryption_algorithm str, none_type Used to specify the type of server-side encryption (SSE) to be used on the object provider. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. For example, specify \\\"AES256\\\" for SSE-S3, or \\\"AWS:KMS\\\" for SSE-KMS. By default if none is specified, \\\"AES256\\\" will be used. [optional] server_side_encryption_key str, none_type Used to specify the server-side encryption key that might be associated with the specified server-side encryption algorithm. This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value. Value will be ignored if encryption is \\\"AES256\\\". [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ActivationCodeDetail/","title":"ActivationCodeDetail","text":""},{"location":"v2/docs/ActivationCodeDetail/#properties","title":"Properties","text":"Name Type Description Notes id str allowed_slots int The allowed slot within this code, -1 means unlimited used_slots int Indicates how many slots can are used. moved_slots int The slots that where moved to another activation code original_slots int The assigned allowed slot within this code, -1 means unlimited pipeline_bundle PipelineBundle usages [ActivationCodeDetailUsage] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ActivationCodeDetailList/","title":"ActivationCodeDetailList","text":""},{"location":"v2/docs/ActivationCodeDetailList/#properties","title":"Properties","text":"Name Type Description Notes items [ActivationCodeDetail] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ActivationCodeDetailUsage/","title":"ActivationCodeDetailUsage","text":""},{"location":"v2/docs/ActivationCodeDetailUsage/#properties","title":"Properties","text":"Name Type Description Notes id str used_slots int Indicates how many slots can are used, -1 means unused allowed_slots int Indicates how many slots can be used, -1 means unlimited project Project [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Analysis/","title":"Analysis","text":""},{"location":"v2/docs/Analysis/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str reference str The unique reference of the analysis user_reference str The user reference of the analysis pipeline Pipeline status str The status of the analysis tags AnalysisTag tenant_name str, none_type [optional] workflow_session WorkflowSession [optional] start_date datetime, none_type When the analysis was started [optional] end_date datetime, none_type When the analysis was finished [optional] summary str, none_type The summary of the analysis [optional] analysis_storage AnalysisStorage [optional] analysis_priority str, none_type The priority of the analysis [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisBaseSpaceDataDetails/","title":"AnalysisBaseSpaceDataDetails","text":""},{"location":"v2/docs/AnalysisBaseSpaceDataDetails/#properties","title":"Properties","text":"Name Type Description Notes workgroup_id str, none_type [optional] extensions str, none_type [optional] path_prefix str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisCreationBatch/","title":"AnalysisCreationBatch","text":""},{"location":"v2/docs/AnalysisCreationBatch/#properties","title":"Properties","text":"Name Type Description Notes id str job Job [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisCreationBatchItem/","title":"AnalysisCreationBatchItem","text":""},{"location":"v2/docs/AnalysisCreationBatchItem/#properties","title":"Properties","text":"Name Type Description Notes id str request AnalysisCreationBatchItemRequest processing AnalysisCreationBatchItemProcessing created_analysis Analysis [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisCreationBatchItemPagedList/","title":"AnalysisCreationBatchItemPagedList","text":""},{"location":"v2/docs/AnalysisCreationBatchItemPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [AnalysisCreationBatchItem] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisCreationBatchItemPagedListV3/","title":"AnalysisCreationBatchItemPagedListV3","text":""},{"location":"v2/docs/AnalysisCreationBatchItemPagedListV3/#properties","title":"Properties","text":"Name Type Description Notes items [AnalysisCreationBatchItemV3] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisCreationBatchItemPagedListV4/","title":"AnalysisCreationBatchItemPagedListV4","text":""},{"location":"v2/docs/AnalysisCreationBatchItemPagedListV4/#properties","title":"Properties","text":"Name Type Description Notes items [AnalysisCreationBatchItemV4] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisCreationBatchItemProcessing/","title":"AnalysisCreationBatchItemProcessing","text":""},{"location":"v2/docs/AnalysisCreationBatchItemProcessing/#properties","title":"Properties","text":"Name Type Description Notes status str additional_status_information str, none_type Additional information regarding the status of this batch item. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisCreationBatchItemRequest/","title":"AnalysisCreationBatchItemRequest","text":""},{"location":"v2/docs/AnalysisCreationBatchItemRequest/#properties","title":"Properties","text":"Name Type Description Notes user_reference str pipeline_id str The pipeline for which an analysis will be created. tags AnalysisTag any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisCreationBatchItemV3/","title":"AnalysisCreationBatchItemV3","text":""},{"location":"v2/docs/AnalysisCreationBatchItemV3/#properties","title":"Properties","text":"Name Type Description Notes id str request AnalysisCreationBatchItemRequest processing AnalysisCreationBatchItemProcessing created_analysis AnalysisV3 [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisCreationBatchItemV4/","title":"AnalysisCreationBatchItemV4","text":""},{"location":"v2/docs/AnalysisCreationBatchItemV4/#properties","title":"Properties","text":"Name Type Description Notes id str request AnalysisCreationBatchItemRequest processing AnalysisCreationBatchItemProcessing created_analysis AnalysisV4 [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisData/","title":"AnalysisData","text":""},{"location":"v2/docs/AnalysisData/#properties","title":"Properties","text":"Name Type Description Notes data_id str The id of the file/folder. format DataFormat name str The name of the file/folder as it was processed by the analysis. data_type str children [AnalysisData] [optional] mount_path str The requested location where the input file was located on the machine that was running the pipeline. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisDataInput/","title":"AnalysisDataInput","text":""},{"location":"v2/docs/AnalysisDataInput/#properties","title":"Properties","text":"Name Type Description Notes parameter_code str data_ids [str] [optional] mounts [AnalysisInputDataMount], none_type [optional] external_data [AnalysisInputExternalData], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisExternalData/","title":"AnalysisExternalData","text":"<p>The external data used as input by the analysis.</p>"},{"location":"v2/docs/AnalysisExternalData/#properties","title":"Properties","text":"Name Type Description Notes url str type str Possible values are: s3, http, basespace. More types could be added in a future release. mount_path str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisInput/","title":"AnalysisInput","text":""},{"location":"v2/docs/AnalysisInput/#properties","title":"Properties","text":"Name Type Description Notes code str The name of the input-parameter. analysis_data [AnalysisData], none_type The analysis-data used as input by the analysis. [optional] external_data [AnalysisExternalData], none_type The external data used as input by the analysis. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisInputDataMount/","title":"AnalysisInputDataMount","text":""},{"location":"v2/docs/AnalysisInputDataMount/#properties","title":"Properties","text":"Name Type Description Notes data_id str mount_path str The mount path is the location where the input file will be located on the machine that is running the pipeline. The use of a relative path is encouraged, but an absolute path is also allowed. The path should end with the file name, which may differ from the original input data. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisInputExternalData/","title":"AnalysisInputExternalData","text":""},{"location":"v2/docs/AnalysisInputExternalData/#properties","title":"Properties","text":"Name Type Description Notes url str type str mount_path str, none_type The mount path is the location where the input file will be located on the machine that is running the pipeline. The use of a relative path is encouraged, but an absolute path is also allowed. The path should end with the file name, which may differ from the original input data. [optional] s3_details AnalysisS3DataDetails [optional] basespace_details AnalysisBaseSpaceDataDetails [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisInputList/","title":"AnalysisInputList","text":""},{"location":"v2/docs/AnalysisInputList/#properties","title":"Properties","text":"Name Type Description Notes items [AnalysisInput] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisOutput/","title":"AnalysisOutput","text":""},{"location":"v2/docs/AnalysisOutput/#properties","title":"Properties","text":"Name Type Description Notes code str The name of the output-parameter. project_id str The ID of the project containing the analysis-data produced by the analysis for the output-parameter. [optional] data [AnalysisData] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisOutputList/","title":"AnalysisOutputList","text":""},{"location":"v2/docs/AnalysisOutputList/#properties","title":"Properties","text":"Name Type Description Notes items [AnalysisOutput] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisOutputMapping/","title":"AnalysisOutputMapping","text":""},{"location":"v2/docs/AnalysisOutputMapping/#properties","title":"Properties","text":"Name Type Description Notes source_path str target_project_id str target_path str type str [optional] action_on_exist str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisPagedList/","title":"AnalysisPagedList","text":""},{"location":"v2/docs/AnalysisPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [Analysis] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisPagedListV3/","title":"AnalysisPagedListV3","text":""},{"location":"v2/docs/AnalysisPagedListV3/#properties","title":"Properties","text":"Name Type Description Notes items [AnalysisV3] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisPagedListV4/","title":"AnalysisPagedListV4","text":""},{"location":"v2/docs/AnalysisPagedListV4/#properties","title":"Properties","text":"Name Type Description Notes items [AnalysisV4] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisParameter/","title":"AnalysisParameter","text":""},{"location":"v2/docs/AnalysisParameter/#properties","title":"Properties","text":"Name Type Description Notes code str [optional] value str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisParameterInput/","title":"AnalysisParameterInput","text":"<p>Supports multi-value parameters, only one of attributes 'value' or 'multiValue' must be provided</p>"},{"location":"v2/docs/AnalysisParameterInput/#properties","title":"Properties","text":"Name Type Description Notes code str [optional] value str, none_type The value for single-value parameters. [optional] multi_value [str, none_type], none_type The values for multi-value parameters. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisPrice/","title":"AnalysisPrice","text":""},{"location":"v2/docs/AnalysisPrice/#properties","title":"Properties","text":"Name Type Description Notes amount float The amount of the analysis price [optional] currency str The currency of the analysis price [optional]  if omitted the server will use the default value of \"iCredit\" any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisQueryParameters/","title":"AnalysisQueryParameters","text":""},{"location":"v2/docs/AnalysisQueryParameters/#properties","title":"Properties","text":"Name Type Description Notes reference str, none_type The reference to filter on. [optional] user_reference str, none_type The user-reference to filter on. [optional] status [str, none_type] [optional] user_tags [str, none_type], none_type The user-tags to filter on. [optional] technical_tags [str, none_type], none_type The technical-tags to filter on. [optional] reference_tags [str, none_type], none_type The reference-data-tags to filter on. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisRawOutput/","title":"AnalysisRawOutput","text":""},{"location":"v2/docs/AnalysisRawOutput/#properties","title":"Properties","text":"Name Type Description Notes raw_output str The raw output of the analysis. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisReferenceDataParameter/","title":"AnalysisReferenceDataParameter","text":""},{"location":"v2/docs/AnalysisReferenceDataParameter/#properties","title":"Properties","text":"Name Type Description Notes parameter_code str [optional] reference_data_id str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisReportData/","title":"AnalysisReportData","text":"<p>The list of analysis report files</p>"},{"location":"v2/docs/AnalysisReportData/#properties","title":"Properties","text":"Name Type Description Notes data_id str, none_type The data id of the report [optional] format str, none_type The format of the report [optional] name str The name of the report file [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisReportEntry/","title":"AnalysisReportEntry","text":""},{"location":"v2/docs/AnalysisReportEntry/#properties","title":"Properties","text":"Name Type Description Notes report_title str, none_type The name of the report config [optional] report_data [AnalysisReportData], none_type The list of analysis report files [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisReportEntryList/","title":"AnalysisReportEntryList","text":""},{"location":"v2/docs/AnalysisReportEntryList/#properties","title":"Properties","text":"Name Type Description Notes items [AnalysisReportEntry] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisS3DataDetails/","title":"AnalysisS3DataDetails","text":""},{"location":"v2/docs/AnalysisS3DataDetails/#properties","title":"Properties","text":"Name Type Description Notes storage_credentials_id str, none_type The storage credentials with the S3 access key. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisStep/","title":"AnalysisStep","text":""},{"location":"v2/docs/AnalysisStep/#properties","title":"Properties","text":"Name Type Description Notes id str name str status str The status of the analysis step technical bool Indicates which kind of step was executed logs AnalysisStepLogs queue_date datetime, none_type When the analysis step was queued [optional] start_date datetime, none_type When the analysis step was started [optional] end_date datetime, none_type When the analysis step was finished [optional] exit_code int, none_type The exit code of the analysis step [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisStepList/","title":"AnalysisStepList","text":""},{"location":"v2/docs/AnalysisStepList/#properties","title":"Properties","text":"Name Type Description Notes items [AnalysisStep] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisStepLogs/","title":"AnalysisStepLogs","text":"<p>Contains references to the standard output (stdout) and standard error (stderr) log streams of an analysis step. In this object both log streams could be provided in 2 different formats: as a WebSocket stream URL or as an ICA Data reference. The status of the analysis step determines which format is provided: a WebSocket URL during step execution, a Data reference after step execution. Note however that an analysis step might not expose log streams at all, which would result in this object being empty. </p>"},{"location":"v2/docs/AnalysisStepLogs/#properties","title":"Properties","text":"Name Type Description Notes std_out_data Data [optional] std_out_stream str, none_type A WebSocket URL for reading the standard output log stream. Might be closed by ICA as soon as the analysis step execution has finished. [optional] std_err_data Data [optional] std_err_stream str, none_type A WebSocket URL for reading the standard error log stream. Might be closed by ICA as soon as the analysis step execution has finished. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisStorage/","title":"AnalysisStorage","text":""},{"location":"v2/docs/AnalysisStorage/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the storage option tenant_name str, none_type [optional] description str, none_type The description about the storage option [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisStorageApi/","title":"libica.openapi.v2.AnalysisStorageApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_analysis_storage_options GET /api/analysisStorages Retrieve the list of analysis storage options."},{"location":"v2/docs/AnalysisStorageApi/#get_analysis_storage_options","title":"get_analysis_storage_options","text":"<p>AnalysisStorageListV3 get_analysis_storage_options()</p> <p>Retrieve the list of analysis storage options.</p> <p>This endpoint only returns V3 items. Use the search project analysis storage endpoint to get V4 items.</p>"},{"location":"v2/docs/AnalysisStorageApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import analysis_storage_api\nfrom libica.openapi.v2.model.analysis_storage_list_v3 import AnalysisStorageListV3\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = analysis_storage_api.AnalysisStorageApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve the list of analysis storage options.\n        api_response = api_instance.get_analysis_storage_options()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling AnalysisStorageApi-&gt;get_analysis_storage_options: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/AnalysisStorageApi/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/AnalysisStorageApi/#return-type","title":"Return type","text":"<p>AnalysisStorageListV3</p>"},{"location":"v2/docs/AnalysisStorageApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/AnalysisStorageApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/AnalysisStorageApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of analysis storage options is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/AnalysisStorageList/","title":"AnalysisStorageList","text":""},{"location":"v2/docs/AnalysisStorageList/#properties","title":"Properties","text":"Name Type Description Notes items [AnalysisStorage] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisStorageListV3/","title":"AnalysisStorageListV3","text":""},{"location":"v2/docs/AnalysisStorageListV3/#properties","title":"Properties","text":"Name Type Description Notes items [AnalysisStorageV3] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisStorageListV4/","title":"AnalysisStorageListV4","text":""},{"location":"v2/docs/AnalysisStorageListV4/#properties","title":"Properties","text":"Name Type Description Notes items [AnalysisStorageV4] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisStorageV3/","title":"AnalysisStorageV3","text":""},{"location":"v2/docs/AnalysisStorageV3/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the storage option tenant_name str, none_type [optional] description str, none_type The description about the storage option [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisStorageV4/","title":"AnalysisStorageV4","text":""},{"location":"v2/docs/AnalysisStorageV4/#properties","title":"Properties","text":"Name Type Description Notes id str name str The name of the storage option description str, none_type The description about the storage option [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisTag/","title":"AnalysisTag","text":""},{"location":"v2/docs/AnalysisTag/#properties","title":"Properties","text":"Name Type Description Notes technical_tags [str] Technical tags user_tags [str] User tags reference_tags [str] Reference tags any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisUsageDetails/","title":"AnalysisUsageDetails","text":""},{"location":"v2/docs/AnalysisUsageDetails/#properties","title":"Properties","text":"Name Type Description Notes price AnalysisPrice [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisV3/","title":"AnalysisV3","text":""},{"location":"v2/docs/AnalysisV3/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str reference str The unique reference of the analysis user_reference str The user reference of the analysis pipeline PipelineV3 status str The status of the analysis tags AnalysisTag tenant_name str, none_type [optional] workflow_session WorkflowSessionV3 [optional] start_date datetime, none_type When the analysis was started [optional] end_date datetime, none_type When the analysis was finished [optional] summary str, none_type The summary of the analysis [optional] analysis_storage AnalysisStorageV3 [optional] analysis_priority str, none_type The priority of the analysis [optional] application ApplicationV4 [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AnalysisV4/","title":"AnalysisV4","text":""},{"location":"v2/docs/AnalysisV4/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner UserIdentifier tenant TenantIdentifier reference str The unique reference of the analysis user_reference str The user reference of the analysis pipeline PipelineV4 status str The status of the analysis tags AnalysisTag workflow_session WorkflowSessionV4 [optional] start_date datetime, none_type When the analysis was started [optional] end_date datetime, none_type When the analysis was finished [optional] summary str, none_type The summary of the analysis [optional] analysis_storage AnalysisStorageV4 [optional] analysis_priority str, none_type The priority of the analysis [optional] application ApplicationV4 [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Application/","title":"Application","text":""},{"location":"v2/docs/Application/#properties","title":"Properties","text":"Name Type Description Notes id str name str The unique name identifying the application type str The type of the application display_name str, none_type The display name of the application [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ApplicationV4/","title":"ApplicationV4","text":""},{"location":"v2/docs/ApplicationV4/#properties","title":"Properties","text":"Name Type Description Notes id str name str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AwsCredentials/","title":"AwsCredentials","text":""},{"location":"v2/docs/AwsCredentials/#properties","title":"Properties","text":"Name Type Description Notes access_key_id str The access key found in aws console secret_access_key str The secret access key found in aws console any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/AwsTempCredentials/","title":"AwsTempCredentials","text":""},{"location":"v2/docs/AwsTempCredentials/#properties","title":"Properties","text":"Name Type Description Notes access_key str The S3 access key. secret_key str The S3 secret key. session_token str The S3 session token. region str The S3 region. bucket str The S3 bucket name. object_prefix str The S3 object prefix these temporary credentials will give access to. server_side_encryption_algorithm str, none_type Used to specify the type of server-side encryption (SSE) to be used on the object provider. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. For example, specify \\\"AES256\\\" for SSE-S3, or \\\"AWS:KMS\\\" for SSE-KMS. By default if none is specified, \\\"AES256\\\" will be used. [optional] server_side_encryption_key str, none_type Used to specify the server-side encryption key that might be associated with the specified server-side encryption algorithm. This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value. Value will be ignored if encryption is \\\"AES256\\\" [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BaseConnection/","title":"BaseConnection","text":""},{"location":"v2/docs/BaseConnection/#properties","title":"Properties","text":"Name Type Description Notes authenticator str Specifies the supported snowflake authenticator to use. Currently 'oauth' only is supported access_token str Specifies the OAuth token to use for authentication dns_name str snowflake dns name. Usually something like '&lt;&lt;account&gt;&gt;.snowflakecomputing.com' user_principal_name str Specifies the user principal name. This is required for some snowflake client (snowSQL for instance) database_name str Specifies the database name bound to the project specified schema_name str Specifies the schema name bound to the project specified warehouse_name str Specifies the warehouse name bound to the project specified role_name str Specifies the role name bound to the project specified any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BaseJob/","title":"BaseJob","text":""},{"location":"v2/docs/BaseJob/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str type str The type of the job status str The status of the job tenant_name str, none_type [optional] description str, none_type A short description of the base job [optional] table ProjectBaseTable [optional] overall_duration int, none_type The duration of the job expressed in milliseconds [optional] details str, none_type Detailed description of the job [optional] bytes_billed int, none_type Bytes billed [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BaseJobList/","title":"BaseJobList","text":""},{"location":"v2/docs/BaseJobList/#properties","title":"Properties","text":"Name Type Description Notes items [BaseJob] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BenchSettings/","title":"BenchSettings","text":""},{"location":"v2/docs/BenchSettings/#properties","title":"Properties","text":"Name Type Description Notes cluster_compatible bool access DockerImageAccess any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Bundle/","title":"Bundle","text":""},{"location":"v2/docs/Bundle/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str region Region release_version str status str tenant_name str, none_type [optional] short_description str, none_type [optional] metadata_model MetadataModel [optional] version_comment str, none_type [optional] categories [str, none_type], none_type category tags as string array [optional] links Links [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleApi/","title":"libica.openapi.v2.BundleApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description accept_terms_of_use_bundle POST /api/bundles/{bundleId}/termsOfUse:accept accept terms of use for a bundle create_bundle POST /api/bundles Create a new bundle deprecate_bundle POST /api/bundles/{bundleId}:deprecate deprecate a bundle get_bundle GET /api/bundles/{bundleId} Retrieve a bundle. get_bundle_terms_of_use GET /api/bundles/{bundleId}/termsOfUse Retrieve the last version of terms of use for a bundle. get_bundles GET /api/bundles Retrieve a list of bundles. get_terms_of_use_acceptance GET /api/bundles/{bundleId}/termsOfUse/userAcceptance/currentUser Retrieve the acceptance record for a bundle for the current user. insert_bundle_terms_of_use POST /api/bundles/{bundleId}/termsOfUse:new Insert a new version of the terms of use for a bundle release_bundle POST /api/bundles/{bundleId}:release release a bundle"},{"location":"v2/docs/BundleApi/#accept_terms_of_use_bundle","title":"accept_terms_of_use_bundle","text":"<p>accept_terms_of_use_bundle(bundle_id)</p> <p>accept terms of use for a bundle</p>"},{"location":"v2/docs/BundleApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_api.BundleApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle where the terms of use are accepted of.\n\n    # example passing only required values which don't have defaults set\n    try:\n        # accept terms of use for a bundle\n        api_instance.accept_terms_of_use_bundle(bundle_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleApi-&gt;accept_terms_of_use_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleApi/#parameters","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle where the terms of use are accepted of."},{"location":"v2/docs/BundleApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/BundleApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/BundleApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The terms of use of the bundle is accepted - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleApi/#create_bundle","title":"create_bundle","text":"<p>Bundle create_bundle(create_bundle)</p> <p>Create a new bundle</p>"},{"location":"v2/docs/BundleApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_api\nfrom libica.openapi.v2.model.create_bundle import CreateBundle\nfrom libica.openapi.v2.model.bundle import Bundle\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_api.BundleApi(api_client)\n    create_bundle = CreateBundle(\n        name=\"name_example\",\n        short_description=\"short_description_example\",\n        bundle_release_version=\"bundle_release_version_example\",\n        bundle_version_comment=\"bundle_version_comment_example\",\n        region_id=\"region_id_example\",\n        metadata_model_id=\"metadata_model_id_example\",\n        bundle_status=\"DRAFT\",\n        categories=[\n            \"categories_example\",\n        ],\n        links=Links(\n            links=[\n                Link(\n                    name=\"name_example\",\n                    url=\"url_example\",\n                ),\n            ],\n            licenses=[\n                Link(\n                    name=\"name_example\",\n                    url=\"url_example\",\n                ),\n            ],\n            homepages=[\n                Link(\n                    name=\"name_example\",\n                    url=\"url_example\",\n                ),\n            ],\n            publications=[\n                Link(\n                    name=\"name_example\",\n                    url=\"url_example\",\n                ),\n            ],\n        ),\n    ) # CreateBundle | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a new bundle\n        api_response = api_instance.create_bundle(create_bundle)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleApi-&gt;create_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes create_bundle CreateBundle"},{"location":"v2/docs/BundleApi/#return-type_1","title":"Return type","text":"<p>Bundle</p>"},{"location":"v2/docs/BundleApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 201 The bundle is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleApi/#deprecate_bundle","title":"deprecate_bundle","text":"<p>deprecate_bundle(bundle_id)</p> <p>deprecate a bundle</p>"},{"location":"v2/docs/BundleApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_api.BundleApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle to deprecate.\n\n    # example passing only required values which don't have defaults set\n    try:\n        # deprecate a bundle\n        api_instance.deprecate_bundle(bundle_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleApi-&gt;deprecate_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to deprecate."},{"location":"v2/docs/BundleApi/#return-type_2","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/BundleApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/BundleApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 204 The bundle is successfully deprecated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleApi/#get_bundle","title":"get_bundle","text":"<p>Bundle get_bundle(bundle_id)</p> <p>Retrieve a bundle.</p>"},{"location":"v2/docs/BundleApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_api\nfrom libica.openapi.v2.model.bundle import Bundle\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_api.BundleApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a bundle.\n        api_response = api_instance.get_bundle(bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleApi-&gt;get_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to retrieve"},{"location":"v2/docs/BundleApi/#return-type_3","title":"Return type","text":"<p>Bundle</p>"},{"location":"v2/docs/BundleApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The bundle is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleApi/#get_bundle_terms_of_use","title":"get_bundle_terms_of_use","text":"<p>TermsOfUse get_bundle_terms_of_use(bundle_id)</p> <p>Retrieve the last version of terms of use for a bundle.</p>"},{"location":"v2/docs/BundleApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_api\nfrom libica.openapi.v2.model.terms_of_use import TermsOfUse\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_api.BundleApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle of the terms of use to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the last version of terms of use for a bundle.\n        api_response = api_instance.get_bundle_terms_of_use(bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleApi-&gt;get_bundle_terms_of_use: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle of the terms of use to retrieve"},{"location":"v2/docs/BundleApi/#return-type_4","title":"Return type","text":"<p>TermsOfUse</p>"},{"location":"v2/docs/BundleApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 Terms of use are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleApi/#get_bundles","title":"get_bundles","text":"<p>BundlePagedList get_bundles()</p> <p>Retrieve a list of bundles.</p>"},{"location":"v2/docs/BundleApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_api\nfrom libica.openapi.v2.model.bundle_paged_list import BundlePagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_api.BundleApi(api_client)\n    search = \"search_example\" # str | Search (optional)\n    user_tags = \"userTags_example\" # str | User tags to filter on (optional)\n    technical_tags = \"technicalTags_example\" # str | Technical tags to filter on (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - name - shortDescription (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of bundles.\n        api_response = api_instance.get_bundles(search=search, user_tags=user_tags, technical_tags=technical_tags, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleApi-&gt;get_bundles: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes search str Search [optional] user_tags str User tags to filter on [optional] technical_tags str Technical tags to filter on [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - name - shortDescription [optional]"},{"location":"v2/docs/BundleApi/#return-type_5","title":"Return type","text":"<p>BundlePagedList</p>"},{"location":"v2/docs/BundleApi/#authorization_5","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 200 The list of bundles is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleApi/#get_terms_of_use_acceptance","title":"get_terms_of_use_acceptance","text":"<p>TermsOfUseAcceptance get_terms_of_use_acceptance(bundle_id)</p> <p>Retrieve the acceptance record for a bundle for the current user.</p>"},{"location":"v2/docs/BundleApi/#example_6","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_api\nfrom libica.openapi.v2.model.terms_of_use_acceptance import TermsOfUseAcceptance\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_api.BundleApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle of the terms of use acceptance records.\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the acceptance record for a bundle for the current user.\n        api_response = api_instance.get_terms_of_use_acceptance(bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleApi-&gt;get_terms_of_use_acceptance: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle of the terms of use acceptance records."},{"location":"v2/docs/BundleApi/#return-type_6","title":"Return type","text":"<p>TermsOfUseAcceptance</p>"},{"location":"v2/docs/BundleApi/#authorization_6","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 200 Terms of use acceptance is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleApi/#insert_bundle_terms_of_use","title":"insert_bundle_terms_of_use","text":"<p>TermsOfUse insert_bundle_terms_of_use(bundle_id, create_terms_of_use)</p> <p>Insert a new version of the terms of use for a bundle</p>"},{"location":"v2/docs/BundleApi/#example_7","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_api\nfrom libica.openapi.v2.model.create_terms_of_use import CreateTermsOfUse\nfrom libica.openapi.v2.model.terms_of_use import TermsOfUse\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_api.BundleApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle to update\n    create_terms_of_use = CreateTermsOfUse(\n        terms_of_use=\"terms_of_use_example\",\n        requires_user_acceptance=True,\n        release_version=\"release_version_example\",\n        reset_acceptance_records=True,\n    ) # CreateTermsOfUse | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Insert a new version of the terms of use for a bundle\n        api_response = api_instance.insert_bundle_terms_of_use(bundle_id, create_terms_of_use)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleApi-&gt;insert_bundle_terms_of_use: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to update create_terms_of_use CreateTermsOfUse"},{"location":"v2/docs/BundleApi/#return-type_7","title":"Return type","text":"<p>TermsOfUse</p>"},{"location":"v2/docs/BundleApi/#authorization_7","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/x-www-form-urlencoded, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 200 A new version of the terms of use are successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleApi/#release_bundle","title":"release_bundle","text":"<p>release_bundle(bundle_id)</p> <p>release a bundle</p>"},{"location":"v2/docs/BundleApi/#example_8","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_api.BundleApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle to release\n\n    # example passing only required values which don't have defaults set\n    try:\n        # release a bundle\n        api_instance.release_bundle(bundle_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleApi-&gt;release_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to release"},{"location":"v2/docs/BundleApi/#return-type_8","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/BundleApi/#authorization_8","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/BundleApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 204 The bundle is successfully released - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleData/","title":"BundleData","text":""},{"location":"v2/docs/BundleData/#properties","title":"Properties","text":"Name Type Description Notes data Data bundle_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleDataApi/","title":"libica.openapi.v2.BundleDataApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_bundle_data GET /api/bundles/{bundleId}/data Retrieve the list of bundle data. link_data_to_bundle POST /api/bundles/{bundleId}/data/{dataId} Link data to this bundle. unlink_data_from_bundle DELETE /api/bundles/{bundleId}/data/{dataId} Unlink data from this bundle."},{"location":"v2/docs/BundleDataApi/#get_bundle_data","title":"get_bundle_data","text":"<p>BundleDataPagedList get_bundle_data(bundle_id)</p> <p>Retrieve the list of bundle data.</p>"},{"location":"v2/docs/BundleDataApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_data_api\nfrom libica.openapi.v2.model.bundle_data_paged_list import BundleDataPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_data_api.BundleDataApi(api_client)\n    bundle_id = \"bundleId_example\" # str | \n    full_text = \"fullText_example\" # str | To search through multiple fields of data. (optional)\n    id = \"id_example\" # str | The ids to filter on. This will always match exact. (optional)\n    filename = \"filename_example\" # str | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional)\n    filename_match_mode = \"EXACT\" # str | How the filenames are filtered. (optional)\n    file_path = \"filePath_example\" # str | The paths of the files to filter on. (optional)\n    file_path_match_mode = \"STARTS_WITH_CASE_INSENSITIVE\" # str | How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). (optional) if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\"\n    status = \"PARTIAL\" # str | The statuses to filter on. (optional)\n    format_id = \"formatId_example\" # str | The IDs of the formats to filter on. (optional)\n    format_code = \"formatCode_example\" # str | The codes of the formats to filter on. (optional)\n    type = \"FILE\" # str | The type to filter on. (optional)\n    parent_folder_id = \"parentFolderId_example\" # str | The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. (optional)\n    parent_folder_path = \"parentFolderPath_example\" # str | The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files. (optional)\n    creation_date_after = \"creationDateAfter_example\" # str | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    creation_date_before = \"creationDateBefore_example\" # str | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_after = \"statusDateAfter_example\" # str | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_before = \"statusDateBefore_example\" # str | The date before which the status has been updated Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    user_tag = \"userTag_example\" # str | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional)\n    user_tag_match_mode = \"EXACT\" # str | How the usertags are filtered. (optional)\n    run_input_tag = \"runInputTag_example\" # str | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_input_tag_match_mode = \"EXACT\" # str | How the runInputTags are filtered. (optional)\n    run_output_tag = \"runOutputTag_example\" # str | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_output_tag_match_mode = \"EXACT\" # str | How the runOutputTags are filtered. (optional)\n    connector_tag = \"connectorTag_example\" # str | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional)\n    connector_tag_match_mode = \"EXACT\" # str | How the connectorTags are filtered. (optional)\n    technical_tag = \"technicalTag_example\" # str | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional)\n    technical_tag_match_mode = \"EXACT\" # str | How the technicalTags are filtered. (optional)\n    not_in_run = \"notInRun_example\" # str | When set to true, the data will be filtered on data which is not used in a run. (optional)\n    not_linked_to_sample = \"notLinkedToSample_example\" # str | When set to true only date that is unlinked to a sample will be returned.  This filter implies a filter of type File. (optional)\n    instrument_run_id = [\n        \"instrumentRunId_example\",\n    ] # [str] | The instrument run IDs of the sequencing runs to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the list of bundle data.\n        api_response = api_instance.get_bundle_data(bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleDataApi-&gt;get_bundle_data: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve the list of bundle data.\n        api_response = api_instance.get_bundle_data(bundle_id, full_text=full_text, id=id, filename=filename, filename_match_mode=filename_match_mode, file_path=file_path, file_path_match_mode=file_path_match_mode, status=status, format_id=format_id, format_code=format_code, type=type, parent_folder_id=parent_folder_id, parent_folder_path=parent_folder_path, creation_date_after=creation_date_after, creation_date_before=creation_date_before, status_date_after=status_date_after, status_date_before=status_date_before, user_tag=user_tag, user_tag_match_mode=user_tag_match_mode, run_input_tag=run_input_tag, run_input_tag_match_mode=run_input_tag_match_mode, run_output_tag=run_output_tag, run_output_tag_match_mode=run_output_tag_match_mode, connector_tag=connector_tag, connector_tag_match_mode=connector_tag_match_mode, technical_tag=technical_tag, technical_tag_match_mode=technical_tag_match_mode, not_in_run=not_in_run, not_linked_to_sample=not_linked_to_sample, instrument_run_id=instrument_run_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleDataApi-&gt;get_bundle_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleDataApi/#parameters","title":"Parameters","text":"Name Type Description Notes bundle_id str full_text str To search through multiple fields of data. [optional] id str The ids to filter on. This will always match exact. [optional] filename str The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] file_path str The paths of the files to filter on. [optional] file_path_match_mode str How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). [optional] if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status str The statuses to filter on. [optional] format_id str The IDs of the formats to filter on. [optional] format_code str The codes of the formats to filter on. [optional] type str The type to filter on. [optional] parent_folder_id str The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. [optional] parent_folder_path str The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files. [optional] creation_date_after str The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before str The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after str The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before str The date before which the status has been updated Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag str The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag str The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag str The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag str The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag str The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run str When set to true, the data will be filtered on data which is not used in a run. [optional] not_linked_to_sample str When set to true only date that is unlinked to a sample will be returned.  This filter implies a filter of type File. [optional] instrument_run_id [str] The instrument run IDs of the sequencing runs to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt [optional]"},{"location":"v2/docs/BundleDataApi/#return-type","title":"Return type","text":"<p>BundleDataPagedList</p>"},{"location":"v2/docs/BundleDataApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleDataApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleDataApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of bundle data is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleDataApi/#link_data_to_bundle","title":"link_data_to_bundle","text":"<p>link_data_to_bundle(bundle_id, data_id)</p> <p>Link data to this bundle.</p>"},{"location":"v2/docs/BundleDataApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_data_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_data_api.BundleDataApi(api_client)\n    bundle_id = \"bundleId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Link data to this bundle.\n        api_instance.link_data_to_bundle(bundle_id, data_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleDataApi-&gt;link_data_to_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleDataApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes bundle_id str data_id str"},{"location":"v2/docs/BundleDataApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/BundleDataApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleDataApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/BundleDataApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully linked to this bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleDataApi/#unlink_data_from_bundle","title":"unlink_data_from_bundle","text":"<p>unlink_data_from_bundle(bundle_id, data_id)</p> <p>Unlink data from this bundle.</p> <p>Note that for folders, this only unlinks the folder itself, not the folder contents!  Use 'Bundle Data Unlinking Batch' for recursive unlinking.</p>"},{"location":"v2/docs/BundleDataApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_data_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_data_api.BundleDataApi(api_client)\n    bundle_id = \"bundleId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Unlink data from this bundle.\n        api_instance.unlink_data_from_bundle(bundle_id, data_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleDataApi-&gt;unlink_data_from_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleDataApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes bundle_id str data_id str"},{"location":"v2/docs/BundleDataApi/#return-type_2","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/BundleDataApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleDataApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/BundleDataApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully unlinked from this bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleDataLinkingBatch/","title":"BundleDataLinkingBatch","text":""},{"location":"v2/docs/BundleDataLinkingBatch/#properties","title":"Properties","text":"Name Type Description Notes id str job Job any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleDataLinkingBatchApi/","title":"libica.openapi.v2.BundleDataLinkingBatchApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_bundle_data_linking_batch POST /api/bundles/{bundleId}/dataLinkingBatch Create a bundle data linking batch. get_bundle_data_linking_batch GET /api/bundles/{bundleId}/dataLinkingBatch/{batchId} Retrieve a bundle data linking batch. get_bundle_data_linking_batch_item GET /api/bundles/{bundleId}/dataLinkingBatch/{batchId}/items/{itemId} Retrieve a bundle data linking batch item. get_bundle_data_linking_batch_items GET /api/bundles/{bundleId}/dataLinkingBatch/{batchId}/items Retrieve a list of bundle data linking batch items."},{"location":"v2/docs/BundleDataLinkingBatchApi/#create_bundle_data_linking_batch","title":"create_bundle_data_linking_batch","text":"<p>BundleDataLinkingBatch create_bundle_data_linking_batch(bundle_id, create_bundle_data_linking_batch)</p> <p>Create a bundle data linking batch.</p>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_data_linking_batch_api\nfrom libica.openapi.v2.model.create_bundle_data_linking_batch import CreateBundleDataLinkingBatch\nfrom libica.openapi.v2.model.bundle_data_linking_batch import BundleDataLinkingBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_data_linking_batch_api.BundleDataLinkingBatchApi(api_client)\n    bundle_id = \"bundleId_example\" # str | \n    create_bundle_data_linking_batch = CreateBundleDataLinkingBatch(\n        items=[\n            CreateBundleDataLinkingBatchItem(\n                data_id=\"data_id_example\",\n            ),\n        ],\n    ) # CreateBundleDataLinkingBatch | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a bundle data linking batch.\n        api_response = api_instance.create_bundle_data_linking_batch(bundle_id, create_bundle_data_linking_batch)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleDataLinkingBatchApi-&gt;create_bundle_data_linking_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#parameters","title":"Parameters","text":"Name Type Description Notes bundle_id str create_bundle_data_linking_batch CreateBundleDataLinkingBatch"},{"location":"v2/docs/BundleDataLinkingBatchApi/#return-type","title":"Return type","text":"<p>BundleDataLinkingBatch</p>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The bundle data linking batch is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#get_bundle_data_linking_batch","title":"get_bundle_data_linking_batch","text":"<p>BundleDataLinkingBatch get_bundle_data_linking_batch(bundle_id, batch_id)</p> <p>Retrieve a bundle data linking batch.</p>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_data_linking_batch_api\nfrom libica.openapi.v2.model.bundle_data_linking_batch import BundleDataLinkingBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_data_linking_batch_api.BundleDataLinkingBatchApi(api_client)\n    bundle_id = \"bundleId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a bundle data linking batch.\n        api_response = api_instance.get_bundle_data_linking_batch(bundle_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleDataLinkingBatchApi-&gt;get_bundle_data_linking_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes bundle_id str batch_id str"},{"location":"v2/docs/BundleDataLinkingBatchApi/#return-type_1","title":"Return type","text":"<p>BundleDataLinkingBatch</p>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The bundle data linking batch is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#get_bundle_data_linking_batch_item","title":"get_bundle_data_linking_batch_item","text":"<p>BundleDataLinkingBatchItem get_bundle_data_linking_batch_item(bundle_id, batch_id, item_id)</p> <p>Retrieve a bundle data linking batch item.</p>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_data_linking_batch_api\nfrom libica.openapi.v2.model.bundle_data_linking_batch_item import BundleDataLinkingBatchItem\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_data_linking_batch_api.BundleDataLinkingBatchApi(api_client)\n    bundle_id = \"bundleId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n    item_id = \"itemId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a bundle data linking batch item.\n        api_response = api_instance.get_bundle_data_linking_batch_item(bundle_id, batch_id, item_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleDataLinkingBatchApi-&gt;get_bundle_data_linking_batch_item: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes bundle_id str batch_id str item_id str"},{"location":"v2/docs/BundleDataLinkingBatchApi/#return-type_2","title":"Return type","text":"<p>BundleDataLinkingBatchItem</p>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The bundle data linking batch item is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#get_bundle_data_linking_batch_items","title":"get_bundle_data_linking_batch_items","text":"<p>BundleDataLinkingBatchItemPagedList get_bundle_data_linking_batch_items(bundle_id, batch_id)</p> <p>Retrieve a list of bundle data linking batch items.</p>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_data_linking_batch_api\nfrom libica.openapi.v2.model.bundle_data_linking_batch_item_paged_list import BundleDataLinkingBatchItemPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_data_linking_batch_api.BundleDataLinkingBatchApi(api_client)\n    bundle_id = \"bundleId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n    status = [\n        \"INITIALISED\",\n    ] # [str] | The statuses to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of bundle data linking batch items.\n        api_response = api_instance.get_bundle_data_linking_batch_items(bundle_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleDataLinkingBatchApi-&gt;get_bundle_data_linking_batch_items: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of bundle data linking batch items.\n        api_response = api_instance.get_bundle_data_linking_batch_items(bundle_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleDataLinkingBatchApi-&gt;get_bundle_data_linking_batch_items: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes bundle_id str batch_id str status [str] The statuses to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional]"},{"location":"v2/docs/BundleDataLinkingBatchApi/#return-type_3","title":"Return type","text":"<p>BundleDataLinkingBatchItemPagedList</p>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleDataLinkingBatchApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of bundle data linking batch items is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleDataLinkingBatchItem/","title":"BundleDataLinkingBatchItem","text":""},{"location":"v2/docs/BundleDataLinkingBatchItem/#properties","title":"Properties","text":"Name Type Description Notes id str request BundleDataLinkingBatchItemRequest processing BundleDataLinkingBatchItemProcessing bundle_data BundleData [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleDataLinkingBatchItemPagedList/","title":"BundleDataLinkingBatchItemPagedList","text":""},{"location":"v2/docs/BundleDataLinkingBatchItemPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [BundleDataLinkingBatchItem] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleDataLinkingBatchItemProcessing/","title":"BundleDataLinkingBatchItemProcessing","text":""},{"location":"v2/docs/BundleDataLinkingBatchItemProcessing/#properties","title":"Properties","text":"Name Type Description Notes status str Possible values are: INITIALISED, WAITING_RESOURCES, RUNNING, LINKED, ALREADY_LINKED, FAILED, PARTIALLY_LINKED. More types could be added in a future release. additional_status_information str, none_type Additional information regarding the status of this batch item. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleDataLinkingBatchItemRequest/","title":"BundleDataLinkingBatchItemRequest","text":""},{"location":"v2/docs/BundleDataLinkingBatchItemRequest/#properties","title":"Properties","text":"Name Type Description Notes data_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleDataPagedList/","title":"BundleDataPagedList","text":""},{"location":"v2/docs/BundleDataPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [BundleData] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleDataUnlinkingBatch/","title":"BundleDataUnlinkingBatch","text":""},{"location":"v2/docs/BundleDataUnlinkingBatch/#properties","title":"Properties","text":"Name Type Description Notes id str job Job any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/","title":"libica.openapi.v2.BundleDataUnlinkingBatchApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_bundle_data_unlinking_batch POST /api/bundles/{bundleId}/dataUnlinkingBatch Create a bundle data unlinking batch. get_bundle_data_unlinking_batch GET /api/bundles/{bundleId}/dataUnlinkingBatch/{batchId} Retrieve a bundle data unlinking batch. get_bundle_data_unlinking_batch_item GET /api/bundles/{bundleId}/dataUnlinkingBatch/{batchId}/items/{itemId} Retrieve a bundle data unlinking batch item. get_bundle_data_unlinking_batch_items GET /api/bundles/{bundleId}/dataUnlinkingBatch/{batchId}/items Retrieve a list of bundle data unlinking batch items."},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#create_bundle_data_unlinking_batch","title":"create_bundle_data_unlinking_batch","text":"<p>BundleDataUnlinkingBatch create_bundle_data_unlinking_batch(bundle_id, create_bundle_data_unlinking_batch)</p> <p>Create a bundle data unlinking batch.</p>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_data_unlinking_batch_api\nfrom libica.openapi.v2.model.create_bundle_data_unlinking_batch import CreateBundleDataUnlinkingBatch\nfrom libica.openapi.v2.model.bundle_data_unlinking_batch import BundleDataUnlinkingBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_data_unlinking_batch_api.BundleDataUnlinkingBatchApi(api_client)\n    bundle_id = \"bundleId_example\" # str | \n    create_bundle_data_unlinking_batch = CreateBundleDataUnlinkingBatch(\n        items=[\n            CreateBundleDataUnlinkingBatchItem(\n                data_id=\"data_id_example\",\n            ),\n        ],\n    ) # CreateBundleDataUnlinkingBatch | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a bundle data unlinking batch.\n        api_response = api_instance.create_bundle_data_unlinking_batch(bundle_id, create_bundle_data_unlinking_batch)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleDataUnlinkingBatchApi-&gt;create_bundle_data_unlinking_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#parameters","title":"Parameters","text":"Name Type Description Notes bundle_id str create_bundle_data_unlinking_batch CreateBundleDataUnlinkingBatch"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#return-type","title":"Return type","text":"<p>BundleDataUnlinkingBatch</p>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The bundle data unlinking batch is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#get_bundle_data_unlinking_batch","title":"get_bundle_data_unlinking_batch","text":"<p>BundleDataUnlinkingBatch get_bundle_data_unlinking_batch(bundle_id, batch_id)</p> <p>Retrieve a bundle data unlinking batch.</p>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_data_unlinking_batch_api\nfrom libica.openapi.v2.model.bundle_data_unlinking_batch import BundleDataUnlinkingBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_data_unlinking_batch_api.BundleDataUnlinkingBatchApi(api_client)\n    bundle_id = \"bundleId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a bundle data unlinking batch.\n        api_response = api_instance.get_bundle_data_unlinking_batch(bundle_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleDataUnlinkingBatchApi-&gt;get_bundle_data_unlinking_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes bundle_id str batch_id str"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#return-type_1","title":"Return type","text":"<p>BundleDataUnlinkingBatch</p>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The bundle data unlinking batch is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#get_bundle_data_unlinking_batch_item","title":"get_bundle_data_unlinking_batch_item","text":"<p>BundleDataUnlinkingBatchItem get_bundle_data_unlinking_batch_item(bundle_id, batch_id, item_id)</p> <p>Retrieve a bundle data unlinking batch item.</p>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_data_unlinking_batch_api\nfrom libica.openapi.v2.model.bundle_data_unlinking_batch_item import BundleDataUnlinkingBatchItem\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_data_unlinking_batch_api.BundleDataUnlinkingBatchApi(api_client)\n    bundle_id = \"bundleId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n    item_id = \"itemId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a bundle data unlinking batch item.\n        api_response = api_instance.get_bundle_data_unlinking_batch_item(bundle_id, batch_id, item_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleDataUnlinkingBatchApi-&gt;get_bundle_data_unlinking_batch_item: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes bundle_id str batch_id str item_id str"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#return-type_2","title":"Return type","text":"<p>BundleDataUnlinkingBatchItem</p>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The bundle data unlinking batch item is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#get_bundle_data_unlinking_batch_items","title":"get_bundle_data_unlinking_batch_items","text":"<p>BundleDataUnlinkingBatchItemPagedList get_bundle_data_unlinking_batch_items(bundle_id, batch_id)</p> <p>Retrieve a list of bundle data unlinking batch items.</p>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_data_unlinking_batch_api\nfrom libica.openapi.v2.model.bundle_data_unlinking_batch_item_paged_list import BundleDataUnlinkingBatchItemPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_data_unlinking_batch_api.BundleDataUnlinkingBatchApi(api_client)\n    bundle_id = \"bundleId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n    status = [\n        \"INITIALISED\",\n    ] # [str] | The statuses to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\" (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of bundle data unlinking batch items.\n        api_response = api_instance.get_bundle_data_unlinking_batch_items(bundle_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleDataUnlinkingBatchApi-&gt;get_bundle_data_unlinking_batch_items: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of bundle data unlinking batch items.\n        api_response = api_instance.get_bundle_data_unlinking_batch_items(bundle_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleDataUnlinkingBatchApi-&gt;get_bundle_data_unlinking_batch_items: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes bundle_id str batch_id str status [str] The statuses to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\" [optional]"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#return-type_3","title":"Return type","text":"<p>BundleDataUnlinkingBatchItemPagedList</p>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleDataUnlinkingBatchApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of bundle data unlinking batch items is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleDataUnlinkingBatchItem/","title":"BundleDataUnlinkingBatchItem","text":""},{"location":"v2/docs/BundleDataUnlinkingBatchItem/#properties","title":"Properties","text":"Name Type Description Notes id str request BundleDataUnlinkingBatchItemRequest processing BundleDataUnlinkingBatchItemProcessing any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleDataUnlinkingBatchItemPagedList/","title":"BundleDataUnlinkingBatchItemPagedList","text":""},{"location":"v2/docs/BundleDataUnlinkingBatchItemPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [BundleDataUnlinkingBatchItem] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleDataUnlinkingBatchItemProcessing/","title":"BundleDataUnlinkingBatchItemProcessing","text":""},{"location":"v2/docs/BundleDataUnlinkingBatchItemProcessing/#properties","title":"Properties","text":"Name Type Description Notes status str Possible values are: INITIALISED, WAITING_RESOURCES, RUNNING, UNLINKED, ALREADY_UNLINKED, FAILED, PARTIALLY_UNLINKED. More types could be added in a future release. additional_status_information str, none_type Additional information regarding the status of this batch item. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleDataUnlinkingBatchItemRequest/","title":"BundleDataUnlinkingBatchItemRequest","text":""},{"location":"v2/docs/BundleDataUnlinkingBatchItemRequest/#properties","title":"Properties","text":"Name Type Description Notes data_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleList/","title":"BundleList","text":""},{"location":"v2/docs/BundleList/#properties","title":"Properties","text":"Name Type Description Notes items [Bundle] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundlePagedList/","title":"BundlePagedList","text":""},{"location":"v2/docs/BundlePagedList/#properties","title":"Properties","text":"Name Type Description Notes items [Bundle] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundlePipeline/","title":"BundlePipeline","text":""},{"location":"v2/docs/BundlePipeline/#properties","title":"Properties","text":"Name Type Description Notes pipeline PipelineV3 bundle_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundlePipelineApi/","title":"libica.openapi.v2.BundlePipelineApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_bundle_pipelines GET /api/bundles/{bundleId}/pipelines Retrieve a list of bundle pipelines. link_pipeline_to_bundle POST /api/bundles/{bundleId}/pipelines/{pipelineId} Link a pipeline to a bundle. unlink_pipeline_from_bundle DELETE /api/bundles/{bundleId}/pipelines/{pipelineId} Unlink a pipeline from a bundle."},{"location":"v2/docs/BundlePipelineApi/#get_bundle_pipelines","title":"get_bundle_pipelines","text":"<p>BundlePipelineList get_bundle_pipelines(bundle_id)</p> <p>Retrieve a list of bundle pipelines.</p>"},{"location":"v2/docs/BundlePipelineApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_pipeline_api\nfrom libica.openapi.v2.model.bundle_pipeline_list import BundlePipelineList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_pipeline_api.BundlePipelineApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle to retrieve pipelines for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of bundle pipelines.\n        api_response = api_instance.get_bundle_pipelines(bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundlePipelineApi-&gt;get_bundle_pipelines: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundlePipelineApi/#parameters","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to retrieve pipelines for"},{"location":"v2/docs/BundlePipelineApi/#return-type","title":"Return type","text":"<p>BundlePipelineList</p>"},{"location":"v2/docs/BundlePipelineApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundlePipelineApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundlePipelineApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of bundle pipelines is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundlePipelineApi/#link_pipeline_to_bundle","title":"link_pipeline_to_bundle","text":"<p>link_pipeline_to_bundle(bundle_id, pipeline_id)</p> <p>Link a pipeline to a bundle.</p>"},{"location":"v2/docs/BundlePipelineApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_pipeline_api.BundlePipelineApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle\n    pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Link a pipeline to a bundle.\n        api_instance.link_pipeline_to_bundle(bundle_id, pipeline_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundlePipelineApi-&gt;link_pipeline_to_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundlePipelineApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle pipeline_id str The ID of the pipeline"},{"location":"v2/docs/BundlePipelineApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/BundlePipelineApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundlePipelineApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/BundlePipelineApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The pipeline is successfully linked to the bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundlePipelineApi/#unlink_pipeline_from_bundle","title":"unlink_pipeline_from_bundle","text":"<p>unlink_pipeline_from_bundle(bundle_id, pipeline_id)</p> <p>Unlink a pipeline from a bundle.</p>"},{"location":"v2/docs/BundlePipelineApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_pipeline_api.BundlePipelineApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle\n    pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Unlink a pipeline from a bundle.\n        api_instance.unlink_pipeline_from_bundle(bundle_id, pipeline_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundlePipelineApi-&gt;unlink_pipeline_from_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundlePipelineApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle pipeline_id str The ID of the pipeline"},{"location":"v2/docs/BundlePipelineApi/#return-type_2","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/BundlePipelineApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundlePipelineApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/BundlePipelineApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 204 The pipeline is successfully unlinked from the bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundlePipelineList/","title":"BundlePipelineList","text":""},{"location":"v2/docs/BundlePipelineList/#properties","title":"Properties","text":"Name Type Description Notes items [BundlePipeline] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleSample/","title":"BundleSample","text":""},{"location":"v2/docs/BundleSample/#properties","title":"Properties","text":"Name Type Description Notes sample Sample bundle_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleSampleApi/","title":"libica.openapi.v2.BundleSampleApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_bundle_samples GET /api/bundles/{bundleId}/samples Retrieve a list of bundle samples. link_sample_to_bundle POST /api/bundles/{bundleId}/samples/{sampleId} Link a sample to a bundle. unlink_sample_from_bundle DELETE /api/bundles/{bundleId}/samples/{sampleId} Unlink a sample from a bundle."},{"location":"v2/docs/BundleSampleApi/#get_bundle_samples","title":"get_bundle_samples","text":"<p>BundleSamplePagedList get_bundle_samples(bundle_id)</p> <p>Retrieve a list of bundle samples.</p>"},{"location":"v2/docs/BundleSampleApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_sample_api\nfrom libica.openapi.v2.model.bundle_sample_paged_list import BundleSamplePagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_sample_api.BundleSampleApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle to get bundle samples from\n    search = \"search_example\" # str | To search through multiple fields of data. (optional)\n    user_tags = \"userTags_example\" # str | The user tags to filter on. (optional)\n    technical_tags = \"technicalTags_example\" # str | The technical tags to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of bundle samples.\n        api_response = api_instance.get_bundle_samples(bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleSampleApi-&gt;get_bundle_samples: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of bundle samples.\n        api_response = api_instance.get_bundle_samples(bundle_id, search=search, user_tags=user_tags, technical_tags=technical_tags, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleSampleApi-&gt;get_bundle_samples: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleSampleApi/#parameters","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to get bundle samples from search str To search through multiple fields of data. [optional] user_tags str The user tags to filter on. [optional] technical_tags str The technical tags to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status [optional]"},{"location":"v2/docs/BundleSampleApi/#return-type","title":"Return type","text":"<p>BundleSamplePagedList</p>"},{"location":"v2/docs/BundleSampleApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleSampleApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleSampleApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of bundle samples are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleSampleApi/#link_sample_to_bundle","title":"link_sample_to_bundle","text":"<p>link_sample_to_bundle(bundle_id, sample_id)</p> <p>Link a sample to a bundle.</p>"},{"location":"v2/docs/BundleSampleApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_sample_api.BundleSampleApi(api_client)\n    bundle_id = \"bundleId_example\" # str | \n    sample_id = \"sampleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Link a sample to a bundle.\n        api_instance.link_sample_to_bundle(bundle_id, sample_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleSampleApi-&gt;link_sample_to_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleSampleApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes bundle_id str sample_id str"},{"location":"v2/docs/BundleSampleApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/BundleSampleApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleSampleApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/BundleSampleApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The sample is successfully linked to the bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleSampleApi/#unlink_sample_from_bundle","title":"unlink_sample_from_bundle","text":"<p>unlink_sample_from_bundle(bundle_id, sample_id)</p> <p>Unlink a sample from a bundle.</p>"},{"location":"v2/docs/BundleSampleApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_sample_api.BundleSampleApi(api_client)\n    bundle_id = \"bundleId_example\" # str | \n    sample_id = \"sampleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Unlink a sample from a bundle.\n        api_instance.unlink_sample_from_bundle(bundle_id, sample_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleSampleApi-&gt;unlink_sample_from_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleSampleApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes bundle_id str sample_id str"},{"location":"v2/docs/BundleSampleApi/#return-type_2","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/BundleSampleApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleSampleApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/BundleSampleApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 204 The sample is successfully unlinked from the bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleSamplePagedList/","title":"BundleSamplePagedList","text":""},{"location":"v2/docs/BundleSamplePagedList/#properties","title":"Properties","text":"Name Type Description Notes items [BundleSample] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleTool/","title":"BundleTool","text":""},{"location":"v2/docs/BundleTool/#properties","title":"Properties","text":"Name Type Description Notes cwl_tool_definition CWLToolDefinition any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/BundleToolApi/","title":"libica.openapi.v2.BundleToolApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_bundle_tools GET /api/bundles/{bundleId}/tools Retrieve a list of bundle tools. get_tools_eligible_for_linking_to_bundle GET /api/bundles/{bundleId}/tools/eligibleForLinking Retrieve a list of tools eligible for linking to the bundle. link_tool_to_bundle POST /api/bundles/{bundleId}/tools/{toolId} Link a tool to a bundle unlink_tool_from_bundle DELETE /api/bundles/{bundleId}/tools/{toolId} Unlink a tool from this bundle."},{"location":"v2/docs/BundleToolApi/#get_bundle_tools","title":"get_bundle_tools","text":"<p>BundleToolsList get_bundle_tools(bundle_id)</p> <p>Retrieve a list of bundle tools.</p>"},{"location":"v2/docs/BundleToolApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_tool_api\nfrom libica.openapi.v2.model.bundle_tools_list import BundleToolsList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_tool_api.BundleToolApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle to get tools from\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of bundle tools.\n        api_response = api_instance.get_bundle_tools(bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleToolApi-&gt;get_bundle_tools: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleToolApi/#parameters","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to get tools from"},{"location":"v2/docs/BundleToolApi/#return-type","title":"Return type","text":"<p>BundleToolsList</p>"},{"location":"v2/docs/BundleToolApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleToolApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleToolApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of bundle tools is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleToolApi/#get_tools_eligible_for_linking_to_bundle","title":"get_tools_eligible_for_linking_to_bundle","text":"<p>CwlToolDefinitionList get_tools_eligible_for_linking_to_bundle(bundle_id)</p> <p>Retrieve a list of tools eligible for linking to the bundle.</p>"},{"location":"v2/docs/BundleToolApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_tool_api\nfrom libica.openapi.v2.model.cwl_tool_definition_list import CwlToolDefinitionList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_tool_api.BundleToolApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle to get the eligible tools for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of tools eligible for linking to the bundle.\n        api_response = api_instance.get_tools_eligible_for_linking_to_bundle(bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleToolApi-&gt;get_tools_eligible_for_linking_to_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleToolApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to get the eligible tools for"},{"location":"v2/docs/BundleToolApi/#return-type_1","title":"Return type","text":"<p>CwlToolDefinitionList</p>"},{"location":"v2/docs/BundleToolApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleToolApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/BundleToolApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The list of tools is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleToolApi/#link_tool_to_bundle","title":"link_tool_to_bundle","text":"<p>link_tool_to_bundle(bundle_id, tool_id)</p> <p>Link a tool to a bundle</p>"},{"location":"v2/docs/BundleToolApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_tool_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_tool_api.BundleToolApi(api_client)\n    bundle_id = \"bundleId_example\" # str | The ID of the bundle to link the tool to\n    tool_id = \"toolId_example\" # str | The ID of the tool to link\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Link a tool to a bundle\n        api_instance.link_tool_to_bundle(bundle_id, tool_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleToolApi-&gt;link_tool_to_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleToolApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to link the tool to tool_id str The ID of the tool to link"},{"location":"v2/docs/BundleToolApi/#return-type_2","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/BundleToolApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleToolApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/BundleToolApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 204 The tool is successfully linked to the bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleToolApi/#unlink_tool_from_bundle","title":"unlink_tool_from_bundle","text":"<p>unlink_tool_from_bundle(bundle_id, tool_id)</p> <p>Unlink a tool from this bundle.</p>"},{"location":"v2/docs/BundleToolApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import bundle_tool_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = bundle_tool_api.BundleToolApi(api_client)\n    bundle_id = \"bundleId_example\" # str | \n    tool_id = \"toolId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Unlink a tool from this bundle.\n        api_instance.unlink_tool_from_bundle(bundle_id, tool_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling BundleToolApi-&gt;unlink_tool_from_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/BundleToolApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes bundle_id str tool_id str"},{"location":"v2/docs/BundleToolApi/#return-type_3","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/BundleToolApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/BundleToolApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/BundleToolApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 204 The tool is successfully unlinked from this bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/BundleToolsList/","title":"BundleToolsList","text":""},{"location":"v2/docs/BundleToolsList/#properties","title":"Properties","text":"Name Type Description Notes items [BundleTool] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CWLToolDefinition/","title":"CWLToolDefinition","text":""},{"location":"v2/docs/CWLToolDefinition/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str Name of the tool definition status str Status of the tool definition tenant_name str, none_type [optional] description str, none_type Description of the tool definition [optional] version_comment str, none_type version comment of the tool definition [optional] release_version int, none_type release version of the tool definition [optional] links Link [optional] categories [str, none_type], none_type category tags as string array [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ChangeProjectOwner/","title":"ChangeProjectOwner","text":""},{"location":"v2/docs/ChangeProjectOwner/#properties","title":"Properties","text":"Name Type Description Notes new_owner_id str The id of the new project owner. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CompleteFolderUploadSession/","title":"CompleteFolderUploadSession","text":""},{"location":"v2/docs/CompleteFolderUploadSession/#properties","title":"Properties","text":"Name Type Description Notes number_of_expected_uploaded_files int The number of expected uploaded files within this session. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Config/","title":"Config","text":""},{"location":"v2/docs/Config/#properties","title":"Properties","text":"Name Type Description Notes name str name of the report regex str regex pattern of the filename format str, none_type Format of the file [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Connector/","title":"Connector","text":""},{"location":"v2/docs/Connector/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str active bool connected bool Indicates if the connector is connected or not. This is cached so even when the connector is no longer connected, for a short time this still may return true. technical_code str Technical code to be used for processing. mode str The mode the connector runs in. os str The target OS of the original connector installer. installation_status str new_connector_version_available bool tenant_name str, none_type [optional] initialization_key str, none_type The key provided via other channels to initialize the installation. [optional] description str, none_type The general description of the connector instance including its purpose. [optional] max_bandwidth float, none_type The maximum bandwidth defined in MB per second. [optional] max_concurrent_transfers int, none_type The maximum amount of concurrent transfers that this connector can execute. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/","title":"libica.openapi.v2.ConnectorApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description cancel_connector POST /api/connectors/{connectorId}:cancel Cancel a connector. create_connector POST /api/connectors Create a connector. create_download_rule POST /api/connectors/{connectorId}/downloadRules Create a download rule. create_upload_rule POST /api/connectors/{connectorId}/uploadRules Create an upload rule. delete_download_rule DELETE /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Delete a download rule. delete_upload_rule DELETE /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Delete an upload rule. disable_connector POST /api/connectors/{connectorId}:disable Disable a connector. enable_connector POST /api/connectors/{connectorId}:enable Enable a connector. get_connector GET /api/connectors/{connectorId} Retrieve a connector. get_connectors GET /api/connectors Retrieve a list of connectors. get_download_rule GET /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Retrieve a download rule. get_download_rules GET /api/connectors/{connectorId}/downloadRules Retrieve a list of download rules. get_upload_rule GET /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Retrieve an upload rule. get_upload_rules GET /api/connectors/{connectorId}/uploadRules Retrieve a list of upload rules. update_download_rule PUT /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Update a download rule. update_upload_rule PUT /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Update an upload rule."},{"location":"v2/docs/ConnectorApi/#cancel_connector","title":"cancel_connector","text":"<p>cancel_connector(connector_id)</p> <p>Cancel a connector.</p> <p>Endpoint for cancelling a connector. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ConnectorApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Cancel a connector.\n        api_instance.cancel_connector(connector_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;cancel_connector: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters","title":"Parameters","text":"Name Type Description Notes connector_id str"},{"location":"v2/docs/ConnectorApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ConnectorApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The connector is successfully cancelled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#create_connector","title":"create_connector","text":"<p>Connector create_connector(create_connector)</p> <p>Create a connector.</p>"},{"location":"v2/docs/ConnectorApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.create_connector import CreateConnector\nfrom libica.openapi.v2.model.connector import Connector\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    create_connector = CreateConnector(\n        code=\"code_example\",\n        active=True,\n        description=\"description_example\",\n        mode=\"DOWNLOAD\",\n        max_bandwidth=0.01,\n        max_concurrent_transfers=2,\n        os=\"WINDOWS\",\n    ) # CreateConnector | The connector to create.\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a connector.\n        api_response = api_instance.create_connector(create_connector)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;create_connector: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes create_connector CreateConnector The connector to create."},{"location":"v2/docs/ConnectorApi/#return-type_1","title":"Return type","text":"<p>Connector</p>"},{"location":"v2/docs/ConnectorApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 201 The connector is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#create_download_rule","title":"create_download_rule","text":"<p>DownloadRule create_download_rule(connector_id, create_download_rule)</p> <p>Create a download rule.</p>"},{"location":"v2/docs/ConnectorApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.create_download_rule import CreateDownloadRule\nfrom libica.openapi.v2.model.download_rule import DownloadRule\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n    create_download_rule = CreateDownloadRule(\n        code=\"code_example\",\n        active=True,\n        description=\"description_example\",\n        sequence=0,\n        format_code=\"format_code_example\",\n        project_name=\"project_name_example\",\n        target_local_folder=\"target_local_folder_example\",\n        file_name_expression=\"file_name_expression_example\",\n    ) # CreateDownloadRule | The target local folder where to write the data. Leading or trailing spaces are not accepted.\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a download rule.\n        api_response = api_instance.create_download_rule(connector_id, create_download_rule)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;create_download_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes connector_id str create_download_rule CreateDownloadRule The target local folder where to write the data. Leading or trailing spaces are not accepted."},{"location":"v2/docs/ConnectorApi/#return-type_2","title":"Return type","text":"<p>DownloadRule</p>"},{"location":"v2/docs/ConnectorApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 201 The download rule is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#create_upload_rule","title":"create_upload_rule","text":"<p>UploadRule create_upload_rule(connector_id, create_upload_rule)</p> <p>Create an upload rule.</p>"},{"location":"v2/docs/ConnectorApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.create_upload_rule import CreateUploadRule\nfrom libica.openapi.v2.model.upload_rule import UploadRule\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n    create_upload_rule = CreateUploadRule(\n        code=\"code_example\",\n        active=True,\n        description=\"description_example\",\n        local_folder=\"local_folder_example\",\n        file_pattern=\"file_pattern_example\",\n        data_format_id=\"data_format_id_example\",\n        project_id=\"project_id_example\",\n    ) # CreateUploadRule | The local folder where to write the data. Leading or trailing spaces are not accepted.\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create an upload rule.\n        api_response = api_instance.create_upload_rule(connector_id, create_upload_rule)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;create_upload_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes connector_id str create_upload_rule CreateUploadRule The local folder where to write the data. Leading or trailing spaces are not accepted."},{"location":"v2/docs/ConnectorApi/#return-type_3","title":"Return type","text":"<p>UploadRule</p>"},{"location":"v2/docs/ConnectorApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 201 The upload rule is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#delete_download_rule","title":"delete_download_rule","text":"<p>delete_download_rule(connector_id, download_rule_id)</p> <p>Delete a download rule.</p>"},{"location":"v2/docs/ConnectorApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n    download_rule_id = \"downloadRuleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Delete a download rule.\n        api_instance.delete_download_rule(connector_id, download_rule_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;delete_download_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes connector_id str download_rule_id str"},{"location":"v2/docs/ConnectorApi/#return-type_4","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ConnectorApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 204 The download rule is successfully deleted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#delete_upload_rule","title":"delete_upload_rule","text":"<p>delete_upload_rule(connector_id, upload_rule_id)</p> <p>Delete an upload rule.</p>"},{"location":"v2/docs/ConnectorApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n    upload_rule_id = \"uploadRuleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Delete an upload rule.\n        api_instance.delete_upload_rule(connector_id, upload_rule_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;delete_upload_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes connector_id str upload_rule_id str"},{"location":"v2/docs/ConnectorApi/#return-type_5","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ConnectorApi/#authorization_5","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 204 The upload rule is successfully deleted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#disable_connector","title":"disable_connector","text":"<p>disable_connector(connector_id)</p> <p>Disable a connector.</p> <p>Endpoint for disabling a connector. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ConnectorApi/#example_6","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Disable a connector.\n        api_instance.disable_connector(connector_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;disable_connector: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes connector_id str"},{"location":"v2/docs/ConnectorApi/#return-type_6","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ConnectorApi/#authorization_6","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 204 The connector is successfully disabled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#enable_connector","title":"enable_connector","text":"<p>enable_connector(connector_id)</p> <p>Enable a connector.</p> <p>Endpoint for enabling a connector. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ConnectorApi/#example_7","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Enable a connector.\n        api_instance.enable_connector(connector_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;enable_connector: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes connector_id str"},{"location":"v2/docs/ConnectorApi/#return-type_7","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ConnectorApi/#authorization_7","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 204 The connector is successfully enabled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#get_connector","title":"get_connector","text":"<p>Connector get_connector(connector_id)</p> <p>Retrieve a connector.</p>"},{"location":"v2/docs/ConnectorApi/#example_8","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.connector import Connector\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a connector.\n        api_response = api_instance.get_connector(connector_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;get_connector: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes connector_id str"},{"location":"v2/docs/ConnectorApi/#return-type_8","title":"Return type","text":"<p>Connector</p>"},{"location":"v2/docs/ConnectorApi/#authorization_8","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 200 The connector is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#get_connectors","title":"get_connectors","text":"<p>ConnectorList get_connectors()</p> <p>Retrieve a list of connectors.</p>"},{"location":"v2/docs/ConnectorApi/#example_9","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.connector_list import ConnectorList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    active_only = True # bool | When true only the active connectors will be returned. When false (default value) all connectors wil be returned. (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of connectors.\n        api_response = api_instance.get_connectors(active_only=active_only)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;get_connectors: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_9","title":"Parameters","text":"Name Type Description Notes active_only bool When true only the active connectors will be returned. When false (default value) all connectors wil be returned. [optional]"},{"location":"v2/docs/ConnectorApi/#return-type_9","title":"Return type","text":"<p>ConnectorList</p>"},{"location":"v2/docs/ConnectorApi/#authorization_9","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_9","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_9","title":"HTTP response details","text":"Status code Description Response headers 200 The list of connectors is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#get_download_rule","title":"get_download_rule","text":"<p>DownloadRule get_download_rule(connector_id, download_rule_id)</p> <p>Retrieve a download rule.</p>"},{"location":"v2/docs/ConnectorApi/#example_10","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.download_rule import DownloadRule\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n    download_rule_id = \"downloadRuleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a download rule.\n        api_response = api_instance.get_download_rule(connector_id, download_rule_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;get_download_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_10","title":"Parameters","text":"Name Type Description Notes connector_id str download_rule_id str"},{"location":"v2/docs/ConnectorApi/#return-type_10","title":"Return type","text":"<p>DownloadRule</p>"},{"location":"v2/docs/ConnectorApi/#authorization_10","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_10","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_10","title":"HTTP response details","text":"Status code Description Response headers 200 The download rule is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#get_download_rules","title":"get_download_rules","text":"<p>DownloadRuleList get_download_rules(connector_id)</p> <p>Retrieve a list of download rules.</p>"},{"location":"v2/docs/ConnectorApi/#example_11","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.download_rule_list import DownloadRuleList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of download rules.\n        api_response = api_instance.get_download_rules(connector_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;get_download_rules: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_11","title":"Parameters","text":"Name Type Description Notes connector_id str"},{"location":"v2/docs/ConnectorApi/#return-type_11","title":"Return type","text":"<p>DownloadRuleList</p>"},{"location":"v2/docs/ConnectorApi/#authorization_11","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_11","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_11","title":"HTTP response details","text":"Status code Description Response headers 200 The download rules are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#get_upload_rule","title":"get_upload_rule","text":"<p>UploadRule get_upload_rule(connector_id, upload_rule_id)</p> <p>Retrieve an upload rule.</p>"},{"location":"v2/docs/ConnectorApi/#example_12","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.upload_rule import UploadRule\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n    upload_rule_id = \"uploadRuleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve an upload rule.\n        api_response = api_instance.get_upload_rule(connector_id, upload_rule_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;get_upload_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_12","title":"Parameters","text":"Name Type Description Notes connector_id str upload_rule_id str"},{"location":"v2/docs/ConnectorApi/#return-type_12","title":"Return type","text":"<p>UploadRule</p>"},{"location":"v2/docs/ConnectorApi/#authorization_12","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_12","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_12","title":"HTTP response details","text":"Status code Description Response headers 200 The upload rule is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#get_upload_rules","title":"get_upload_rules","text":"<p>UploadRuleList get_upload_rules(connector_id)</p> <p>Retrieve a list of upload rules.</p>"},{"location":"v2/docs/ConnectorApi/#example_13","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.upload_rule_list import UploadRuleList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of upload rules.\n        api_response = api_instance.get_upload_rules(connector_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;get_upload_rules: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_13","title":"Parameters","text":"Name Type Description Notes connector_id str"},{"location":"v2/docs/ConnectorApi/#return-type_13","title":"Return type","text":"<p>UploadRuleList</p>"},{"location":"v2/docs/ConnectorApi/#authorization_13","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_13","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_13","title":"HTTP response details","text":"Status code Description Response headers 200 The upload rules are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#update_download_rule","title":"update_download_rule","text":"<p>DownloadRule update_download_rule(connector_id, download_rule_id, download_rule)</p> <p>Update a download rule.</p> <p>Fields which can be updated:  - code  - active  - description  - sequence  - formatCode  - projectName  - targetLocalFolder  - protocol  - fileNameExpression  - disableHashing</p>"},{"location":"v2/docs/ConnectorApi/#example_14","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.download_rule import DownloadRule\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n    download_rule_id = \"downloadRuleId_example\" # str | \n    download_rule = DownloadRule(\n        id=\"id_example\",\n        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        owner_id=\"owner_id_example\",\n        tenant_id=\"tenant_id_example\",\n        tenant_name=\"tenant_name_example\",\n        code=\"code_example\",\n        active=True,\n        description=\"description_example\",\n        sequence=0,\n        format_code=\"format_code_example\",\n        project_name=\"project_name_example\",\n        target_local_folder=\"target_local_folder_example\",\n        file_name_expression=\"file_name_expression_example\",\n    ) # DownloadRule | The target local folder where to write the data. Leading or trailing spaces are not accepted.\n    if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update a download rule.\n        api_response = api_instance.update_download_rule(connector_id, download_rule_id, download_rule)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;update_download_rule: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update a download rule.\n        api_response = api_instance.update_download_rule(connector_id, download_rule_id, download_rule, if_match=if_match)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;update_download_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_14","title":"Parameters","text":"Name Type Description Notes connector_id str download_rule_id str download_rule DownloadRule The target local folder where to write the data. Leading or trailing spaces are not accepted. if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional]"},{"location":"v2/docs/ConnectorApi/#return-type_14","title":"Return type","text":"<p>DownloadRule</p>"},{"location":"v2/docs/ConnectorApi/#authorization_14","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_14","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_14","title":"HTTP response details","text":"Status code Description Response headers 200 The download rule is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorApi/#update_upload_rule","title":"update_upload_rule","text":"<p>UploadRule update_upload_rule(connector_id, upload_rule_id, upload_rule)</p> <p>Update an upload rule.</p> <p>Fields which can be updated:  - code  - active  - description  - localFolder  - filePattern  - dataFormat </p>"},{"location":"v2/docs/ConnectorApi/#example_15","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import connector_api\nfrom libica.openapi.v2.model.upload_rule import UploadRule\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = connector_api.ConnectorApi(api_client)\n    connector_id = \"connectorId_example\" # str | \n    upload_rule_id = \"uploadRuleId_example\" # str | \n    upload_rule = UploadRule(\n        id=\"id_example\",\n        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        owner_id=\"owner_id_example\",\n        tenant_id=\"tenant_id_example\",\n        tenant_name=\"tenant_name_example\",\n        code=\"code_example\",\n        active=True,\n        description=\"description_example\",\n        local_folder=\"local_folder_example\",\n        file_pattern=\"file_pattern_example\",\n        data_format=DataFormat(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            code=\"code_example\",\n            description=\"description_example\",\n            mime_type=\"mime_type_example\",\n        ),\n        project=Project(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            urn=\"urn_example\",\n            name=\"name_example\",\n            active=True,\n            base_enabled=True,\n            short_description=\"short_description_example\",\n            information=\"information_example\",\n            region=Region(\n                id=\"id_example\",\n                time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                owner_id=\"owner_id_example\",\n                tenant_id=\"tenant_id_example\",\n                tenant_name=\"tenant_name_example\",\n                code=\"code_example\",\n                country=Country(\n                    id=\"id_example\",\n                    time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    owner_id=\"owner_id_example\",\n                    tenant_id=\"tenant_id_example\",\n                    tenant_name=\"tenant_name_example\",\n                    code=\"code_example\",\n                    name=\"name_example\",\n                    region=\"region_example\",\n                ),\n                city_name=\"city_name_example\",\n            ),\n            billing_mode=\"PROJECT\",\n            data_sharing_enabled=True,\n            tags=ProjectTag(\n                technical_tags=[\n                    \"technical_tags_example\",\n                ],\n                user_tags=[\n                    \"user_tags_example\",\n                ],\n            ),\n            storage_bundle=StorageBundle(\n                id=\"id_example\",\n                time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                owner_id=\"owner_id_example\",\n                tenant_id=\"tenant_id_example\",\n                tenant_name=\"tenant_name_example\",\n                bundle_name=\"bundle_name_example\",\n                entitlement_name=\"entitlement_name_example\",\n                region=Region(\n                    id=\"id_example\",\n                    time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    owner_id=\"owner_id_example\",\n                    tenant_id=\"tenant_id_example\",\n                    tenant_name=\"tenant_name_example\",\n                    code=\"code_example\",\n                    country=Country(\n                        id=\"id_example\",\n                        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                        owner_id=\"owner_id_example\",\n                        tenant_id=\"tenant_id_example\",\n                        tenant_name=\"tenant_name_example\",\n                        code=\"code_example\",\n                        name=\"name_example\",\n                        region=\"region_example\",\n                    ),\n                    city_name=\"city_name_example\",\n                ),\n            ),\n            self_managed_storage_configuration=StorageConfiguration(\n                id=\"id_example\",\n                time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                owner_id=\"owner_id_example\",\n                tenant_id=\"tenant_id_example\",\n                tenant_name=\"tenant_name_example\",\n                name=\"name_example\",\n                description=\"description_example\",\n                type=\"AWS_S3\",\n                status=\"INITIALIZING\",\n                error_message=\"error_message_example\",\n                region=Region(\n                    id=\"id_example\",\n                    time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    owner_id=\"owner_id_example\",\n                    tenant_id=\"tenant_id_example\",\n                    tenant_name=\"tenant_name_example\",\n                    code=\"code_example\",\n                    country=Country(\n                        id=\"id_example\",\n                        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                        owner_id=\"owner_id_example\",\n                        tenant_id=\"tenant_id_example\",\n                        tenant_name=\"tenant_name_example\",\n                        code=\"code_example\",\n                        name=\"name_example\",\n                        region=\"region_example\",\n                    ),\n                    city_name=\"city_name_example\",\n                ),\n                is_default=True,\n            ),\n            analysis_priority=\"LOW\",\n            metadata_model=MetadataModel(\n                id=\"id_example\",\n                time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                owner_id=\"owner_id_example\",\n                tenant_id=\"tenant_id_example\",\n                tenant_name=\"tenant_name_example\",\n                name=\"name_example\",\n                description=\"description_example\",\n                state=\"DRAFT\",\n                parent_model_id=\"parent_model_id_example\",\n            ),\n            application=Application(\n                id=\"id_example\",\n                name=\"name_example\",\n                type=\"MAIN\",\n                display_name=\"display_name_example\",\n            ),\n            project_owner=\"project_owner_example\",\n        ),\n    ) # UploadRule | The local folder where to write the data. Leading or trailing spaces are not accepted.\n    if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update an upload rule.\n        api_response = api_instance.update_upload_rule(connector_id, upload_rule_id, upload_rule)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;update_upload_rule: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update an upload rule.\n        api_response = api_instance.update_upload_rule(connector_id, upload_rule_id, upload_rule, if_match=if_match)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ConnectorApi-&gt;update_upload_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ConnectorApi/#parameters_15","title":"Parameters","text":"Name Type Description Notes connector_id str upload_rule_id str upload_rule UploadRule The local folder where to write the data. Leading or trailing spaces are not accepted. if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional]"},{"location":"v2/docs/ConnectorApi/#return-type_15","title":"Return type","text":"<p>UploadRule</p>"},{"location":"v2/docs/ConnectorApi/#authorization_15","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ConnectorApi/#http-request-headers_15","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ConnectorApi/#http-response-details_15","title":"HTTP response details","text":"Status code Description Response headers 200 The upload rule is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ConnectorList/","title":"ConnectorList","text":""},{"location":"v2/docs/ConnectorList/#properties","title":"Properties","text":"Name Type Description Notes items [Connector] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Country/","title":"Country","text":""},{"location":"v2/docs/Country/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str The country code as defined by ISO. name str The full name of the country. region str The region where the country belong to. tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateAnalysisCreationBatch/","title":"CreateAnalysisCreationBatch","text":""},{"location":"v2/docs/CreateAnalysisCreationBatch/#properties","title":"Properties","text":"Name Type Description Notes cwl_items [CreateCwlAnalysis] [optional] nextflow_items [CreateNextflowAnalysis] [optional] nextflow_json_items [CreateNextflowJsonAnalysis] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateAnalysisTag/","title":"CreateAnalysisTag","text":""},{"location":"v2/docs/CreateAnalysisTag/#properties","title":"Properties","text":"Name Type Description Notes technical_tags [str, none_type], none_type Technical tags [optional] user_tags [str, none_type], none_type User tags [optional] reference_tags [str, none_type], none_type Reference tags [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateBundle/","title":"CreateBundle","text":""},{"location":"v2/docs/CreateBundle/#properties","title":"Properties","text":"Name Type Description Notes name str bundle_release_version str region_id str bundle_status str categories [str] category tags as string array short_description str, none_type [optional] bundle_version_comment str, none_type [optional] metadata_model_id str, none_type [optional] links Links [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateBundleDataLinkingBatch/","title":"CreateBundleDataLinkingBatch","text":""},{"location":"v2/docs/CreateBundleDataLinkingBatch/#properties","title":"Properties","text":"Name Type Description Notes items [CreateBundleDataLinkingBatchItem] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateBundleDataLinkingBatchItem/","title":"CreateBundleDataLinkingBatchItem","text":""},{"location":"v2/docs/CreateBundleDataLinkingBatchItem/#properties","title":"Properties","text":"Name Type Description Notes data_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateBundleDataUnlinkingBatch/","title":"CreateBundleDataUnlinkingBatch","text":""},{"location":"v2/docs/CreateBundleDataUnlinkingBatch/#properties","title":"Properties","text":"Name Type Description Notes items [CreateBundleDataUnlinkingBatchItem] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateBundleDataUnlinkingBatchItem/","title":"CreateBundleDataUnlinkingBatchItem","text":""},{"location":"v2/docs/CreateBundleDataUnlinkingBatchItem/#properties","title":"Properties","text":"Name Type Description Notes data_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateConnector/","title":"CreateConnector","text":""},{"location":"v2/docs/CreateConnector/#properties","title":"Properties","text":"Name Type Description Notes code str active bool mode str The mode the connector runs in. os str The target OS of the original connector installer. description str, none_type The general description of the connector instance including its purpose. [optional] max_bandwidth float, none_type The maximum bandwidth defined in MB per second. [optional] max_concurrent_transfers int, none_type The maximum amount of concurrent transfers that this connector can execute. [optional]  if omitted the server will use the default value of 2 any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateCustomEvent/","title":"CreateCustomEvent","text":""},{"location":"v2/docs/CreateCustomEvent/#properties","title":"Properties","text":"Name Type Description Notes code str The event code that should match a custom subscription. content {str: (bool, date, datetime, dict, float, int, list, str, none_type)} The content that will be forwarded to the configured custom subscription destinations. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateCustomNotificationSubscription/","title":"CreateCustomNotificationSubscription","text":""},{"location":"v2/docs/CreateCustomNotificationSubscription/#properties","title":"Properties","text":"Name Type Description Notes custom_event_code str The custom event code to subscribe to enabled bool Should this subscription be enabled or not? notification_channel_id str The id of the notification channel used to send on filter_expression str, none_type To be used when a notification applies to specific conditions. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateCwlAnalysis/","title":"CreateCwlAnalysis","text":""},{"location":"v2/docs/CreateCwlAnalysis/#properties","title":"Properties","text":"Name Type Description Notes user_reference str The user-reference of the analysis. This should be something meaningful for the user. pipeline_id str The pipeline for which an analysis will be created. analysis_input CwlAnalysisInput tags CreateAnalysisTag [optional] analysis_storage_id str, none_type The id of the storage to use for the analysis. [optional] output_parent_folder_id str, none_type The id or the urn of the folder in which the output folder should be created. [optional] analysis_output [AnalysisOutputMapping], none_type [optional] activation_code_detail_id str, none_type Indicates under which activation code the pipeline is executed. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateCwlJsonAnalysis/","title":"CreateCwlJsonAnalysis","text":""},{"location":"v2/docs/CreateCwlJsonAnalysis/#properties","title":"Properties","text":"Name Type Description Notes user_reference str The user-reference of the analysis. This should be something meaningful for the user. pipeline_id str The pipeline for which an analysis will be created. input_form_values CwlJsonAnalysisInput tags CreateAnalysisTag [optional] analysis_storage_id str, none_type The id of the storage to use for the analysis. [optional] output_parent_folder_id str, none_type The id or the urn of the folder in which the output folder should be created. [optional] analysis_output [AnalysisOutputMapping], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateCwlWithJsonInputAnalysis/","title":"CreateCwlWithJsonInputAnalysis","text":""},{"location":"v2/docs/CreateCwlWithJsonInputAnalysis/#properties","title":"Properties","text":"Name Type Description Notes user_reference str The user-reference of the analysis. This should be something meaningful for the user. pipeline_id str The pipeline for which an analysis will be created. analysis_input CwlAnalysisWithJsonInput tags CreateAnalysisTag [optional] analysis_storage_id str, none_type The id of the storage to use for the analysis. [optional] output_parent_folder_id str, none_type The id or the urn of the folder in which the output folder should be created. [optional] analysis_output [AnalysisOutputMapping], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateCwlWithStructuredInputAnalysis/","title":"CreateCwlWithStructuredInputAnalysis","text":""},{"location":"v2/docs/CreateCwlWithStructuredInputAnalysis/#properties","title":"Properties","text":"Name Type Description Notes user_reference str The user-reference of the analysis. This should be something meaningful for the user. pipeline_id str The pipeline for which an analysis will be created. analysis_input CwlAnalysisWithStructuredInput tags CreateAnalysisTag [optional] analysis_storage_id str, none_type The id of the storage to use for the analysis. [optional] output_parent_folder_id str, none_type The id or the urn of the folder in which the output folder should be created. [optional] analysis_output [AnalysisOutputMapping], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateData/","title":"CreateData","text":""},{"location":"v2/docs/CreateData/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the file/folder as how it will be created. data_type str folder_id str, none_type The id of the folder you want to create this new data in. Alternatively, the folderPath attribute could be used as well for this. [optional] folder_path str, none_type The absolute path of the folder you want to create this new data in which must end with '/'. Alternatively, the folderId attribute could be used as well for this. In case the folder path does not yet exist, it will be automatically created. [optional] format_code str, none_type The code of the format you would like to assign at creation time. This is only allowed for file data. If not specified, auto format assignment will be done. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateDownloadRule/","title":"CreateDownloadRule","text":""},{"location":"v2/docs/CreateDownloadRule/#properties","title":"Properties","text":"Name Type Description Notes code str sequence int Defines the order of the rule. target_local_folder str The local folder where to write the data. active bool, none_type [optional] description str, none_type [optional] format_code str, none_type Regular expression to filter which format this rule applies to. [optional] project_name str, none_type Regular expression to filter which project this rule applies to. [optional] file_name_expression str, none_type Will allow the filename to be modified including a set of variables [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateExternalDockerImage/","title":"CreateExternalDockerImage","text":""},{"location":"v2/docs/CreateExternalDockerImage/#properties","title":"Properties","text":"Name Type Description Notes url str name str version str type str description str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateFileAndTemporaryCredentials/","title":"CreateFileAndTemporaryCredentials","text":""},{"location":"v2/docs/CreateFileAndTemporaryCredentials/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the file as how it will be created. folder_id str, none_type The id of the folder you want to create this new file in. Alternatively, the folderPath attribute could be used as well for this. [optional] folder_path str, none_type The absolute path of the folder you want to create this new file in which must end with '/'. Alternatively, the folderId attribute could be used as well for this. In case the folder path does not yet exist, it will be automatically created. [optional] format_code str, none_type The code of the format you would like to assign at creation time. If not specified, auto format assignment will be done. [optional] temporary_credentials CreateTemporaryCredentials [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateFileAndUploadUrl/","title":"CreateFileAndUploadUrl","text":""},{"location":"v2/docs/CreateFileAndUploadUrl/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the file as how it will be created. folder_id str, none_type The id of the folder you want to create this new file in. Alternatively, the folderPath attribute could be used as well for this. [optional] folder_path str, none_type The absolute path of the folder you want to create this new file in which must end with '/'. Alternatively, the folderId attribute could be used as well for this. In case the folder path does not yet exist, it will be automatically created. [optional] format_code str, none_type The code of the format you would like to assign at creation time. If not specified, auto format assignment will be done. [optional] file_type str, none_type The expected content type for the upload, to include in the upload url. [optional] hash str, none_type The expected md5 hash for the upload content, to include in the upload url. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateFileData/","title":"CreateFileData","text":""},{"location":"v2/docs/CreateFileData/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the file as how it will be created. folder_id str, none_type The id of the folder you want to create this new file in. Alternatively, the folderPath attribute could be used as well for this. [optional] folder_path str, none_type The absolute path of the folder you want to create this new file in which must end with '/'. Alternatively, the folderId attribute could be used as well for this. In case the folder path does not yet exist, it will be automatically created. [optional] format_code str, none_type The code of the format you would like to assign at creation time. If not specified, auto format assignment will be done. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateFolder/","title":"CreateFolder","text":""},{"location":"v2/docs/CreateFolder/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the folder as how it will be created. folder_id str, none_type The id of the folder you want to create this new folder in. Alternatively, the folderPath attribute could be used as well for this. [optional] folder_path str, none_type The absolute path of the folder you want to create this new folder in which must end with '/'. Alternatively, the folderId attribute could be used as well for this. In case the folder path does not yet exist, it will be automatically created. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateFolderAndTemporaryCredentials/","title":"CreateFolderAndTemporaryCredentials","text":""},{"location":"v2/docs/CreateFolderAndTemporaryCredentials/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the folder as how it will be created. folder_id str, none_type The id of the folder you want to create this new folder in. Alternatively, the folderPath attribute could be used as well for this. [optional] folder_path str, none_type The absolute path of the folder you want to create this new folder in which must end with '/'. Alternatively, the folderId attribute could be used as well for this. In case the folder path does not yet exist, it will be automatically created. [optional] non_indexed bool, none_type If you want to create a non-indexed folder. Only possible as a top-level folder, which means the folderId and folderPath attributes are not allowed. [optional]  if omitted the server will use the default value of False temporary_credentials CreateTemporaryCredentials [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateInternalDockerImage/","title":"CreateInternalDockerImage","text":""},{"location":"v2/docs/CreateInternalDockerImage/#properties","title":"Properties","text":"Name Type Description Notes docker_data_id str The id of the data for which an Docker image will be created. docker_data_project_id str The id of the project where the Docker data resides. name str version str type str regions [str] The UUID of the regions where the Docker image will be made available. description str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateNextflowAnalysis/","title":"CreateNextflowAnalysis","text":""},{"location":"v2/docs/CreateNextflowAnalysis/#properties","title":"Properties","text":"Name Type Description Notes user_reference str The user-reference of the analysis. This should be something meaningful for the user. pipeline_id str The pipeline for which an analysis will be created. analysis_input NextflowAnalysisInput tags CreateAnalysisTag [optional] analysis_storage_id str, none_type The id of the storage to use for the analysis. [optional] output_parent_folder_id str, none_type The id or the urn of the folder in which the output folder should be created. [optional] analysis_output [AnalysisOutputMapping], none_type [optional] activation_code_detail_id str, none_type Indicates under which activation code the pipeline is executed. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateNextflowJsonAnalysis/","title":"CreateNextflowJsonAnalysis","text":""},{"location":"v2/docs/CreateNextflowJsonAnalysis/#properties","title":"Properties","text":"Name Type Description Notes user_reference str The user-reference of the analysis. This should be something meaningful for the user. pipeline_id str The pipeline for which an analysis will be created. input_form_values NextflowJsonAnalysisInput tags CreateAnalysisTag [optional] analysis_storage_id str, none_type The id of the storage to use for the analysis. [optional] output_parent_folder_id str, none_type The id or the urn of the folder in which the output folder should be created. [optional] analysis_output [AnalysisOutputMapping], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateNextflowWithCustomInputAnalysis/","title":"CreateNextflowWithCustomInputAnalysis","text":""},{"location":"v2/docs/CreateNextflowWithCustomInputAnalysis/#properties","title":"Properties","text":"Name Type Description Notes user_reference str The user-reference of the analysis. This should be something meaningful for the user. pipeline_id str The pipeline for which an analysis will be created. analysis_input NextflowAnalysisWithCustomInput tags CreateAnalysisTag [optional] analysis_storage_id str, none_type The id of the storage to use for the analysis. [optional] output_parent_folder_id str, none_type The id or the urn of the folder in which the output folder should be created. [optional] analysis_output [AnalysisOutputMapping], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateNonIndexedFolder/","title":"CreateNonIndexedFolder","text":""},{"location":"v2/docs/CreateNonIndexedFolder/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the non indexed folder. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateNotificationChannel/","title":"CreateNotificationChannel","text":""},{"location":"v2/docs/CreateNotificationChannel/#properties","title":"Properties","text":"Name Type Description Notes enabled bool Should this channel be enabled or not? type str The type of delivery target (MAIL, SQS, SNS, HTTP, ...) address str The address where to send a notification to (email address, url, ...) aws_region str, none_type The AWS region of the SNS notification channel [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateNotificationSubscription/","title":"CreateNotificationSubscription","text":""},{"location":"v2/docs/CreateNotificationSubscription/#properties","title":"Properties","text":"Name Type Description Notes event_code str The event code to subscribe to enabled bool Should this subscription be enabled or not? notification_channel_id str The ID of the notification channel used to send on payload_version str, none_type The version of the notification event payload in case multiple versions exist. For analysis events possible values are [V3,V4] [optional] filter_expression str, none_type To be used when a notification applies to specific conditions. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateProject/","title":"CreateProject","text":""},{"location":"v2/docs/CreateProject/#properties","title":"Properties","text":"Name Type Description Notes name str region_id str The region of the project. All data and pipeline executions will reside in this region. billing_mode str The billing mode of the project. It determines who pays for the costs linked to the project. data_sharing_enabled bool Indicates whether the Data and Samples created in this Project can be linked to other Projects. storage_bundle_id str short_description str, none_type [optional] information str, none_type Information about the project. Note that the value of this field can be arbitrary large. [optional] project_owner_id str, none_type Owner of the project. Defaults to the current user. [optional] tags ProjectTag [optional] metadata_model_id str, none_type [optional] storage_configuration_id str, none_type An optional storage configuration id to have self managed storage. [optional] storage_configuration_subfolder str, none_type An optional subfolder that determines the object prefix of your self managed storage.  If not used, you will not be able to use this storage configuration for any future projects. [optional] analysis_priority str, none_type Indicates the priority given to a project and its analyses within a single tenant, where MEDIUM is the default value. [optional]  if omitted the server will use the default value of \"MEDIUM\" any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateProjectDataCopyBatch/","title":"CreateProjectDataCopyBatch","text":""},{"location":"v2/docs/CreateProjectDataCopyBatch/#properties","title":"Properties","text":"Name Type Description Notes items [CreateProjectDataCopyBatchItem] copy_user_tags bool copy_technical_tags bool copy_instrument_info bool action_on_exist str only applicable on files, not on folders destination_folder_id str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateProjectDataCopyBatchItem/","title":"CreateProjectDataCopyBatchItem","text":""},{"location":"v2/docs/CreateProjectDataCopyBatchItem/#properties","title":"Properties","text":"Name Type Description Notes data_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateProjectDataLinkingBatch/","title":"CreateProjectDataLinkingBatch","text":""},{"location":"v2/docs/CreateProjectDataLinkingBatch/#properties","title":"Properties","text":"Name Type Description Notes items [CreateProjectDataLinkingBatchItem] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateProjectDataLinkingBatchItem/","title":"CreateProjectDataLinkingBatchItem","text":""},{"location":"v2/docs/CreateProjectDataLinkingBatchItem/#properties","title":"Properties","text":"Name Type Description Notes data_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateProjectDataMoveBatch/","title":"CreateProjectDataMoveBatch","text":""},{"location":"v2/docs/CreateProjectDataMoveBatch/#properties","title":"Properties","text":"Name Type Description Notes items [CreateProjectDataMoveBatchItem] destination_folder_id str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateProjectDataMoveBatchItem/","title":"CreateProjectDataMoveBatchItem","text":""},{"location":"v2/docs/CreateProjectDataMoveBatchItem/#properties","title":"Properties","text":"Name Type Description Notes data_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateProjectDataUnlinkingBatch/","title":"CreateProjectDataUnlinkingBatch","text":""},{"location":"v2/docs/CreateProjectDataUnlinkingBatch/#properties","title":"Properties","text":"Name Type Description Notes items [CreateProjectDataUnlinkingBatchItem] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateProjectDataUnlinkingBatchItem/","title":"CreateProjectDataUnlinkingBatchItem","text":""},{"location":"v2/docs/CreateProjectDataUnlinkingBatchItem/#properties","title":"Properties","text":"Name Type Description Notes data_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateProjectDataUpdateBatch/","title":"CreateProjectDataUpdateBatch","text":""},{"location":"v2/docs/CreateProjectDataUpdateBatch/#properties","title":"Properties","text":"Name Type Description Notes data_update_groups [DataUpdateGroup] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateProjectPermission/","title":"CreateProjectPermission","text":""},{"location":"v2/docs/CreateProjectPermission/#properties","title":"Properties","text":"Name Type Description Notes role_project str role_flow str role_base str role_bench str membership_type str How users are invited to the project upload_allowed bool Indicates if uploading data is allowed or not. download_allowed bool Indicates if downloading data is allowed or not. user_id str, none_type the id of the user that should be given access, required when membershipType is USER [optional] email_address str, none_type The email to invite a user on, required when membershipType is EMAIL [optional] workgroup_id str, none_type the id of the workgroup to give access, required when membershipType is WORKGROUP [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateProjectPermissionV4/","title":"CreateProjectPermissionV4","text":""},{"location":"v2/docs/CreateProjectPermissionV4/#properties","title":"Properties","text":"Name Type Description Notes role_project str role_flow str role_base str role_bench str membership_type str How users are invited to the project upload_allowed bool Indicates if uploading data is allowed or not. download_allowed bool Indicates if downloading data is allowed or not. user_id str, none_type the id of the user that should be given access, required when membershipType is USER [optional] email_address str, none_type The email to invite a user on, required when membershipType is EMAIL [optional] workgroup_id str, none_type the id of the workgroup to give access, required when membershipType is WORKGROUP [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateSample/","title":"CreateSample","text":""},{"location":"v2/docs/CreateSample/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the sample. description str, none_type The description of the sample. [optional] tags OptionalSampleTags [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateSampleCreationBatch/","title":"CreateSampleCreationBatch","text":""},{"location":"v2/docs/CreateSampleCreationBatch/#properties","title":"Properties","text":"Name Type Description Notes items [CreateSampleCreationBatchSampleItem] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateSampleCreationBatchDataItem/","title":"CreateSampleCreationBatchDataItem","text":"<p>The data to be linked to the new sample.</p>"},{"location":"v2/docs/CreateSampleCreationBatchDataItem/#properties","title":"Properties","text":"Name Type Description Notes data_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateSampleCreationBatchSampleItem/","title":"CreateSampleCreationBatchSampleItem","text":""},{"location":"v2/docs/CreateSampleCreationBatchSampleItem/#properties","title":"Properties","text":"Name Type Description Notes sample_to_create CreateSample complete_sample bool Indicates whether the sample must be completed. data_to_link [CreateSampleCreationBatchDataItem], none_type The data to be linked to the new sample. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateStorageConfiguration/","title":"CreateStorageConfiguration","text":""},{"location":"v2/docs/CreateStorageConfiguration/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the configuration storage_credential_id str The id of the storage credential region_id str The id of the region where the bucket will be located type str The type of configuration defaults to \"AWS_S3\" description str, none_type An optional description [optional] aws_details AWSDetails [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateStorageCredential/","title":"CreateStorageCredential","text":""},{"location":"v2/docs/CreateStorageCredential/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the credentials type str The type of the credentials defaults to \"AWS_USER\" aws_credentials AwsCredentials [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateTemporaryCredentials/","title":"CreateTemporaryCredentials","text":""},{"location":"v2/docs/CreateTemporaryCredentials/#properties","title":"Properties","text":"Name Type Description Notes credentials_format str, none_type The format in which temporary credentials have to be returned. If not provided, temporary credentials will be returned in a cloud specific format. [optional]  if omitted the server will use the default value of \"RCLONE\" read_only_credentials bool, none_type The temporary credentials will be read-only. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateTermsOfUse/","title":"CreateTermsOfUse","text":""},{"location":"v2/docs/CreateTermsOfUse/#properties","title":"Properties","text":"Name Type Description Notes terms_of_use str Terms of Use for a bundle. Supports plain text or HTML. requires_user_acceptance bool Flag indicating whether the Terms of Use should be accepted before using/viewing the bundle. release_version str Version number of the Terms of Use. reset_acceptance_records bool Do you want to reset the acceptance records. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CreateUploadRule/","title":"CreateUploadRule","text":""},{"location":"v2/docs/CreateUploadRule/#properties","title":"Properties","text":"Name Type Description Notes code str local_folder str The local folder to monitor. Files in this folder on your local environment will be uploaded to the specified project. Only files matching the filePattern will be uploaded. file_pattern str The regular expression to match a file name. eg: to match all files use '.*' project_id str The project to which the data will be uploaded. active bool, none_type [optional] description str, none_type [optional] data_format_id str, none_type The format which will be assigned to the uploaded data. If not specified, an auto-detection of the format will be done. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CustomNotificationSubscription/","title":"CustomNotificationSubscription","text":""},{"location":"v2/docs/CustomNotificationSubscription/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str custom_event_code str The custom event code to subscribe to enabled bool Should this subscription be enabled or not? notification_channel NotificationChannel tenant_name str, none_type [optional] filter_expression str, none_type To be used when a notification applies to specific conditions. [optional] application ApplicationV4 [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CustomNotificationSubscriptionList/","title":"CustomNotificationSubscriptionList","text":""},{"location":"v2/docs/CustomNotificationSubscriptionList/#properties","title":"Properties","text":"Name Type Description Notes items [CustomNotificationSubscription] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CwlAnalysisInput/","title":"CwlAnalysisInput","text":"<p>This object contains a \\\"oneOf\\\" construct. With the \\\"objectType\\\" attribute you can specify which object type you want to provide. Use \\\"STRUCTURED\\\" for type \\\"CreateAnalysisStructuredInput\\\" or use \\\"JSON\\\" for type \\\"CreateAnalysisJsonInput\\\".</p>"},{"location":"v2/docs/CwlAnalysisInput/#properties","title":"Properties","text":"Name Type Description Notes object_type str parameters [AnalysisParameterInput], none_type [optional] reference_data_parameters [AnalysisReferenceDataParameter], none_type [optional] data_ids [str] [optional] mounts [AnalysisInputDataMount], none_type [optional] external_data [AnalysisInputExternalData], none_type [optional] inputs [AnalysisDataInput] [optional] input_json str Contains the input JSON, as an escaped JSON String. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CwlAnalysisInputJson/","title":"CwlAnalysisInputJson","text":""},{"location":"v2/docs/CwlAnalysisInputJson/#properties","title":"Properties","text":"Name Type Description Notes input_json str The input json of the CWL analysis. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CwlAnalysisJsonInput/","title":"CwlAnalysisJsonInput","text":""},{"location":"v2/docs/CwlAnalysisJsonInput/#properties","title":"Properties","text":"Name Type Description Notes object_type str input_json str Contains the input JSON, as an escaped JSON String. data_ids [str] [optional] mounts [AnalysisInputDataMount], none_type [optional] external_data [AnalysisInputExternalData], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CwlAnalysisOutputJson/","title":"CwlAnalysisOutputJson","text":""},{"location":"v2/docs/CwlAnalysisOutputJson/#properties","title":"Properties","text":"Name Type Description Notes output_json str The output json of the CWL analysis. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CwlAnalysisStructuredInput/","title":"CwlAnalysisStructuredInput","text":""},{"location":"v2/docs/CwlAnalysisStructuredInput/#properties","title":"Properties","text":"Name Type Description Notes object_type str inputs [AnalysisDataInput] parameters [AnalysisParameterInput], none_type [optional] reference_data_parameters [AnalysisReferenceDataParameter], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CwlAnalysisWithJsonInput/","title":"CwlAnalysisWithJsonInput","text":""},{"location":"v2/docs/CwlAnalysisWithJsonInput/#properties","title":"Properties","text":"Name Type Description Notes input_json str Contains the input JSON, as an escaped JSON String. data_ids [str] [optional] mounts [AnalysisInputDataMount], none_type [optional] external_data [AnalysisInputExternalData], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CwlAnalysisWithStructuredInput/","title":"CwlAnalysisWithStructuredInput","text":""},{"location":"v2/docs/CwlAnalysisWithStructuredInput/#properties","title":"Properties","text":"Name Type Description Notes inputs [AnalysisDataInput] parameters [AnalysisParameterInput], none_type [optional] reference_data_parameters [AnalysisReferenceDataParameter], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CwlJsonAnalysisInput/","title":"CwlJsonAnalysisInput","text":""},{"location":"v2/docs/CwlJsonAnalysisInput/#properties","title":"Properties","text":"Name Type Description Notes fields [InputFormFieldValues] [optional] groups [InputFormGroup] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/CwlToolDefinitionList/","title":"CwlToolDefinitionList","text":""},{"location":"v2/docs/CwlToolDefinitionList/#properties","title":"Properties","text":"Name Type Description Notes items [CWLToolDefinition] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Data/","title":"Data","text":""},{"location":"v2/docs/Data/#properties","title":"Properties","text":"Name Type Description Notes id str The id of the file/folder as it was uploaded. urn str, none_type The URN of this data. The format is urn:ilmn:ica:region:\\&lt;ID of the region\\&gt;:data:\\&lt;ID of the data\\&gt;#\\&lt;optional data path\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted. [optional] details DataDetails [optional] folder_details FolderDetails [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataApi/","title":"libica.openapi.v2.DataApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_download_url_for_data_without_project_context POST /api/data/{dataUrn}:createDownloadUrl Retrieve a download URL for this data. create_inline_view_url_for_data_without_project_context POST /api/data/{dataUrn}:createInlineViewUrl Retrieve an URL for this data to use for inline view in a browser. get_data GET /api/data/{dataUrn} Retrieve a data."},{"location":"v2/docs/DataApi/#create_download_url_for_data_without_project_context","title":"create_download_url_for_data_without_project_context","text":"<p>Download create_download_url_for_data_without_project_context(data_urn)</p> <p>Retrieve a download URL for this data.</p> <p>Can be used to download a file directly from the region where it is located, no connector is needed. Not applicable for Folder.</p>"},{"location":"v2/docs/DataApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import data_api\nfrom libica.openapi.v2.model.download import Download\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = data_api.DataApi(api_client)\n    data_urn = \"dataUrn_example\" # str | The format is urn:ilmn:ica:region:\\\\&lt;ID of the region\\\\&gt;:data:\\\\&lt;ID of the data\\\\&gt;#\\\\&lt;optional data path\\\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted.\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a download URL for this data.\n        api_response = api_instance.create_download_url_for_data_without_project_context(data_urn)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling DataApi-&gt;create_download_url_for_data_without_project_context: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/DataApi/#parameters","title":"Parameters","text":"Name Type Description Notes data_urn str The format is urn:ilmn:ica:region:\\&lt;ID of the region\\&gt;:data:\\&lt;ID of the data\\&gt;#\\&lt;optional data path\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted."},{"location":"v2/docs/DataApi/#return-type","title":"Return type","text":"<p>Download</p>"},{"location":"v2/docs/DataApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/DataApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/DataApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The download URL is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/DataApi/#create_inline_view_url_for_data_without_project_context","title":"create_inline_view_url_for_data_without_project_context","text":"<p>InlineView create_inline_view_url_for_data_without_project_context(data_urn)</p> <p>Retrieve an URL for this data to use for inline view in a browser.</p> <p>Can be used to view a file directly from the region where it is located, no connector is needed.</p>"},{"location":"v2/docs/DataApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import data_api\nfrom libica.openapi.v2.model.inline_view import InlineView\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = data_api.DataApi(api_client)\n    data_urn = \"dataUrn_example\" # str | The format is urn:ilmn:ica:region:\\\\&lt;ID of the region\\\\&gt;:data:\\\\&lt;ID of the data\\\\&gt;#\\\\&lt;optional data path\\\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted.\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve an URL for this data to use for inline view in a browser.\n        api_response = api_instance.create_inline_view_url_for_data_without_project_context(data_urn)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling DataApi-&gt;create_inline_view_url_for_data_without_project_context: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/DataApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes data_urn str The format is urn:ilmn:ica:region:\\&lt;ID of the region\\&gt;:data:\\&lt;ID of the data\\&gt;#\\&lt;optional data path\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted."},{"location":"v2/docs/DataApi/#return-type_1","title":"Return type","text":"<p>InlineView</p>"},{"location":"v2/docs/DataApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/DataApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/DataApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The inline view URL is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/DataApi/#get_data","title":"get_data","text":"<p>Data get_data(data_urn)</p> <p>Retrieve a data.</p>"},{"location":"v2/docs/DataApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import data_api\nfrom libica.openapi.v2.model.data import Data\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = data_api.DataApi(api_client)\n    data_urn = \"dataUrn_example\" # str | The format is urn:ilmn:ica:region:\\\\&lt;ID of the region\\\\&gt;:data:\\\\&lt;ID of the data\\\\&gt;#\\\\&lt;optional data path\\\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted.\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a data.\n        api_response = api_instance.get_data(data_urn)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling DataApi-&gt;get_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/DataApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes data_urn str The format is urn:ilmn:ica:region:\\&lt;ID of the region\\&gt;:data:\\&lt;ID of the data\\&gt;#\\&lt;optional data path\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted."},{"location":"v2/docs/DataApi/#return-type_2","title":"Return type","text":"<p>Data</p>"},{"location":"v2/docs/DataApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/DataApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/DataApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The data is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/DataDetails/","title":"DataDetails","text":""},{"location":"v2/docs/DataDetails/#properties","title":"Properties","text":"Name Type Description Notes time_created datetime time_modified datetime tenant_id str owning_project_id str name str The name of the file/folder as it was uploaded. status str tags DataTag data_type str creator_id str, none_type [optional] tenant_name str, none_type [optional] owning_project_name str, none_type [optional] path str, none_type The user friendly path of the parent of this data. [optional] file_size_in_bytes int, none_type The size of the file in bytes. Folders do not have a size. [optional] format DataFormat [optional] object_e_tag str, none_type The file's ETag, as received from the cloud provider. Not to be confused with the ETag reponse header of this API. [optional] stored_for_the_first_time_at datetime, none_type Specifies when the data object was stored for the first time [optional] region Region [optional] application ApplicationV4 [optional] will_be_archived_at datetime, none_type Specifies when the data object will be archived. [optional] will_be_deleted_at datetime, none_type Specifies when the data object will be deleted. [optional] sequencing_run SequencingRun [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataFormat/","title":"DataFormat","text":""},{"location":"v2/docs/DataFormat/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str The code of the format. For example: FASTQ, BAM, ... tenant_name str, none_type [optional] description str, none_type [optional] mime_type str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataFormatApi/","title":"libica.openapi.v2.DataFormatApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_data_formats GET /api/dataFormats Retrieve a list of data formats."},{"location":"v2/docs/DataFormatApi/#get_data_formats","title":"get_data_formats","text":"<p>DataFormatPagedList get_data_formats()</p> <p>Retrieve a list of data formats.</p>"},{"location":"v2/docs/DataFormatApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import data_format_api\nfrom libica.openapi.v2.model.data_format_paged_list import DataFormatPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = data_format_api.DataFormatApi(api_client)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - code (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of data formats.\n        api_response = api_instance.get_data_formats(page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling DataFormatApi-&gt;get_data_formats: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/DataFormatApi/#parameters","title":"Parameters","text":"Name Type Description Notes page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - code [optional]"},{"location":"v2/docs/DataFormatApi/#return-type","title":"Return type","text":"<p>DataFormatPagedList</p>"},{"location":"v2/docs/DataFormatApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/DataFormatApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/DataFormatApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of data formats is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/DataFormatPagedList/","title":"DataFormatPagedList","text":""},{"location":"v2/docs/DataFormatPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [DataFormat] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataIdOrPathList/","title":"DataIdOrPathList","text":""},{"location":"v2/docs/DataIdOrPathList/#properties","title":"Properties","text":"Name Type Description Notes data_ids [str] [optional] data_paths [str] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataList/","title":"DataList","text":""},{"location":"v2/docs/DataList/#properties","title":"Properties","text":"Name Type Description Notes items [Data] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataPagedList/","title":"DataPagedList","text":""},{"location":"v2/docs/DataPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [Data] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataTag/","title":"DataTag","text":""},{"location":"v2/docs/DataTag/#properties","title":"Properties","text":"Name Type Description Notes technical_tags [str, none_type], none_type [optional] user_tags [str, none_type], none_type [optional] connector_tags [str, none_type], none_type [optional] run_in_tags [str, none_type], none_type [optional] run_out_tags [str, none_type], none_type [optional] reference_tags [str, none_type], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataTransfer/","title":"DataTransfer","text":""},{"location":"v2/docs/DataTransfer/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str reference str direction str data_transferred int The data transferred so far in bytes. status str data Data tenant_name str, none_type [optional] connector Connector [optional] protocol str, none_type [optional]  if omitted the server will use the default value of \"HTTPS\" status_message str, none_type A message explaining the reason why the transfer is in the current status. [optional] duration int, none_type The overall duration of of the transfer defined in seconds. [optional] project Project [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataTransferPagedList/","title":"DataTransferPagedList","text":""},{"location":"v2/docs/DataTransferPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [DataTransfer] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataTransfers/","title":"DataTransfers","text":""},{"location":"v2/docs/DataTransfers/#properties","title":"Properties","text":"Name Type Description Notes data_transfers [DataTransfer] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataUpdateGroup/","title":"DataUpdateGroup","text":"<p>Updates to apply.</p>"},{"location":"v2/docs/DataUpdateGroup/#properties","title":"Properties","text":"Name Type Description Notes data_ids [str] user_tags TagUpdate [optional] technical_tags TagUpdate [optional] will_be_archived_at datetime The timestamp when the data should be archived. [optional] will_be_deleted_at datetime The timestamp when the data should be deleted. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataUrl/","title":"DataUrl","text":""},{"location":"v2/docs/DataUrl/#properties","title":"Properties","text":"Name Type Description Notes data_id str The id of the file/folder as it was uploaded. data_urn str The URN of this data. The format is urn:ilmn:ica:region:\\&lt;ID of the region\\&gt;:data:\\&lt;ID of the data\\&gt;#\\&lt;optional data path\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted. url str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataUrlIdList/","title":"DataUrlIdList","text":""},{"location":"v2/docs/DataUrlIdList/#properties","title":"Properties","text":"Name Type Description Notes data_ids [str] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataUrlList/","title":"DataUrlList","text":""},{"location":"v2/docs/DataUrlList/#properties","title":"Properties","text":"Name Type Description Notes items [DataUrl] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataUrlWithPath/","title":"DataUrlWithPath","text":""},{"location":"v2/docs/DataUrlWithPath/#properties","title":"Properties","text":"Name Type Description Notes data_id str The id of the file/folder as it was uploaded. data_urn str The URN of this data. The format is urn:ilmn:ica:region:\\&lt;ID of the region\\&gt;:data:\\&lt;ID of the data\\&gt;#\\&lt;optional data path\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted. data_path str url str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DataUrlWithPathList/","title":"DataUrlWithPathList","text":""},{"location":"v2/docs/DataUrlWithPathList/#properties","title":"Properties","text":"Name Type Description Notes items [DataUrlWithPath] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DockerImage/","title":"DockerImage","text":""},{"location":"v2/docs/DockerImage/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner UserIdentifier tenant TenantIdentifier name str status str type str version str, none_type [optional] description str, none_type [optional] internal_docker_image_settings InternalDockerImageSettings [optional] external_docker_image_settings ExternalDockerImageSettings [optional] bench_settings BenchSettings [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DockerImageAccess/","title":"DockerImageAccess","text":""},{"location":"v2/docs/DockerImageAccess/#properties","title":"Properties","text":"Name Type Description Notes web bool console bool any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DockerImageApi/","title":"libica.openapi.v2.DockerImageApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description add_regions POST /api/dockerImages/{imageId}:addRegions Add regions to an existing Docker image. create_external_docker_image POST /api/dockerImages:createExternal Create an external Docker image. create_internal_docker_image POST /api/dockerImages:createInternal Create an internal Docker image. get_docker_image GET /api/dockerImages/{imageId} Retrieve a Docker image. Only the Docker image the user has access to can be retrieved. get_docker_images GET /api/dockerImages Retrieve a list of Docker images. Only the Docker images the user has access to are returned. remove_regions POST /api/dockerImages/{imageId}:removeRegions Remove regions to an existing Docker image."},{"location":"v2/docs/DockerImageApi/#add_regions","title":"add_regions","text":"<p>add_regions(image_id, docker_image_region_list)</p> <p>Add regions to an existing Docker image.</p>"},{"location":"v2/docs/DockerImageApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import docker_image_api\nfrom libica.openapi.v2.model.docker_image_region_list import DockerImageRegionList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = docker_image_api.DockerImageApi(api_client)\n    image_id = \"imageId_example\" # str | \n    docker_image_region_list = DockerImageRegionList(\n        region_ids=[\n            \"region_ids_example\",\n        ],\n    ) # DockerImageRegionList | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Add regions to an existing Docker image.\n        api_instance.add_regions(image_id, docker_image_region_list)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling DockerImageApi-&gt;add_regions: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/DockerImageApi/#parameters","title":"Parameters","text":"Name Type Description Notes image_id str docker_image_region_list DockerImageRegionList"},{"location":"v2/docs/DockerImageApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/DockerImageApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/DockerImageApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/DockerImageApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The regions are successfully added. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/DockerImageApi/#create_external_docker_image","title":"create_external_docker_image","text":"<p>DockerImage create_external_docker_image(create_external_docker_image)</p> <p>Create an external Docker image.</p>"},{"location":"v2/docs/DockerImageApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import docker_image_api\nfrom libica.openapi.v2.model.docker_image import DockerImage\nfrom libica.openapi.v2.model.create_external_docker_image import CreateExternalDockerImage\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = docker_image_api.DockerImageApi(api_client)\n    create_external_docker_image = CreateExternalDockerImage(\n        url=\"url_example\",\n        name=\"name_example\",\n        version=\"version_example\",\n        description=\"description_example\",\n        type=\"TOOL\",\n    ) # CreateExternalDockerImage | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create an external Docker image.\n        api_response = api_instance.create_external_docker_image(create_external_docker_image)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling DockerImageApi-&gt;create_external_docker_image: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/DockerImageApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes create_external_docker_image CreateExternalDockerImage"},{"location":"v2/docs/DockerImageApi/#return-type_1","title":"Return type","text":"<p>DockerImage</p>"},{"location":"v2/docs/DockerImageApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/DockerImageApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v2/docs/DockerImageApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 201 The Docker image is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/DockerImageApi/#create_internal_docker_image","title":"create_internal_docker_image","text":"<p>DockerImage create_internal_docker_image(create_internal_docker_image)</p> <p>Create an internal Docker image.</p>"},{"location":"v2/docs/DockerImageApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import docker_image_api\nfrom libica.openapi.v2.model.docker_image import DockerImage\nfrom libica.openapi.v2.model.create_internal_docker_image import CreateInternalDockerImage\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = docker_image_api.DockerImageApi(api_client)\n    create_internal_docker_image = CreateInternalDockerImage(\n        docker_data_id=\"docker_data_id_example\",\n        docker_data_project_id=\"docker_data_project_id_example\",\n        name=\"name_example\",\n        version=\"version_example\",\n        description=\"description_example\",\n        type=\"TOOL\",\n        regions=[\n            \"regions_example\",\n        ],\n    ) # CreateInternalDockerImage | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create an internal Docker image.\n        api_response = api_instance.create_internal_docker_image(create_internal_docker_image)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling DockerImageApi-&gt;create_internal_docker_image: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/DockerImageApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes create_internal_docker_image CreateInternalDockerImage"},{"location":"v2/docs/DockerImageApi/#return-type_2","title":"Return type","text":"<p>DockerImage</p>"},{"location":"v2/docs/DockerImageApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/DockerImageApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v2/docs/DockerImageApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 201 The Docker image is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/DockerImageApi/#get_docker_image","title":"get_docker_image","text":"<p>DockerImage get_docker_image(image_id)</p> <p>Retrieve a Docker image. Only the Docker image the user has access to can be retrieved.</p>"},{"location":"v2/docs/DockerImageApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import docker_image_api\nfrom libica.openapi.v2.model.docker_image import DockerImage\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = docker_image_api.DockerImageApi(api_client)\n    image_id = \"imageId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a Docker image. Only the Docker image the user has access to can be retrieved.\n        api_response = api_instance.get_docker_image(image_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling DockerImageApi-&gt;get_docker_image: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/DockerImageApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes image_id str"},{"location":"v2/docs/DockerImageApi/#return-type_3","title":"Return type","text":"<p>DockerImage</p>"},{"location":"v2/docs/DockerImageApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/DockerImageApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v2/docs/DockerImageApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The Docker image is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/DockerImageApi/#get_docker_images","title":"get_docker_images","text":"<p>DockerImageList get_docker_images()</p> <p>Retrieve a list of Docker images. Only the Docker images the user has access to are returned.</p>"},{"location":"v2/docs/DockerImageApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import docker_image_api\nfrom libica.openapi.v2.model.docker_image_list import DockerImageList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = docker_image_api.DockerImageApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve a list of Docker images. Only the Docker images the user has access to are returned.\n        api_response = api_instance.get_docker_images()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling DockerImageApi-&gt;get_docker_images: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/DockerImageApi/#parameters_4","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/DockerImageApi/#return-type_4","title":"Return type","text":"<p>DockerImageList</p>"},{"location":"v2/docs/DockerImageApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/DockerImageApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v2/docs/DockerImageApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The list of Docker images is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/DockerImageApi/#remove_regions","title":"remove_regions","text":"<p>remove_regions(image_id, docker_image_region_list)</p> <p>Remove regions to an existing Docker image.</p>"},{"location":"v2/docs/DockerImageApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import docker_image_api\nfrom libica.openapi.v2.model.docker_image_region_list import DockerImageRegionList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = docker_image_api.DockerImageApi(api_client)\n    image_id = \"imageId_example\" # str | \n    docker_image_region_list = DockerImageRegionList(\n        region_ids=[\n            \"region_ids_example\",\n        ],\n    ) # DockerImageRegionList | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Remove regions to an existing Docker image.\n        api_instance.remove_regions(image_id, docker_image_region_list)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling DockerImageApi-&gt;remove_regions: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/DockerImageApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes image_id str docker_image_region_list DockerImageRegionList"},{"location":"v2/docs/DockerImageApi/#return-type_5","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/DockerImageApi/#authorization_5","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/DockerImageApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/DockerImageApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 204 The regions are successfully removed. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/DockerImageList/","title":"DockerImageList","text":""},{"location":"v2/docs/DockerImageList/#properties","title":"Properties","text":"Name Type Description Notes items [DockerImage] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DockerImageRegion/","title":"DockerImageRegion","text":""},{"location":"v2/docs/DockerImageRegion/#properties","title":"Properties","text":"Name Type Description Notes region RegionV4 [optional] url str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DockerImageRegionList/","title":"DockerImageRegionList","text":""},{"location":"v2/docs/DockerImageRegionList/#properties","title":"Properties","text":"Name Type Description Notes region_ids [str] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Download/","title":"Download","text":""},{"location":"v2/docs/Download/#properties","title":"Properties","text":"Name Type Description Notes url str A pre-signed url which is temporarily available for downloading the data. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DownloadRule/","title":"DownloadRule","text":""},{"location":"v2/docs/DownloadRule/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str sequence int Defines the order of the rule. target_local_folder str The local folder where to write the data. tenant_name str, none_type [optional] active bool, none_type [optional] description str, none_type [optional] format_code str, none_type Regular expression to select which format this rule applies to. [optional] project_name str, none_type Regular expression to select which project this rule applies to. [optional] file_name_expression str, none_type Will allow the filename to be modified including a set of variables [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/DownloadRuleList/","title":"DownloadRuleList","text":""},{"location":"v2/docs/DownloadRuleList/#properties","title":"Properties","text":"Name Type Description Notes items [DownloadRule] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/EntitledBundleApi/","title":"libica.openapi.v2.EntitledBundleApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description accept_terms_of_use_entitled_bundle POST /api/entitledbundles/{entitledBundleId}/termsOfUse:accept Accept terms of use for an entitled bundle get_entitled_bundle GET /api/entitledbundles/{entitledBundleId} Retrieve an entitled bundle. get_entitled_bundle_terms_of_use GET /api/entitledbundles/{entitledBundleId}/termsOfUse Retrieve the last version of terms of use for an entitled bundle. get_entitled_bundle_terms_of_use_acceptance GET /api/entitledbundles/{entitledBundleId}/termsOfUse/userAcceptance/currentUser Retrieve the acceptance record for an entitled bundle for the current user. get_entitled_bundles GET /api/entitledbundles Retrieve a list of entitled bundles."},{"location":"v2/docs/EntitledBundleApi/#accept_terms_of_use_entitled_bundle","title":"accept_terms_of_use_entitled_bundle","text":"<p>accept_terms_of_use_entitled_bundle(entitled_bundle_id)</p> <p>Accept terms of use for an entitled bundle</p>"},{"location":"v2/docs/EntitledBundleApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import entitled_bundle_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = entitled_bundle_api.EntitledBundleApi(api_client)\n    entitled_bundle_id = \"entitledBundleId_example\" # str | The ID of the entitled bundle where the terms of use are accepted of.\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Accept terms of use for an entitled bundle\n        api_instance.accept_terms_of_use_entitled_bundle(entitled_bundle_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling EntitledBundleApi-&gt;accept_terms_of_use_entitled_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/EntitledBundleApi/#parameters","title":"Parameters","text":"Name Type Description Notes entitled_bundle_id str The ID of the entitled bundle where the terms of use are accepted of."},{"location":"v2/docs/EntitledBundleApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/EntitledBundleApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/EntitledBundleApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/EntitledBundleApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The terms of use of the entitled bundle is accepted - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/EntitledBundleApi/#get_entitled_bundle","title":"get_entitled_bundle","text":"<p>Bundle get_entitled_bundle(entitled_bundle_id)</p> <p>Retrieve an entitled bundle.</p>"},{"location":"v2/docs/EntitledBundleApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import entitled_bundle_api\nfrom libica.openapi.v2.model.bundle import Bundle\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = entitled_bundle_api.EntitledBundleApi(api_client)\n    entitled_bundle_id = \"entitledBundleId_example\" # str | The ID of the entitled bundle to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve an entitled bundle.\n        api_response = api_instance.get_entitled_bundle(entitled_bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling EntitledBundleApi-&gt;get_entitled_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/EntitledBundleApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes entitled_bundle_id str The ID of the entitled bundle to retrieve"},{"location":"v2/docs/EntitledBundleApi/#return-type_1","title":"Return type","text":"<p>Bundle</p>"},{"location":"v2/docs/EntitledBundleApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/EntitledBundleApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/EntitledBundleApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The entitled bundle is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/EntitledBundleApi/#get_entitled_bundle_terms_of_use","title":"get_entitled_bundle_terms_of_use","text":"<p>TermsOfUse get_entitled_bundle_terms_of_use(entitled_bundle_id)</p> <p>Retrieve the last version of terms of use for an entitled bundle.</p>"},{"location":"v2/docs/EntitledBundleApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import entitled_bundle_api\nfrom libica.openapi.v2.model.terms_of_use import TermsOfUse\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = entitled_bundle_api.EntitledBundleApi(api_client)\n    entitled_bundle_id = \"entitledBundleId_example\" # str | The ID of the entitled bundle of the terms of use to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the last version of terms of use for an entitled bundle.\n        api_response = api_instance.get_entitled_bundle_terms_of_use(entitled_bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling EntitledBundleApi-&gt;get_entitled_bundle_terms_of_use: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/EntitledBundleApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes entitled_bundle_id str The ID of the entitled bundle of the terms of use to retrieve"},{"location":"v2/docs/EntitledBundleApi/#return-type_2","title":"Return type","text":"<p>TermsOfUse</p>"},{"location":"v2/docs/EntitledBundleApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/EntitledBundleApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/EntitledBundleApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 Terms of use are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/EntitledBundleApi/#get_entitled_bundle_terms_of_use_acceptance","title":"get_entitled_bundle_terms_of_use_acceptance","text":"<p>TermsOfUseAcceptance get_entitled_bundle_terms_of_use_acceptance(entitled_bundle_id)</p> <p>Retrieve the acceptance record for an entitled bundle for the current user.</p>"},{"location":"v2/docs/EntitledBundleApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import entitled_bundle_api\nfrom libica.openapi.v2.model.terms_of_use_acceptance import TermsOfUseAcceptance\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = entitled_bundle_api.EntitledBundleApi(api_client)\n    entitled_bundle_id = \"entitledBundleId_example\" # str | The ID of the entitled bundle of the terms of use acceptance records.\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the acceptance record for an entitled bundle for the current user.\n        api_response = api_instance.get_entitled_bundle_terms_of_use_acceptance(entitled_bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling EntitledBundleApi-&gt;get_entitled_bundle_terms_of_use_acceptance: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/EntitledBundleApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes entitled_bundle_id str The ID of the entitled bundle of the terms of use acceptance records."},{"location":"v2/docs/EntitledBundleApi/#return-type_3","title":"Return type","text":"<p>TermsOfUseAcceptance</p>"},{"location":"v2/docs/EntitledBundleApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/EntitledBundleApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/EntitledBundleApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 Terms of use acceptance is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/EntitledBundleApi/#get_entitled_bundles","title":"get_entitled_bundles","text":"<p>BundlePagedList get_entitled_bundles()</p> <p>Retrieve a list of entitled bundles.</p>"},{"location":"v2/docs/EntitledBundleApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import entitled_bundle_api\nfrom libica.openapi.v2.model.bundle_paged_list import BundlePagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = entitled_bundle_api.EntitledBundleApi(api_client)\n    search = \"search_example\" # str | Search (optional)\n    user_tags = \"userTags_example\" # str | User tags to filter on (optional)\n    technical_tags = \"technicalTags_example\" # str | Technical tags to filter on (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - name - shortDescription (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of entitled bundles.\n        api_response = api_instance.get_entitled_bundles(search=search, user_tags=user_tags, technical_tags=technical_tags, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling EntitledBundleApi-&gt;get_entitled_bundles: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/EntitledBundleApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes search str Search [optional] user_tags str User tags to filter on [optional] technical_tags str Technical tags to filter on [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - name - shortDescription [optional]"},{"location":"v2/docs/EntitledBundleApi/#return-type_4","title":"Return type","text":"<p>BundlePagedList</p>"},{"location":"v2/docs/EntitledBundleApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/EntitledBundleApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/EntitledBundleApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The list of entitled bundles is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/EntitlementDetailApi/","title":"libica.openapi.v2.EntitlementDetailApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description find_all_matching_activation_codes_for_cwl POST /api/activationCodes:findAllMatchingForCwl Search all matching activation code details for a Cwl pipeline. find_all_matching_activation_codes_for_nextflow POST /api/activationCodes:findAllMatchingForNextflow Search all matching activation code details for a Nextflow pipeline. find_best_matching_activation_code_for_cwl POST /api/activationCodes:findBestMatchingForCwl Search the best matching activation code detail for Cwl pipeline. find_best_matching_activation_codes_for_nextflow POST /api/activationCodes:findBestMatchingForNextflow Search the best matching activation code details for Nextflow pipeline."},{"location":"v2/docs/EntitlementDetailApi/#find_all_matching_activation_codes_for_cwl","title":"find_all_matching_activation_codes_for_cwl","text":"<p>ActivationCodeDetailList find_all_matching_activation_codes_for_cwl(search_matching_activation_codes_for_cwl_analysis)</p> <p>Search all matching activation code details for a Cwl pipeline.</p> <p>Endpoint for searching all matching activation code details for a project and an analysis from a Cwl pipeline.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/EntitlementDetailApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import entitlement_detail_api\nfrom libica.openapi.v2.model.activation_code_detail_list import ActivationCodeDetailList\nfrom libica.openapi.v2.model.search_matching_activation_codes_for_cwl_analysis import SearchMatchingActivationCodesForCwlAnalysis\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = entitlement_detail_api.EntitlementDetailApi(api_client)\n    search_matching_activation_codes_for_cwl_analysis = SearchMatchingActivationCodesForCwlAnalysis(\n        project_id=\"project_id_example\",\n        pipeline_id=\"pipeline_id_example\",\n        analysis_input=CwlAnalysisInput(),\n    ) # SearchMatchingActivationCodesForCwlAnalysis | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Search all matching activation code details for a Cwl pipeline.\n        api_response = api_instance.find_all_matching_activation_codes_for_cwl(search_matching_activation_codes_for_cwl_analysis)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling EntitlementDetailApi-&gt;find_all_matching_activation_codes_for_cwl: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/EntitlementDetailApi/#parameters","title":"Parameters","text":"Name Type Description Notes search_matching_activation_codes_for_cwl_analysis SearchMatchingActivationCodesForCwlAnalysis"},{"location":"v2/docs/EntitlementDetailApi/#return-type","title":"Return type","text":"<p>ActivationCodeDetailList</p>"},{"location":"v2/docs/EntitlementDetailApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/EntitlementDetailApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/EntitlementDetailApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The matching activation code details are successfully searched. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/EntitlementDetailApi/#find_all_matching_activation_codes_for_nextflow","title":"find_all_matching_activation_codes_for_nextflow","text":"<p>ActivationCodeDetailList find_all_matching_activation_codes_for_nextflow(search_matching_activation_codes_for_nextflow_analysis)</p> <p>Search all matching activation code details for a Nextflow pipeline.</p> <p>Endpoint for searching all matching activation code details for a project and an analysis from a Nextflow pipeline.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/EntitlementDetailApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import entitlement_detail_api\nfrom libica.openapi.v2.model.activation_code_detail_list import ActivationCodeDetailList\nfrom libica.openapi.v2.model.search_matching_activation_codes_for_nextflow_analysis import SearchMatchingActivationCodesForNextflowAnalysis\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = entitlement_detail_api.EntitlementDetailApi(api_client)\n    search_matching_activation_codes_for_nextflow_analysis = SearchMatchingActivationCodesForNextflowAnalysis(\n        project_id=\"project_id_example\",\n        pipeline_id=\"pipeline_id_example\",\n        analysis_input=NextflowAnalysisInput(\n            inputs=[\n                AnalysisDataInput(\n                    parameter_code=\"parameter_code_example\",\n                    data_ids=[\n                        \"data_ids_example\",\n                    ],\n                    mounts=[\n                        AnalysisInputDataMount(\n                            data_id=\"data_id_example\",\n                            mount_path=\"mount_path_example\",\n                        ),\n                    ],\n                    external_data=[\n                        AnalysisInputExternalData(\n                            url=\"url_example\",\n                            type=\"basespac\",\n                            mount_path=\"mount_path_example\",\n                            s3_details=AnalysisS3DataDetails(\n                                storage_credentials_id=\"storage_credentials_id_example\",\n                            ),\n                            basespace_details=AnalysisBaseSpaceDataDetails(\n                                workgroup_id=\"workgroup_id_example\",\n                                extensions=\"extensions_example\",\n                                path_prefix=\"path_prefix_example\",\n                            ),\n                        ),\n                    ],\n                ),\n            ],\n            parameters=[\n                AnalysisParameterInput(\n                    code=\"code_example\",\n                    value=\"value_example\",\n                    multi_value=[\n                        \"multi_value_example\",\n                    ],\n                ),\n            ],\n            reference_data_parameters=[\n                AnalysisReferenceDataParameter(\n                    parameter_code=\"parameter_code_example\",\n                    reference_data_id=\"reference_data_id_example\",\n                ),\n            ],\n        ),\n    ) # SearchMatchingActivationCodesForNextflowAnalysis | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Search all matching activation code details for a Nextflow pipeline.\n        api_response = api_instance.find_all_matching_activation_codes_for_nextflow(search_matching_activation_codes_for_nextflow_analysis)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling EntitlementDetailApi-&gt;find_all_matching_activation_codes_for_nextflow: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/EntitlementDetailApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes search_matching_activation_codes_for_nextflow_analysis SearchMatchingActivationCodesForNextflowAnalysis"},{"location":"v2/docs/EntitlementDetailApi/#return-type_1","title":"Return type","text":"<p>ActivationCodeDetailList</p>"},{"location":"v2/docs/EntitlementDetailApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/EntitlementDetailApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/EntitlementDetailApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The matching activation code details are successfully searched. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/EntitlementDetailApi/#find_best_matching_activation_code_for_cwl","title":"find_best_matching_activation_code_for_cwl","text":"<p>ActivationCodeDetail find_best_matching_activation_code_for_cwl(search_matching_activation_codes_for_cwl_analysis)</p> <p>Search the best matching activation code detail for Cwl pipeline.</p> <p>Endpoint for searching the best activation code detail for a project and an analysis from a Cwl pipeline.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/EntitlementDetailApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import entitlement_detail_api\nfrom libica.openapi.v2.model.search_matching_activation_codes_for_cwl_analysis import SearchMatchingActivationCodesForCwlAnalysis\nfrom libica.openapi.v2.model.activation_code_detail import ActivationCodeDetail\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = entitlement_detail_api.EntitlementDetailApi(api_client)\n    search_matching_activation_codes_for_cwl_analysis = SearchMatchingActivationCodesForCwlAnalysis(\n        project_id=\"project_id_example\",\n        pipeline_id=\"pipeline_id_example\",\n        analysis_input=CwlAnalysisInput(),\n    ) # SearchMatchingActivationCodesForCwlAnalysis | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Search the best matching activation code detail for Cwl pipeline.\n        api_response = api_instance.find_best_matching_activation_code_for_cwl(search_matching_activation_codes_for_cwl_analysis)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling EntitlementDetailApi-&gt;find_best_matching_activation_code_for_cwl: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/EntitlementDetailApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes search_matching_activation_codes_for_cwl_analysis SearchMatchingActivationCodesForCwlAnalysis"},{"location":"v2/docs/EntitlementDetailApi/#return-type_2","title":"Return type","text":"<p>ActivationCodeDetail</p>"},{"location":"v2/docs/EntitlementDetailApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/EntitlementDetailApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/EntitlementDetailApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The best matching activation code details are successfully searched. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/EntitlementDetailApi/#find_best_matching_activation_codes_for_nextflow","title":"find_best_matching_activation_codes_for_nextflow","text":"<p>ActivationCodeDetail find_best_matching_activation_codes_for_nextflow(search_matching_activation_codes_for_nextflow_analysis)</p> <p>Search the best matching activation code details for Nextflow pipeline.</p> <p>Endpoint for searching the best activation code details for a project and an analysis for a Nextflow pipeline.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/EntitlementDetailApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import entitlement_detail_api\nfrom libica.openapi.v2.model.activation_code_detail import ActivationCodeDetail\nfrom libica.openapi.v2.model.search_matching_activation_codes_for_nextflow_analysis import SearchMatchingActivationCodesForNextflowAnalysis\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = entitlement_detail_api.EntitlementDetailApi(api_client)\n    search_matching_activation_codes_for_nextflow_analysis = SearchMatchingActivationCodesForNextflowAnalysis(\n        project_id=\"project_id_example\",\n        pipeline_id=\"pipeline_id_example\",\n        analysis_input=NextflowAnalysisInput(\n            inputs=[\n                AnalysisDataInput(\n                    parameter_code=\"parameter_code_example\",\n                    data_ids=[\n                        \"data_ids_example\",\n                    ],\n                    mounts=[\n                        AnalysisInputDataMount(\n                            data_id=\"data_id_example\",\n                            mount_path=\"mount_path_example\",\n                        ),\n                    ],\n                    external_data=[\n                        AnalysisInputExternalData(\n                            url=\"url_example\",\n                            type=\"basespac\",\n                            mount_path=\"mount_path_example\",\n                            s3_details=AnalysisS3DataDetails(\n                                storage_credentials_id=\"storage_credentials_id_example\",\n                            ),\n                            basespace_details=AnalysisBaseSpaceDataDetails(\n                                workgroup_id=\"workgroup_id_example\",\n                                extensions=\"extensions_example\",\n                                path_prefix=\"path_prefix_example\",\n                            ),\n                        ),\n                    ],\n                ),\n            ],\n            parameters=[\n                AnalysisParameterInput(\n                    code=\"code_example\",\n                    value=\"value_example\",\n                    multi_value=[\n                        \"multi_value_example\",\n                    ],\n                ),\n            ],\n            reference_data_parameters=[\n                AnalysisReferenceDataParameter(\n                    parameter_code=\"parameter_code_example\",\n                    reference_data_id=\"reference_data_id_example\",\n                ),\n            ],\n        ),\n    ) # SearchMatchingActivationCodesForNextflowAnalysis | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Search the best matching activation code details for Nextflow pipeline.\n        api_response = api_instance.find_best_matching_activation_codes_for_nextflow(search_matching_activation_codes_for_nextflow_analysis)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling EntitlementDetailApi-&gt;find_best_matching_activation_codes_for_nextflow: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/EntitlementDetailApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes search_matching_activation_codes_for_nextflow_analysis SearchMatchingActivationCodesForNextflowAnalysis"},{"location":"v2/docs/EntitlementDetailApi/#return-type_3","title":"Return type","text":"<p>ActivationCodeDetail</p>"},{"location":"v2/docs/EntitlementDetailApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/EntitlementDetailApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/EntitlementDetailApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The best matching activation code details are successfully searched. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/EventCode/","title":"EventCode","text":""},{"location":"v2/docs/EventCode/#properties","title":"Properties","text":"Name Type Description Notes event_code str The event code that can be used for creating event subscriptions description str A short description about the event code any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/EventCodeApi/","title":"libica.openapi.v2.EventCodeApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_event_codes GET /api/eventCodes Retrieve event codes"},{"location":"v2/docs/EventCodeApi/#get_event_codes","title":"get_event_codes","text":"<p>EventCodeList get_event_codes()</p> <p>Retrieve event codes</p>"},{"location":"v2/docs/EventCodeApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import event_code_api\nfrom libica.openapi.v2.model.event_code_list import EventCodeList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = event_code_api.EventCodeApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve event codes\n        api_response = api_instance.get_event_codes()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling EventCodeApi-&gt;get_event_codes: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/EventCodeApi/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/EventCodeApi/#return-type","title":"Return type","text":"<p>EventCodeList</p>"},{"location":"v2/docs/EventCodeApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/EventCodeApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/EventCodeApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The event codes are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/EventCodeList/","title":"EventCodeList","text":""},{"location":"v2/docs/EventCodeList/#properties","title":"Properties","text":"Name Type Description Notes items [EventCode] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/EventLog/","title":"EventLog","text":""},{"location":"v2/docs/EventLog/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str The code of the event description str The details of the event event_type_category str The type of the event user_id str tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/EventLogApi/","title":"libica.openapi.v2.EventLogApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_event_logs GET /api/eventLog Retrieve a list of event logs. search_event_logs POST /api/eventLog:search Search event logs."},{"location":"v2/docs/EventLogApi/#get_event_logs","title":"get_event_logs","text":"<p>EventLogListV3 get_event_logs()</p> <p>Retrieve a list of event logs.</p>"},{"location":"v2/docs/EventLogApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import event_log_api\nfrom libica.openapi.v2.model.event_log_list_v3 import EventLogListV3\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = event_log_api.EventLogApi(api_client)\n    code = \"code_example\" # str | Code (optional)\n    code_filter_type = \"STARTS_WITH\" # str | Code filter type (optional)\n    category = \"ERROR\" # str | Category (optional)\n    date_from = \"dateFrom_example\" # str | Date from. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z (optional)\n    date_until = \"dateUntil_example\" # str | Date until. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z (optional)\n    rows = 250 # int | Amount of rows to fetch (chronologically oldest first). Maximum 250. Defaults to 250 (optional) if omitted the server will use the default value of 250\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of event logs.\n        api_response = api_instance.get_event_logs(code=code, code_filter_type=code_filter_type, category=category, date_from=date_from, date_until=date_until, rows=rows)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling EventLogApi-&gt;get_event_logs: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/EventLogApi/#parameters","title":"Parameters","text":"Name Type Description Notes code str Code [optional] code_filter_type str Code filter type [optional] category str Category [optional] date_from str Date from. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z [optional] date_until str Date until. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z [optional] rows int Amount of rows to fetch (chronologically oldest first). Maximum 250. Defaults to 250 [optional] if omitted the server will use the default value of 250"},{"location":"v2/docs/EventLogApi/#return-type","title":"Return type","text":"<p>EventLogListV3</p>"},{"location":"v2/docs/EventLogApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/EventLogApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/EventLogApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of event logs is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/EventLogApi/#search_event_logs","title":"search_event_logs","text":"<p>EventLogPagedListV4 search_event_logs()</p> <p>Search event logs.</p>"},{"location":"v2/docs/EventLogApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import event_log_api\nfrom libica.openapi.v2.model.event_log_query_parameters_v4 import EventLogQueryParametersV4\nfrom libica.openapi.v2.model.event_log_paged_list_v4 import EventLogPagedListV4\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = event_log_api.EventLogApi(api_client)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated  (optional)\n    event_log_query_parameters_v4 = EventLogQueryParametersV4(\n        code=\"code_example\",\n        category=\"INF\",\n        date_from=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        date_until=dateutil_parser('1970-01-01T00:00:00.00Z'),\n    ) # EventLogQueryParametersV4 |  (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Search event logs.\n        api_response = api_instance.search_event_logs(page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort, event_log_query_parameters_v4=event_log_query_parameters_v4)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling EventLogApi-&gt;search_event_logs: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/EventLogApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated [optional] event_log_query_parameters_v4 EventLogQueryParametersV4 [optional]"},{"location":"v2/docs/EventLogApi/#return-type_1","title":"Return type","text":"<p>EventLogPagedListV4</p>"},{"location":"v2/docs/EventLogApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/EventLogApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v2/docs/EventLogApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The list of event logs is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/EventLogList/","title":"EventLogList","text":""},{"location":"v2/docs/EventLogList/#properties","title":"Properties","text":"Name Type Description Notes items [EventLog] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/EventLogListV3/","title":"EventLogListV3","text":""},{"location":"v2/docs/EventLogListV3/#properties","title":"Properties","text":"Name Type Description Notes items [EventLogV3] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/EventLogPagedListV4/","title":"EventLogPagedListV4","text":""},{"location":"v2/docs/EventLogPagedListV4/#properties","title":"Properties","text":"Name Type Description Notes items [EventLogV4] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/EventLogQueryParametersV4/","title":"EventLogQueryParametersV4","text":""},{"location":"v2/docs/EventLogQueryParametersV4/#properties","title":"Properties","text":"Name Type Description Notes code str, none_type The code to filter on. [optional] category str, none_type The category to filter on [optional] date_from datetime, none_type The date from to search in. [optional] date_until datetime, none_type The date until to search in. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/EventLogV3/","title":"EventLogV3","text":""},{"location":"v2/docs/EventLogV3/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str The code of the event description str The details of the event event_type_category str The type of the event user_id str tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/EventLogV4/","title":"EventLogV4","text":""},{"location":"v2/docs/EventLogV4/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime owner UserIdentifier tenant TenantIdentifier code str The code of the event description str The details of the event event_type_category str The type of the event any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ExecutionConfiguration/","title":"ExecutionConfiguration","text":""},{"location":"v2/docs/ExecutionConfiguration/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the configuration multi_value bool Whether the configuration has multiple values values [str] The configuration values any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ExecutionConfigurationList/","title":"ExecutionConfigurationList","text":""},{"location":"v2/docs/ExecutionConfigurationList/#properties","title":"Properties","text":"Name Type Description Notes items [ExecutionConfiguration] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ExternalDockerImageSettings/","title":"ExternalDockerImageSettings","text":""},{"location":"v2/docs/ExternalDockerImageSettings/#properties","title":"Properties","text":"Name Type Description Notes url str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Field/","title":"Field","text":""},{"location":"v2/docs/Field/#properties","title":"Properties","text":"Name Type Description Notes id str name str [optional] description str [optional] field_type str [optional] required bool [optional] multivalued bool [optional] filled_by_pipeline bool [optional] fields [Field] [optional] enumeration_values [str] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/FieldId/","title":"FieldId","text":""},{"location":"v2/docs/FieldId/#properties","title":"Properties","text":"Name Type Description Notes id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/FieldList/","title":"FieldList","text":""},{"location":"v2/docs/FieldList/#properties","title":"Properties","text":"Name Type Description Notes items [Field] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/FindProjectSamples/","title":"FindProjectSamples","text":""},{"location":"v2/docs/FindProjectSamples/#properties","title":"Properties","text":"Name Type Description Notes conditions [FindSampleCondition] Adds a condition on a string field. date_conditions [FindSampleDateCondition] Adds a condition on a date metadate field. If both the dateBefore and dateAfter parameter are null it will return any sample that has no value for the date field. number_conditions [FindSampleNumberCondition] Adds a condition on a number metadata field. If both the lowerBoundary and upperBoundary parameter are null it will return any sample that has no value for the number field. boolean_conditions [FindSampleBooleanCondition] Adds a condition on a boolean field. full_text_search_string str, none_type Adds a fuzzy matching condition for the text on all string fields of the sample i.e. on both the fixed fields (name, description) as any metadata text field. [optional] include_deleted bool, none_type Indicates whether deleted samples should be included. [optional]  if omitted the server will use the default value of False user_tags [str, none_type], none_type The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str, none_type How the usertags are filtered. [optional] run_input_tags [str, none_type], none_type The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str, none_type How the runInputTags are filtered. [optional] connector_tags [str, none_type], none_type The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str, none_type How the connectorTags are filtered. [optional] tech_tags [str, none_type], none_type The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] tech_tag_match_mode str, none_type How the technicalTags are filtered. [optional] instrument_run_ids [str, none_type], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/FindSampleBooleanCondition/","title":"FindSampleBooleanCondition","text":"<p>Adds a condition on a boolean field.</p>"},{"location":"v2/docs/FindSampleBooleanCondition/#properties","title":"Properties","text":"Name Type Description Notes metadata_field Field [optional] field str, none_type [optional] value str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/FindSampleCondition/","title":"FindSampleCondition","text":"<p>Adds a condition on a string field.</p>"},{"location":"v2/docs/FindSampleCondition/#properties","title":"Properties","text":"Name Type Description Notes values [str] metadata_field FieldId [optional] field str, none_type [optional] match_mode str, none_type Defines how the value will be matched. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/FindSampleDateCondition/","title":"FindSampleDateCondition","text":"<p>Adds a condition on a date metadate field. If both the dateBefore and dateAfter parameter are null it will return any sample that has no value for the date field.</p>"},{"location":"v2/docs/FindSampleDateCondition/#properties","title":"Properties","text":"Name Type Description Notes metadata_field FieldId [optional] field str, none_type [optional] before_date str, none_type Before date. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z [optional] after_date str, none_type After date. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/FindSampleNumberCondition/","title":"FindSampleNumberCondition","text":"<p>Adds a condition on a number metadata field. If both the lowerBoundary and upperBoundary parameter are null it will return any sample that has no value for the number field.</p>"},{"location":"v2/docs/FindSampleNumberCondition/#properties","title":"Properties","text":"Name Type Description Notes metadata_field FieldId [optional] field str, none_type [optional] lower_bound str, none_type [optional] upper_bound str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/FolderDetails/","title":"FolderDetails","text":""},{"location":"v2/docs/FolderDetails/#properties","title":"Properties","text":"Name Type Description Notes non_indexed bool Indicates this is a non-indexed folder any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/FolderUploadSession/","title":"FolderUploadSession","text":""},{"location":"v2/docs/FolderUploadSession/#properties","title":"Properties","text":"Name Type Description Notes id str The id of the folder upload session. time_created datetime The time the folder upload session was created. status str The status of the folder upload session. time_session_expires datetime The time the folder upload session will expire as it is only temporarily valid. time_completed datetime, none_type The time the folder upload session completed. [optional] time_closed datetime, none_type The time the folder upload session was closed. [optional] temp_credentials TempCredentials [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InlineView/","title":"InlineView","text":""},{"location":"v2/docs/InlineView/#properties","title":"Properties","text":"Name Type Description Notes url str A pre-signed url which is temporarily available for inline viewing the data. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InputFormBaseSpaceDataDetails/","title":"InputFormBaseSpaceDataDetails","text":""},{"location":"v2/docs/InputFormBaseSpaceDataDetails/#properties","title":"Properties","text":"Name Type Description Notes workgroup_id str, none_type [optional] extensions str, none_type [optional] path_prefix str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InputFormData/","title":"InputFormData","text":"<p>Use 'dataValues' for data fields.</p>"},{"location":"v2/docs/InputFormData/#properties","title":"Properties","text":"Name Type Description Notes data_id str mount_path str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InputFormExternalData/","title":"InputFormExternalData","text":""},{"location":"v2/docs/InputFormExternalData/#properties","title":"Properties","text":"Name Type Description Notes url str type str s3_details InputFormS3DataDetails [optional] basespace_details InputFormBaseSpaceDataDetails [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InputFormField/","title":"InputFormField","text":""},{"location":"v2/docs/InputFormField/#properties","title":"Properties","text":"Name Type Description Notes id str [optional] type str [optional] label str [optional] min_values int [optional] max_values int [optional] min_max_values_message str [optional] help_text str [optional] place_holder_text str [optional] values [str] [optional] data_values [InputFormWithExternalData] [optional] group_values [InputFormGroupFieldValues] [optional] min_length int [optional] max_length int [optional] min float [optional] max float [optional] choices [InputFormFieldChoice] [optional] fields [InputFormGroupField] [optional] data_filter InputFormFieldDataFilter [optional] regex str [optional] regex_error_message str [optional] hidden bool [optional] disabled bool [optional] empty_values_allowed bool [optional] update_render_on_change bool [optional] sensitive bool [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InputFormFieldChoice/","title":"InputFormFieldChoice","text":""},{"location":"v2/docs/InputFormFieldChoice/#properties","title":"Properties","text":"Name Type Description Notes value str [optional] text str [optional] selected bool [optional] disabled bool [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InputFormFieldDataFilter/","title":"InputFormFieldDataFilter","text":""},{"location":"v2/docs/InputFormFieldDataFilter/#properties","title":"Properties","text":"Name Type Description Notes name_filter str [optional] data_format [str] [optional] data_type str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InputFormFieldList/","title":"InputFormFieldList","text":""},{"location":"v2/docs/InputFormFieldList/#properties","title":"Properties","text":"Name Type Description Notes items [InputFormField] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InputFormFieldValues/","title":"InputFormFieldValues","text":""},{"location":"v2/docs/InputFormFieldValues/#properties","title":"Properties","text":"Name Type Description Notes id str values [str, none_type], none_type Use 'values' for all fields except data fields. Use string values to avoid rounding of numbers with a high precision. [optional] data_values [InputFormData], none_type Use 'dataValues' for data fields. [optional] external_data_values [AnalysisInputExternalData], none_type Use 'externalDataValues' for external data [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InputFormGroup/","title":"InputFormGroup","text":""},{"location":"v2/docs/InputFormGroup/#properties","title":"Properties","text":"Name Type Description Notes id str values [InputFormGroupFieldValues] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InputFormGroupField/","title":"InputFormGroupField","text":""},{"location":"v2/docs/InputFormGroupField/#properties","title":"Properties","text":"Name Type Description Notes id str [optional] type str [optional] label str [optional] min_values int [optional] max_values int [optional] min_max_values_message str [optional] help_text str [optional] place_holder_text str [optional] values [str] [optional] data_values [InputFormWithExternalData] [optional] min_length int [optional] max_length int [optional] min float [optional] max float [optional] choices [InputFormFieldChoice] [optional] data_filter InputFormFieldDataFilter [optional] regex str [optional] regex_error_message str [optional] hidden bool [optional] disabled bool [optional] empty_values_allowed bool [optional] update_render_on_change bool [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InputFormGroupFieldValues/","title":"InputFormGroupFieldValues","text":""},{"location":"v2/docs/InputFormGroupFieldValues/#properties","title":"Properties","text":"Name Type Description Notes values [InputFormFieldValues] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InputFormS3DataDetails/","title":"InputFormS3DataDetails","text":""},{"location":"v2/docs/InputFormS3DataDetails/#properties","title":"Properties","text":"Name Type Description Notes storage_credentials_id str, none_type The storage credentials with the S3 access key. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InputFormWithExternalData/","title":"InputFormWithExternalData","text":""},{"location":"v2/docs/InputFormWithExternalData/#properties","title":"Properties","text":"Name Type Description Notes data_id str [optional] external_data InputFormExternalData [optional] mount_path str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InputParameter/","title":"InputParameter","text":""},{"location":"v2/docs/InputParameter/#properties","title":"Properties","text":"Name Type Description Notes id str The ID of the parameter code str The code of the parameter required bool Indicates whether this parameter is required multi_value bool Indicates whether multiple values are allowed for this parameter any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InputParameterList/","title":"InputParameterList","text":""},{"location":"v2/docs/InputParameterList/#properties","title":"Properties","text":"Name Type Description Notes items [InputParameter] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InputPart/","title":"InputPart","text":""},{"location":"v2/docs/InputPart/#properties","title":"Properties","text":"Name Type Description Notes content_type_from_message bool [optional] body_as_string str [optional] media_type InputPartMediaType [optional] headers {str: ([str],)} [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InputPartMediaType/","title":"InputPartMediaType","text":""},{"location":"v2/docs/InputPartMediaType/#properties","title":"Properties","text":"Name Type Description Notes type str [optional] subtype str [optional] parameters {str: (str,)} [optional] wildcard_type bool [optional] wildcard_subtype bool [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/IntegerSettings/","title":"IntegerSettings","text":""},{"location":"v2/docs/IntegerSettings/#properties","title":"Properties","text":"Name Type Description Notes default_values [int] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/InternalDockerImageSettings/","title":"InternalDockerImageSettings","text":""},{"location":"v2/docs/InternalDockerImageSettings/#properties","title":"Properties","text":"Name Type Description Notes regions [DockerImageRegion], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Job/","title":"Job","text":""},{"location":"v2/docs/Job/#properties","title":"Properties","text":"Name Type Description Notes id str status str subject_type str The type of the subject for which this job provides execution. subject_id str The id of the subject for which this job provides execution. time_created datetime owner User additional_status_information str, none_type Additional information regarding the status of this job. [optional] time_started datetime, none_type [optional] time_finished datetime, none_type [optional] project Project [optional] bundle Bundle [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/JobApi/","title":"libica.openapi.v2.JobApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_job GET /api/jobs/{jobId} Retrieve a job. get_jobs GET /api/jobs Retrieve a list of jobs."},{"location":"v2/docs/JobApi/#get_job","title":"get_job","text":"<p>Job get_job(job_id)</p> <p>Retrieve a job.</p>"},{"location":"v2/docs/JobApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import job_api\nfrom libica.openapi.v2.model.job import Job\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = job_api.JobApi(api_client)\n    job_id = \"jobId_example\" # str | The ID of the job.\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a job.\n        api_response = api_instance.get_job(job_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling JobApi-&gt;get_job: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/JobApi/#parameters","title":"Parameters","text":"Name Type Description Notes job_id str The ID of the job."},{"location":"v2/docs/JobApi/#return-type","title":"Return type","text":"<p>Job</p>"},{"location":"v2/docs/JobApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/JobApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/JobApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The job is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/JobApi/#get_jobs","title":"get_jobs","text":"<p>JobPagedList get_jobs()</p> <p>Retrieve a list of jobs.</p>"},{"location":"v2/docs/JobApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import job_api\nfrom libica.openapi.v2.model.job_paged_list import JobPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = job_api.JobApi(api_client)\n    status = [\n        \"INITIALIZED\",\n    ] # [str] | The statuses to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeStarted - timeFinished (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of jobs.\n        api_response = api_instance.get_jobs(status=status, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling JobApi-&gt;get_jobs: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/JobApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes status [str] The statuses to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeStarted - timeFinished [optional]"},{"location":"v2/docs/JobApi/#return-type_1","title":"Return type","text":"<p>JobPagedList</p>"},{"location":"v2/docs/JobApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/JobApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/JobApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The list of jobs is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/JobPagedList/","title":"JobPagedList","text":""},{"location":"v2/docs/JobPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [Job] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Link/","title":"Link","text":""},{"location":"v2/docs/Link/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the link url str The url of the link any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Links/","title":"Links","text":""},{"location":"v2/docs/Links/#properties","title":"Properties","text":"Name Type Description Notes links [Link] [optional] licenses [Link] [optional] homepages [Link] [optional] publications [Link] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/LoadDataInBaseRequest/","title":"LoadDataInBaseRequest","text":""},{"location":"v2/docs/LoadDataInBaseRequest/#properties","title":"Properties","text":"Name Type Description Notes data_id str ID of the data to load into the table allow_quoted_newlines bool, none_type Enable to include newlines contained in quoted data sections in the cell\u2019s value. When disabled, newlines will signal a new row [optional]  if omitted the server will use the default value of False delimiter str, none_type field delimiter [optional]  if omitted the server will use the default value of \",\" encoding str, none_type Encoding [optional]  if omitted the server will use the default value of \"UTF8\" force_load bool, none_type When false (default): the data will not be loaded if it was already previously loaded to table ; when true, the data will be loaded even if already loaded in the past [optional]  if omitted the server will use the default value of False header_rows_to_skip int, none_type number of rows to skip (usually for headers) [optional]  if omitted the server will use the default value of 1 ignore_unknown_values bool When enabled, rows with extra column values that do not match the schema will be ignored and will not be loaded into the table, rows with too few values will receive default value null [optional]  if omitted the server will use the default value of False include_references bool, none_type Include references [optional]  if omitted the server will use the default value of True include_data_reference bool, none_type Include Data Reference [optional]  if omitted the server will use the default value of True include_sample_reference bool, none_type Include Sample Reference [optional]  if omitted the server will use the default value of True include_pipeline_reference bool, none_type Include Pipeline Reference [optional]  if omitted the server will use the default value of True include_pipeline_execution_reference bool, none_type Include Pipeline Execution Reference [optional]  if omitted the server will use the default value of True include_tenant_reference bool, none_type Include Tenant Reference [optional]  if omitted the server will use the default value of True null_marker str, none_type Specifies a string that represents a null value in a CSV/TSV file. [optional] number_of_errors_allowed int, none_type The maximum number of bad records that Base can ignore when running the job [optional]  if omitted the server will use the default value of 0 quote str, none_type The value that is used to quote data sections in a CSV/TSV file [optional] write_preference str, none_type specifies how to write data in the table. [optional]  if omitted the server will use the default value of \"APPENDTOTABLE\" any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/MetadataField/","title":"MetadataField","text":"<p>The metadata of the sample</p>"},{"location":"v2/docs/MetadataField/#properties","title":"Properties","text":"Name Type Description Notes id str index int [optional] name str [optional] field_type str [optional] values [str] [optional] group_values [MetadataField] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/MetadataModel/","title":"MetadataModel","text":""},{"location":"v2/docs/MetadataModel/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str state str tenant_name str, none_type [optional] description str, none_type [optional] parent_model_id str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/MetadataModelApi/","title":"libica.openapi.v2.MetadataModelApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_metadata_model GET /api/metadataModels/{metadataModelId} Retrieve a metadata model. Only metadata models that the user has access to can be retrieved. get_metadata_model_fields GET /api/metadataModels/{metadataModelId}/fields Retrieve the fields of a metadata model. Only metadata models that the user has access to can be retrieved. get_metadata_models GET /api/metadataModels Retrieve the metadata models for the tenant associated to the security context. get_tenant_model GET /api/metadataModels/tenantModel Retrieve the tenant model for the tenant associated to the security context."},{"location":"v2/docs/MetadataModelApi/#get_metadata_model","title":"get_metadata_model","text":"<p>MetadataModel get_metadata_model(metadata_model_id)</p> <p>Retrieve a metadata model. Only metadata models that the user has access to can be retrieved.</p>"},{"location":"v2/docs/MetadataModelApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import metadata_model_api\nfrom libica.openapi.v2.model.metadata_model import MetadataModel\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = metadata_model_api.MetadataModelApi(api_client)\n    metadata_model_id = \"metadataModelId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a metadata model. Only metadata models that the user has access to can be retrieved.\n        api_response = api_instance.get_metadata_model(metadata_model_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling MetadataModelApi-&gt;get_metadata_model: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/MetadataModelApi/#parameters","title":"Parameters","text":"Name Type Description Notes metadata_model_id str"},{"location":"v2/docs/MetadataModelApi/#return-type","title":"Return type","text":"<p>MetadataModel</p>"},{"location":"v2/docs/MetadataModelApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/MetadataModelApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/MetadataModelApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The metadata model is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/MetadataModelApi/#get_metadata_model_fields","title":"get_metadata_model_fields","text":"<p>FieldList get_metadata_model_fields(metadata_model_id)</p> <p>Retrieve the fields of a metadata model. Only metadata models that the user has access to can be retrieved.</p>"},{"location":"v2/docs/MetadataModelApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import metadata_model_api\nfrom libica.openapi.v2.model.field_list import FieldList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = metadata_model_api.MetadataModelApi(api_client)\n    metadata_model_id = \"metadataModelId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the fields of a metadata model. Only metadata models that the user has access to can be retrieved.\n        api_response = api_instance.get_metadata_model_fields(metadata_model_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling MetadataModelApi-&gt;get_metadata_model_fields: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/MetadataModelApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes metadata_model_id str"},{"location":"v2/docs/MetadataModelApi/#return-type_1","title":"Return type","text":"<p>FieldList</p>"},{"location":"v2/docs/MetadataModelApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/MetadataModelApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/MetadataModelApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The metadata model fields are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/MetadataModelApi/#get_metadata_models","title":"get_metadata_models","text":"<p>MetadataModelList get_metadata_models()</p> <p>Retrieve the metadata models for the tenant associated to the security context.</p> <p>Retrieve the metadata models for the tenant associated to the security context. This call returns a list of metadata models for the tenant in a non-hierarchical way. Instead of a model having a list of child models all models except the root model have a parent model identifier. This can be used to reconstruct the hierarchy.</p>"},{"location":"v2/docs/MetadataModelApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import metadata_model_api\nfrom libica.openapi.v2.model.metadata_model_list import MetadataModelList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = metadata_model_api.MetadataModelApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve the metadata models for the tenant associated to the security context.\n        api_response = api_instance.get_metadata_models()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling MetadataModelApi-&gt;get_metadata_models: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/MetadataModelApi/#parameters_2","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/MetadataModelApi/#return-type_2","title":"Return type","text":"<p>MetadataModelList</p>"},{"location":"v2/docs/MetadataModelApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/MetadataModelApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/MetadataModelApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The metadata models are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/MetadataModelApi/#get_tenant_model","title":"get_tenant_model","text":"<p>Model get_tenant_model()</p> <p>Retrieve the tenant model for the tenant associated to the security context.</p> <p>Retrieve the tenant model for the tenant associated to the security context. The tenant model is a hierarchical structure where the top level tenant holds a list of child models (which in turn can hold child models).</p>"},{"location":"v2/docs/MetadataModelApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import metadata_model_api\nfrom libica.openapi.v2.model.model import Model\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = metadata_model_api.MetadataModelApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve the tenant model for the tenant associated to the security context.\n        api_response = api_instance.get_tenant_model()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling MetadataModelApi-&gt;get_tenant_model: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/MetadataModelApi/#parameters_3","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/MetadataModelApi/#return-type_3","title":"Return type","text":"<p>Model</p>"},{"location":"v2/docs/MetadataModelApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/MetadataModelApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/MetadataModelApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The tenant model is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/MetadataModelList/","title":"MetadataModelList","text":""},{"location":"v2/docs/MetadataModelList/#properties","title":"Properties","text":"Name Type Description Notes items [MetadataModel] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Model/","title":"Model","text":""},{"location":"v2/docs/Model/#properties","title":"Properties","text":"Name Type Description Notes id str name str [optional] description str [optional] state str [optional] models [Model] [optional] fields [Field] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/MultipartFormDataInput/","title":"MultipartFormDataInput","text":""},{"location":"v2/docs/MultipartFormDataInput/#properties","title":"Properties","text":"Name Type Description Notes form_data {str: (InputPart,)} [optional] form_data_map {str: ([InputPart],)} [optional] preamble str [optional] parts [InputPart] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/NextflowAnalysisInput/","title":"NextflowAnalysisInput","text":""},{"location":"v2/docs/NextflowAnalysisInput/#properties","title":"Properties","text":"Name Type Description Notes inputs [AnalysisDataInput] parameters [AnalysisParameterInput], none_type [optional] reference_data_parameters [AnalysisReferenceDataParameter], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/NextflowAnalysisWithCustomInput/","title":"NextflowAnalysisWithCustomInput","text":""},{"location":"v2/docs/NextflowAnalysisWithCustomInput/#properties","title":"Properties","text":"Name Type Description Notes custom_input str Contains the custom input, in YAML format or as an escaped JSON string. data_ids [str] [optional] mounts [AnalysisInputDataMount], none_type [optional] external_data [AnalysisInputExternalData], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/NextflowJsonAnalysisInput/","title":"NextflowJsonAnalysisInput","text":""},{"location":"v2/docs/NextflowJsonAnalysisInput/#properties","title":"Properties","text":"Name Type Description Notes fields [InputFormFieldValues] [optional] groups [InputFormGroup] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/NotificationChannel/","title":"NotificationChannel","text":""},{"location":"v2/docs/NotificationChannel/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str enabled bool Should this channel be enabled or not? type str The type of delivery target (MAIL, SQS, SNS, HTTP, ...) address str The address where to send a notification to (email address, url, ...) tenant_name str, none_type [optional] aws_region str, none_type The AWS region of the SNS notification channel [optional] application ApplicationV4 [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/NotificationChannelApi/","title":"libica.openapi.v2.NotificationChannelApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_notification_channel POST /api/notificationChannels Create a notification channel delete_notification_channel DELETE /api/notificationChannels/{channelId} Delete a notification channel get_notification_channel GET /api/notificationChannels/{channelId} Retrieve a notification channel get_notification_channels GET /api/notificationChannels Retrieve notification channels update_notification_channel PUT /api/notificationChannels/{channelId} Update a notification channel"},{"location":"v2/docs/NotificationChannelApi/#create_notification_channel","title":"create_notification_channel","text":"<p>NotificationChannel create_notification_channel(create_notification_channel)</p> <p>Create a notification channel</p>"},{"location":"v2/docs/NotificationChannelApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import notification_channel_api\nfrom libica.openapi.v2.model.notification_channel import NotificationChannel\nfrom libica.openapi.v2.model.create_notification_channel import CreateNotificationChannel\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = notification_channel_api.NotificationChannelApi(api_client)\n    create_notification_channel = CreateNotificationChannel(\n        enabled=True,\n        type=\"MAIL\",\n        address=\"address_example\",\n        aws_region=\"aws_region_example\",\n    ) # CreateNotificationChannel | The new channel\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a notification channel\n        api_response = api_instance.create_notification_channel(create_notification_channel)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling NotificationChannelApi-&gt;create_notification_channel: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/NotificationChannelApi/#parameters","title":"Parameters","text":"Name Type Description Notes create_notification_channel CreateNotificationChannel The new channel"},{"location":"v2/docs/NotificationChannelApi/#return-type","title":"Return type","text":"<p>NotificationChannel</p>"},{"location":"v2/docs/NotificationChannelApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/NotificationChannelApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/NotificationChannelApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The notification channel is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/NotificationChannelApi/#delete_notification_channel","title":"delete_notification_channel","text":"<p>delete_notification_channel(channel_id)</p> <p>Delete a notification channel</p>"},{"location":"v2/docs/NotificationChannelApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import notification_channel_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = notification_channel_api.NotificationChannelApi(api_client)\n    channel_id = \"channelId_example\" # str | The ID of the notification channel to delete\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Delete a notification channel\n        api_instance.delete_notification_channel(channel_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling NotificationChannelApi-&gt;delete_notification_channel: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/NotificationChannelApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes channel_id str The ID of the notification channel to delete"},{"location":"v2/docs/NotificationChannelApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/NotificationChannelApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/NotificationChannelApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/NotificationChannelApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The notification channel is successfully deleted - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/NotificationChannelApi/#get_notification_channel","title":"get_notification_channel","text":"<p>NotificationChannel get_notification_channel(channel_id)</p> <p>Retrieve a notification channel</p>"},{"location":"v2/docs/NotificationChannelApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import notification_channel_api\nfrom libica.openapi.v2.model.notification_channel import NotificationChannel\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = notification_channel_api.NotificationChannelApi(api_client)\n    channel_id = \"channelId_example\" # str | The ID of the notification channel to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a notification channel\n        api_response = api_instance.get_notification_channel(channel_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling NotificationChannelApi-&gt;get_notification_channel: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/NotificationChannelApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes channel_id str The ID of the notification channel to retrieve"},{"location":"v2/docs/NotificationChannelApi/#return-type_2","title":"Return type","text":"<p>NotificationChannel</p>"},{"location":"v2/docs/NotificationChannelApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/NotificationChannelApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/NotificationChannelApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The notification channel is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/NotificationChannelApi/#get_notification_channels","title":"get_notification_channels","text":"<p>NotificationChannelList get_notification_channels()</p> <p>Retrieve notification channels</p>"},{"location":"v2/docs/NotificationChannelApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import notification_channel_api\nfrom libica.openapi.v2.model.notification_channel_list import NotificationChannelList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = notification_channel_api.NotificationChannelApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve notification channels\n        api_response = api_instance.get_notification_channels()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling NotificationChannelApi-&gt;get_notification_channels: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/NotificationChannelApi/#parameters_3","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/NotificationChannelApi/#return-type_3","title":"Return type","text":"<p>NotificationChannelList</p>"},{"location":"v2/docs/NotificationChannelApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/NotificationChannelApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/NotificationChannelApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The notification channels are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/NotificationChannelApi/#update_notification_channel","title":"update_notification_channel","text":"<p>NotificationChannel update_notification_channel(channel_id, notification_channel)</p> <p>Update a notification channel</p> <p>This will affect all subscriptions which use this address!Fields which can be updated:  - enabled  - address  - awsRegion </p>"},{"location":"v2/docs/NotificationChannelApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import notification_channel_api\nfrom libica.openapi.v2.model.notification_channel import NotificationChannel\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = notification_channel_api.NotificationChannelApi(api_client)\n    channel_id = \"channelId_example\" # str | The ID of the notification channel to update\n    notification_channel = NotificationChannel(\n        id=\"id_example\",\n        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        owner_id=\"owner_id_example\",\n        tenant_id=\"tenant_id_example\",\n        tenant_name=\"tenant_name_example\",\n        enabled=True,\n        type=\"MAIL\",\n        address=\"address_example\",\n        aws_region=\"aws_region_example\",\n        application=ApplicationV4(\n            id=\"id_example\",\n            name=\"name_example\",\n        ),\n    ) # NotificationChannel | The updated channel\n    if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update a notification channel\n        api_response = api_instance.update_notification_channel(channel_id, notification_channel)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling NotificationChannelApi-&gt;update_notification_channel: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update a notification channel\n        api_response = api_instance.update_notification_channel(channel_id, notification_channel, if_match=if_match)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling NotificationChannelApi-&gt;update_notification_channel: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/NotificationChannelApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes channel_id str The ID of the notification channel to update notification_channel NotificationChannel The updated channel if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional]"},{"location":"v2/docs/NotificationChannelApi/#return-type_4","title":"Return type","text":"<p>NotificationChannel</p>"},{"location":"v2/docs/NotificationChannelApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/NotificationChannelApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/NotificationChannelApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The notification channel is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/NotificationChannelList/","title":"NotificationChannelList","text":""},{"location":"v2/docs/NotificationChannelList/#properties","title":"Properties","text":"Name Type Description Notes items [NotificationChannel] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/NotificationSubscription/","title":"NotificationSubscription","text":""},{"location":"v2/docs/NotificationSubscription/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str event_code str The event code to subscribe to enabled bool Should this subscription be enabled or not? notification_channel NotificationChannel tenant_name str, none_type [optional] payload_version str, none_type The version of the notification event payload in case multiple versions exist. For analysis events possible values are [V3,V4] [optional] filter_expression str, none_type To be used when a notification applies to specific conditions. [optional] application ApplicationV4 [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/NotificationSubscriptionList/","title":"NotificationSubscriptionList","text":""},{"location":"v2/docs/NotificationSubscriptionList/#properties","title":"Properties","text":"Name Type Description Notes items [NotificationSubscription] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/OptionSettings/","title":"OptionSettings","text":""},{"location":"v2/docs/OptionSettings/#properties","title":"Properties","text":"Name Type Description Notes options [str] [optional] default_values [str] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/OptionalSampleTags/","title":"OptionalSampleTags","text":""},{"location":"v2/docs/OptionalSampleTags/#properties","title":"Properties","text":"Name Type Description Notes technical_tags [str, none_type], none_type [optional] user_tags [str, none_type], none_type [optional] connector_tags [str, none_type], none_type [optional] run_in_tags [str, none_type], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Pipeline/","title":"Pipeline","text":""},{"location":"v2/docs/Pipeline/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str The code of the pipeline description str The description of the pipeline language str The language that is used by the pipeline pipeline_tags PipelineTag analysis_storage AnalysisStorage tenant_name str, none_type [optional] urn str, none_type The URN of the pipeline. The format is urn:ilmn:ica:\\&lt;type of the object\\&gt;:\\&lt;ID of the object\\&gt;#\\&lt;optional human readable hint representing the object\\&gt;. The hint can be omitted, in that case the hashtag (#) must also be omitted. [optional] language_version PipelineLanguageVersion [optional] proprietary bool, none_type A boolean which indicates if the code of this pipeline is proprietary [optional]  if omitted the server will use the default value of False any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/PipelineApi/","title":"libica.openapi.v2.PipelineApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description download_pipeline_file_content GET /api/pipelines/{pipelineId}/files/{fileId}/content Download the contents of a pipeline file. get_pipeline GET /api/pipelines/{pipelineId} Retrieve a pipeline. get_pipeline_configuration_parameters GET /api/pipelines/{pipelineId}/configurationParameters Retrieve configuration parameters for a pipeline. get_pipeline_files GET /api/pipelines/{pipelineId}/files Retrieve files for a pipeline. get_pipeline_html_documentation GET /api/pipelines/{pipelineId}/documentation/HTML Retrieve HTML documentation for a project pipeline. get_pipeline_input_parameters GET /api/pipelines/{pipelineId}/inputParameters Retrieve input parameters for a pipeline. get_pipeline_reference_sets GET /api/pipelines/{pipelineId}/referenceSets Retrieve the reference sets of a pipeline. get_pipelines GET /api/pipelines Retrieve a list of pipelines."},{"location":"v2/docs/PipelineApi/#download_pipeline_file_content","title":"download_pipeline_file_content","text":"<p>file_type download_pipeline_file_content(pipeline_id, file_id)</p> <p>Download the contents of a pipeline file.</p>"},{"location":"v2/docs/PipelineApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = pipeline_api.PipelineApi(api_client)\n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to retrieve files for\n    file_id = \"fileId_example\" # str | The ID of the pipeline file\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Download the contents of a pipeline file.\n        api_response = api_instance.download_pipeline_file_content(pipeline_id, file_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling PipelineApi-&gt;download_pipeline_file_content: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/PipelineApi/#parameters","title":"Parameters","text":"Name Type Description Notes pipeline_id str The ID of the project pipeline to retrieve files for file_id str The ID of the pipeline file"},{"location":"v2/docs/PipelineApi/#return-type","title":"Return type","text":"<p>file_type</p>"},{"location":"v2/docs/PipelineApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/PipelineApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/octet-stream</li> </ul>"},{"location":"v2/docs/PipelineApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The pipeline file is successfully downloaded. * Content-Disposition - Contains name of the additional file to be downloaded.  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/PipelineApi/#get_pipeline","title":"get_pipeline","text":"<p>PipelineV4 get_pipeline(pipeline_id)</p> <p>Retrieve a pipeline.</p>"},{"location":"v2/docs/PipelineApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import pipeline_api\nfrom libica.openapi.v2.model.pipeline_v3 import PipelineV3\nfrom libica.openapi.v2.model.pipeline_v4 import PipelineV4\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = pipeline_api.PipelineApi(api_client)\n    pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a pipeline.\n        api_response = api_instance.get_pipeline(pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling PipelineApi-&gt;get_pipeline: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/PipelineApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes pipeline_id str The ID of the pipeline to retrieve"},{"location":"v2/docs/PipelineApi/#return-type_1","title":"Return type","text":"<p>PipelineV4</p>"},{"location":"v2/docs/PipelineApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/PipelineApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/PipelineApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The pipeline is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/PipelineApi/#get_pipeline_configuration_parameters","title":"get_pipeline_configuration_parameters","text":"<p>PipelineConfigurationParameterList get_pipeline_configuration_parameters(pipeline_id)</p> <p>Retrieve configuration parameters for a pipeline.</p>"},{"location":"v2/docs/PipelineApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import pipeline_api\nfrom libica.openapi.v2.model.pipeline_configuration_parameter_list import PipelineConfigurationParameterList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = pipeline_api.PipelineApi(api_client)\n    pipeline_id = \"pipelineId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve configuration parameters for a pipeline.\n        api_response = api_instance.get_pipeline_configuration_parameters(pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling PipelineApi-&gt;get_pipeline_configuration_parameters: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/PipelineApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes pipeline_id str"},{"location":"v2/docs/PipelineApi/#return-type_2","title":"Return type","text":"<p>PipelineConfigurationParameterList</p>"},{"location":"v2/docs/PipelineApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/PipelineApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/PipelineApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The configuration parameters are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/PipelineApi/#get_pipeline_files","title":"get_pipeline_files","text":"<p>PipelineFileList get_pipeline_files(pipeline_id)</p> <p>Retrieve files for a pipeline.</p>"},{"location":"v2/docs/PipelineApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import pipeline_api\nfrom libica.openapi.v2.model.pipeline_file_list import PipelineFileList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = pipeline_api.PipelineApi(api_client)\n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to retrieve files for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve files for a pipeline.\n        api_response = api_instance.get_pipeline_files(pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling PipelineApi-&gt;get_pipeline_files: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/PipelineApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes pipeline_id str The ID of the project pipeline to retrieve files for"},{"location":"v2/docs/PipelineApi/#return-type_3","title":"Return type","text":"<p>PipelineFileList</p>"},{"location":"v2/docs/PipelineApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/PipelineApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/PipelineApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The files are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/PipelineApi/#get_pipeline_html_documentation","title":"get_pipeline_html_documentation","text":"<p>PipelineHtmlDocumentation get_pipeline_html_documentation(pipeline_id)</p> <p>Retrieve HTML documentation for a project pipeline.</p> <p>Retrieve HTML documentation for a project pipeline. This can be a pipeline from a linked bundle.</p>"},{"location":"v2/docs/PipelineApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import pipeline_api\nfrom libica.openapi.v2.model.pipeline_html_documentation import PipelineHtmlDocumentation\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = pipeline_api.PipelineApi(api_client)\n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to retrieve HTML documentation from\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve HTML documentation for a project pipeline.\n        api_response = api_instance.get_pipeline_html_documentation(pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling PipelineApi-&gt;get_pipeline_html_documentation: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/PipelineApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes pipeline_id str The ID of the project pipeline to retrieve HTML documentation from"},{"location":"v2/docs/PipelineApi/#return-type_4","title":"Return type","text":"<p>PipelineHtmlDocumentation</p>"},{"location":"v2/docs/PipelineApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/PipelineApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/PipelineApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The HTML documentation is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/PipelineApi/#get_pipeline_input_parameters","title":"get_pipeline_input_parameters","text":"<p>InputParameterList get_pipeline_input_parameters(pipeline_id)</p> <p>Retrieve input parameters for a pipeline.</p>"},{"location":"v2/docs/PipelineApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import pipeline_api\nfrom libica.openapi.v2.model.input_parameter_list import InputParameterList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = pipeline_api.PipelineApi(api_client)\n    pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline to retrieve input parameters for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve input parameters for a pipeline.\n        api_response = api_instance.get_pipeline_input_parameters(pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling PipelineApi-&gt;get_pipeline_input_parameters: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/PipelineApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes pipeline_id str The ID of the pipeline to retrieve input parameters for"},{"location":"v2/docs/PipelineApi/#return-type_5","title":"Return type","text":"<p>InputParameterList</p>"},{"location":"v2/docs/PipelineApi/#authorization_5","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/PipelineApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/PipelineApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 200 The input parameters is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/PipelineApi/#get_pipeline_reference_sets","title":"get_pipeline_reference_sets","text":"<p>ReferenceSetList get_pipeline_reference_sets(pipeline_id)</p> <p>Retrieve the reference sets of a pipeline.</p>"},{"location":"v2/docs/PipelineApi/#example_6","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import pipeline_api\nfrom libica.openapi.v2.model.reference_set_list import ReferenceSetList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = pipeline_api.PipelineApi(api_client)\n    pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline to retrieve reference sets for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the reference sets of a pipeline.\n        api_response = api_instance.get_pipeline_reference_sets(pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling PipelineApi-&gt;get_pipeline_reference_sets: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/PipelineApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes pipeline_id str The ID of the pipeline to retrieve reference sets for"},{"location":"v2/docs/PipelineApi/#return-type_6","title":"Return type","text":"<p>ReferenceSetList</p>"},{"location":"v2/docs/PipelineApi/#authorization_6","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/PipelineApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/PipelineApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 200 The list of reference sets is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/PipelineApi/#get_pipelines","title":"get_pipelines","text":"<p>PipelineList get_pipelines()</p> <p>Retrieve a list of pipelines.</p> <p>Only lists pipelines that are owned by the user/tenant (not those to which a user is entitled).</p>"},{"location":"v2/docs/PipelineApi/#example_7","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import pipeline_api\nfrom libica.openapi.v2.model.pipeline_list import PipelineList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = pipeline_api.PipelineApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve a list of pipelines.\n        api_response = api_instance.get_pipelines()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling PipelineApi-&gt;get_pipelines: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/PipelineApi/#parameters_7","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/PipelineApi/#return-type_7","title":"Return type","text":"<p>PipelineList</p>"},{"location":"v2/docs/PipelineApi/#authorization_7","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/PipelineApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/PipelineApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 200 The list of pipelines is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/PipelineBundle/","title":"PipelineBundle","text":""},{"location":"v2/docs/PipelineBundle/#properties","title":"Properties","text":"Name Type Description Notes id str name str max_number_of_allowed_slots int active_pipelines [PipelineV3] canceled_pipelines [PipelineV3] retired_pipelines [PipelineV3] regions [Region] analysis_storages [AnalysisStorageV3] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/PipelineConfigurationParameter/","title":"PipelineConfigurationParameter","text":""},{"location":"v2/docs/PipelineConfigurationParameter/#properties","title":"Properties","text":"Name Type Description Notes code str The code of the parameter required bool Indicates whether this parameter is required multi_value bool Indicates whether multiple values are allowed for this parameter type str The type for each parameter settings Settings [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/PipelineConfigurationParameterList/","title":"PipelineConfigurationParameterList","text":""},{"location":"v2/docs/PipelineConfigurationParameterList/#properties","title":"Properties","text":"Name Type Description Notes items [PipelineConfigurationParameter] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/PipelineFile/","title":"PipelineFile","text":""},{"location":"v2/docs/PipelineFile/#properties","title":"Properties","text":"Name Type Description Notes id str name str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/PipelineFileList/","title":"PipelineFileList","text":""},{"location":"v2/docs/PipelineFileList/#properties","title":"Properties","text":"Name Type Description Notes items [PipelineFile] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/PipelineHtmlDocumentation/","title":"PipelineHtmlDocumentation","text":""},{"location":"v2/docs/PipelineHtmlDocumentation/#properties","title":"Properties","text":"Name Type Description Notes content str The content of the HTML documentation any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/PipelineLanguageApi/","title":"libica.openapi.v2.PipelineLanguageApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_nextflow_versions GET /api/pipelineLanguages/nextflow/versions Retrieve a list of nextflow versions."},{"location":"v2/docs/PipelineLanguageApi/#get_nextflow_versions","title":"get_nextflow_versions","text":"<p>PipelineLanguageVersionList get_nextflow_versions()</p> <p>Retrieve a list of nextflow versions.</p>"},{"location":"v2/docs/PipelineLanguageApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import pipeline_language_api\nfrom libica.openapi.v2.model.pipeline_language_version_list import PipelineLanguageVersionList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = pipeline_language_api.PipelineLanguageApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve a list of nextflow versions.\n        api_response = api_instance.get_nextflow_versions()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling PipelineLanguageApi-&gt;get_nextflow_versions: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/PipelineLanguageApi/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/PipelineLanguageApi/#return-type","title":"Return type","text":"<p>PipelineLanguageVersionList</p>"},{"location":"v2/docs/PipelineLanguageApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/PipelineLanguageApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/PipelineLanguageApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of nextflow versions is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/PipelineLanguageVersion/","title":"PipelineLanguageVersion","text":""},{"location":"v2/docs/PipelineLanguageVersion/#properties","title":"Properties","text":"Name Type Description Notes id str name str The name of the version language str The language of the version any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/PipelineLanguageVersionList/","title":"PipelineLanguageVersionList","text":""},{"location":"v2/docs/PipelineLanguageVersionList/#properties","title":"Properties","text":"Name Type Description Notes items [PipelineLanguageVersion] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/PipelineList/","title":"PipelineList","text":""},{"location":"v2/docs/PipelineList/#properties","title":"Properties","text":"Name Type Description Notes items [PipelineV3] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/PipelineReportConfig/","title":"PipelineReportConfig","text":""},{"location":"v2/docs/PipelineReportConfig/#properties","title":"Properties","text":"Name Type Description Notes configs [Config] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/PipelineTag/","title":"PipelineTag","text":""},{"location":"v2/docs/PipelineTag/#properties","title":"Properties","text":"Name Type Description Notes technical_tags [str] Technical tags any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/PipelineUpdate/","title":"PipelineUpdate","text":""},{"location":"v2/docs/PipelineUpdate/#properties","title":"Properties","text":"Name Type Description Notes code str, none_type The code of the pipeline [optional] description str, none_type The description of the pipeline [optional] language_version str, none_type Version of the pipeline language [optional] proprietary bool, none_type A boolean which indicates if the code of this pipeline is proprietary [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/PipelineV3/","title":"PipelineV3","text":""},{"location":"v2/docs/PipelineV3/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str The code of the pipeline description str The description of the pipeline language str The language that is used by the pipeline pipeline_tags PipelineTag analysis_storage AnalysisStorageV3 tenant_name str, none_type [optional] urn str, none_type The URN of the pipeline. The format is urn:ilmn:ica:\\&lt;type of the object\\&gt;:\\&lt;ID of the object\\&gt;#\\&lt;optional human readable hint representing the object\\&gt;. The hint can be omitted, in that case the hashtag (#) must also be omitted. [optional] status str, none_type The status of the pipeline [optional] language_version PipelineLanguageVersion [optional] proprietary bool, none_type A boolean which indicates if the code of this pipeline is proprietary [optional]  if omitted the server will use the default value of False input_form_type str The type of the inputform used. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/PipelineV4/","title":"PipelineV4","text":""},{"location":"v2/docs/PipelineV4/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner UserIdentifier tenant TenantIdentifier code str The code of the pipeline description str The description of the pipeline language str The language that is used by the pipeline pipeline_tags PipelineTag analysis_storage AnalysisStorageV4 urn str, none_type The URN of the pipeline. The format is urn:ilmn:ica:\\&lt;type of the object\\&gt;:\\&lt;ID of the object\\&gt;#\\&lt;optional human readable hint representing the object\\&gt;. The hint can be omitted, in that case the hashtag (#) must also be omitted. [optional] status str, none_type The status of the pipeline [optional] language_version PipelineLanguageVersion [optional] proprietary bool, none_type A boolean which indicates if the code of this pipeline is proprietary [optional]  if omitted the server will use the default value of False input_form_type str The type of the inputform used. [optional] report_configs PipelineReportConfig [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Problem/","title":"Problem","text":"<p>RFC 7807 Problem object (https://tools.ietf.org/html/rfc7807)</p>"},{"location":"v2/docs/Problem/#properties","title":"Properties","text":"Name Type Description Notes type str A URI reference that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be \\\"about:blank\\\". title str A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; status int The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem. parameters {str: (str,)} Problem parameters for e.g. request body attribute validation. This attribute is not in scope of RFC 7807. timestamp datetime id str [optional] detail str A human-readable explanation specific to this occurrence of the problem. [optional] instance str A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Project/","title":"Project","text":""},{"location":"v2/docs/Project/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str active bool Indicates whether the project is active or hidden. region Region billing_mode str The billing mode of the project. It determines who pays for the costs linked to the project. tags ProjectTag tenant_name str, none_type [optional] urn str, none_type The URN of the project. The format is urn:ilmn:ica:\\&lt;type of the object\\&gt;:\\&lt;ID of the object\\&gt;#\\&lt;optional human readable hint representing the object\\&gt;. The hint can be omitted, in that case the hashtag (#) must also be omitted. [optional] base_enabled bool, none_type Indicates whether the project is base enabled. [optional] short_description str, none_type [optional] information str, none_type Information about the project. Note that the value of this field can be arbitrary large. [optional] data_sharing_enabled bool, none_type Indicates whether the Data and Samples created in this Project can be linked to other Projects. [optional] storage_bundle StorageBundle [optional] self_managed_storage_configuration StorageConfiguration [optional] analysis_priority str, none_type Indicates the priority given to a project and its analyses within a single tenant. Note that for a PUT call, when not providing a value for this attribute (null value or absent attribute), the persisted value will not change. [optional] metadata_model MetadataModel [optional] application Application [optional] project_owner str, none_type projectOwner is the current project owner, ownerId is the original project creator. These can be different because you can transfer ownership of a project. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/","title":"libica.openapi.v2.ProjectAnalysisApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description abort_analysis POST /api/projects/{projectId}/analyses/{analysisId}:abort Abort an analysis. create_cwl_analysis POST /api/projects/{projectId}/analysis:cwl Create and start an analysis for a CWL pipeline. create_cwl_analysis_with_json_input POST /api/projects/{projectId}/analysis:cwlWithJsonInput Create and start an analysis for a CWL pipeline with an input.json. create_cwl_analysis_with_structured_input POST /api/projects/{projectId}/analysis:cwlWithStructuredInput Create and start an analysis for a CWL pipeline with a structured input. create_cwl_json_analysis POST /api/projects/{projectId}/analysis:cwlJson Create and start an analysis for a JSON based CWL pipeline. create_nextflow_analysis POST /api/projects/{projectId}/analysis:nextflow Create and start an analysis for a Nextflow pipeline. create_nextflow_analysis_with_custom_input POST /api/projects/{projectId}/analysis:nextflowWithCustomInput Create and initiate an analysis for a Nextflow pipeline using a custom input, provided in either YAML format or an escaped JSON string. create_nextflow_json_analysis POST /api/projects/{projectId}/analysis:nextflowJson Create and start an analysis for a JSON based Nextflow pipeline. get_analyses GET /api/projects/{projectId}/analyses Retrieve the list of analyses. get_analysis GET /api/projects/{projectId}/analyses/{analysisId} Retrieve an analysis. get_analysis_configurations GET /api/projects/{projectId}/analyses/{analysisId}/configurations Retrieve the configurations of an analysis. get_analysis_inputs GET /api/projects/{projectId}/analyses/{analysisId}/inputs Retrieve the inputs of an analysis. get_analysis_outputs GET /api/projects/{projectId}/analyses/{analysisId}/outputs Retrieve the outputs of an analysis (limited to the first 200.000 files per output folder). When trying to retrieve the listed data with an endpoint such as GET /api/data/{dataUrn}, data which has already been deleted will be skipped. get_analysis_reports GET /api/projects/{projectId}/analyses/{analysisId}/reports Retrieve the report configs and associated reports. get_analysis_steps GET /api/projects/{projectId}/analyses/{analysisId}/steps Retrieve the individual steps of an analysis. get_analysis_usage_details GET /api/projects/{projectId}/analyses/{analysisId}/usage Retrieve the analysis usage details. get_cwl_input_json GET /api/projects/{projectId}/analyses/{analysisId}/cwl/inputJson Retrieve the input json of a CWL analysis. get_cwl_output_json GET /api/projects/{projectId}/analyses/{analysisId}/cwl/outputJson Retrieve the output json of a CWL analysis. get_project_analysis_input_form_values GET /api/projects/{projectId}/analyses/{analysisId}/inputFormValues Retrieve the values from an input form. get_raw_analysis_output GET /api/projects/{projectId}/analyses/{analysisId}/rawOutput Retrieve the raw output of an analysis. search_analyses POST /api/projects/{projectId}/analysis:search Search analyses. update_analysis PUT /api/projects/{projectId}/analyses/{analysisId} Update an analysis."},{"location":"v2/docs/ProjectAnalysisApi/#abort_analysis","title":"abort_analysis","text":"<p>abort_analysis(project_id, analysis_id)</p> <p>Abort an analysis.</p> <p>Endpoint for aborting an analysis. The status of the analysis is not updated immediately, only when the abortion of the analysis has actually started.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | The ID of the analysis to abort\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Abort an analysis.\n        api_instance.abort_analysis(project_id, analysis_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;abort_analysis: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to abort"},{"location":"v2/docs/ProjectAnalysisApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The analysis is successfully aborted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#create_cwl_analysis","title":"create_cwl_analysis","text":"<p>AnalysisV4 create_cwl_analysis(project_id, create_cwl_analysis)</p> <p>Create and start an analysis for a CWL pipeline.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#changelog-for-this-endpoint-multiple-versions-exist-note-that-the-values-for-request-headers-content-type-and-accept-must-contain-a-matching-version-v3-initial-version-v4-field-type-status-changed-from-enum-to-string-new-statuses-have-been-added-queued-initializing-preparing_inputs-generating_outputs-aborting-field-analysispriority-changed-from-enum-to-string-the-owner-and-tenant-are-now-represented-by-identifier-objects","title":"Changelog For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.  ## [V3]  * Initial version ## [V4]  * Field type 'status' changed from enum to String. New statuses have been added: ['QUEUED', 'INITIALIZING', 'PREPARING_INPUTS', 'GENERATING_OUTPUTS', 'ABORTING'].  * Field analysisPriority changed from enum to String.  * The owner and tenant are now represented by Identifier objects.","text":""},{"location":"v2/docs/ProjectAnalysisApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.analysis_v3 import AnalysisV3\nfrom libica.openapi.v2.model.create_cwl_analysis import CreateCwlAnalysis\nfrom libica.openapi.v2.model.analysis_v4 import AnalysisV4\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_cwl_analysis = CreateCwlAnalysis(\n        user_reference=\"26bUUGjjNSwg0_bs9ZayIM/dgN/b6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_dz/rEoBi0LnU8SsOWJ7wYrczi/Qdt8mVLxbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZepezJ0-VmLSUTLYyW- e_jxxzpBvw-y P/SI-13 AOsiPRVvnXrDhh58EJzzOxprDzE3pjHRAkK7vI7/jcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGxjARc6SZKg2qV/ hA054g00j8CXRM4JZgexx5/BmiUdb8V-5tS7Ce-8OP8jM6Q/ap ieHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8M6xmSejA6BGR RDxxWc493QsJ JFt/rxtNb3BtpHGNB33FSli/EaSDC3Jwlo9Aq-OZySuGXBwuNL5ICjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGahEx5as4igHCaW/gfGuN6Yogo9e2fmFQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z-LtIx RE8z6ZbHjz/3coUV uT/EXw3Z8KLTvaqhteQpbwYU8rf85eyxCXQ02l2UfQbP/Hwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9OYCpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3/B7Nke4pyLFXi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7RTuj3iloSmvq6ptM/paqws8RfvaYMfrqa8yWUb/aew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8imaC5It9ZEZjIoZP9V1EjbA-tFQv/KOFpHUcVNnqDdEconiUhJ/_OYqv01dQetO3oDTHSQdhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0N/GhiW92gAEui/l WoiEW-tzti/9q3K407VNjp2Rdt_M_wxbjDN svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hn/97bNktDzITop4y58kMdi7sEjYIZXQNI/G2UN7cFEvraG_8ul060s0W5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD/EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXx/cpcof84rc bTU20M2sFqt4zswj63S37gymcb35PFmFooUEItJ/WXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsgO_EkphsT/YD6 2t z_dodcIO0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08O/uXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSU/GAcLlmJPzj1b/En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd/34AbRwr1Mi1qq8Bv/7r73NXsLH6lkp_YwgeBZkfv7aEST19XJTe9 4t GIqXuFdD/054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YYD7uU6_-V/RO7VbVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GL/dkyb0ofYJLarfJrS4gkeTAfK5NMnpgtwWLpKWVb8A/uQa TKwyJvJPBgILfXHpRfA79W9rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpE/9wjR SU K0GOwW4T/aO1NV6_Hx-5jhuPYUigmskjs38qptZPjGbQcMS6bq4jio6/n_hxYgCm- Z/K_7Ms5LyP8NoYNVF5v/C_I7qzU/pSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL92Y/TDLRif4BX0k_kxk-VTaov2mlM18SfVTJ/mcMNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei/m5FrnEpLvFqwhHFvdn0kEWtwPAhULVh_u/c  m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW\",\n        pipeline_id=\"pipeline_id_example\",\n        tags=CreateAnalysisTag(\n            technical_tags=[\n                \"technical_tags_example\",\n            ],\n            user_tags=[\n                \"user_tags_example\",\n            ],\n            reference_tags=[\n                \"reference_tags_example\",\n            ],\n        ),\n        analysis_storage_id=\"analysis_storage_id_example\",\n        output_parent_folder_id=\"output_parent_folder_id_example\",\n        analysis_output=[\n            AnalysisOutputMapping(\n                source_path=\"source_path_example\",\n                type=\"FILE\",\n                target_project_id=\"target_project_id_example\",\n                target_path=\"target_path_example\",\n                action_on_exist=\"action_on_exist_example\",\n            ),\n        ],\n        analysis_input=CwlAnalysisInput(),\n        activation_code_detail_id=\"activation_code_detail_id_example\",\n    ) # CreateCwlAnalysis | The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt;\n    idempotency_key = \"Idempotency-Key_example\" # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create and start an analysis for a CWL pipeline.\n        api_response = api_instance.create_cwl_analysis(project_id, create_cwl_analysis)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_cwl_analysis: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create and start an analysis for a CWL pipeline.\n        api_response = api_instance.create_cwl_analysis(project_id, create_cwl_analysis, idempotency_key=idempotency_key)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_cwl_analysis: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str create_cwl_analysis CreateCwlAnalysis The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt; idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_1","title":"Return type","text":"<p>AnalysisV4</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json, application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 201 The analysis is successfully created and scheduled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#create_cwl_analysis_with_json_input","title":"create_cwl_analysis_with_json_input","text":"<p>AnalysisV4 create_cwl_analysis_with_json_input(project_id, create_cwl_with_json_input_analysis)</p> <p>Create and start an analysis for a CWL pipeline with an input.json.</p> <p>This endpoint is intended to be used with an input.json and will bypass the input form. The combination of using this endpoint with an input.json for a json-form based pipeline with sensitive fields defined is not possible.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.create_cwl_with_json_input_analysis import CreateCwlWithJsonInputAnalysis\nfrom libica.openapi.v2.model.analysis_v4 import AnalysisV4\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_cwl_with_json_input_analysis = CreateCwlWithJsonInputAnalysis(\n        user_reference=\"26bUUGjjNSwg0_bs9ZayIM/dgN/b6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_dz/rEoBi0LnU8SsOWJ7wYrczi/Qdt8mVLxbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZepezJ0-VmLSUTLYyW- e_jxxzpBvw-y P/SI-13 AOsiPRVvnXrDhh58EJzzOxprDzE3pjHRAkK7vI7/jcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGxjARc6SZKg2qV/ hA054g00j8CXRM4JZgexx5/BmiUdb8V-5tS7Ce-8OP8jM6Q/ap ieHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8M6xmSejA6BGR RDxxWc493QsJ JFt/rxtNb3BtpHGNB33FSli/EaSDC3Jwlo9Aq-OZySuGXBwuNL5ICjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGahEx5as4igHCaW/gfGuN6Yogo9e2fmFQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z-LtIx RE8z6ZbHjz/3coUV uT/EXw3Z8KLTvaqhteQpbwYU8rf85eyxCXQ02l2UfQbP/Hwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9OYCpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3/B7Nke4pyLFXi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7RTuj3iloSmvq6ptM/paqws8RfvaYMfrqa8yWUb/aew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8imaC5It9ZEZjIoZP9V1EjbA-tFQv/KOFpHUcVNnqDdEconiUhJ/_OYqv01dQetO3oDTHSQdhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0N/GhiW92gAEui/l WoiEW-tzti/9q3K407VNjp2Rdt_M_wxbjDN svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hn/97bNktDzITop4y58kMdi7sEjYIZXQNI/G2UN7cFEvraG_8ul060s0W5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD/EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXx/cpcof84rc bTU20M2sFqt4zswj63S37gymcb35PFmFooUEItJ/WXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsgO_EkphsT/YD6 2t z_dodcIO0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08O/uXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSU/GAcLlmJPzj1b/En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd/34AbRwr1Mi1qq8Bv/7r73NXsLH6lkp_YwgeBZkfv7aEST19XJTe9 4t GIqXuFdD/054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YYD7uU6_-V/RO7VbVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GL/dkyb0ofYJLarfJrS4gkeTAfK5NMnpgtwWLpKWVb8A/uQa TKwyJvJPBgILfXHpRfA79W9rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpE/9wjR SU K0GOwW4T/aO1NV6_Hx-5jhuPYUigmskjs38qptZPjGbQcMS6bq4jio6/n_hxYgCm- Z/K_7Ms5LyP8NoYNVF5v/C_I7qzU/pSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL92Y/TDLRif4BX0k_kxk-VTaov2mlM18SfVTJ/mcMNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei/m5FrnEpLvFqwhHFvdn0kEWtwPAhULVh_u/c  m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW\",\n        pipeline_id=\"pipeline_id_example\",\n        tags=CreateAnalysisTag(\n            technical_tags=[\n                \"technical_tags_example\",\n            ],\n            user_tags=[\n                \"user_tags_example\",\n            ],\n            reference_tags=[\n                \"reference_tags_example\",\n            ],\n        ),\n        analysis_storage_id=\"analysis_storage_id_example\",\n        output_parent_folder_id=\"output_parent_folder_id_example\",\n        analysis_output=[\n            AnalysisOutputMapping(\n                source_path=\"source_path_example\",\n                type=\"FILE\",\n                target_project_id=\"target_project_id_example\",\n                target_path=\"target_path_example\",\n                action_on_exist=\"action_on_exist_example\",\n            ),\n        ],\n        analysis_input=CwlAnalysisWithJsonInput(\n            input_json=\"input_json_example\",\n            data_ids=[\n                \"data_ids_example\",\n            ],\n            mounts=[\n                AnalysisInputDataMount(\n                    data_id=\"data_id_example\",\n                    mount_path=\"mount_path_example\",\n                ),\n            ],\n            external_data=[\n                AnalysisInputExternalData(\n                    url=\"url_example\",\n                    type=\"basespac\",\n                    mount_path=\"mount_path_example\",\n                    s3_details=AnalysisS3DataDetails(\n                        storage_credentials_id=\"storage_credentials_id_example\",\n                    ),\n                    basespace_details=AnalysisBaseSpaceDataDetails(\n                        workgroup_id=\"workgroup_id_example\",\n                        extensions=\"extensions_example\",\n                        path_prefix=\"path_prefix_example\",\n                    ),\n                ),\n            ],\n        ),\n    ) # CreateCwlWithJsonInputAnalysis | The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt;\n    idempotency_key = \"Idempotency-Key_example\" # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create and start an analysis for a CWL pipeline with an input.json.\n        api_response = api_instance.create_cwl_analysis_with_json_input(project_id, create_cwl_with_json_input_analysis)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_cwl_analysis_with_json_input: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create and start an analysis for a CWL pipeline with an input.json.\n        api_response = api_instance.create_cwl_analysis_with_json_input(project_id, create_cwl_with_json_input_analysis, idempotency_key=idempotency_key)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_cwl_analysis_with_json_input: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str create_cwl_with_json_input_analysis CreateCwlWithJsonInputAnalysis The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt; idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_2","title":"Return type","text":"<p>AnalysisV4</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 201 The analysis is successfully created and scheduled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#create_cwl_analysis_with_structured_input","title":"create_cwl_analysis_with_structured_input","text":"<p>AnalysisV4 create_cwl_analysis_with_structured_input(project_id, create_cwl_with_structured_input_analysis)</p> <p>Create and start an analysis for a CWL pipeline with a structured input.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.analysis_v4 import AnalysisV4\nfrom libica.openapi.v2.model.problem import Problem\nfrom libica.openapi.v2.model.create_cwl_with_structured_input_analysis import CreateCwlWithStructuredInputAnalysis\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_cwl_with_structured_input_analysis = CreateCwlWithStructuredInputAnalysis(\n        user_reference=\"26bUUGjjNSwg0_bs9ZayIM/dgN/b6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_dz/rEoBi0LnU8SsOWJ7wYrczi/Qdt8mVLxbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZepezJ0-VmLSUTLYyW- e_jxxzpBvw-y P/SI-13 AOsiPRVvnXrDhh58EJzzOxprDzE3pjHRAkK7vI7/jcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGxjARc6SZKg2qV/ hA054g00j8CXRM4JZgexx5/BmiUdb8V-5tS7Ce-8OP8jM6Q/ap ieHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8M6xmSejA6BGR RDxxWc493QsJ JFt/rxtNb3BtpHGNB33FSli/EaSDC3Jwlo9Aq-OZySuGXBwuNL5ICjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGahEx5as4igHCaW/gfGuN6Yogo9e2fmFQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z-LtIx RE8z6ZbHjz/3coUV uT/EXw3Z8KLTvaqhteQpbwYU8rf85eyxCXQ02l2UfQbP/Hwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9OYCpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3/B7Nke4pyLFXi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7RTuj3iloSmvq6ptM/paqws8RfvaYMfrqa8yWUb/aew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8imaC5It9ZEZjIoZP9V1EjbA-tFQv/KOFpHUcVNnqDdEconiUhJ/_OYqv01dQetO3oDTHSQdhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0N/GhiW92gAEui/l WoiEW-tzti/9q3K407VNjp2Rdt_M_wxbjDN svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hn/97bNktDzITop4y58kMdi7sEjYIZXQNI/G2UN7cFEvraG_8ul060s0W5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD/EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXx/cpcof84rc bTU20M2sFqt4zswj63S37gymcb35PFmFooUEItJ/WXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsgO_EkphsT/YD6 2t z_dodcIO0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08O/uXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSU/GAcLlmJPzj1b/En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd/34AbRwr1Mi1qq8Bv/7r73NXsLH6lkp_YwgeBZkfv7aEST19XJTe9 4t GIqXuFdD/054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YYD7uU6_-V/RO7VbVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GL/dkyb0ofYJLarfJrS4gkeTAfK5NMnpgtwWLpKWVb8A/uQa TKwyJvJPBgILfXHpRfA79W9rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpE/9wjR SU K0GOwW4T/aO1NV6_Hx-5jhuPYUigmskjs38qptZPjGbQcMS6bq4jio6/n_hxYgCm- Z/K_7Ms5LyP8NoYNVF5v/C_I7qzU/pSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL92Y/TDLRif4BX0k_kxk-VTaov2mlM18SfVTJ/mcMNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei/m5FrnEpLvFqwhHFvdn0kEWtwPAhULVh_u/c  m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW\",\n        pipeline_id=\"pipeline_id_example\",\n        tags=CreateAnalysisTag(\n            technical_tags=[\n                \"technical_tags_example\",\n            ],\n            user_tags=[\n                \"user_tags_example\",\n            ],\n            reference_tags=[\n                \"reference_tags_example\",\n            ],\n        ),\n        analysis_storage_id=\"analysis_storage_id_example\",\n        output_parent_folder_id=\"output_parent_folder_id_example\",\n        analysis_output=[\n            AnalysisOutputMapping(\n                source_path=\"source_path_example\",\n                type=\"FILE\",\n                target_project_id=\"target_project_id_example\",\n                target_path=\"target_path_example\",\n                action_on_exist=\"action_on_exist_example\",\n            ),\n        ],\n        analysis_input=CwlAnalysisWithStructuredInput(\n            inputs=[\n                AnalysisDataInput(\n                    parameter_code=\"parameter_code_example\",\n                    data_ids=[\n                        \"data_ids_example\",\n                    ],\n                    mounts=[\n                        AnalysisInputDataMount(\n                            data_id=\"data_id_example\",\n                            mount_path=\"mount_path_example\",\n                        ),\n                    ],\n                    external_data=[\n                        AnalysisInputExternalData(\n                            url=\"url_example\",\n                            type=\"basespac\",\n                            mount_path=\"mount_path_example\",\n                            s3_details=AnalysisS3DataDetails(\n                                storage_credentials_id=\"storage_credentials_id_example\",\n                            ),\n                            basespace_details=AnalysisBaseSpaceDataDetails(\n                                workgroup_id=\"workgroup_id_example\",\n                                extensions=\"extensions_example\",\n                                path_prefix=\"path_prefix_example\",\n                            ),\n                        ),\n                    ],\n                ),\n            ],\n            parameters=[\n                AnalysisParameterInput(\n                    code=\"code_example\",\n                    value=\"value_example\",\n                    multi_value=[\n                        \"multi_value_example\",\n                    ],\n                ),\n            ],\n            reference_data_parameters=[\n                AnalysisReferenceDataParameter(\n                    parameter_code=\"parameter_code_example\",\n                    reference_data_id=\"reference_data_id_example\",\n                ),\n            ],\n        ),\n    ) # CreateCwlWithStructuredInputAnalysis | The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt;\n    idempotency_key = \"Idempotency-Key_example\" # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create and start an analysis for a CWL pipeline with a structured input.\n        api_response = api_instance.create_cwl_analysis_with_structured_input(project_id, create_cwl_with_structured_input_analysis)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_cwl_analysis_with_structured_input: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create and start an analysis for a CWL pipeline with a structured input.\n        api_response = api_instance.create_cwl_analysis_with_structured_input(project_id, create_cwl_with_structured_input_analysis, idempotency_key=idempotency_key)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_cwl_analysis_with_structured_input: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str create_cwl_with_structured_input_analysis CreateCwlWithStructuredInputAnalysis The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt; idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_3","title":"Return type","text":"<p>AnalysisV4</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 201 The analysis is successfully created and scheduled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#create_cwl_json_analysis","title":"create_cwl_json_analysis","text":"<p>AnalysisV4 create_cwl_json_analysis(project_id, create_cwl_json_analysis)</p> <p>Create and start an analysis for a JSON based CWL pipeline.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.create_cwl_json_analysis import CreateCwlJsonAnalysis\nfrom libica.openapi.v2.model.analysis_v4 import AnalysisV4\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_cwl_json_analysis = CreateCwlJsonAnalysis(\n        user_reference=\"26bUUGjjNSwg0_bs9ZayIM/dgN/b6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_dz/rEoBi0LnU8SsOWJ7wYrczi/Qdt8mVLxbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZepezJ0-VmLSUTLYyW- e_jxxzpBvw-y P/SI-13 AOsiPRVvnXrDhh58EJzzOxprDzE3pjHRAkK7vI7/jcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGxjARc6SZKg2qV/ hA054g00j8CXRM4JZgexx5/BmiUdb8V-5tS7Ce-8OP8jM6Q/ap ieHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8M6xmSejA6BGR RDxxWc493QsJ JFt/rxtNb3BtpHGNB33FSli/EaSDC3Jwlo9Aq-OZySuGXBwuNL5ICjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGahEx5as4igHCaW/gfGuN6Yogo9e2fmFQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z-LtIx RE8z6ZbHjz/3coUV uT/EXw3Z8KLTvaqhteQpbwYU8rf85eyxCXQ02l2UfQbP/Hwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9OYCpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3/B7Nke4pyLFXi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7RTuj3iloSmvq6ptM/paqws8RfvaYMfrqa8yWUb/aew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8imaC5It9ZEZjIoZP9V1EjbA-tFQv/KOFpHUcVNnqDdEconiUhJ/_OYqv01dQetO3oDTHSQdhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0N/GhiW92gAEui/l WoiEW-tzti/9q3K407VNjp2Rdt_M_wxbjDN svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hn/97bNktDzITop4y58kMdi7sEjYIZXQNI/G2UN7cFEvraG_8ul060s0W5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD/EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXx/cpcof84rc bTU20M2sFqt4zswj63S37gymcb35PFmFooUEItJ/WXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsgO_EkphsT/YD6 2t z_dodcIO0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08O/uXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSU/GAcLlmJPzj1b/En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd/34AbRwr1Mi1qq8Bv/7r73NXsLH6lkp_YwgeBZkfv7aEST19XJTe9 4t GIqXuFdD/054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YYD7uU6_-V/RO7VbVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GL/dkyb0ofYJLarfJrS4gkeTAfK5NMnpgtwWLpKWVb8A/uQa TKwyJvJPBgILfXHpRfA79W9rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpE/9wjR SU K0GOwW4T/aO1NV6_Hx-5jhuPYUigmskjs38qptZPjGbQcMS6bq4jio6/n_hxYgCm- Z/K_7Ms5LyP8NoYNVF5v/C_I7qzU/pSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL92Y/TDLRif4BX0k_kxk-VTaov2mlM18SfVTJ/mcMNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei/m5FrnEpLvFqwhHFvdn0kEWtwPAhULVh_u/c  m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW\",\n        pipeline_id=\"pipeline_id_example\",\n        tags=CreateAnalysisTag(\n            technical_tags=[\n                \"technical_tags_example\",\n            ],\n            user_tags=[\n                \"user_tags_example\",\n            ],\n            reference_tags=[\n                \"reference_tags_example\",\n            ],\n        ),\n        analysis_storage_id=\"analysis_storage_id_example\",\n        output_parent_folder_id=\"output_parent_folder_id_example\",\n        analysis_output=[\n            AnalysisOutputMapping(\n                source_path=\"source_path_example\",\n                type=\"FILE\",\n                target_project_id=\"target_project_id_example\",\n                target_path=\"target_path_example\",\n                action_on_exist=\"action_on_exist_example\",\n            ),\n        ],\n        input_form_values=CwlJsonAnalysisInput(\n            fields=[\n                InputFormFieldValues(\n                    id=\"id_example\",\n                    values=[\n                        \"values_example\",\n                    ],\n                    data_values=[\n                        InputFormData(\n                            data_id=\"data_id_example\",\n                            mount_path=\"mount_path_example\",\n                        ),\n                    ],\n                    external_data_values=[\n                        AnalysisInputExternalData(\n                            url=\"url_example\",\n                            type=\"basespac\",\n                            mount_path=\"mount_path_example\",\n                            s3_details=AnalysisS3DataDetails(\n                                storage_credentials_id=\"storage_credentials_id_example\",\n                            ),\n                            basespace_details=AnalysisBaseSpaceDataDetails(\n                                workgroup_id=\"workgroup_id_example\",\n                                extensions=\"extensions_example\",\n                                path_prefix=\"path_prefix_example\",\n                            ),\n                        ),\n                    ],\n                ),\n            ],\n            groups=[\n                InputFormGroup(\n                    id=\"id_example\",\n                    values=[\n                        InputFormGroupFieldValues(\n                            values=[\n                                InputFormFieldValues(\n                                    id=\"id_example\",\n                                    values=[\n                                        \"values_example\",\n                                    ],\n                                    data_values=[\n                                        InputFormData(\n                                            data_id=\"data_id_example\",\n                                            mount_path=\"mount_path_example\",\n                                        ),\n                                    ],\n                                    external_data_values=[\n                                        AnalysisInputExternalData(\n                                            url=\"url_example\",\n                                            type=\"basespac\",\n                                            mount_path=\"mount_path_example\",\n                                            s3_details=AnalysisS3DataDetails(\n                                                storage_credentials_id=\"storage_credentials_id_example\",\n                                            ),\n                                            basespace_details=AnalysisBaseSpaceDataDetails(\n                                                workgroup_id=\"workgroup_id_example\",\n                                                extensions=\"extensions_example\",\n                                                path_prefix=\"path_prefix_example\",\n                                            ),\n                                        ),\n                                    ],\n                                ),\n                            ],\n                        ),\n                    ],\n                ),\n            ],\n        ),\n    ) # CreateCwlJsonAnalysis | The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt;\n    idempotency_key = \"Idempotency-Key_example\" # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create and start an analysis for a JSON based CWL pipeline.\n        api_response = api_instance.create_cwl_json_analysis(project_id, create_cwl_json_analysis)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_cwl_json_analysis: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create and start an analysis for a JSON based CWL pipeline.\n        api_response = api_instance.create_cwl_json_analysis(project_id, create_cwl_json_analysis, idempotency_key=idempotency_key)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_cwl_json_analysis: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str create_cwl_json_analysis CreateCwlJsonAnalysis The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt; idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_4","title":"Return type","text":"<p>AnalysisV4</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 201 The analysis is successfully created and scheduled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#create_nextflow_analysis","title":"create_nextflow_analysis","text":"<p>AnalysisV4 create_nextflow_analysis(project_id, create_nextflow_analysis)</p> <p>Create and start an analysis for a Nextflow pipeline.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#changelog-for-this-endpoint-multiple-versions-exist-note-that-the-values-for-request-headers-content-type-and-accept-must-contain-a-matching-version-v3-initial-version-v4-field-type-status-changed-from-enum-to-string-new-statuses-have-been-added-queued-initializing-preparing_inputs-generating_outputs-aborting-field-analysispriority-changed-from-enum-to-string-the-owner-and-tenant-are-now-represented-by-identifier-objects_1","title":"Changelog For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.  ## [V3]  * Initial version ## [V4]  * Field type 'status' changed from enum to String. New statuses have been added: ['QUEUED', 'INITIALIZING', 'PREPARING_INPUTS', 'GENERATING_OUTPUTS', 'ABORTING'].  * Field analysisPriority changed from enum to String.  * The owner and tenant are now represented by Identifier objects.","text":""},{"location":"v2/docs/ProjectAnalysisApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.analysis_v3 import AnalysisV3\nfrom libica.openapi.v2.model.create_nextflow_analysis import CreateNextflowAnalysis\nfrom libica.openapi.v2.model.analysis_v4 import AnalysisV4\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_nextflow_analysis = CreateNextflowAnalysis(\n        user_reference=\"26bUUGjjNSwg0_bs9ZayIM/dgN/b6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_dz/rEoBi0LnU8SsOWJ7wYrczi/Qdt8mVLxbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZepezJ0-VmLSUTLYyW- e_jxxzpBvw-y P/SI-13 AOsiPRVvnXrDhh58EJzzOxprDzE3pjHRAkK7vI7/jcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGxjARc6SZKg2qV/ hA054g00j8CXRM4JZgexx5/BmiUdb8V-5tS7Ce-8OP8jM6Q/ap ieHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8M6xmSejA6BGR RDxxWc493QsJ JFt/rxtNb3BtpHGNB33FSli/EaSDC3Jwlo9Aq-OZySuGXBwuNL5ICjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGahEx5as4igHCaW/gfGuN6Yogo9e2fmFQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z-LtIx RE8z6ZbHjz/3coUV uT/EXw3Z8KLTvaqhteQpbwYU8rf85eyxCXQ02l2UfQbP/Hwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9OYCpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3/B7Nke4pyLFXi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7RTuj3iloSmvq6ptM/paqws8RfvaYMfrqa8yWUb/aew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8imaC5It9ZEZjIoZP9V1EjbA-tFQv/KOFpHUcVNnqDdEconiUhJ/_OYqv01dQetO3oDTHSQdhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0N/GhiW92gAEui/l WoiEW-tzti/9q3K407VNjp2Rdt_M_wxbjDN svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hn/97bNktDzITop4y58kMdi7sEjYIZXQNI/G2UN7cFEvraG_8ul060s0W5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD/EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXx/cpcof84rc bTU20M2sFqt4zswj63S37gymcb35PFmFooUEItJ/WXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsgO_EkphsT/YD6 2t z_dodcIO0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08O/uXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSU/GAcLlmJPzj1b/En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd/34AbRwr1Mi1qq8Bv/7r73NXsLH6lkp_YwgeBZkfv7aEST19XJTe9 4t GIqXuFdD/054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YYD7uU6_-V/RO7VbVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GL/dkyb0ofYJLarfJrS4gkeTAfK5NMnpgtwWLpKWVb8A/uQa TKwyJvJPBgILfXHpRfA79W9rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpE/9wjR SU K0GOwW4T/aO1NV6_Hx-5jhuPYUigmskjs38qptZPjGbQcMS6bq4jio6/n_hxYgCm- Z/K_7Ms5LyP8NoYNVF5v/C_I7qzU/pSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL92Y/TDLRif4BX0k_kxk-VTaov2mlM18SfVTJ/mcMNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei/m5FrnEpLvFqwhHFvdn0kEWtwPAhULVh_u/c  m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW\",\n        pipeline_id=\"pipeline_id_example\",\n        tags=CreateAnalysisTag(\n            technical_tags=[\n                \"technical_tags_example\",\n            ],\n            user_tags=[\n                \"user_tags_example\",\n            ],\n            reference_tags=[\n                \"reference_tags_example\",\n            ],\n        ),\n        analysis_storage_id=\"analysis_storage_id_example\",\n        output_parent_folder_id=\"output_parent_folder_id_example\",\n        analysis_output=[\n            AnalysisOutputMapping(\n                source_path=\"source_path_example\",\n                type=\"FILE\",\n                target_project_id=\"target_project_id_example\",\n                target_path=\"target_path_example\",\n                action_on_exist=\"action_on_exist_example\",\n            ),\n        ],\n        analysis_input=NextflowAnalysisInput(\n            inputs=[\n                AnalysisDataInput(\n                    parameter_code=\"parameter_code_example\",\n                    data_ids=[\n                        \"data_ids_example\",\n                    ],\n                    mounts=[\n                        AnalysisInputDataMount(\n                            data_id=\"data_id_example\",\n                            mount_path=\"mount_path_example\",\n                        ),\n                    ],\n                    external_data=[\n                        AnalysisInputExternalData(\n                            url=\"url_example\",\n                            type=\"basespac\",\n                            mount_path=\"mount_path_example\",\n                            s3_details=AnalysisS3DataDetails(\n                                storage_credentials_id=\"storage_credentials_id_example\",\n                            ),\n                            basespace_details=AnalysisBaseSpaceDataDetails(\n                                workgroup_id=\"workgroup_id_example\",\n                                extensions=\"extensions_example\",\n                                path_prefix=\"path_prefix_example\",\n                            ),\n                        ),\n                    ],\n                ),\n            ],\n            parameters=[\n                AnalysisParameterInput(\n                    code=\"code_example\",\n                    value=\"value_example\",\n                    multi_value=[\n                        \"multi_value_example\",\n                    ],\n                ),\n            ],\n            reference_data_parameters=[\n                AnalysisReferenceDataParameter(\n                    parameter_code=\"parameter_code_example\",\n                    reference_data_id=\"reference_data_id_example\",\n                ),\n            ],\n        ),\n        activation_code_detail_id=\"activation_code_detail_id_example\",\n    ) # CreateNextflowAnalysis | The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt;\n    idempotency_key = \"Idempotency-Key_example\" # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create and start an analysis for a Nextflow pipeline.\n        api_response = api_instance.create_nextflow_analysis(project_id, create_nextflow_analysis)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_nextflow_analysis: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create and start an analysis for a Nextflow pipeline.\n        api_response = api_instance.create_nextflow_analysis(project_id, create_nextflow_analysis, idempotency_key=idempotency_key)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_nextflow_analysis: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes project_id str create_nextflow_analysis CreateNextflowAnalysis The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt; idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_5","title":"Return type","text":"<p>AnalysisV4</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_5","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 201 The analysis is successfully created and scheduled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#create_nextflow_analysis_with_custom_input","title":"create_nextflow_analysis_with_custom_input","text":"<p>AnalysisV4 create_nextflow_analysis_with_custom_input(project_id, create_nextflow_with_custom_input_analysis)</p> <p>Create and initiate an analysis for a Nextflow pipeline using a custom input, provided in either YAML format or an escaped JSON string.</p> <p>This endpoint is intended to be used with a custom input and will bypass the input form. The combination of using this endpoint with a custom input for a json-form based pipeline with sensitive fields defined is not possible.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_6","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.create_nextflow_with_custom_input_analysis import CreateNextflowWithCustomInputAnalysis\nfrom libica.openapi.v2.model.analysis_v4 import AnalysisV4\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_nextflow_with_custom_input_analysis = CreateNextflowWithCustomInputAnalysis(\n        user_reference=\"26bUUGjjNSwg0_bs9ZayIM/dgN/b6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_dz/rEoBi0LnU8SsOWJ7wYrczi/Qdt8mVLxbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZepezJ0-VmLSUTLYyW- e_jxxzpBvw-y P/SI-13 AOsiPRVvnXrDhh58EJzzOxprDzE3pjHRAkK7vI7/jcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGxjARc6SZKg2qV/ hA054g00j8CXRM4JZgexx5/BmiUdb8V-5tS7Ce-8OP8jM6Q/ap ieHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8M6xmSejA6BGR RDxxWc493QsJ JFt/rxtNb3BtpHGNB33FSli/EaSDC3Jwlo9Aq-OZySuGXBwuNL5ICjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGahEx5as4igHCaW/gfGuN6Yogo9e2fmFQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z-LtIx RE8z6ZbHjz/3coUV uT/EXw3Z8KLTvaqhteQpbwYU8rf85eyxCXQ02l2UfQbP/Hwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9OYCpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3/B7Nke4pyLFXi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7RTuj3iloSmvq6ptM/paqws8RfvaYMfrqa8yWUb/aew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8imaC5It9ZEZjIoZP9V1EjbA-tFQv/KOFpHUcVNnqDdEconiUhJ/_OYqv01dQetO3oDTHSQdhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0N/GhiW92gAEui/l WoiEW-tzti/9q3K407VNjp2Rdt_M_wxbjDN svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hn/97bNktDzITop4y58kMdi7sEjYIZXQNI/G2UN7cFEvraG_8ul060s0W5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD/EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXx/cpcof84rc bTU20M2sFqt4zswj63S37gymcb35PFmFooUEItJ/WXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsgO_EkphsT/YD6 2t z_dodcIO0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08O/uXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSU/GAcLlmJPzj1b/En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd/34AbRwr1Mi1qq8Bv/7r73NXsLH6lkp_YwgeBZkfv7aEST19XJTe9 4t GIqXuFdD/054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YYD7uU6_-V/RO7VbVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GL/dkyb0ofYJLarfJrS4gkeTAfK5NMnpgtwWLpKWVb8A/uQa TKwyJvJPBgILfXHpRfA79W9rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpE/9wjR SU K0GOwW4T/aO1NV6_Hx-5jhuPYUigmskjs38qptZPjGbQcMS6bq4jio6/n_hxYgCm- Z/K_7Ms5LyP8NoYNVF5v/C_I7qzU/pSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL92Y/TDLRif4BX0k_kxk-VTaov2mlM18SfVTJ/mcMNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei/m5FrnEpLvFqwhHFvdn0kEWtwPAhULVh_u/c  m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW\",\n        pipeline_id=\"pipeline_id_example\",\n        tags=CreateAnalysisTag(\n            technical_tags=[\n                \"technical_tags_example\",\n            ],\n            user_tags=[\n                \"user_tags_example\",\n            ],\n            reference_tags=[\n                \"reference_tags_example\",\n            ],\n        ),\n        analysis_storage_id=\"analysis_storage_id_example\",\n        output_parent_folder_id=\"output_parent_folder_id_example\",\n        analysis_output=[\n            AnalysisOutputMapping(\n                source_path=\"source_path_example\",\n                type=\"FILE\",\n                target_project_id=\"target_project_id_example\",\n                target_path=\"target_path_example\",\n                action_on_exist=\"action_on_exist_example\",\n            ),\n        ],\n        analysis_input=NextflowAnalysisWithCustomInput(\n            custom_input=\"custom_input_example\",\n            data_ids=[\n                \"data_ids_example\",\n            ],\n            mounts=[\n                AnalysisInputDataMount(\n                    data_id=\"data_id_example\",\n                    mount_path=\"mount_path_example\",\n                ),\n            ],\n            external_data=[\n                AnalysisInputExternalData(\n                    url=\"url_example\",\n                    type=\"basespac\",\n                    mount_path=\"mount_path_example\",\n                    s3_details=AnalysisS3DataDetails(\n                        storage_credentials_id=\"storage_credentials_id_example\",\n                    ),\n                    basespace_details=AnalysisBaseSpaceDataDetails(\n                        workgroup_id=\"workgroup_id_example\",\n                        extensions=\"extensions_example\",\n                        path_prefix=\"path_prefix_example\",\n                    ),\n                ),\n            ],\n        ),\n    ) # CreateNextflowWithCustomInputAnalysis | The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt;\n    idempotency_key = \"Idempotency-Key_example\" # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create and initiate an analysis for a Nextflow pipeline using a custom input, provided in either YAML format or an escaped JSON string.\n        api_response = api_instance.create_nextflow_analysis_with_custom_input(project_id, create_nextflow_with_custom_input_analysis)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_nextflow_analysis_with_custom_input: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create and initiate an analysis for a Nextflow pipeline using a custom input, provided in either YAML format or an escaped JSON string.\n        api_response = api_instance.create_nextflow_analysis_with_custom_input(project_id, create_nextflow_with_custom_input_analysis, idempotency_key=idempotency_key)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_nextflow_analysis_with_custom_input: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes project_id str create_nextflow_with_custom_input_analysis CreateNextflowWithCustomInputAnalysis The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt; idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_6","title":"Return type","text":"<p>AnalysisV4</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_6","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 201 The analysis is successfully created and scheduled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#create_nextflow_json_analysis","title":"create_nextflow_json_analysis","text":"<p>AnalysisV4 create_nextflow_json_analysis(project_id, create_nextflow_json_analysis)</p> <p>Create and start an analysis for a JSON based Nextflow pipeline.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_7","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.create_nextflow_json_analysis import CreateNextflowJsonAnalysis\nfrom libica.openapi.v2.model.analysis_v4 import AnalysisV4\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_nextflow_json_analysis = CreateNextflowJsonAnalysis(\n        user_reference=\"26bUUGjjNSwg0_bs9ZayIM/dgN/b6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_dz/rEoBi0LnU8SsOWJ7wYrczi/Qdt8mVLxbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZepezJ0-VmLSUTLYyW- e_jxxzpBvw-y P/SI-13 AOsiPRVvnXrDhh58EJzzOxprDzE3pjHRAkK7vI7/jcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGxjARc6SZKg2qV/ hA054g00j8CXRM4JZgexx5/BmiUdb8V-5tS7Ce-8OP8jM6Q/ap ieHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8M6xmSejA6BGR RDxxWc493QsJ JFt/rxtNb3BtpHGNB33FSli/EaSDC3Jwlo9Aq-OZySuGXBwuNL5ICjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGahEx5as4igHCaW/gfGuN6Yogo9e2fmFQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z-LtIx RE8z6ZbHjz/3coUV uT/EXw3Z8KLTvaqhteQpbwYU8rf85eyxCXQ02l2UfQbP/Hwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9OYCpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3/B7Nke4pyLFXi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7RTuj3iloSmvq6ptM/paqws8RfvaYMfrqa8yWUb/aew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8imaC5It9ZEZjIoZP9V1EjbA-tFQv/KOFpHUcVNnqDdEconiUhJ/_OYqv01dQetO3oDTHSQdhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0N/GhiW92gAEui/l WoiEW-tzti/9q3K407VNjp2Rdt_M_wxbjDN svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hn/97bNktDzITop4y58kMdi7sEjYIZXQNI/G2UN7cFEvraG_8ul060s0W5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD/EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXx/cpcof84rc bTU20M2sFqt4zswj63S37gymcb35PFmFooUEItJ/WXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsgO_EkphsT/YD6 2t z_dodcIO0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08O/uXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSU/GAcLlmJPzj1b/En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd/34AbRwr1Mi1qq8Bv/7r73NXsLH6lkp_YwgeBZkfv7aEST19XJTe9 4t GIqXuFdD/054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YYD7uU6_-V/RO7VbVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GL/dkyb0ofYJLarfJrS4gkeTAfK5NMnpgtwWLpKWVb8A/uQa TKwyJvJPBgILfXHpRfA79W9rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpE/9wjR SU K0GOwW4T/aO1NV6_Hx-5jhuPYUigmskjs38qptZPjGbQcMS6bq4jio6/n_hxYgCm- Z/K_7Ms5LyP8NoYNVF5v/C_I7qzU/pSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL92Y/TDLRif4BX0k_kxk-VTaov2mlM18SfVTJ/mcMNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei/m5FrnEpLvFqwhHFvdn0kEWtwPAhULVh_u/c  m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW\",\n        pipeline_id=\"pipeline_id_example\",\n        tags=CreateAnalysisTag(\n            technical_tags=[\n                \"technical_tags_example\",\n            ],\n            user_tags=[\n                \"user_tags_example\",\n            ],\n            reference_tags=[\n                \"reference_tags_example\",\n            ],\n        ),\n        analysis_storage_id=\"analysis_storage_id_example\",\n        output_parent_folder_id=\"output_parent_folder_id_example\",\n        analysis_output=[\n            AnalysisOutputMapping(\n                source_path=\"source_path_example\",\n                type=\"FILE\",\n                target_project_id=\"target_project_id_example\",\n                target_path=\"target_path_example\",\n                action_on_exist=\"action_on_exist_example\",\n            ),\n        ],\n        input_form_values=NextflowJsonAnalysisInput(\n            fields=[\n                InputFormFieldValues(\n                    id=\"id_example\",\n                    values=[\n                        \"values_example\",\n                    ],\n                    data_values=[\n                        InputFormData(\n                            data_id=\"data_id_example\",\n                            mount_path=\"mount_path_example\",\n                        ),\n                    ],\n                    external_data_values=[\n                        AnalysisInputExternalData(\n                            url=\"url_example\",\n                            type=\"basespac\",\n                            mount_path=\"mount_path_example\",\n                            s3_details=AnalysisS3DataDetails(\n                                storage_credentials_id=\"storage_credentials_id_example\",\n                            ),\n                            basespace_details=AnalysisBaseSpaceDataDetails(\n                                workgroup_id=\"workgroup_id_example\",\n                                extensions=\"extensions_example\",\n                                path_prefix=\"path_prefix_example\",\n                            ),\n                        ),\n                    ],\n                ),\n            ],\n            groups=[\n                InputFormGroup(\n                    id=\"id_example\",\n                    values=[\n                        InputFormGroupFieldValues(\n                            values=[\n                                InputFormFieldValues(\n                                    id=\"id_example\",\n                                    values=[\n                                        \"values_example\",\n                                    ],\n                                    data_values=[\n                                        InputFormData(\n                                            data_id=\"data_id_example\",\n                                            mount_path=\"mount_path_example\",\n                                        ),\n                                    ],\n                                    external_data_values=[\n                                        AnalysisInputExternalData(\n                                            url=\"url_example\",\n                                            type=\"basespac\",\n                                            mount_path=\"mount_path_example\",\n                                            s3_details=AnalysisS3DataDetails(\n                                                storage_credentials_id=\"storage_credentials_id_example\",\n                                            ),\n                                            basespace_details=AnalysisBaseSpaceDataDetails(\n                                                workgroup_id=\"workgroup_id_example\",\n                                                extensions=\"extensions_example\",\n                                                path_prefix=\"path_prefix_example\",\n                                            ),\n                                        ),\n                                    ],\n                                ),\n                            ],\n                        ),\n                    ],\n                ),\n            ],\n        ),\n    ) # CreateNextflowJsonAnalysis | The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt;\n    idempotency_key = \"Idempotency-Key_example\" # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create and start an analysis for a JSON based Nextflow pipeline.\n        api_response = api_instance.create_nextflow_json_analysis(project_id, create_nextflow_json_analysis)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_nextflow_json_analysis: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create and start an analysis for a JSON based Nextflow pipeline.\n        api_response = api_instance.create_nextflow_json_analysis(project_id, create_nextflow_json_analysis, idempotency_key=idempotency_key)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_nextflow_json_analysis: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes project_id str create_nextflow_json_analysis CreateNextflowJsonAnalysis The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt; idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_7","title":"Return type","text":"<p>AnalysisV4</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_7","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 201 The analysis is successfully created and scheduled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#get_analyses","title":"get_analyses","text":"<p>AnalysisPagedListV3 get_analyses(project_id)</p> <p>Retrieve the list of analyses.</p> <p>This endpoint only returns V3 items. Use the search endpoint to get V4 items.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_8","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.analysis_paged_list_v3 import AnalysisPagedListV3\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    reference = \"reference_example\" # str | The reference to filter on. (optional)\n    userreference = \"userreference_example\" # str | The user-reference to filter on. (optional)\n    status = \"status_example\" # str | The status to filter on. (optional)\n    usertag = \"usertag_example\" # str | The user-tags to filter on. (optional)\n    technicaltag = \"technicaltag_example\" # str | The technical-tags to filter on. (optional)\n    referencetag = \"referencetag_example\" # str | The reference-data-tags to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the list of analyses.\n        api_response = api_instance.get_analyses(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analyses: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve the list of analyses.\n        api_response = api_instance.get_analyses(project_id, reference=reference, userreference=userreference, status=status, usertag=usertag, technicaltag=technicaltag, referencetag=referencetag, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analyses: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes project_id str reference str The reference to filter on. [optional] userreference str The user-reference to filter on. [optional] status str The status to filter on. [optional] usertag str The user-tags to filter on. [optional] technicaltag str The technical-tags to filter on. [optional] referencetag str The reference-data-tags to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary [optional]"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_8","title":"Return type","text":"<p>AnalysisPagedListV3</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_8","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project analyses is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#get_analysis","title":"get_analysis","text":"<p>AnalysisV4 get_analysis(project_id, analysis_id)</p> <p>Retrieve an analysis.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#changelog-for-this-endpoint-multiple-versions-exist-note-that-the-values-for-request-headers-content-type-and-accept-must-contain-a-matching-version-v3-initial-version-v4-field-type-status-changed-from-enum-to-string-new-statuses-have-been-added-queued-initializing-preparing_inputs-generating_outputs-aborting-field-analysispriority-changed-from-enum-to-string-the-owner-and-tenant-are-now-represented-by-identifier-objects_2","title":"Changelog For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.  ## [V3]  * Initial version ## [V4]  * Field type 'status' changed from enum to String. New statuses have been added: ['QUEUED', 'INITIALIZING', 'PREPARING_INPUTS', 'GENERATING_OUTPUTS', 'ABORTING'].  * Field analysisPriority changed from enum to String.  * The owner and tenant are now represented by Identifier objects.","text":""},{"location":"v2/docs/ProjectAnalysisApi/#example_9","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.analysis_v3 import AnalysisV3\nfrom libica.openapi.v2.model.analysis_v4 import AnalysisV4\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve an analysis.\n        api_response = api_instance.get_analysis(project_id, analysis_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analysis: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_9","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_9","title":"Return type","text":"<p>AnalysisV4</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_9","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_9","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_9","title":"HTTP response details","text":"Status code Description Response headers 200 The analysis is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#get_analysis_configurations","title":"get_analysis_configurations","text":"<p>ExecutionConfigurationList get_analysis_configurations(project_id, analysis_id)</p> <p>Retrieve the configurations of an analysis.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_10","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.execution_configuration_list import ExecutionConfigurationList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve the configuration for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the configurations of an analysis.\n        api_response = api_instance.get_analysis_configurations(project_id, analysis_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analysis_configurations: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_10","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the configuration for"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_10","title":"Return type","text":"<p>ExecutionConfigurationList</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_10","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_10","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_10","title":"HTTP response details","text":"Status code Description Response headers 200 The configurations of the analysis are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#get_analysis_inputs","title":"get_analysis_inputs","text":"<p>AnalysisInputList get_analysis_inputs(project_id, analysis_id)</p> <p>Retrieve the inputs of an analysis.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_11","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.analysis_input_list import AnalysisInputList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve the inputs for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the inputs of an analysis.\n        api_response = api_instance.get_analysis_inputs(project_id, analysis_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analysis_inputs: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_11","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the inputs for"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_11","title":"Return type","text":"<p>AnalysisInputList</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_11","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_11","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_11","title":"HTTP response details","text":"Status code Description Response headers 200 The inputs of the analysis are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#get_analysis_outputs","title":"get_analysis_outputs","text":"<p>AnalysisOutputList get_analysis_outputs(project_id, analysis_id)</p> <p>Retrieve the outputs of an analysis (limited to the first 200.000 files per output folder). When trying to retrieve the listed data with an endpoint such as GET /api/data/{dataUrn}, data which has already been deleted will be skipped.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_12","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.analysis_output_list import AnalysisOutputList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve the outputs for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the outputs of an analysis (limited to the first 200.000 files per output folder). When trying to retrieve the listed data with an endpoint such as GET /api/data/{dataUrn}, data which has already been deleted will be skipped.\n        api_response = api_instance.get_analysis_outputs(project_id, analysis_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analysis_outputs: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_12","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the outputs for"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_12","title":"Return type","text":"<p>AnalysisOutputList</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_12","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_12","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_12","title":"HTTP response details","text":"Status code Description Response headers 200 The outputs of the analysis are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#get_analysis_reports","title":"get_analysis_reports","text":"<p>AnalysisReportEntryList get_analysis_reports(project_id, analysis_id)</p> <p>Retrieve the report configs and associated reports.</p> <p>Retrieves the reports which match the report config defined in a pipeline.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_13","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.analysis_report_entry_list import AnalysisReportEntryList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve the reports for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the report configs and associated reports.\n        api_response = api_instance.get_analysis_reports(project_id, analysis_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analysis_reports: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_13","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the reports for"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_13","title":"Return type","text":"<p>AnalysisReportEntryList</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_13","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_13","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_13","title":"HTTP response details","text":"Status code Description Response headers 200 The reports are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#get_analysis_steps","title":"get_analysis_steps","text":"<p>AnalysisStepList get_analysis_steps(project_id, analysis_id)</p> <p>Retrieve the individual steps of an analysis.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_14","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.analysis_step_list import AnalysisStepList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve the individual steps for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the individual steps of an analysis.\n        api_response = api_instance.get_analysis_steps(project_id, analysis_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analysis_steps: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_14","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the individual steps for"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_14","title":"Return type","text":"<p>AnalysisStepList</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_14","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_14","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_14","title":"HTTP response details","text":"Status code Description Response headers 200 The individual steps of the analysis are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#get_analysis_usage_details","title":"get_analysis_usage_details","text":"<p>AnalysisUsageDetails get_analysis_usage_details(project_id, analysis_id)</p> <p>Retrieve the analysis usage details.</p> <p>The usage details can be retrieved once the analysis has completed with status SUCCEEDED or FAILED. It may take several minutes for the information to become available. A 404 status indicates that the system is busy processing the information.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_15","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.analysis_usage_details import AnalysisUsageDetails\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve the usage details for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the analysis usage details.\n        api_response = api_instance.get_analysis_usage_details(project_id, analysis_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analysis_usage_details: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_15","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the usage details for"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_15","title":"Return type","text":"<p>AnalysisUsageDetails</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_15","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_15","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_15","title":"HTTP response details","text":"Status code Description Response headers 200 The analysis usage details are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#get_cwl_input_json","title":"get_cwl_input_json","text":"<p>CwlAnalysisInputJson get_cwl_input_json(project_id, analysis_id)</p> <p>Retrieve the input json of a CWL analysis.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_16","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.cwl_analysis_input_json import CwlAnalysisInputJson\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | The ID of the CWL analysis for which to retrieve the input json\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the input json of a CWL analysis.\n        api_response = api_instance.get_cwl_input_json(project_id, analysis_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_cwl_input_json: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_16","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the CWL analysis for which to retrieve the input json"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_16","title":"Return type","text":"<p>CwlAnalysisInputJson</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_16","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_16","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_16","title":"HTTP response details","text":"Status code Description Response headers 200 The input json of the CWL analysis is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#get_cwl_output_json","title":"get_cwl_output_json","text":"<p>CwlAnalysisOutputJson get_cwl_output_json(project_id, analysis_id)</p> <p>Retrieve the output json of a CWL analysis.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_17","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.cwl_analysis_output_json import CwlAnalysisOutputJson\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | The ID of the CWL analysis for which to retrieve the output json\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the output json of a CWL analysis.\n        api_response = api_instance.get_cwl_output_json(project_id, analysis_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_cwl_output_json: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_17","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the CWL analysis for which to retrieve the output json"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_17","title":"Return type","text":"<p>CwlAnalysisOutputJson</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_17","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_17","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_17","title":"HTTP response details","text":"Status code Description Response headers 200 The output json of the CWL analysis is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#get_project_analysis_input_form_values","title":"get_project_analysis_input_form_values","text":"<p>InputFormFieldList get_project_analysis_input_form_values(project_id, analysis_id)</p> <p>Retrieve the values from an input form.</p> <p>Retrieve the values from an input form of a JSON based pipeline used to start an analysis.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_18","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.input_form_field_list import InputFormFieldList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | The ID of the analysis to retrieve the input form values from\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the values from an input form.\n        api_response = api_instance.get_project_analysis_input_form_values(project_id, analysis_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_project_analysis_input_form_values: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_18","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the input form values from"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_18","title":"Return type","text":"<p>InputFormFieldList</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_18","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_18","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_18","title":"HTTP response details","text":"Status code Description Response headers 200 The input form values are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#get_raw_analysis_output","title":"get_raw_analysis_output","text":"<p>AnalysisRawOutput get_raw_analysis_output(project_id, analysis_id)</p> <p>Retrieve the raw output of an analysis.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_19","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom libica.openapi.v2.model.analysis_raw_output import AnalysisRawOutput\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | The ID of the analysis for which to retrieve the raw output\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the raw output of an analysis.\n        api_response = api_instance.get_raw_analysis_output(project_id, analysis_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_raw_analysis_output: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_19","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis for which to retrieve the raw output"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_19","title":"Return type","text":"<p>AnalysisRawOutput</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_19","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_19","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_19","title":"HTTP response details","text":"Status code Description Response headers 200 The raw output of the analysis is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#search_analyses","title":"search_analyses","text":"<p>AnalysisPagedListV4 search_analyses(project_id)</p> <p>Search analyses.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#example_20","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.analysis_query_parameters import AnalysisQueryParameters\nfrom libica.openapi.v2.model.analysis_paged_list_v4 import AnalysisPagedListV4\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary  (optional)\n    analysis_query_parameters = AnalysisQueryParameters(\n        reference=\"reference_example\",\n        user_reference=\"user_reference_example\",\n        status=[\n            \"SUCCEEDED\",\n        ],\n        user_tags=[\n            \"user_tags_example\",\n        ],\n        technical_tags=[\n            \"technical_tags_example\",\n        ],\n        reference_tags=[\n            \"reference_tags_example\",\n        ],\n    ) # AnalysisQueryParameters |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Search analyses.\n        api_response = api_instance.search_analyses(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;search_analyses: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Search analyses.\n        api_response = api_instance.search_analyses(project_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort, analysis_query_parameters=analysis_query_parameters)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;search_analyses: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_20","title":"Parameters","text":"Name Type Description Notes project_id str page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary [optional] analysis_query_parameters AnalysisQueryParameters [optional]"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_20","title":"Return type","text":"<p>AnalysisPagedListV4</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_20","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_20","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_20","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project analyses is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisApi/#update_analysis","title":"update_analysis","text":"<p>AnalysisV4 update_analysis(project_id, analysis_id, analysis_v4)</p> <p>Update an analysis.</p>"},{"location":"v2/docs/ProjectAnalysisApi/#attributes-which-can-be-updated-tags-changelog-for-this-endpoint-multiple-versions-exist-note-that-the-values-for-request-headers-content-type-and-accept-must-contain-a-matching-version-v3-initial-version-v4-field-type-status-changed-from-enum-to-string-new-statuses-have-been-added-queued-initializing-preparing_inputs-generating_outputs-aborting-field-analysispriority-changed-from-enum-to-string-the-owner-and-tenant-are-now-represented-by-identifier-objects","title":"Attributes which can be updated:    - tags # Changelog For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.  ## [V3]  * Initial version ## [V4]  * Field type 'status' changed from enum to String. New statuses have been added: ['QUEUED', 'INITIALIZING', 'PREPARING_INPUTS', 'GENERATING_OUTPUTS', 'ABORTING'].  * Field analysisPriority changed from enum to String.  * The owner and tenant are now represented by Identifier objects.","text":""},{"location":"v2/docs/ProjectAnalysisApi/#example_21","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_api\nfrom libica.openapi.v2.model.analysis_v3 import AnalysisV3\nfrom libica.openapi.v2.model.analysis_v4 import AnalysisV4\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_api.ProjectAnalysisApi(api_client)\n    project_id = \"projectId_example\" # str | \n    analysis_id = \"analysisId_example\" # str | \n    analysis_v4 = AnalysisV4(\n        id=\"id_example\",\n        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        owner=UserIdentifier(\n            id=\"id_example\",\n        ),\n        tenant=TenantIdentifier(\n            id=\"id_example\",\n            name=\"name_example\",\n        ),\n        reference=\"reference_example\",\n        user_reference=\"user_reference_example\",\n        pipeline=PipelineV4(\n            id=\"id_example\",\n            urn=\"urn_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner=UserIdentifier(\n                id=\"id_example\",\n            ),\n            tenant=TenantIdentifier(\n                id=\"id_example\",\n                name=\"name_example\",\n            ),\n            code=\"code_example\",\n            description=\"description_example\",\n            status=\"DRAFT\",\n            language=\"CWL\",\n            language_version=PipelineLanguageVersion(\n                id=\"id_example\",\n                name=\"name_example\",\n                language=\"CWL\",\n            ),\n            pipeline_tags=PipelineTag(\n                technical_tags=[\n                    \"technical_tags_example\",\n                ],\n            ),\n            analysis_storage=AnalysisStorageV4(\n                id=\"id_example\",\n                name=\"name_example\",\n                description=\"description_example\",\n            ),\n            proprietary=False,\n            input_form_type=\"XML\",\n            report_configs=PipelineReportConfig(\n                configs=[\n                    Config(\n                        name=\"name_example\",\n                        regex=\"regex_example\",\n                        format=\"format_example\",\n                    ),\n                ],\n            ),\n        ),\n        workflow_session=WorkflowSessionV4(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner=UserIdentifier(\n                id=\"id_example\",\n            ),\n            tenant=TenantIdentifier(\n                id=\"id_example\",\n                name=\"name_example\",\n            ),\n            user_reference=\"user_reference_example\",\n            workflow=WorkflowV4(\n                id=\"id_example\",\n                code=\"code_example\",\n                urn=\"urn_example\",\n                description=\"description_example\",\n                language_version=PipelineLanguageVersion(\n                    id=\"id_example\",\n                    name=\"name_example\",\n                    language=\"CWL\",\n                ),\n                workflow_tags=PipelineTag(\n                    technical_tags=[\n                        \"technical_tags_example\",\n                    ],\n                ),\n                analysis_storage=AnalysisStorageV4(\n                    id=\"id_example\",\n                    name=\"name_example\",\n                    description=\"description_example\",\n                ),\n            ),\n            status=\"SUCCEEDED\",\n            start_date=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            end_date=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            summary=\"summary_example\",\n            tags=WorkflowSessionTag(\n                technical_tags=[\n                    \"technical_tags_example\",\n                ],\n                user_tags=[\n                    \"user_tags_example\",\n                ],\n            ),\n        ),\n        status=\"SUCCEEDED\",\n        start_date=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        end_date=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        summary=\"summary_example\",\n        analysis_storage=AnalysisStorageV4(\n            id=\"id_example\",\n            name=\"name_example\",\n            description=\"description_example\",\n        ),\n        analysis_priority=\"HIG\",\n        tags=AnalysisTag(\n            technical_tags=[\n                \"technical_tags_example\",\n            ],\n            user_tags=[\n                \"user_tags_example\",\n            ],\n            reference_tags=[\n                \"reference_tags_example\",\n            ],\n        ),\n        application=ApplicationV4(\n            id=\"id_example\",\n            name=\"name_example\",\n        ),\n    ) # AnalysisV4 | \n    if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update an analysis.\n        api_response = api_instance.update_analysis(project_id, analysis_id, analysis_v4)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;update_analysis: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update an analysis.\n        api_response = api_instance.update_analysis(project_id, analysis_id, analysis_v4, if_match=if_match)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;update_analysis: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisApi/#parameters_21","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str analysis_v4 AnalysisV4 if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional]"},{"location":"v2/docs/ProjectAnalysisApi/#return-type_21","title":"Return type","text":"<p>AnalysisV4</p>"},{"location":"v2/docs/ProjectAnalysisApi/#authorization_21","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisApi/#http-request-headers_21","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json, application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisApi/#http-response-details_21","title":"HTTP response details","text":"Status code Description Response headers 200 The analysis is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/","title":"libica.openapi.v2.ProjectAnalysisCreationBatchApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_analysis_creation_batch POST /api/projects/{projectId}/analysisCreationBatch Create and start multiple analyses in batch. get_analysis_creation_batch GET /api/projects/{projectId}/analysisCreationBatch/{batchId} Retrieve a analysis creation batch. get_analysis_creation_batch_item GET /api/projects/{projectId}/analysisCreationBatch/{batchId}/items/{itemId} Retrieve a analysis creation batch item. get_analysis_creation_batch_items GET /api/projects/{projectId}/analysisCreationBatch/{batchId}/items Retrieve a list of analysis creation batch items."},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#create_analysis_creation_batch","title":"create_analysis_creation_batch","text":"<p>AnalysisCreationBatch create_analysis_creation_batch(project_id, create_analysis_creation_batch)</p> <p>Create and start multiple analyses in batch.</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_creation_batch_api\nfrom libica.openapi.v2.model.create_analysis_creation_batch import CreateAnalysisCreationBatch\nfrom libica.openapi.v2.model.analysis_creation_batch import AnalysisCreationBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_creation_batch_api.ProjectAnalysisCreationBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_analysis_creation_batch = CreateAnalysisCreationBatch(\n        cwl_items=[\n            CreateCwlAnalysis(\n                user_reference=\"26bUUGjjNSwg0_bs9ZayIM/dgN/b6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_dz/rEoBi0LnU8SsOWJ7wYrczi/Qdt8mVLxbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZepezJ0-VmLSUTLYyW- e_jxxzpBvw-y P/SI-13 AOsiPRVvnXrDhh58EJzzOxprDzE3pjHRAkK7vI7/jcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGxjARc6SZKg2qV/ hA054g00j8CXRM4JZgexx5/BmiUdb8V-5tS7Ce-8OP8jM6Q/ap ieHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8M6xmSejA6BGR RDxxWc493QsJ JFt/rxtNb3BtpHGNB33FSli/EaSDC3Jwlo9Aq-OZySuGXBwuNL5ICjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGahEx5as4igHCaW/gfGuN6Yogo9e2fmFQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z-LtIx RE8z6ZbHjz/3coUV uT/EXw3Z8KLTvaqhteQpbwYU8rf85eyxCXQ02l2UfQbP/Hwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9OYCpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3/B7Nke4pyLFXi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7RTuj3iloSmvq6ptM/paqws8RfvaYMfrqa8yWUb/aew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8imaC5It9ZEZjIoZP9V1EjbA-tFQv/KOFpHUcVNnqDdEconiUhJ/_OYqv01dQetO3oDTHSQdhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0N/GhiW92gAEui/l WoiEW-tzti/9q3K407VNjp2Rdt_M_wxbjDN svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hn/97bNktDzITop4y58kMdi7sEjYIZXQNI/G2UN7cFEvraG_8ul060s0W5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD/EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXx/cpcof84rc bTU20M2sFqt4zswj63S37gymcb35PFmFooUEItJ/WXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsgO_EkphsT/YD6 2t z_dodcIO0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08O/uXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSU/GAcLlmJPzj1b/En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd/34AbRwr1Mi1qq8Bv/7r73NXsLH6lkp_YwgeBZkfv7aEST19XJTe9 4t GIqXuFdD/054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YYD7uU6_-V/RO7VbVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GL/dkyb0ofYJLarfJrS4gkeTAfK5NMnpgtwWLpKWVb8A/uQa TKwyJvJPBgILfXHpRfA79W9rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpE/9wjR SU K0GOwW4T/aO1NV6_Hx-5jhuPYUigmskjs38qptZPjGbQcMS6bq4jio6/n_hxYgCm- Z/K_7Ms5LyP8NoYNVF5v/C_I7qzU/pSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL92Y/TDLRif4BX0k_kxk-VTaov2mlM18SfVTJ/mcMNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei/m5FrnEpLvFqwhHFvdn0kEWtwPAhULVh_u/c  m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW\",\n                pipeline_id=\"pipeline_id_example\",\n                tags=CreateAnalysisTag(\n                    technical_tags=[\n                        \"technical_tags_example\",\n                    ],\n                    user_tags=[\n                        \"user_tags_example\",\n                    ],\n                    reference_tags=[\n                        \"reference_tags_example\",\n                    ],\n                ),\n                analysis_storage_id=\"analysis_storage_id_example\",\n                output_parent_folder_id=\"output_parent_folder_id_example\",\n                analysis_output=[\n                    AnalysisOutputMapping(\n                        source_path=\"source_path_example\",\n                        type=\"FILE\",\n                        target_project_id=\"target_project_id_example\",\n                        target_path=\"target_path_example\",\n                        action_on_exist=\"action_on_exist_example\",\n                    ),\n                ],\n                analysis_input=CwlAnalysisInput(),\n                activation_code_detail_id=\"activation_code_detail_id_example\",\n            ),\n        ],\n        nextflow_items=[\n            CreateNextflowAnalysis(\n                user_reference=\"26bUUGjjNSwg0_bs9ZayIM/dgN/b6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_dz/rEoBi0LnU8SsOWJ7wYrczi/Qdt8mVLxbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZepezJ0-VmLSUTLYyW- e_jxxzpBvw-y P/SI-13 AOsiPRVvnXrDhh58EJzzOxprDzE3pjHRAkK7vI7/jcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGxjARc6SZKg2qV/ hA054g00j8CXRM4JZgexx5/BmiUdb8V-5tS7Ce-8OP8jM6Q/ap ieHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8M6xmSejA6BGR RDxxWc493QsJ JFt/rxtNb3BtpHGNB33FSli/EaSDC3Jwlo9Aq-OZySuGXBwuNL5ICjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGahEx5as4igHCaW/gfGuN6Yogo9e2fmFQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z-LtIx RE8z6ZbHjz/3coUV uT/EXw3Z8KLTvaqhteQpbwYU8rf85eyxCXQ02l2UfQbP/Hwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9OYCpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3/B7Nke4pyLFXi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7RTuj3iloSmvq6ptM/paqws8RfvaYMfrqa8yWUb/aew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8imaC5It9ZEZjIoZP9V1EjbA-tFQv/KOFpHUcVNnqDdEconiUhJ/_OYqv01dQetO3oDTHSQdhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0N/GhiW92gAEui/l WoiEW-tzti/9q3K407VNjp2Rdt_M_wxbjDN svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hn/97bNktDzITop4y58kMdi7sEjYIZXQNI/G2UN7cFEvraG_8ul060s0W5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD/EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXx/cpcof84rc bTU20M2sFqt4zswj63S37gymcb35PFmFooUEItJ/WXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsgO_EkphsT/YD6 2t z_dodcIO0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08O/uXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSU/GAcLlmJPzj1b/En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd/34AbRwr1Mi1qq8Bv/7r73NXsLH6lkp_YwgeBZkfv7aEST19XJTe9 4t GIqXuFdD/054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YYD7uU6_-V/RO7VbVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GL/dkyb0ofYJLarfJrS4gkeTAfK5NMnpgtwWLpKWVb8A/uQa TKwyJvJPBgILfXHpRfA79W9rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpE/9wjR SU K0GOwW4T/aO1NV6_Hx-5jhuPYUigmskjs38qptZPjGbQcMS6bq4jio6/n_hxYgCm- Z/K_7Ms5LyP8NoYNVF5v/C_I7qzU/pSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL92Y/TDLRif4BX0k_kxk-VTaov2mlM18SfVTJ/mcMNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei/m5FrnEpLvFqwhHFvdn0kEWtwPAhULVh_u/c  m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW\",\n                pipeline_id=\"pipeline_id_example\",\n                tags=CreateAnalysisTag(\n                    technical_tags=[\n                        \"technical_tags_example\",\n                    ],\n                    user_tags=[\n                        \"user_tags_example\",\n                    ],\n                    reference_tags=[\n                        \"reference_tags_example\",\n                    ],\n                ),\n                analysis_storage_id=\"analysis_storage_id_example\",\n                output_parent_folder_id=\"output_parent_folder_id_example\",\n                analysis_output=[\n                    AnalysisOutputMapping(\n                        source_path=\"source_path_example\",\n                        type=\"FILE\",\n                        target_project_id=\"target_project_id_example\",\n                        target_path=\"target_path_example\",\n                        action_on_exist=\"action_on_exist_example\",\n                    ),\n                ],\n                analysis_input=NextflowAnalysisInput(\n                    inputs=[\n                        AnalysisDataInput(\n                            parameter_code=\"parameter_code_example\",\n                            data_ids=[\n                                \"data_ids_example\",\n                            ],\n                            mounts=[\n                                AnalysisInputDataMount(\n                                    data_id=\"data_id_example\",\n                                    mount_path=\"mount_path_example\",\n                                ),\n                            ],\n                            external_data=[\n                                AnalysisInputExternalData(\n                                    url=\"url_example\",\n                                    type=\"basespac\",\n                                    mount_path=\"mount_path_example\",\n                                    s3_details=AnalysisS3DataDetails(\n                                        storage_credentials_id=\"storage_credentials_id_example\",\n                                    ),\n                                    basespace_details=AnalysisBaseSpaceDataDetails(\n                                        workgroup_id=\"workgroup_id_example\",\n                                        extensions=\"extensions_example\",\n                                        path_prefix=\"path_prefix_example\",\n                                    ),\n                                ),\n                            ],\n                        ),\n                    ],\n                    parameters=[\n                        AnalysisParameterInput(\n                            code=\"code_example\",\n                            value=\"value_example\",\n                            multi_value=[\n                                \"multi_value_example\",\n                            ],\n                        ),\n                    ],\n                    reference_data_parameters=[\n                        AnalysisReferenceDataParameter(\n                            parameter_code=\"parameter_code_example\",\n                            reference_data_id=\"reference_data_id_example\",\n                        ),\n                    ],\n                ),\n                activation_code_detail_id=\"activation_code_detail_id_example\",\n            ),\n        ],\n        nextflow_json_items=[\n            CreateNextflowJsonAnalysis(\n                user_reference=\"26bUUGjjNSwg0_bs9ZayIM/dgN/b6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_dz/rEoBi0LnU8SsOWJ7wYrczi/Qdt8mVLxbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZepezJ0-VmLSUTLYyW- e_jxxzpBvw-y P/SI-13 AOsiPRVvnXrDhh58EJzzOxprDzE3pjHRAkK7vI7/jcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGxjARc6SZKg2qV/ hA054g00j8CXRM4JZgexx5/BmiUdb8V-5tS7Ce-8OP8jM6Q/ap ieHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8M6xmSejA6BGR RDxxWc493QsJ JFt/rxtNb3BtpHGNB33FSli/EaSDC3Jwlo9Aq-OZySuGXBwuNL5ICjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGahEx5as4igHCaW/gfGuN6Yogo9e2fmFQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z-LtIx RE8z6ZbHjz/3coUV uT/EXw3Z8KLTvaqhteQpbwYU8rf85eyxCXQ02l2UfQbP/Hwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9OYCpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3/B7Nke4pyLFXi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7RTuj3iloSmvq6ptM/paqws8RfvaYMfrqa8yWUb/aew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8imaC5It9ZEZjIoZP9V1EjbA-tFQv/KOFpHUcVNnqDdEconiUhJ/_OYqv01dQetO3oDTHSQdhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0N/GhiW92gAEui/l WoiEW-tzti/9q3K407VNjp2Rdt_M_wxbjDN svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hn/97bNktDzITop4y58kMdi7sEjYIZXQNI/G2UN7cFEvraG_8ul060s0W5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD/EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXx/cpcof84rc bTU20M2sFqt4zswj63S37gymcb35PFmFooUEItJ/WXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsgO_EkphsT/YD6 2t z_dodcIO0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08O/uXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSU/GAcLlmJPzj1b/En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd/34AbRwr1Mi1qq8Bv/7r73NXsLH6lkp_YwgeBZkfv7aEST19XJTe9 4t GIqXuFdD/054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YYD7uU6_-V/RO7VbVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GL/dkyb0ofYJLarfJrS4gkeTAfK5NMnpgtwWLpKWVb8A/uQa TKwyJvJPBgILfXHpRfA79W9rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpE/9wjR SU K0GOwW4T/aO1NV6_Hx-5jhuPYUigmskjs38qptZPjGbQcMS6bq4jio6/n_hxYgCm- Z/K_7Ms5LyP8NoYNVF5v/C_I7qzU/pSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL92Y/TDLRif4BX0k_kxk-VTaov2mlM18SfVTJ/mcMNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei/m5FrnEpLvFqwhHFvdn0kEWtwPAhULVh_u/c  m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW\",\n                pipeline_id=\"pipeline_id_example\",\n                tags=CreateAnalysisTag(\n                    technical_tags=[\n                        \"technical_tags_example\",\n                    ],\n                    user_tags=[\n                        \"user_tags_example\",\n                    ],\n                    reference_tags=[\n                        \"reference_tags_example\",\n                    ],\n                ),\n                analysis_storage_id=\"analysis_storage_id_example\",\n                output_parent_folder_id=\"output_parent_folder_id_example\",\n                analysis_output=[\n                    AnalysisOutputMapping(\n                        source_path=\"source_path_example\",\n                        type=\"FILE\",\n                        target_project_id=\"target_project_id_example\",\n                        target_path=\"target_path_example\",\n                        action_on_exist=\"action_on_exist_example\",\n                    ),\n                ],\n                input_form_values=NextflowJsonAnalysisInput(\n                    fields=[\n                        InputFormFieldValues(\n                            id=\"id_example\",\n                            values=[\n                                \"values_example\",\n                            ],\n                            data_values=[\n                                InputFormData(\n                                    data_id=\"data_id_example\",\n                                    mount_path=\"mount_path_example\",\n                                ),\n                            ],\n                            external_data_values=[\n                                AnalysisInputExternalData(\n                                    url=\"url_example\",\n                                    type=\"basespac\",\n                                    mount_path=\"mount_path_example\",\n                                    s3_details=AnalysisS3DataDetails(\n                                        storage_credentials_id=\"storage_credentials_id_example\",\n                                    ),\n                                    basespace_details=AnalysisBaseSpaceDataDetails(\n                                        workgroup_id=\"workgroup_id_example\",\n                                        extensions=\"extensions_example\",\n                                        path_prefix=\"path_prefix_example\",\n                                    ),\n                                ),\n                            ],\n                        ),\n                    ],\n                    groups=[\n                        InputFormGroup(\n                            id=\"id_example\",\n                            values=[\n                                InputFormGroupFieldValues(\n                                    values=[\n                                        InputFormFieldValues(\n                                            id=\"id_example\",\n                                            values=[\n                                                \"values_example\",\n                                            ],\n                                            data_values=[\n                                                InputFormData(\n                                                    data_id=\"data_id_example\",\n                                                    mount_path=\"mount_path_example\",\n                                                ),\n                                            ],\n                                            external_data_values=[\n                                                AnalysisInputExternalData(\n                                                    url=\"url_example\",\n                                                    type=\"basespac\",\n                                                    mount_path=\"mount_path_example\",\n                                                    s3_details=AnalysisS3DataDetails(\n                                                        storage_credentials_id=\"storage_credentials_id_example\",\n                                                    ),\n                                                    basespace_details=AnalysisBaseSpaceDataDetails(\n                                                        workgroup_id=\"workgroup_id_example\",\n                                                        extensions=\"extensions_example\",\n                                                        path_prefix=\"path_prefix_example\",\n                                                    ),\n                                                ),\n                                            ],\n                                        ),\n                                    ],\n                                ),\n                            ],\n                        ),\n                    ],\n                ),\n            ),\n        ],\n    ) # CreateAnalysisCreationBatch | \n    idempotency_key = \"Idempotency-Key_example\" # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create and start multiple analyses in batch.\n        api_response = api_instance.create_analysis_creation_batch(project_id, create_analysis_creation_batch)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisCreationBatchApi-&gt;create_analysis_creation_batch: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create and start multiple analyses in batch.\n        api_response = api_instance.create_analysis_creation_batch(project_id, create_analysis_creation_batch, idempotency_key=idempotency_key)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisCreationBatchApi-&gt;create_analysis_creation_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str create_analysis_creation_batch CreateAnalysisCreationBatch idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#return-type","title":"Return type","text":"<p>AnalysisCreationBatch</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The analyses are scheduled for creation. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#get_analysis_creation_batch","title":"get_analysis_creation_batch","text":"<p>AnalysisCreationBatch get_analysis_creation_batch(project_id, batch_id)</p> <p>Retrieve a analysis creation batch.</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_creation_batch_api\nfrom libica.openapi.v2.model.analysis_creation_batch import AnalysisCreationBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_creation_batch_api.ProjectAnalysisCreationBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | The ID of the analysis creation batch\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a analysis creation batch.\n        api_response = api_instance.get_analysis_creation_batch(project_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisCreationBatchApi-&gt;get_analysis_creation_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str The ID of the analysis creation batch"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#return-type_1","title":"Return type","text":"<p>AnalysisCreationBatch</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The analysis creation batch is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#get_analysis_creation_batch_item","title":"get_analysis_creation_batch_item","text":"<p>AnalysisCreationBatchItemV4 get_analysis_creation_batch_item(project_id, batch_id, item_id)</p> <p>Retrieve a analysis creation batch item.</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#changelog-for-this-endpoint-multiple-versions-exist-note-that-the-values-for-request-headers-content-type-and-accept-must-contain-a-matching-version-v3-initial-version-v4-field-createdanalysis-changes-field-type-status-changed-from-enum-to-string-new-statuses-have-been-added-queued-initializing-preparing_inputs-generating_outputs-aborting-field-analysispriority-changed-from-enum-to-string-the-owner-and-tenant-are-now-represented-by-identifier-objects","title":"Changelog For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.  ## [V3] Initial version ## [V4] Field 'createdAnalysis' changes:  * Field type 'status' changed from enum to String. New statuses have been added: ['QUEUED', 'INITIALIZING', 'PREPARING_INPUTS', 'GENERATING_OUTPUTS', 'ABORTING'].  * Field analysisPriority changed from enum to String.  * The owner and tenant are now represented by Identifier objects.","text":""},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_creation_batch_api\nfrom libica.openapi.v2.model.analysis_creation_batch_item_v4 import AnalysisCreationBatchItemV4\nfrom libica.openapi.v2.model.analysis_creation_batch_item_v3 import AnalysisCreationBatchItemV3\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_creation_batch_api.ProjectAnalysisCreationBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | The ID of the analysis creation batch\n    item_id = \"itemId_example\" # str | The ID of the analysis creation batch item\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a analysis creation batch item.\n        api_response = api_instance.get_analysis_creation_batch_item(project_id, batch_id, item_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisCreationBatchApi-&gt;get_analysis_creation_batch_item: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str The ID of the analysis creation batch item_id str The ID of the analysis creation batch item"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#return-type_2","title":"Return type","text":"<p>AnalysisCreationBatchItemV4</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The analysis creation batch item is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#get_analysis_creation_batch_items","title":"get_analysis_creation_batch_items","text":"<p>AnalysisCreationBatchItemPagedListV4 get_analysis_creation_batch_items(project_id, batch_id)</p> <p>Retrieve a list of analysis creation batch items.</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#changelog-for-this-endpoint-multiple-versions-exist-note-that-the-values-for-request-headers-content-type-and-accept-must-contain-a-matching-version-v3-initial-version-v4-item-field-createdanalysis-changes-field-type-status-changed-from-enum-to-string-new-statuses-have-been-added-queued-initializing-preparing_inputs-generating_outputs-aborting-field-analysispriority-changed-from-enum-to-string-the-owner-and-tenant-are-now-represented-by-identifier-objects","title":"Changelog For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.  ## [V3]  * Initial version ## [V4] ## Item field 'createdAnalysis' changes:  * Field type 'status' changed from enum to String. New statuses have been added: ['QUEUED', 'INITIALIZING', 'PREPARING_INPUTS', 'GENERATING_OUTPUTS', 'ABORTING'].  * Field analysisPriority changed from enum to String.  * The owner and tenant are now represented by Identifier objects.","text":""},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_creation_batch_api\nfrom libica.openapi.v2.model.analysis_creation_batch_item_paged_list_v4 import AnalysisCreationBatchItemPagedListV4\nfrom libica.openapi.v2.model.analysis_creation_batch_item_paged_list_v3 import AnalysisCreationBatchItemPagedListV3\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_creation_batch_api.ProjectAnalysisCreationBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | The ID of the analysis creation batch\n    status = [\n        \"RUNNING\",\n    ] # [str] | The statuses to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of analysis creation batch items.\n        api_response = api_instance.get_analysis_creation_batch_items(project_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisCreationBatchApi-&gt;get_analysis_creation_batch_items: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of analysis creation batch items.\n        api_response = api_instance.get_analysis_creation_batch_items(project_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisCreationBatchApi-&gt;get_analysis_creation_batch_items: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str The ID of the analysis creation batch status [str] The statuses to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional]"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#return-type_3","title":"Return type","text":"<p>AnalysisCreationBatchItemPagedListV4</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisCreationBatchApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of analysis creation batch items is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectAnalysisStorageApi/","title":"libica.openapi.v2.ProjectAnalysisStorageApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_project_analysis_storage_options GET /api/projects/{projectId}/analysisStorages Retrieve the list of project analysis storage options."},{"location":"v2/docs/ProjectAnalysisStorageApi/#get_project_analysis_storage_options","title":"get_project_analysis_storage_options","text":"<p>AnalysisStorageListV4 get_project_analysis_storage_options(project_id)</p> <p>Retrieve the list of project analysis storage options.</p>"},{"location":"v2/docs/ProjectAnalysisStorageApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_analysis_storage_api\nfrom libica.openapi.v2.model.analysis_storage_list_v4 import AnalysisStorageListV4\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_analysis_storage_api.ProjectAnalysisStorageApi(api_client)\n    project_id = \"projectId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the list of project analysis storage options.\n        api_response = api_instance.get_project_analysis_storage_options(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectAnalysisStorageApi-&gt;get_project_analysis_storage_options: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectAnalysisStorageApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v2/docs/ProjectAnalysisStorageApi/#return-type","title":"Return type","text":"<p>AnalysisStorageListV4</p>"},{"location":"v2/docs/ProjectAnalysisStorageApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectAnalysisStorageApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v2/docs/ProjectAnalysisStorageApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project analysis storage options is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectApi/","title":"libica.openapi.v2.ProjectApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description change_project_owner POST /api/projects/{projectId}:changeOwner Change the project owner. create_project POST /api/projects Create a new project. get_project GET /api/projects/{projectId} Retrieve a project. get_project_bundle GET /api/projects/{projectId}/bundles/{bundleId} Retrieve a project bundle. get_project_bundles GET /api/projects/{projectId}/bundles Retrieve project bundles. get_projects GET /api/projects Retrieve a list of projects. hide_project POST /api/projects/{projectId}:hide Hide a project. link_project_bundle POST /api/projects/{projectId}/bundles/{bundleId} Link a bundle to a project. unlink_project_bundle DELETE /api/projects/{projectId}/bundles/{bundleId} Unlink a bundle from a project. update_project PUT /api/projects/{projectId} Update a project."},{"location":"v2/docs/ProjectApi/#change_project_owner","title":"change_project_owner","text":"<p>change_project_owner(project_id, change_project_owner)</p> <p>Change the project owner.</p>"},{"location":"v2/docs/ProjectApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_api\nfrom libica.openapi.v2.model.change_project_owner import ChangeProjectOwner\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_api.ProjectApi(api_client)\n    project_id = \"projectId_example\" # str | \n    change_project_owner = ChangeProjectOwner(\n        new_owner_id=\"new_owner_id_example\",\n    ) # ChangeProjectOwner | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Change the project owner.\n        api_instance.change_project_owner(project_id, change_project_owner)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectApi-&gt;change_project_owner: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str change_project_owner ChangeProjectOwner"},{"location":"v2/docs/ProjectApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The project owner is changed. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectApi/#create_project","title":"create_project","text":"<p>Project create_project(create_project)</p> <p>Create a new project.</p>"},{"location":"v2/docs/ProjectApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_api\nfrom libica.openapi.v2.model.project import Project\nfrom libica.openapi.v2.model.create_project import CreateProject\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_api.ProjectApi(api_client)\n    create_project = CreateProject(\n        name=\"AH\",\n        short_description=\"short_description_example\",\n        information=\"information_example\",\n        project_owner_id=\"project_owner_id_example\",\n        region_id=\"region_id_example\",\n        billing_mode=\"PROJECT\",\n        data_sharing_enabled=True,\n        tags=ProjectTag(\n            technical_tags=[\n                \"technical_tags_example\",\n            ],\n            user_tags=[\n                \"user_tags_example\",\n            ],\n        ),\n        storage_bundle_id=\"storage_bundle_id_example\",\n        metadata_model_id=\"metadata_model_id_example\",\n        storage_configuration_id=\"storage_configuration_id_example\",\n        storage_configuration_subfolder=\"storage_configuration_subfolder_example\",\n        analysis_priority=\"MEDIUM\",\n    ) # CreateProject | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a new project.\n        api_response = api_instance.create_project(create_project)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectApi-&gt;create_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes create_project CreateProject"},{"location":"v2/docs/ProjectApi/#return-type_1","title":"Return type","text":"<p>Project</p>"},{"location":"v2/docs/ProjectApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 201 The project is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectApi/#get_project","title":"get_project","text":"<p>Project get_project(project_id)</p> <p>Retrieve a project.</p>"},{"location":"v2/docs/ProjectApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_api\nfrom libica.openapi.v2.model.project import Project\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_api.ProjectApi(api_client)\n    project_id = \"projectId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project.\n        api_response = api_instance.get_project(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectApi-&gt;get_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v2/docs/ProjectApi/#return-type_2","title":"Return type","text":"<p>Project</p>"},{"location":"v2/docs/ProjectApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The project is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectApi/#get_project_bundle","title":"get_project_bundle","text":"<p>ProjectBundle get_project_bundle(project_id, bundle_id)</p> <p>Retrieve a project bundle.</p>"},{"location":"v2/docs/ProjectApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_api\nfrom libica.openapi.v2.model.project_bundle import ProjectBundle\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_api.ProjectApi(api_client)\n    project_id = \"projectId_example\" # str | \n    bundle_id = \"bundleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project bundle.\n        api_response = api_instance.get_project_bundle(project_id, bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectApi-&gt;get_project_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str bundle_id str"},{"location":"v2/docs/ProjectApi/#return-type_3","title":"Return type","text":"<p>ProjectBundle</p>"},{"location":"v2/docs/ProjectApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The project bundle is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectApi/#get_project_bundles","title":"get_project_bundles","text":"<p>ProjectBundleList get_project_bundles(project_id)</p> <p>Retrieve project bundles.</p>"},{"location":"v2/docs/ProjectApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_api\nfrom libica.openapi.v2.model.project_bundle_list import ProjectBundleList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_api.ProjectApi(api_client)\n    project_id = \"projectId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve project bundles.\n        api_response = api_instance.get_project_bundles(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectApi-&gt;get_project_bundles: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v2/docs/ProjectApi/#return-type_4","title":"Return type","text":"<p>ProjectBundleList</p>"},{"location":"v2/docs/ProjectApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The project bundles are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectApi/#get_projects","title":"get_projects","text":"<p>ProjectPagedList get_projects()</p> <p>Retrieve a list of projects.</p>"},{"location":"v2/docs/ProjectApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_api\nfrom libica.openapi.v2.model.project_paged_list import ProjectPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_api.ProjectApi(api_client)\n    search = \"search_example\" # str | Search (optional)\n    user_tags = [\n        \"userTags_example\",\n    ] # [str] | User tags to filter on (optional)\n    technical_tags = [\n        \"technicalTags_example\",\n    ] # [str] | Technical tags to filter on (optional)\n    include_hidden_projects = False # bool, none_type | Include hidden projects. (optional) if omitted the server will use the default value of False\n    region = \"region_example\" # str | The ID of the region to filter on. (optional)\n    workgroups = [\n        \"workgroups_example\",\n    ] # [str] | Workgroup IDs to filter on (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - name - shortDescription - information (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of projects.\n        api_response = api_instance.get_projects(search=search, user_tags=user_tags, technical_tags=technical_tags, include_hidden_projects=include_hidden_projects, region=region, workgroups=workgroups, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectApi-&gt;get_projects: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes search str Search [optional] user_tags [str] User tags to filter on [optional] technical_tags [str] Technical tags to filter on [optional] include_hidden_projects bool, none_type Include hidden projects. [optional] if omitted the server will use the default value of False region str The ID of the region to filter on. [optional] workgroups [str] Workgroup IDs to filter on [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - name - shortDescription - information [optional]"},{"location":"v2/docs/ProjectApi/#return-type_5","title":"Return type","text":"<p>ProjectPagedList</p>"},{"location":"v2/docs/ProjectApi/#authorization_5","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 200 The list of projects is successfully retrieved - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectApi/#hide_project","title":"hide_project","text":"<p>hide_project(project_id)</p> <p>Hide a project.</p>"},{"location":"v2/docs/ProjectApi/#example_6","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_api.ProjectApi(api_client)\n    project_id = \"projectId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Hide a project.\n        api_instance.hide_project(project_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectApi-&gt;hide_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v2/docs/ProjectApi/#return-type_6","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectApi/#authorization_6","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 204 The project is hidden. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectApi/#link_project_bundle","title":"link_project_bundle","text":"<p>ProjectBundle link_project_bundle(project_id, bundle_id)</p> <p>Link a bundle to a project.</p>"},{"location":"v2/docs/ProjectApi/#example_7","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_api\nfrom libica.openapi.v2.model.project_bundle import ProjectBundle\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_api.ProjectApi(api_client)\n    project_id = \"projectId_example\" # str | \n    bundle_id = \"bundleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Link a bundle to a project.\n        api_response = api_instance.link_project_bundle(project_id, bundle_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectApi-&gt;link_project_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes project_id str bundle_id str"},{"location":"v2/docs/ProjectApi/#return-type_7","title":"Return type","text":"<p>ProjectBundle</p>"},{"location":"v2/docs/ProjectApi/#authorization_7","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 200 The bundle is successfully linked to the project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectApi/#unlink_project_bundle","title":"unlink_project_bundle","text":"<p>unlink_project_bundle(project_id, bundle_id)</p> <p>Unlink a bundle from a project.</p>"},{"location":"v2/docs/ProjectApi/#example_8","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_api.ProjectApi(api_client)\n    project_id = \"projectId_example\" # str | \n    bundle_id = \"bundleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Unlink a bundle from a project.\n        api_instance.unlink_project_bundle(project_id, bundle_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectApi-&gt;unlink_project_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes project_id str bundle_id str"},{"location":"v2/docs/ProjectApi/#return-type_8","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectApi/#authorization_8","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 200 The bundle is successfully unlinked from the project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectApi/#update_project","title":"update_project","text":"<p>Project update_project(project_id, project)</p> <p>Update a project.</p> <p>Fields which can be updated: - shortDescription - projectInformation - billingMode - dataSharingEnabled - tags - storageBundle - metaDataModel - analysisPriority</p>"},{"location":"v2/docs/ProjectApi/#example_9","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_api\nfrom libica.openapi.v2.model.project import Project\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_api.ProjectApi(api_client)\n    project_id = \"projectId_example\" # str | \n    project = Project(\n        id=\"id_example\",\n        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        owner_id=\"owner_id_example\",\n        tenant_id=\"tenant_id_example\",\n        tenant_name=\"tenant_name_example\",\n        urn=\"urn_example\",\n        name=\"name_example\",\n        active=True,\n        base_enabled=True,\n        short_description=\"short_description_example\",\n        information=\"information_example\",\n        region=Region(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            code=\"code_example\",\n            country=Country(\n                id=\"id_example\",\n                time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                owner_id=\"owner_id_example\",\n                tenant_id=\"tenant_id_example\",\n                tenant_name=\"tenant_name_example\",\n                code=\"code_example\",\n                name=\"name_example\",\n                region=\"region_example\",\n            ),\n            city_name=\"city_name_example\",\n        ),\n        billing_mode=\"PROJECT\",\n        data_sharing_enabled=True,\n        tags=ProjectTag(\n            technical_tags=[\n                \"technical_tags_example\",\n            ],\n            user_tags=[\n                \"user_tags_example\",\n            ],\n        ),\n        storage_bundle=StorageBundle(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            bundle_name=\"bundle_name_example\",\n            entitlement_name=\"entitlement_name_example\",\n            region=Region(\n                id=\"id_example\",\n                time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                owner_id=\"owner_id_example\",\n                tenant_id=\"tenant_id_example\",\n                tenant_name=\"tenant_name_example\",\n                code=\"code_example\",\n                country=Country(\n                    id=\"id_example\",\n                    time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    owner_id=\"owner_id_example\",\n                    tenant_id=\"tenant_id_example\",\n                    tenant_name=\"tenant_name_example\",\n                    code=\"code_example\",\n                    name=\"name_example\",\n                    region=\"region_example\",\n                ),\n                city_name=\"city_name_example\",\n            ),\n        ),\n        self_managed_storage_configuration=StorageConfiguration(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            name=\"name_example\",\n            description=\"description_example\",\n            type=\"AWS_S3\",\n            status=\"INITIALIZING\",\n            error_message=\"error_message_example\",\n            region=Region(\n                id=\"id_example\",\n                time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                owner_id=\"owner_id_example\",\n                tenant_id=\"tenant_id_example\",\n                tenant_name=\"tenant_name_example\",\n                code=\"code_example\",\n                country=Country(\n                    id=\"id_example\",\n                    time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    owner_id=\"owner_id_example\",\n                    tenant_id=\"tenant_id_example\",\n                    tenant_name=\"tenant_name_example\",\n                    code=\"code_example\",\n                    name=\"name_example\",\n                    region=\"region_example\",\n                ),\n                city_name=\"city_name_example\",\n            ),\n            is_default=True,\n        ),\n        analysis_priority=\"LOW\",\n        metadata_model=MetadataModel(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            name=\"name_example\",\n            description=\"description_example\",\n            state=\"DRAFT\",\n            parent_model_id=\"parent_model_id_example\",\n        ),\n        application=Application(\n            id=\"id_example\",\n            name=\"name_example\",\n            type=\"MAIN\",\n            display_name=\"display_name_example\",\n        ),\n        project_owner=\"project_owner_example\",\n    ) # Project | \n    if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update a project.\n        api_response = api_instance.update_project(project_id, project)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectApi-&gt;update_project: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update a project.\n        api_response = api_instance.update_project(project_id, project, if_match=if_match)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectApi-&gt;update_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectApi/#parameters_9","title":"Parameters","text":"Name Type Description Notes project_id str project Project if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional]"},{"location":"v2/docs/ProjectApi/#return-type_9","title":"Return type","text":"<p>Project</p>"},{"location":"v2/docs/ProjectApi/#authorization_9","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectApi/#http-request-headers_9","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectApi/#http-response-details_9","title":"HTTP response details","text":"Status code Description Response headers 200 The project is successfully update. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseApi/","title":"libica.openapi.v2.ProjectBaseApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_base_connection_details POST /api/projects/{projectId}/base:connectionDetails Creates the connection details to snowflake instance. get_base_job GET /api/projects/{projectId}/base/jobs/{baseJobId} Retrieve a base job. get_base_jobs GET /api/projects/{projectId}/base/jobs Retrieve a list of base jobs get_base_tables GET /api/projects/{projectId}/base/tables Retrieve a list of base tables. load_data POST /api/projects/{projectId}/base/tables/{tableId}:loadData Load data in a base table."},{"location":"v2/docs/ProjectBaseApi/#create_base_connection_details","title":"create_base_connection_details","text":"<p>BaseConnection create_base_connection_details(project_id)</p> <p>Creates the connection details to snowflake instance.</p>"},{"location":"v2/docs/ProjectBaseApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_base_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom libica.openapi.v2.model.base_connection import BaseConnection\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_base_api.ProjectBaseApi(api_client)\n    project_id = \"projectId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Creates the connection details to snowflake instance.\n        api_response = api_instance.create_base_connection_details(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseApi-&gt;create_base_connection_details: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectBaseApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v2/docs/ProjectBaseApi/#return-type","title":"Return type","text":"<p>BaseConnection</p>"},{"location":"v2/docs/ProjectBaseApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectBaseApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectBaseApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The base connection details are created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseApi/#get_base_job","title":"get_base_job","text":"<p>BaseJob get_base_job(project_id, base_job_id)</p> <p>Retrieve a base job.</p>"},{"location":"v2/docs/ProjectBaseApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_base_api\nfrom libica.openapi.v2.model.base_job import BaseJob\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_base_api.ProjectBaseApi(api_client)\n    project_id = \"projectId_example\" # str | \n    base_job_id = \"baseJobId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a base job.\n        api_response = api_instance.get_base_job(project_id, base_job_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseApi-&gt;get_base_job: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectBaseApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str base_job_id str"},{"location":"v2/docs/ProjectBaseApi/#return-type_1","title":"Return type","text":"<p>BaseJob</p>"},{"location":"v2/docs/ProjectBaseApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectBaseApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectBaseApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The base job is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseApi/#get_base_jobs","title":"get_base_jobs","text":"<p>BaseJobList get_base_jobs(project_id)</p> <p>Retrieve a list of base jobs</p>"},{"location":"v2/docs/ProjectBaseApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_base_api\nfrom libica.openapi.v2.model.base_job_list import BaseJobList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_base_api.ProjectBaseApi(api_client)\n    project_id = \"projectId_example\" # str | \n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - description - type (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of base jobs\n        api_response = api_instance.get_base_jobs(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseApi-&gt;get_base_jobs: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of base jobs\n        api_response = api_instance.get_base_jobs(project_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseApi-&gt;get_base_jobs: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectBaseApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - description - type [optional]"},{"location":"v2/docs/ProjectBaseApi/#return-type_2","title":"Return type","text":"<p>BaseJobList</p>"},{"location":"v2/docs/ProjectBaseApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectBaseApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectBaseApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The list of base jobs is successfully retrieved - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseApi/#get_base_tables","title":"get_base_tables","text":"<p>ProjectBaseTableList get_base_tables(project_id)</p> <p>Retrieve a list of base tables.</p>"},{"location":"v2/docs/ProjectBaseApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_base_api\nfrom libica.openapi.v2.model.project_base_table_list import ProjectBaseTableList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_base_api.ProjectBaseApi(api_client)\n    project_id = \"projectId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of base tables.\n        api_response = api_instance.get_base_tables(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseApi-&gt;get_base_tables: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectBaseApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v2/docs/ProjectBaseApi/#return-type_3","title":"Return type","text":"<p>ProjectBaseTableList</p>"},{"location":"v2/docs/ProjectBaseApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectBaseApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectBaseApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of base tables is successfully retrieved - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseApi/#load_data","title":"load_data","text":"<p>BaseJob load_data(project_id, table_id, load_data_in_base_request)</p> <p>Load data in a base table.</p> <p>Load data in the specified table</p>"},{"location":"v2/docs/ProjectBaseApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_base_api\nfrom libica.openapi.v2.model.base_job import BaseJob\nfrom libica.openapi.v2.model.load_data_in_base_request import LoadDataInBaseRequest\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_base_api.ProjectBaseApi(api_client)\n    project_id = \"projectId_example\" # str | \n    table_id = \"tableId_example\" # str | \n    load_data_in_base_request = LoadDataInBaseRequest(\n        allow_quoted_newlines=False,\n        data_id=\"data_id_example\",\n        delimiter=\",\",\n        encoding=\"UTF8\",\n        force_load=False,\n        header_rows_to_skip=1,\n        ignore_unknown_values=False,\n        include_references=True,\n        include_data_reference=True,\n        include_sample_reference=True,\n        include_pipeline_reference=True,\n        include_pipeline_execution_reference=True,\n        include_tenant_reference=True,\n        null_marker=\"null_marker_example\",\n        number_of_errors_allowed=0,\n        quote=\"quote_example\",\n        write_preference=\"APPENDTOTABLE\",\n    ) # LoadDataInBaseRequest | Load data request\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Load data in a base table.\n        api_response = api_instance.load_data(project_id, table_id, load_data_in_base_request)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseApi-&gt;load_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectBaseApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str table_id str load_data_in_base_request LoadDataInBaseRequest Load data request"},{"location":"v2/docs/ProjectBaseApi/#return-type_4","title":"Return type","text":"<p>BaseJob</p>"},{"location":"v2/docs/ProjectBaseApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectBaseApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectBaseApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 201 Base job to load data is created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseJobApi/","title":"libica.openapi.v2.ProjectBaseJobApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_base_job GET /api/projects/{projectId}/base/jobs/{baseJobId} Retrieve a base job. get_base_jobs GET /api/projects/{projectId}/base/jobs Retrieve a list of base jobs"},{"location":"v2/docs/ProjectBaseJobApi/#get_base_job","title":"get_base_job","text":"<p>BaseJob get_base_job(project_id, base_job_id)</p> <p>Retrieve a base job.</p>"},{"location":"v2/docs/ProjectBaseJobApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_base_job_api\nfrom libica.openapi.v2.model.base_job import BaseJob\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_base_job_api.ProjectBaseJobApi(api_client)\n    project_id = \"projectId_example\" # str | \n    base_job_id = \"baseJobId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a base job.\n        api_response = api_instance.get_base_job(project_id, base_job_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseJobApi-&gt;get_base_job: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectBaseJobApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str base_job_id str"},{"location":"v2/docs/ProjectBaseJobApi/#return-type","title":"Return type","text":"<p>BaseJob</p>"},{"location":"v2/docs/ProjectBaseJobApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectBaseJobApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectBaseJobApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The base job is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseJobApi/#get_base_jobs","title":"get_base_jobs","text":"<p>BaseJobList get_base_jobs(project_id)</p> <p>Retrieve a list of base jobs</p>"},{"location":"v2/docs/ProjectBaseJobApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_base_job_api\nfrom libica.openapi.v2.model.base_job_list import BaseJobList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_base_job_api.ProjectBaseJobApi(api_client)\n    project_id = \"projectId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of base jobs\n        api_response = api_instance.get_base_jobs(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseJobApi-&gt;get_base_jobs: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectBaseJobApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v2/docs/ProjectBaseJobApi/#return-type_1","title":"Return type","text":"<p>BaseJobList</p>"},{"location":"v2/docs/ProjectBaseJobApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectBaseJobApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectBaseJobApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The list of base jobs is successfully retrieved - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseTable/","title":"ProjectBaseTable","text":""},{"location":"v2/docs/ProjectBaseTable/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the table which should be used in writing queries type str The type of the table status str The status of the table tenant_name str, none_type [optional] description str, none_type The description of the table [optional] number_of_records int, none_type The number of record in the table [optional] data_size int, none_type The amount of Data contained in this table in bytes [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseTableApi/","title":"libica.openapi.v2.ProjectBaseTableApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_base_tables GET /api/projects/{projectId}/base/tables Retrieve a liste of base tables. load_data POST /api/projects/{projectId}/base/tables/{tableId}:loadData Load data in a base table."},{"location":"v2/docs/ProjectBaseTableApi/#get_base_tables","title":"get_base_tables","text":"<p>ProjectBaseTableList get_base_tables(project_id)</p> <p>Retrieve a liste of base tables.</p>"},{"location":"v2/docs/ProjectBaseTableApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_base_table_api\nfrom libica.openapi.v2.model.project_base_table_list import ProjectBaseTableList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_base_table_api.ProjectBaseTableApi(api_client)\n    project_id = \"projectId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a liste of base tables.\n        api_response = api_instance.get_base_tables(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseTableApi-&gt;get_base_tables: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectBaseTableApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v2/docs/ProjectBaseTableApi/#return-type","title":"Return type","text":"<p>ProjectBaseTableList</p>"},{"location":"v2/docs/ProjectBaseTableApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectBaseTableApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectBaseTableApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of base tables is successfully retrieved - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseTableApi/#load_data","title":"load_data","text":"<p>BaseJob load_data(project_id, table_id)</p> <p>Load data in a base table.</p> <p>Load data in the specified table</p>"},{"location":"v2/docs/ProjectBaseTableApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_base_table_api\nfrom libica.openapi.v2.model.base_job import BaseJob\nfrom libica.openapi.v2.model.load_data_in_base_request import LoadDataInBaseRequest\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_base_table_api.ProjectBaseTableApi(api_client)\n    project_id = \"projectId_example\" # str | \n    table_id = \"tableId_example\" # str | \n    load_data_in_base_request = LoadDataInBaseRequest(\n        allow_jagged_rows=False,\n        allow_quoted_newlines=False,\n        data_id=\"data_id_example\",\n        delimiter=\",\",\n        encoding=\"UTF8\",\n        force_load=False,\n        header_rows_to_skip=1,\n        ignore_unknown_values=False,\n        include_references=True,\n        include_data_reference=True,\n        include_sample_reference=True,\n        include_pipeline_reference=True,\n        include_pipeline_execution_reference=True,\n        include_tenant_reference=True,\n        null_marker=\"null_marker_example\",\n        number_of_errors_allowed=0,\n        quote=\"quote_example\",\n        write_preference=\"APPENDTOTABLE\",\n    ) # LoadDataInBaseRequest | Load data request (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Load data in a base table.\n        api_response = api_instance.load_data(project_id, table_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseTableApi-&gt;load_data: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Load data in a base table.\n        api_response = api_instance.load_data(project_id, table_id, load_data_in_base_request=load_data_in_base_request)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectBaseTableApi-&gt;load_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectBaseTableApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str table_id str load_data_in_base_request LoadDataInBaseRequest Load data request [optional]"},{"location":"v2/docs/ProjectBaseTableApi/#return-type_1","title":"Return type","text":"<p>BaseJob</p>"},{"location":"v2/docs/ProjectBaseTableApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectBaseTableApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectBaseTableApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 201 Base job to load data is created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectBaseTableList/","title":"ProjectBaseTableList","text":""},{"location":"v2/docs/ProjectBaseTableList/#properties","title":"Properties","text":"Name Type Description Notes items [ProjectBaseTable] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectBundle/","title":"ProjectBundle","text":""},{"location":"v2/docs/ProjectBundle/#properties","title":"Properties","text":"Name Type Description Notes bundle Bundle project_id str application ApplicationV4 [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectBundleList/","title":"ProjectBundleList","text":""},{"location":"v2/docs/ProjectBundleList/#properties","title":"Properties","text":"Name Type Description Notes items [ProjectBundle] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectCustomEventsApi/","title":"libica.openapi.v2.ProjectCustomEventsApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_custom_event POST /api/projects/{projectId}/customEvents Create a new custom event."},{"location":"v2/docs/ProjectCustomEventsApi/#create_custom_event","title":"create_custom_event","text":"<p>create_custom_event(project_id, create_custom_event)</p> <p>Create a new custom event.</p> <p>Warning: this endpoint allows to create custom events with a code larger than 20 characters (max 50), but the endpoint for creating a custom notification subscription (POST /api/projects/{projectId}/customNotificationSubscriptions) only accepts event codes up to 20 characters.</p>"},{"location":"v2/docs/ProjectCustomEventsApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_custom_events_api\nfrom libica.openapi.v2.model.create_custom_event import CreateCustomEvent\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_custom_events_api.ProjectCustomEventsApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_custom_event = CreateCustomEvent(\n        code=\"code_example\",\n        content={},\n    ) # CreateCustomEvent | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a new custom event.\n        api_instance.create_custom_event(project_id, create_custom_event)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectCustomEventsApi-&gt;create_custom_event: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectCustomEventsApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str create_custom_event CreateCustomEvent"},{"location":"v2/docs/ProjectCustomEventsApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectCustomEventsApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectCustomEventsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectCustomEventsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The event is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/","title":"libica.openapi.v2.ProjectCustomNotificationSubscriptionsApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_custom_notification_subscription POST /api/projects/{projectId}/customNotificationSubscriptions Create a custom notification subscription delete_custom_notification_subscription DELETE /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Delete a custom notification subscription get_custom_notification_subscription GET /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Retrieve a notification subscription get_custom_notification_subscriptions GET /api/projects/{projectId}/customNotificationSubscriptions Retrieve notification subscriptions update_custom_notification_subscription PUT /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Update a notification subscription"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#create_custom_notification_subscription","title":"create_custom_notification_subscription","text":"<p>CustomNotificationSubscription create_custom_notification_subscription(project_id, create_custom_notification_subscription)</p> <p>Create a custom notification subscription</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_custom_notification_subscriptions_api\nfrom libica.openapi.v2.model.custom_notification_subscription import CustomNotificationSubscription\nfrom libica.openapi.v2.model.create_custom_notification_subscription import CreateCustomNotificationSubscription\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_custom_notification_subscriptions_api.ProjectCustomNotificationSubscriptionsApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_custom_notification_subscription = CreateCustomNotificationSubscription(\n        custom_event_code=\"custom_event_code_example\",\n        filter_expression=\"filter_expression_example\",\n        enabled=True,\n        notification_channel_id=\"notification_channel_id_example\",\n    ) # CreateCustomNotificationSubscription | The new subscription\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a custom notification subscription\n        api_response = api_instance.create_custom_notification_subscription(project_id, create_custom_notification_subscription)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectCustomNotificationSubscriptionsApi-&gt;create_custom_notification_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str create_custom_notification_subscription CreateCustomNotificationSubscription The new subscription"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#return-type","title":"Return type","text":"<p>CustomNotificationSubscription</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The custom notification subscription is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#delete_custom_notification_subscription","title":"delete_custom_notification_subscription","text":"<p>delete_custom_notification_subscription(project_id, subscription_id)</p> <p>Delete a custom notification subscription</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_custom_notification_subscriptions_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_custom_notification_subscriptions_api.ProjectCustomNotificationSubscriptionsApi(api_client)\n    project_id = \"projectId_example\" # str | \n    subscription_id = \"subscriptionId_example\" # str | The ID of the custom notification subscription to delete\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Delete a custom notification subscription\n        api_instance.delete_custom_notification_subscription(project_id, subscription_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectCustomNotificationSubscriptionsApi-&gt;delete_custom_notification_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str subscription_id str The ID of the custom notification subscription to delete"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The custom notification subscription is successfully deleted - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#get_custom_notification_subscription","title":"get_custom_notification_subscription","text":"<p>CustomNotificationSubscription get_custom_notification_subscription(project_id, subscription_id)</p> <p>Retrieve a notification subscription</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_custom_notification_subscriptions_api\nfrom libica.openapi.v2.model.custom_notification_subscription import CustomNotificationSubscription\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_custom_notification_subscriptions_api.ProjectCustomNotificationSubscriptionsApi(api_client)\n    project_id = \"projectId_example\" # str | The ID of the project\n    subscription_id = \"subscriptionId_example\" # str | The ID of the notification subscription\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a notification subscription\n        api_response = api_instance.get_custom_notification_subscription(project_id, subscription_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectCustomNotificationSubscriptionsApi-&gt;get_custom_notification_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the notification subscription"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#return-type_2","title":"Return type","text":"<p>CustomNotificationSubscription</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The notification subscription is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#get_custom_notification_subscriptions","title":"get_custom_notification_subscriptions","text":"<p>CustomNotificationSubscriptionList get_custom_notification_subscriptions(project_id)</p> <p>Retrieve notification subscriptions</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_custom_notification_subscriptions_api\nfrom libica.openapi.v2.model.custom_notification_subscription_list import CustomNotificationSubscriptionList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_custom_notification_subscriptions_api.ProjectCustomNotificationSubscriptionsApi(api_client)\n    project_id = \"projectId_example\" # str | The ID of the project\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve notification subscriptions\n        api_response = api_instance.get_custom_notification_subscriptions(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectCustomNotificationSubscriptionsApi-&gt;get_custom_notification_subscriptions: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#return-type_3","title":"Return type","text":"<p>CustomNotificationSubscriptionList</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The notification subscriptions are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#update_custom_notification_subscription","title":"update_custom_notification_subscription","text":"<p>CustomNotificationSubscription update_custom_notification_subscription(project_id, subscription_id, custom_notification_subscription)</p> <p>Update a notification subscription</p> <p>Fields which can be updated:  - enabled  - eventCode  - filterExpression  - notificationChannel </p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_custom_notification_subscriptions_api\nfrom libica.openapi.v2.model.custom_notification_subscription import CustomNotificationSubscription\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_custom_notification_subscriptions_api.ProjectCustomNotificationSubscriptionsApi(api_client)\n    project_id = \"projectId_example\" # str | The ID of the project\n    subscription_id = \"subscriptionId_example\" # str | The ID of the custom notification subscription to update\n    custom_notification_subscription = CustomNotificationSubscription(\n        id=\"id_example\",\n        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        owner_id=\"owner_id_example\",\n        tenant_id=\"tenant_id_example\",\n        tenant_name=\"tenant_name_example\",\n        custom_event_code=\"custom_event_code_example\",\n        filter_expression=\"filter_expression_example\",\n        enabled=True,\n        notification_channel=NotificationChannel(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            enabled=True,\n            type=\"MAIL\",\n            address=\"address_example\",\n            aws_region=\"aws_region_example\",\n            application=ApplicationV4(\n                id=\"id_example\",\n                name=\"name_example\",\n            ),\n        ),\n        application=ApplicationV4(\n            id=\"id_example\",\n            name=\"name_example\",\n        ),\n    ) # CustomNotificationSubscription | The updated subscription\n    if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update a notification subscription\n        api_response = api_instance.update_custom_notification_subscription(project_id, subscription_id, custom_notification_subscription)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectCustomNotificationSubscriptionsApi-&gt;update_custom_notification_subscription: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update a notification subscription\n        api_response = api_instance.update_custom_notification_subscription(project_id, subscription_id, custom_notification_subscription, if_match=if_match)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectCustomNotificationSubscriptionsApi-&gt;update_custom_notification_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the custom notification subscription to update custom_notification_subscription CustomNotificationSubscription The updated subscription if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional]"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#return-type_4","title":"Return type","text":"<p>CustomNotificationSubscription</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectCustomNotificationSubscriptionsApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The notification subscription is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectData/","title":"ProjectData","text":""},{"location":"v2/docs/ProjectData/#properties","title":"Properties","text":"Name Type Description Notes data Data project_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataAndTemporaryCredentials/","title":"ProjectDataAndTemporaryCredentials","text":""},{"location":"v2/docs/ProjectDataAndTemporaryCredentials/#properties","title":"Properties","text":"Name Type Description Notes data Data project_id str temp_credentials TempCredentials any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/","title":"libica.openapi.v2.ProjectDataApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description add_secondary_data POST /api/projects/{projectId}/data/{dataId}/secondaryData/{secondaryDataId} Add secondary data to data. archive_data POST /api/projects/{projectId}/data/{dataId}:archive Schedule this data for archival. complete_folder_upload_session POST /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId}:complete Complete a trackable folder upload session. create_data_in_project POST /api/projects/{projectId}/data Create data in this project. create_download_url_for_data POST /api/projects/{projectId}/data/{dataId}:createDownloadUrl Retrieve a download URL for this data. create_download_urls_for_data POST /api/projects/{projectId}/data:createDownloadUrls Retrieve download URLs for the data. create_file POST /api/projects/{projectId}/data:createFile Create a file in this project. create_file_with_temporary_credentials POST /api/projects/{projectId}/data:createFileWithTemporaryCredentials Create a file in this project, and retrieve temporary credentials for it. create_file_with_upload_url POST /api/projects/{projectId}/data:createFileWithUploadUrl Create a file in this project, and retrieve an upload url for it. create_folder POST /api/projects/{projectId}/data:createFolder Create a folder in this project. create_folder_upload_session POST /api/projects/{projectId}/data/{dataId}/folderUploadSessions Create a trackable folder upload session. create_folder_with_temporary_credentials POST /api/projects/{projectId}/data:createFolderWithTemporaryCredentials Create a folder in this project, and and retrieve temporary credentials for it. create_folder_with_upload_session POST /api/projects/{projectId}/data:createFolderWithUploadSession Create a folder in this project, and create a trackable folder upload session. create_inline_view_url_for_data POST /api/projects/{projectId}/data/{dataId}:createInlineViewUrl Retrieve an URL for this data to use for inline view in a browser. create_non_indexed_folder POST /api/projects/{projectId}/data:createNonIndexedFolder Create a non indexed folder in this project. The folder will be created as a top-level folder. create_temporary_credentials_for_data POST /api/projects/{projectId}/data/{dataId}:createTemporaryCredentials Retrieve temporary credentials for this data. create_upload_url_for_data POST /api/projects/{projectId}/data/{dataId}:createUploadUrl Retrieve an upload URL for this data. delete_data POST /api/projects/{projectId}/data/{dataId}:delete Schedule this data for deletion. get_data_eligible_for_linking GET /api/projects/{projectId}/data/eligibleForLinking Retrieve a list of data eligible for linking to the current project. get_folder_upload_session GET /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId} Retrieve folder upload session details. get_non_sample_project_data GET /api/projects/{projectId}/data/nonSampleData Retrieve a list of project data not linked to a sample. get_project_data GET /api/projects/{projectId}/data/{dataId} Retrieve a project data. get_project_data_children GET /api/projects/{projectId}/data/{dataId}/children Retrieve the children of this data. get_project_data_list GET /api/projects/{projectId}/data Retrieve the list of project data. get_projects_linked_to_data GET /api/projects/{projectId}/data/{dataId}/linkedProjects Retrieve a list of projects to which this data is linked. get_secondary_data GET /api/projects/{projectId}/data/{dataId}/secondaryData Retrieve a list of secondary data for data. link_data_to_project POST /api/projects/{projectId}/data/{dataId} Link data to this project. remove_secondary_data DELETE /api/projects/{projectId}/data/{dataId}/secondaryData/{secondaryDataId} Remove secondary data from data. schedule_download_for_data POST /api/projects/{projectId}/data/{dataId}:scheduleDownload Schedule a download. unarchive_data POST /api/projects/{projectId}/data/{dataId}:unarchive Schedule this data for unarchival. unlink_data_from_project POST /api/projects/{projectId}/data/{dataId}:unlink Unlink data from this project. update_project_data PUT /api/projects/{projectId}/data/{dataId} Update this project data."},{"location":"v2/docs/ProjectDataApi/#add_secondary_data","title":"add_secondary_data","text":"<p>add_secondary_data(project_id, data_id, secondary_data_id)</p> <p>Add secondary data to data.</p>"},{"location":"v2/docs/ProjectDataApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n    secondary_data_id = \"secondaryDataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Add secondary data to data.\n        api_instance.add_secondary_data(project_id, data_id, secondary_data_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;add_secondary_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str data_id str secondary_data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectDataApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The secondary data is successfully added. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#archive_data","title":"archive_data","text":"<p>archive_data(project_id, data_id)</p> <p>Schedule this data for archival.</p> <p>Endpoint for scheduling this data for archival. This will also archive all files and directories below that data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectDataApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Schedule this data for archival.\n        api_instance.archive_data(project_id, data_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;archive_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully scheduled for archival. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#complete_folder_upload_session","title":"complete_folder_upload_session","text":"<p>FolderUploadSession complete_folder_upload_session(project_id, data_id, folder_upload_session_id, complete_folder_upload_session)</p> <p>Complete a trackable folder upload session.</p> <p>Complete a trackable folder upload session. By completing the folder upload session, and specifying how many files you have uploaded, ICA can ensure that all uploaded files are accounted for.</p>"},{"location":"v2/docs/ProjectDataApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.complete_folder_upload_session import CompleteFolderUploadSession\nfrom libica.openapi.v2.model.folder_upload_session import FolderUploadSession\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n    folder_upload_session_id = \"folderUploadSessionId_example\" # str | \n    complete_folder_upload_session = CompleteFolderUploadSession(\n        number_of_expected_uploaded_files=1,\n    ) # CompleteFolderUploadSession | The info required to complete the folder upload session.\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Complete a trackable folder upload session.\n        api_response = api_instance.complete_folder_upload_session(project_id, data_id, folder_upload_session_id, complete_folder_upload_session)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;complete_folder_upload_session: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str data_id str folder_upload_session_id str complete_folder_upload_session CompleteFolderUploadSession The info required to complete the folder upload session."},{"location":"v2/docs/ProjectDataApi/#return-type_2","title":"Return type","text":"<p>FolderUploadSession</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The folder upload session is successfully completed. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#create_data_in_project","title":"create_data_in_project","text":"<p>ProjectData create_data_in_project(project_id, create_data)</p> <p>Create data in this project.</p>"},{"location":"v2/docs/ProjectDataApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.create_data import CreateData\nfrom libica.openapi.v2.model.project_data import ProjectData\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_data = CreateData(\n        name=\"name_example\",\n        folder_id=\"folder_id_example\",\n        folder_path=\"jUR,rZ#UM/?R,Fp^l6$ARj\",\n        format_code=\"format_code_example\",\n        data_type=\"FILE\",\n    ) # CreateData | The data to create.\n    idempotency_key = \"Idempotency-Key_example\" # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create data in this project.\n        api_response = api_instance.create_data_in_project(project_id, create_data)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_data_in_project: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create data in this project.\n        api_response = api_instance.create_data_in_project(project_id, create_data, idempotency_key=idempotency_key)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_data_in_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str create_data CreateData The data to create. idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_3","title":"Return type","text":"<p>ProjectData</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 201 The data is successfully created in this project. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#create_download_url_for_data","title":"create_download_url_for_data","text":"<p>Download create_download_url_for_data(project_id, data_id)</p> <p>Retrieve a download URL for this data.</p> <p>Can be used to download a file directly from the region where it is located, no connector is needed. Not applicable for Folder.</p>"},{"location":"v2/docs/ProjectDataApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.download import Download\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a download URL for this data.\n        api_response = api_instance.create_download_url_for_data(project_id, data_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_download_url_for_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_4","title":"Return type","text":"<p>Download</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The download URL is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#create_download_urls_for_data","title":"create_download_urls_for_data","text":"<p>DataUrlWithPathList create_download_urls_for_data(project_id, data_id_or_path_list)</p> <p>Retrieve download URLs for the data.</p> <p>Can be used to download files directly from the region where it is located, no connector is needed. Not applicable for Folders.</p>"},{"location":"v2/docs/ProjectDataApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.data_id_or_path_list import DataIdOrPathList\nfrom libica.openapi.v2.model.data_url_with_path_list import DataUrlWithPathList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id_or_path_list = DataIdOrPathList(\n        data_ids=[\n            \"data_ids_example\",\n        ],\n        data_paths=[\n            \"data_paths_example\",\n        ],\n    ) # DataIdOrPathList | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve download URLs for the data.\n        api_response = api_instance.create_download_urls_for_data(project_id, data_id_or_path_list)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_download_urls_for_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes project_id str data_id_or_path_list DataIdOrPathList"},{"location":"v2/docs/ProjectDataApi/#return-type_5","title":"Return type","text":"<p>DataUrlWithPathList</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_5","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 200 The download URLs are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#create_file","title":"create_file","text":"<p>ProjectData create_file(project_id, create_file_data)</p> <p>Create a file in this project.</p>"},{"location":"v2/docs/ProjectDataApi/#example_6","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.project_data import ProjectData\nfrom libica.openapi.v2.model.create_file_data import CreateFileData\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_file_data = CreateFileData(\n        name=\"name_example\",\n        folder_id=\"folder_id_example\",\n        folder_path=\"jUR,rZ#UM/?R,Fp^l6$ARj\",\n        format_code=\"format_code_example\",\n    ) # CreateFileData | The file to create.\n    idempotency_key = \"Idempotency-Key_example\" # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a file in this project.\n        api_response = api_instance.create_file(project_id, create_file_data)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_file: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a file in this project.\n        api_response = api_instance.create_file(project_id, create_file_data, idempotency_key=idempotency_key)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_file: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes project_id str create_file_data CreateFileData The file to create. idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_6","title":"Return type","text":"<p>ProjectData</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_6","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 201 The file is successfully created in this project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#create_file_with_temporary_credentials","title":"create_file_with_temporary_credentials","text":"<p>ProjectDataAndTemporaryCredentials create_file_with_temporary_credentials(project_id, create_file_and_temporary_credentials)</p> <p>Create a file in this project, and retrieve temporary credentials for it.</p>"},{"location":"v2/docs/ProjectDataApi/#example_7","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.create_file_and_temporary_credentials import CreateFileAndTemporaryCredentials\nfrom libica.openapi.v2.model.project_data_and_temporary_credentials import ProjectDataAndTemporaryCredentials\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_file_and_temporary_credentials = CreateFileAndTemporaryCredentials(\n        name=\"name_example\",\n        folder_id=\"folder_id_example\",\n        folder_path=\"jUR,rZ#UM/?R,Fp^l6$ARj\",\n        format_code=\"format_code_example\",\n        temporary_credentials=CreateTemporaryCredentials(\n            credentials_format=\"RCLONE\",\n            read_only_credentials=True,\n        ),\n    ) # CreateFileAndTemporaryCredentials | The data to create.\n    idempotency_key = \"Idempotency-Key_example\" # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a file in this project, and retrieve temporary credentials for it.\n        api_response = api_instance.create_file_with_temporary_credentials(project_id, create_file_and_temporary_credentials)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_file_with_temporary_credentials: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a file in this project, and retrieve temporary credentials for it.\n        api_response = api_instance.create_file_with_temporary_credentials(project_id, create_file_and_temporary_credentials, idempotency_key=idempotency_key)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_file_with_temporary_credentials: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes project_id str create_file_and_temporary_credentials CreateFileAndTemporaryCredentials The data to create. idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_7","title":"Return type","text":"<p>ProjectDataAndTemporaryCredentials</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_7","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 201 The data is successfully created in this project, and the temporary credentials are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#create_file_with_upload_url","title":"create_file_with_upload_url","text":"<p>ProjectFileAndUploadUrl create_file_with_upload_url(project_id, create_file_and_upload_url)</p> <p>Create a file in this project, and retrieve an upload url for it.</p>"},{"location":"v2/docs/ProjectDataApi/#example_8","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.create_file_and_upload_url import CreateFileAndUploadUrl\nfrom libica.openapi.v2.model.project_file_and_upload_url import ProjectFileAndUploadUrl\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_file_and_upload_url = CreateFileAndUploadUrl(\n        name=\"name_example\",\n        folder_id=\"folder_id_example\",\n        folder_path=\"jUR,rZ#UM/?R,Fp^l6$ARj\",\n        format_code=\"format_code_example\",\n        file_type=\"file_type_example\",\n        hash=\"hash_example\",\n    ) # CreateFileAndUploadUrl | The data to create.\n    idempotency_key = \"Idempotency-Key_example\" # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a file in this project, and retrieve an upload url for it.\n        api_response = api_instance.create_file_with_upload_url(project_id, create_file_and_upload_url)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_file_with_upload_url: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a file in this project, and retrieve an upload url for it.\n        api_response = api_instance.create_file_with_upload_url(project_id, create_file_and_upload_url, idempotency_key=idempotency_key)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_file_with_upload_url: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes project_id str create_file_and_upload_url CreateFileAndUploadUrl The data to create. idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_8","title":"Return type","text":"<p>ProjectFileAndUploadUrl</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_8","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 201 The data is successfully created in this project, and the upload URL is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#create_folder","title":"create_folder","text":"<p>ProjectData create_folder(project_id, create_folder)</p> <p>Create a folder in this project.</p>"},{"location":"v2/docs/ProjectDataApi/#example_9","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.project_data import ProjectData\nfrom libica.openapi.v2.model.create_folder import CreateFolder\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_folder = CreateFolder(\n        name=\"name_example\",\n        folder_id=\"folder_id_example\",\n        folder_path=\"jUR,rZ#UM/?R,Fp^l6$ARj\",\n    ) # CreateFolder | The folder to create.\n    idempotency_key = \"Idempotency-Key_example\" # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a folder in this project.\n        api_response = api_instance.create_folder(project_id, create_folder)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_folder: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a folder in this project.\n        api_response = api_instance.create_folder(project_id, create_folder, idempotency_key=idempotency_key)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_folder: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_9","title":"Parameters","text":"Name Type Description Notes project_id str create_folder CreateFolder The folder to create. idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_9","title":"Return type","text":"<p>ProjectData</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_9","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_9","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_9","title":"HTTP response details","text":"Status code Description Response headers 201 The folder is successfully created in this project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#create_folder_upload_session","title":"create_folder_upload_session","text":"<p>FolderUploadSession create_folder_upload_session(project_id, data_id)</p> <p>Create a trackable folder upload session.</p> <p>This endpoint can be used to ensure that all uploaded files within the requested session are accounted for. This call has to be used together with the :complete endpoint once upload is done.</p>"},{"location":"v2/docs/ProjectDataApi/#example_10","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.create_temporary_credentials import CreateTemporaryCredentials\nfrom libica.openapi.v2.model.folder_upload_session import FolderUploadSession\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n    create_temporary_credentials = CreateTemporaryCredentials(\n        credentials_format=\"RCLONE\",\n        read_only_credentials=True,\n    ) # CreateTemporaryCredentials | Temporary credentials request options. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a trackable folder upload session.\n        api_response = api_instance.create_folder_upload_session(project_id, data_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_folder_upload_session: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a trackable folder upload session.\n        api_response = api_instance.create_folder_upload_session(project_id, data_id, create_temporary_credentials=create_temporary_credentials)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_folder_upload_session: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_10","title":"Parameters","text":"Name Type Description Notes project_id str data_id str create_temporary_credentials CreateTemporaryCredentials Temporary credentials request options. [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_10","title":"Return type","text":"<p>FolderUploadSession</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_10","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_10","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_10","title":"HTTP response details","text":"Status code Description Response headers 201 The folder upload session is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#create_folder_with_temporary_credentials","title":"create_folder_with_temporary_credentials","text":"<p>ProjectDataAndTemporaryCredentials create_folder_with_temporary_credentials(project_id, create_folder_and_temporary_credentials)</p> <p>Create a folder in this project, and and retrieve temporary credentials for it.</p>"},{"location":"v2/docs/ProjectDataApi/#example_11","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.create_folder_and_temporary_credentials import CreateFolderAndTemporaryCredentials\nfrom libica.openapi.v2.model.project_data_and_temporary_credentials import ProjectDataAndTemporaryCredentials\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_folder_and_temporary_credentials = CreateFolderAndTemporaryCredentials(\n        name=\"name_example\",\n        folder_id=\"folder_id_example\",\n        folder_path=\"jUR,rZ#UM/?R,Fp^l6$ARj\",\n        non_indexed=False,\n        temporary_credentials=CreateTemporaryCredentials(\n            credentials_format=\"RCLONE\",\n            read_only_credentials=True,\n        ),\n    ) # CreateFolderAndTemporaryCredentials | The data to create.\n    idempotency_key = \"Idempotency-Key_example\" # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a folder in this project, and and retrieve temporary credentials for it.\n        api_response = api_instance.create_folder_with_temporary_credentials(project_id, create_folder_and_temporary_credentials)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_folder_with_temporary_credentials: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a folder in this project, and and retrieve temporary credentials for it.\n        api_response = api_instance.create_folder_with_temporary_credentials(project_id, create_folder_and_temporary_credentials, idempotency_key=idempotency_key)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_folder_with_temporary_credentials: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_11","title":"Parameters","text":"Name Type Description Notes project_id str create_folder_and_temporary_credentials CreateFolderAndTemporaryCredentials The data to create. idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_11","title":"Return type","text":"<p>ProjectDataAndTemporaryCredentials</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_11","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_11","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_11","title":"HTTP response details","text":"Status code Description Response headers 201 The data is successfully created in this project, and the temporary credentials are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#create_folder_with_upload_session","title":"create_folder_with_upload_session","text":"<p>ProjectFolderAndUploadSession create_folder_with_upload_session(project_id, create_folder_and_temporary_credentials)</p> <p>Create a folder in this project, and create a trackable folder upload session.</p>"},{"location":"v2/docs/ProjectDataApi/#example_12","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.create_folder_and_temporary_credentials import CreateFolderAndTemporaryCredentials\nfrom libica.openapi.v2.model.project_folder_and_upload_session import ProjectFolderAndUploadSession\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_folder_and_temporary_credentials = CreateFolderAndTemporaryCredentials(\n        name=\"name_example\",\n        folder_id=\"folder_id_example\",\n        folder_path=\"jUR,rZ#UM/?R,Fp^l6$ARj\",\n        non_indexed=False,\n        temporary_credentials=CreateTemporaryCredentials(\n            credentials_format=\"RCLONE\",\n            read_only_credentials=True,\n        ),\n    ) # CreateFolderAndTemporaryCredentials | The data to create.\n    idempotency_key = \"Idempotency-Key_example\" # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a folder in this project, and create a trackable folder upload session.\n        api_response = api_instance.create_folder_with_upload_session(project_id, create_folder_and_temporary_credentials)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_folder_with_upload_session: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a folder in this project, and create a trackable folder upload session.\n        api_response = api_instance.create_folder_with_upload_session(project_id, create_folder_and_temporary_credentials, idempotency_key=idempotency_key)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_folder_with_upload_session: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_12","title":"Parameters","text":"Name Type Description Notes project_id str create_folder_and_temporary_credentials CreateFolderAndTemporaryCredentials The data to create. idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_12","title":"Return type","text":"<p>ProjectFolderAndUploadSession</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_12","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_12","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_12","title":"HTTP response details","text":"Status code Description Response headers 201 The data is successfully created in this project, and the folder upload session is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#create_inline_view_url_for_data","title":"create_inline_view_url_for_data","text":"<p>InlineView create_inline_view_url_for_data(project_id, data_id)</p> <p>Retrieve an URL for this data to use for inline view in a browser.</p> <p>Can be used to view a file directly from the region where it is located, no connector is needed.</p>"},{"location":"v2/docs/ProjectDataApi/#example_13","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.inline_view import InlineView\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve an URL for this data to use for inline view in a browser.\n        api_response = api_instance.create_inline_view_url_for_data(project_id, data_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_inline_view_url_for_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_13","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_13","title":"Return type","text":"<p>InlineView</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_13","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_13","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_13","title":"HTTP response details","text":"Status code Description Response headers 200 The inline view URL is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#create_non_indexed_folder","title":"create_non_indexed_folder","text":"<p>ProjectData create_non_indexed_folder(project_id, create_non_indexed_folder)</p> <p>Create a non indexed folder in this project. The folder will be created as a top-level folder.</p>"},{"location":"v2/docs/ProjectDataApi/#example_14","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.project_data import ProjectData\nfrom libica.openapi.v2.model.create_non_indexed_folder import CreateNonIndexedFolder\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_non_indexed_folder = CreateNonIndexedFolder(\n        name=\"name_example\",\n    ) # CreateNonIndexedFolder | The non indexed folder to create.\n    idempotency_key = \"Idempotency-Key_example\" # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a non indexed folder in this project. The folder will be created as a top-level folder.\n        api_response = api_instance.create_non_indexed_folder(project_id, create_non_indexed_folder)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_non_indexed_folder: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a non indexed folder in this project. The folder will be created as a top-level folder.\n        api_response = api_instance.create_non_indexed_folder(project_id, create_non_indexed_folder, idempotency_key=idempotency_key)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_non_indexed_folder: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_14","title":"Parameters","text":"Name Type Description Notes project_id str create_non_indexed_folder CreateNonIndexedFolder The non indexed folder to create. idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_14","title":"Return type","text":"<p>ProjectData</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_14","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_14","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_14","title":"HTTP response details","text":"Status code Description Response headers 201 The non indexed folder is successfully created in this project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#create_temporary_credentials_for_data","title":"create_temporary_credentials_for_data","text":"<p>TempCredentials create_temporary_credentials_for_data(project_id, data_id)</p> <p>Retrieve temporary credentials for this data.</p> <p>Can be used to upload or download a file directly from the region where it is located, no connector is needed. The returned credentials expire after 36 hours.</p>"},{"location":"v2/docs/ProjectDataApi/#example_15","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.create_temporary_credentials import CreateTemporaryCredentials\nfrom libica.openapi.v2.model.temp_credentials import TempCredentials\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n    create_temporary_credentials = CreateTemporaryCredentials(\n        credentials_format=\"RCLONE\",\n        read_only_credentials=True,\n    ) # CreateTemporaryCredentials | Temporary credentials request options. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve temporary credentials for this data.\n        api_response = api_instance.create_temporary_credentials_for_data(project_id, data_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_temporary_credentials_for_data: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve temporary credentials for this data.\n        api_response = api_instance.create_temporary_credentials_for_data(project_id, data_id, create_temporary_credentials=create_temporary_credentials)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_temporary_credentials_for_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_15","title":"Parameters","text":"Name Type Description Notes project_id str data_id str create_temporary_credentials CreateTemporaryCredentials Temporary credentials request options. [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_15","title":"Return type","text":"<p>TempCredentials</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_15","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_15","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_15","title":"HTTP response details","text":"Status code Description Response headers 200 The temporary credentials are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#create_upload_url_for_data","title":"create_upload_url_for_data","text":"<p>Upload create_upload_url_for_data(project_id, data_id)</p> <p>Retrieve an upload URL for this data.</p> <p>Can be used to upload a file directly from the region where it is located, no connector is needed. The project identifier must match the project which owns the data. You can create both new files and overwrite files in status 'partial'.</p>"},{"location":"v2/docs/ProjectDataApi/#example_16","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.upload import Upload\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n    file_type = \"fileType_example\" # str |  (optional)\n    hash = \"hash_example\" # str |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve an upload URL for this data.\n        api_response = api_instance.create_upload_url_for_data(project_id, data_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_upload_url_for_data: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve an upload URL for this data.\n        api_response = api_instance.create_upload_url_for_data(project_id, data_id, file_type=file_type, hash=hash)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_upload_url_for_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_16","title":"Parameters","text":"Name Type Description Notes project_id str data_id str file_type str [optional] hash str [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_16","title":"Return type","text":"<p>Upload</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_16","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_16","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_16","title":"HTTP response details","text":"Status code Description Response headers 200 The upload URL is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#delete_data","title":"delete_data","text":"<p>delete_data(project_id, data_id)</p> <p>Schedule this data for deletion.</p> <p>Endpoint for scheduling this data for deletion. This will also delete all files and directories below that data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectDataApi/#example_17","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Schedule this data for deletion.\n        api_instance.delete_data(project_id, data_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;delete_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_17","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_17","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_17","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_17","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_17","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully scheduled for deletion. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#get_data_eligible_for_linking","title":"get_data_eligible_for_linking","text":"<p>DataPagedList get_data_eligible_for_linking(project_id)</p> <p>Retrieve a list of data eligible for linking to the current project.</p>"},{"location":"v2/docs/ProjectDataApi/#example_18","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.data_paged_list import DataPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    full_text = \"fullText_example\" # str | To search through multiple fields of data. (optional)\n    id = [\n        \"id_example\",\n    ] # [str] | The ids to filter on. This will always match exact. (optional)\n    filename = [\n        \"filename_example\",\n    ] # [str] | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional)\n    filename_match_mode = \"EXACT\" # str | How the filenames are filtered.  (optional)\n    file_path = [\n        \"filePath_example\",\n    ] # [str] | The paths of the files to filter on. (optional)\n    file_path_match_mode = \"STARTS_WITH_CASE_INSENSITIVE\" # str | How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). (optional) if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\"\n    status = [\n        \"PARTIAL\",\n    ] # [str] | The statuses to filter on. (optional)\n    format_id = [\n        \"formatId_example\",\n    ] # [str] | The IDs of the formats to filter on. (optional)\n    format_code = [\n        \"formatCode_example\",\n    ] # [str] | The codes of the formats to filter on. (optional)\n    type = \"FILE\" # str | The type to filter on. (optional)\n    parent_folder_id = [\n        \"parentFolderId_example\",\n    ] # [str] | The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. (optional)\n    parent_folder_path = \"parentFolderPath_example\" # str | The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files. (optional)\n    creation_date_after = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    creation_date_before = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_after = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_before = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    user_tag = [\n        \"userTag_example\",\n    ] # [str] | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional)\n    user_tag_match_mode = \"EXACT\" # str | How the usertags are filtered.  (optional)\n    run_input_tag = [\n        \"runInputTag_example\",\n    ] # [str] | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_input_tag_match_mode = \"EXACT\" # str | How the runInputTags are filtered.  (optional)\n    run_output_tag = [\n        \"runOutputTag_example\",\n    ] # [str] | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_output_tag_match_mode = \"EXACT\" # str | How the runOutputTags are filtered.  (optional)\n    connector_tag = [\n        \"connectorTag_example\",\n    ] # [str] | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional)\n    connector_tag_match_mode = \"EXACT\" # str | How the connectorTags are filtered.  (optional)\n    technical_tag = [\n        \"technicalTag_example\",\n    ] # [str] | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional)\n    technical_tag_match_mode = \"EXACT\" # str | How the technicalTags are filtered.  (optional)\n    not_in_run = True # bool | When set to true, the data will be filtered on data which is not used in a run. (optional)\n    not_linked_to_sample = True # bool | When set to true only data that is unlinked to a sample will be returned. This filter implies a filter of type File. (optional)\n    instrument_run_id = [\n        \"instrumentRunId_example\",\n    ] # [str] | The instrument run IDs of the sequencing runs to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of data eligible for linking to the current project.\n        api_response = api_instance.get_data_eligible_for_linking(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_data_eligible_for_linking: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of data eligible for linking to the current project.\n        api_response = api_instance.get_data_eligible_for_linking(project_id, full_text=full_text, id=id, filename=filename, filename_match_mode=filename_match_mode, file_path=file_path, file_path_match_mode=file_path_match_mode, status=status, format_id=format_id, format_code=format_code, type=type, parent_folder_id=parent_folder_id, parent_folder_path=parent_folder_path, creation_date_after=creation_date_after, creation_date_before=creation_date_before, status_date_after=status_date_after, status_date_before=status_date_before, user_tag=user_tag, user_tag_match_mode=user_tag_match_mode, run_input_tag=run_input_tag, run_input_tag_match_mode=run_input_tag_match_mode, run_output_tag=run_output_tag, run_output_tag_match_mode=run_output_tag_match_mode, connector_tag=connector_tag, connector_tag_match_mode=connector_tag_match_mode, technical_tag=technical_tag, technical_tag_match_mode=technical_tag_match_mode, not_in_run=not_in_run, not_linked_to_sample=not_linked_to_sample, instrument_run_id=instrument_run_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_data_eligible_for_linking: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_18","title":"Parameters","text":"Name Type Description Notes project_id str full_text str To search through multiple fields of data. [optional] id [str] The ids to filter on. This will always match exact. [optional] filename [str] The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] file_path [str] The paths of the files to filter on. [optional] file_path_match_mode str How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). [optional] if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status [str] The statuses to filter on. [optional] format_id [str] The IDs of the formats to filter on. [optional] format_code [str] The codes of the formats to filter on. [optional] type str The type to filter on. [optional] parent_folder_id [str] The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. [optional] parent_folder_path str The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files. [optional] creation_date_after datetime The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before datetime The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after datetime The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before datetime The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag [str] The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag [str] The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag [str] The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag [str] The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag [str] The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run bool When set to true, the data will be filtered on data which is not used in a run. [optional] not_linked_to_sample bool When set to true only data that is unlinked to a sample will be returned. This filter implies a filter of type File. [optional] instrument_run_id [str] The instrument run IDs of the sequencing runs to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_18","title":"Return type","text":"<p>DataPagedList</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_18","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_18","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_18","title":"HTTP response details","text":"Status code Description Response headers 200 The list of data is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#get_folder_upload_session","title":"get_folder_upload_session","text":"<p>FolderUploadSession get_folder_upload_session(project_id, data_id, folder_upload_session_id)</p> <p>Retrieve folder upload session details.</p> <p>Retrieve folder upload session details, including the current status of your upload session.</p>"},{"location":"v2/docs/ProjectDataApi/#example_19","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.folder_upload_session import FolderUploadSession\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n    folder_upload_session_id = \"folderUploadSessionId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve folder upload session details.\n        api_response = api_instance.get_folder_upload_session(project_id, data_id, folder_upload_session_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_folder_upload_session: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_19","title":"Parameters","text":"Name Type Description Notes project_id str data_id str folder_upload_session_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_19","title":"Return type","text":"<p>FolderUploadSession</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_19","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_19","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_19","title":"HTTP response details","text":"Status code Description Response headers 200 The folder upload session details are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#get_non_sample_project_data","title":"get_non_sample_project_data","text":"<p>ProjectDataPagedList get_non_sample_project_data(project_id)</p> <p>Retrieve a list of project data not linked to a sample.</p>"},{"location":"v2/docs/ProjectDataApi/#example_20","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.project_data_paged_list import ProjectDataPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of project data not linked to a sample.\n        api_response = api_instance.get_non_sample_project_data(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_non_sample_project_data: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of project data not linked to a sample.\n        api_response = api_instance.get_non_sample_project_data(project_id, page_offset=page_offset, page_token=page_token, page_size=page_size)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_non_sample_project_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_20","title":"Parameters","text":"Name Type Description Notes project_id str page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_20","title":"Return type","text":"<p>ProjectDataPagedList</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_20","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_20","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_20","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project data is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#get_project_data","title":"get_project_data","text":"<p>ProjectData get_project_data(project_id, data_id)</p> <p>Retrieve a project data.</p>"},{"location":"v2/docs/ProjectDataApi/#example_21","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.project_data import ProjectData\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project data.\n        api_response = api_instance.get_project_data(project_id, data_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_project_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_21","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_21","title":"Return type","text":"<p>ProjectData</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_21","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_21","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_21","title":"HTTP response details","text":"Status code Description Response headers 200 The project data is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#get_project_data_children","title":"get_project_data_children","text":"<p>ProjectDataPagedList get_project_data_children(project_id, data_id)</p> <p>Retrieve the children of this data.</p>"},{"location":"v2/docs/ProjectDataApi/#changelog-for-this-endpoint-multiple-versions-exist-note-that-the-values-for-request-headers-content-type-and-accept-must-contain-a-matching-version-v3-initial-version-v4-added-pagination","title":"Changelog For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.  ## [V3] Initial version ## [V4] Added pagination","text":""},{"location":"v2/docs/ProjectDataApi/#example_22","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.data_list import DataList\nfrom libica.openapi.v2.model.project_data_paged_list import ProjectDataPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n    full_text = \"fullText_example\" # str | To search through multiple fields of data. (optional)\n    id = [\n        \"id_example\",\n    ] # [str] | The ids to filter on. This will always match exact. (optional)\n    filename = [\n        \"filename_example\",\n    ] # [str] | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional)\n    filename_match_mode = \"EXACT\" # str | How the filenames are filtered.  (optional)\n    status = [\n        \"PARTIAL\",\n    ] # [str] | The statuses to filter on. (optional)\n    format_id = [\n        \"formatId_example\",\n    ] # [str] | The IDs of the formats to filter on. (optional)\n    format_code = [\n        \"formatCode_example\",\n    ] # [str] | The codes of the formats to filter on. (optional)\n    type = \"FILE\" # str | The type to filter on. (optional)\n    creation_date_after = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    creation_date_before = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_after = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_before = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    user_tag = [\n        \"userTag_example\",\n    ] # [str] | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional)\n    user_tag_match_mode = \"EXACT\" # str | How the usertags are filtered.  (optional)\n    run_input_tag = [\n        \"runInputTag_example\",\n    ] # [str] | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_input_tag_match_mode = \"EXACT\" # str | How the runInputTags are filtered.  (optional)\n    run_output_tag = [\n        \"runOutputTag_example\",\n    ] # [str] | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_output_tag_match_mode = \"EXACT\" # str | How the runOutputTags are filtered.  (optional)\n    connector_tag = [\n        \"connectorTag_example\",\n    ] # [str] | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional)\n    connector_tag_match_mode = \"EXACT\" # str | How the connectorTags are filtered.  (optional)\n    technical_tag = [\n        \"technicalTag_example\",\n    ] # [str] | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional)\n    technical_tag_match_mode = \"EXACT\" # str | How the technicalTags are filtered.  (optional)\n    not_in_run = True # bool | When set to true, the data will be filtered on data which is not used in a run. (optional)\n    not_linked_to_sample = True # bool | When set to true only data that is unlinked to a sample will be returned.  This filter implies a filter of type File. (optional)\n    instrument_run_id = [\n        \"instrumentRunId_example\",\n    ] # [str] | The instrument run IDs of the sequencing runs to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the children of this data.\n        api_response = api_instance.get_project_data_children(project_id, data_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_project_data_children: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve the children of this data.\n        api_response = api_instance.get_project_data_children(project_id, data_id, full_text=full_text, id=id, filename=filename, filename_match_mode=filename_match_mode, status=status, format_id=format_id, format_code=format_code, type=type, creation_date_after=creation_date_after, creation_date_before=creation_date_before, status_date_after=status_date_after, status_date_before=status_date_before, user_tag=user_tag, user_tag_match_mode=user_tag_match_mode, run_input_tag=run_input_tag, run_input_tag_match_mode=run_input_tag_match_mode, run_output_tag=run_output_tag, run_output_tag_match_mode=run_output_tag_match_mode, connector_tag=connector_tag, connector_tag_match_mode=connector_tag_match_mode, technical_tag=technical_tag, technical_tag_match_mode=technical_tag_match_mode, not_in_run=not_in_run, not_linked_to_sample=not_linked_to_sample, instrument_run_id=instrument_run_id, page_offset=page_offset, page_token=page_token, page_size=page_size)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_project_data_children: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_22","title":"Parameters","text":"Name Type Description Notes project_id str data_id str full_text str To search through multiple fields of data. [optional] id [str] The ids to filter on. This will always match exact. [optional] filename [str] The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] status [str] The statuses to filter on. [optional] format_id [str] The IDs of the formats to filter on. [optional] format_code [str] The codes of the formats to filter on. [optional] type str The type to filter on. [optional] creation_date_after datetime The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before datetime The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after datetime The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before datetime The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag [str] The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag [str] The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag [str] The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag [str] The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag [str] The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run bool When set to true, the data will be filtered on data which is not used in a run. [optional] not_linked_to_sample bool When set to true only data that is unlinked to a sample will be returned.  This filter implies a filter of type File. [optional] instrument_run_id [str] The instrument run IDs of the sequencing runs to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_22","title":"Return type","text":"<p>ProjectDataPagedList</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_22","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_22","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_22","title":"HTTP response details","text":"Status code Description Response headers 200 The list of data children is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#get_project_data_list","title":"get_project_data_list","text":"<p>ProjectDataPagedList get_project_data_list(project_id)</p> <p>Retrieve the list of project data.</p>"},{"location":"v2/docs/ProjectDataApi/#example_23","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.project_data_paged_list import ProjectDataPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    full_text = \"fullText_example\" # str | To search through multiple fields of data. (optional)\n    id = [\n        \"id_example\",\n    ] # [str] | The ids to filter on. This will always match exact. (optional)\n    filename = [\n        \"filename_example\",\n    ] # [str] | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional)\n    filename_match_mode = \"EXACT\" # str | How the filenames are filtered.  (optional)\n    file_path = [\n        \"filePath_example\",\n    ] # [str] | The paths of the files to filter on. (optional)\n    file_path_match_mode = \"STARTS_WITH_CASE_INSENSITIVE\" # str | How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). (optional) if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\"\n    status = [\n        \"PARTIAL\",\n    ] # [str] | The statuses to filter on. (optional)\n    format_id = [\n        \"formatId_example\",\n    ] # [str] | The IDs of the formats to filter on. (optional)\n    format_code = [\n        \"formatCode_example\",\n    ] # [str] | The codes of the formats to filter on. (optional)\n    type = \"FILE\" # str | The type to filter on. (optional)\n    non_indexed_folders = True # bool | To filter on non-indexed folders. (optional)\n    parent_folder_id = [\n        \"parentFolderId_example\",\n    ] # [str] | The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. (optional)\n    parent_folder_path = \"parentFolderPath_example\" # str | The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files. (optional)\n    creation_date_after = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    creation_date_before = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_after = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_before = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    user_tag = [\n        \"userTag_example\",\n    ] # [str] | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional)\n    user_tag_match_mode = \"EXACT\" # str | How the usertags are filtered.  (optional)\n    run_input_tag = [\n        \"runInputTag_example\",\n    ] # [str] | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_input_tag_match_mode = \"EXACT\" # str | How the runInputTags are filtered.  (optional)\n    run_output_tag = [\n        \"runOutputTag_example\",\n    ] # [str] | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_output_tag_match_mode = \"EXACT\" # str | How the runOutputTags are filtered.  (optional)\n    connector_tag = [\n        \"connectorTag_example\",\n    ] # [str] | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional)\n    connector_tag_match_mode = \"EXACT\" # str | How the connectorTags are filtered.  (optional)\n    technical_tag = [\n        \"technicalTag_example\",\n    ] # [str] | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional)\n    technical_tag_match_mode = \"EXACT\" # str | How the technicalTags are filtered.  (optional)\n    not_in_run = True # bool | When set to true, the data will be filtered on data which is not used in a run. (optional)\n    not_linked_to_sample = True # bool | When set to true only data that is unlinked to a sample will be returned.  This filter implies a filter of type File. (optional)\n    instrument_run_id = [\n        \"instrumentRunId_example\",\n    ] # [str] | The instrument run IDs of the sequencing runs to filter on. (optional)\n    owning_project_id = [\n        \"owningProjectId_example\",\n    ] # [str] | The owning project ID to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the list of project data.\n        api_response = api_instance.get_project_data_list(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_project_data_list: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve the list of project data.\n        api_response = api_instance.get_project_data_list(project_id, full_text=full_text, id=id, filename=filename, filename_match_mode=filename_match_mode, file_path=file_path, file_path_match_mode=file_path_match_mode, status=status, format_id=format_id, format_code=format_code, type=type, non_indexed_folders=non_indexed_folders, parent_folder_id=parent_folder_id, parent_folder_path=parent_folder_path, creation_date_after=creation_date_after, creation_date_before=creation_date_before, status_date_after=status_date_after, status_date_before=status_date_before, user_tag=user_tag, user_tag_match_mode=user_tag_match_mode, run_input_tag=run_input_tag, run_input_tag_match_mode=run_input_tag_match_mode, run_output_tag=run_output_tag, run_output_tag_match_mode=run_output_tag_match_mode, connector_tag=connector_tag, connector_tag_match_mode=connector_tag_match_mode, technical_tag=technical_tag, technical_tag_match_mode=technical_tag_match_mode, not_in_run=not_in_run, not_linked_to_sample=not_linked_to_sample, instrument_run_id=instrument_run_id, owning_project_id=owning_project_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_project_data_list: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_23","title":"Parameters","text":"Name Type Description Notes project_id str full_text str To search through multiple fields of data. [optional] id [str] The ids to filter on. This will always match exact. [optional] filename [str] The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] file_path [str] The paths of the files to filter on. [optional] file_path_match_mode str How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). [optional] if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status [str] The statuses to filter on. [optional] format_id [str] The IDs of the formats to filter on. [optional] format_code [str] The codes of the formats to filter on. [optional] type str The type to filter on. [optional] non_indexed_folders bool To filter on non-indexed folders. [optional] parent_folder_id [str] The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. [optional] parent_folder_path str The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files. [optional] creation_date_after datetime The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before datetime The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after datetime The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before datetime The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag [str] The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag [str] The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag [str] The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag [str] The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag [str] The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run bool When set to true, the data will be filtered on data which is not used in a run. [optional] not_linked_to_sample bool When set to true only data that is unlinked to a sample will be returned.  This filter implies a filter of type File. [optional] instrument_run_id [str] The instrument run IDs of the sequencing runs to filter on. [optional] owning_project_id [str] The owning project ID to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt [optional]"},{"location":"v2/docs/ProjectDataApi/#return-type_23","title":"Return type","text":"<p>ProjectDataPagedList</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_23","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_23","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_23","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project data is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#get_projects_linked_to_data","title":"get_projects_linked_to_data","text":"<p>ProjectList get_projects_linked_to_data(project_id, data_id)</p> <p>Retrieve a list of projects to which this data is linked.</p>"},{"location":"v2/docs/ProjectDataApi/#example_24","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.project_list import ProjectList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of projects to which this data is linked.\n        api_response = api_instance.get_projects_linked_to_data(project_id, data_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_projects_linked_to_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_24","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_24","title":"Return type","text":"<p>ProjectList</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_24","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_24","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_24","title":"HTTP response details","text":"Status code Description Response headers 200 The list of projects is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#get_secondary_data","title":"get_secondary_data","text":"<p>DataList get_secondary_data(project_id, data_id)</p> <p>Retrieve a list of secondary data for data.</p>"},{"location":"v2/docs/ProjectDataApi/#example_25","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.data_list import DataList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of secondary data for data.\n        api_response = api_instance.get_secondary_data(project_id, data_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_secondary_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_25","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_25","title":"Return type","text":"<p>DataList</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_25","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_25","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_25","title":"HTTP response details","text":"Status code Description Response headers 200 The list of secondary data is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#link_data_to_project","title":"link_data_to_project","text":"<p>ProjectData link_data_to_project(project_id, data_id)</p> <p>Link data to this project.</p>"},{"location":"v2/docs/ProjectDataApi/#example_26","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.project_data import ProjectData\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Link data to this project.\n        api_response = api_instance.link_data_to_project(project_id, data_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;link_data_to_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_26","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_26","title":"Return type","text":"<p>ProjectData</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_26","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_26","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_26","title":"HTTP response details","text":"Status code Description Response headers 201 The data is successfully linked to the project. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#remove_secondary_data","title":"remove_secondary_data","text":"<p>remove_secondary_data(project_id, data_id, secondary_data_id)</p> <p>Remove secondary data from data.</p>"},{"location":"v2/docs/ProjectDataApi/#example_27","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n    secondary_data_id = \"secondaryDataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Remove secondary data from data.\n        api_instance.remove_secondary_data(project_id, data_id, secondary_data_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;remove_secondary_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_27","title":"Parameters","text":"Name Type Description Notes project_id str data_id str secondary_data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_27","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_27","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_27","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_27","title":"HTTP response details","text":"Status code Description Response headers 204 The secondary data is successfully removed. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#schedule_download_for_data","title":"schedule_download_for_data","text":"<p>DataTransfer schedule_download_for_data(project_id, data_id, schedule_download)</p> <p>Schedule a download.</p> <p>Endpoint for scheduling a download for the data specified by the ID to a connector. This download will only start when the connector is running. Data transfers for folder contents are created asynchronously, meaning that they will not be immediately visible in the project data transfers end point. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectDataApi/#example_28","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.data_transfer import DataTransfer\nfrom libica.openapi.v2.model.schedule_download import ScheduleDownload\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n    schedule_download = ScheduleDownload(\n        connector_id=\"connector_id_example\",\n        protocol=\"HTTPS\",\n        local_path=\"local_path_example\",\n        disable_hashing=True,\n    ) # ScheduleDownload | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Schedule a download.\n        api_response = api_instance.schedule_download_for_data(project_id, data_id, schedule_download)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;schedule_download_for_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_28","title":"Parameters","text":"Name Type Description Notes project_id str data_id str schedule_download ScheduleDownload"},{"location":"v2/docs/ProjectDataApi/#return-type_28","title":"Return type","text":"<p>DataTransfer</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_28","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_28","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_28","title":"HTTP response details","text":"Status code Description Response headers 0 The datatransfer which is scheduled. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#unarchive_data","title":"unarchive_data","text":"<p>unarchive_data(project_id, data_id)</p> <p>Schedule this data for unarchival.</p> <p>Endpoint for scheduling this data for unarchival. This will also unarchive all files and directories below that data. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectDataApi/#example_29","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Schedule this data for unarchival.\n        api_instance.unarchive_data(project_id, data_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;unarchive_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_29","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_29","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_29","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_29","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_29","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully scheduled for unarchival. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#unlink_data_from_project","title":"unlink_data_from_project","text":"<p>unlink_data_from_project(project_id, data_id)</p> <p>Unlink data from this project.</p> <p>Note that for folders, this only unlinks the folder itself, not the folder contents!  Use 'Project Data Unlinking Batch' for recursive unlinking.</p>"},{"location":"v2/docs/ProjectDataApi/#example_30","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Unlink data from this project.\n        api_instance.unlink_data_from_project(project_id, data_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;unlink_data_from_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_30","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v2/docs/ProjectDataApi/#return-type_30","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_30","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_30","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_30","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully unlinked from this project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataApi/#update_project_data","title":"update_project_data","text":"<p>ProjectData update_project_data(project_id, data_id, project_data)</p> <p>Update this project data.</p> <p>Fields which can be updated for files:  - data.willBeArchivedAt  - data.willBeDeletedAt  - data.format  - data.tags  Fields which can be updated for folders:  - data.tags  </p>"},{"location":"v2/docs/ProjectDataApi/#example_31","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_api\nfrom libica.openapi.v2.model.project_data import ProjectData\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_api.ProjectDataApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_id = \"dataId_example\" # str | \n    project_data = ProjectData(\n        data=Data(\n            id=\"id_example\",\n            urn=\"urn_example\",\n            details=DataDetails(\n                time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                creator_id=\"creator_id_example\",\n                tenant_id=\"tenant_id_example\",\n                tenant_name=\"tenant_name_example\",\n                owning_project_id=\"owning_project_id_example\",\n                owning_project_name=\"owning_project_name_example\",\n                name=\"name_example\",\n                path=\"path_example\",\n                file_size_in_bytes=1,\n                status=\"PARTIAL\",\n                tags=DataTag(\n                    technical_tags=[\n                        \"technical_tags_example\",\n                    ],\n                    user_tags=[\n                        \"user_tags_example\",\n                    ],\n                    connector_tags=[\n                        \"connector_tags_example\",\n                    ],\n                    run_in_tags=[\n                        \"run_in_tags_example\",\n                    ],\n                    run_out_tags=[\n                        \"run_out_tags_example\",\n                    ],\n                    reference_tags=[\n                        \"reference_tags_example\",\n                    ],\n                ),\n                format=DataFormat(\n                    id=\"id_example\",\n                    time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    owner_id=\"owner_id_example\",\n                    tenant_id=\"tenant_id_example\",\n                    tenant_name=\"tenant_name_example\",\n                    code=\"code_example\",\n                    description=\"description_example\",\n                    mime_type=\"mime_type_example\",\n                ),\n                data_type=\"FILE\",\n                object_e_tag=\"object_e_tag_example\",\n                stored_for_the_first_time_at=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                region=Region(\n                    id=\"id_example\",\n                    time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    owner_id=\"owner_id_example\",\n                    tenant_id=\"tenant_id_example\",\n                    tenant_name=\"tenant_name_example\",\n                    code=\"code_example\",\n                    country=Country(\n                        id=\"id_example\",\n                        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                        owner_id=\"owner_id_example\",\n                        tenant_id=\"tenant_id_example\",\n                        tenant_name=\"tenant_name_example\",\n                        code=\"code_example\",\n                        name=\"name_example\",\n                        region=\"region_example\",\n                    ),\n                    city_name=\"city_name_example\",\n                ),\n                application=ApplicationV4(\n                    id=\"id_example\",\n                    name=\"name_example\",\n                ),\n                will_be_archived_at=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                will_be_deleted_at=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                sequencing_run=SequencingRun(\n                    id=\"id_example\",\n                    instrument_run_id=\"instrument_run_id_example\",\n                    name=\"name_example\",\n                ),\n            ),\n            folder_details=FolderDetails(\n                non_indexed=True,\n            ),\n        ),\n        project_id=\"project_id_example\",\n    ) # ProjectData | The updated project data.\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update this project data.\n        api_response = api_instance.update_project_data(project_id, data_id, project_data)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataApi-&gt;update_project_data: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataApi/#parameters_31","title":"Parameters","text":"Name Type Description Notes project_id str data_id str project_data ProjectData The updated project data."},{"location":"v2/docs/ProjectDataApi/#return-type_31","title":"Return type","text":"<p>ProjectData</p>"},{"location":"v2/docs/ProjectDataApi/#authorization_31","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataApi/#http-request-headers_31","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataApi/#http-response-details_31","title":"HTTP response details","text":"Status code Description Response headers 200 The project data is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataCopyBatch/","title":"ProjectDataCopyBatch","text":""},{"location":"v2/docs/ProjectDataCopyBatch/#properties","title":"Properties","text":"Name Type Description Notes id str job Job copy_user_tags bool copy_technical_tags bool copy_instrument_info bool action_on_exist str destination_folder_id str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataCopyBatchApi/","title":"libica.openapi.v2.ProjectDataCopyBatchApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_project_data_copy_batch POST /api/projects/{projectId}/dataCopyBatch Create a project data copy batch. get_project_data_copy_batch GET /api/projects/{projectId}/dataCopyBatch/{batchId} Retrieve a project data copy batch. get_project_data_copy_batch_item GET /api/projects/{projectId}/dataCopyBatch/{batchId}/items/{itemId} Retrieve a project data copy batch item. get_project_data_copy_batch_items GET /api/projects/{projectId}/dataCopyBatch/{batchId}/items Retrieve a list of project data copy batch items."},{"location":"v2/docs/ProjectDataCopyBatchApi/#create_project_data_copy_batch","title":"create_project_data_copy_batch","text":"<p>ProjectDataCopyBatch create_project_data_copy_batch(project_id, create_project_data_copy_batch)</p> <p>Create a project data copy batch.</p>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_copy_batch_api\nfrom libica.openapi.v2.model.project_data_copy_batch import ProjectDataCopyBatch\nfrom libica.openapi.v2.model.create_project_data_copy_batch import CreateProjectDataCopyBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_copy_batch_api.ProjectDataCopyBatchApi(api_client)\n    project_id = \"projectId_example\" # str | The ID of the project to which the data will be copied\n    create_project_data_copy_batch = CreateProjectDataCopyBatch(\n        items=[\n            CreateProjectDataCopyBatchItem(\n                data_id=\"data_id_example\",\n            ),\n        ],\n        destination_folder_id=\"destination_folder_id_example\",\n        copy_user_tags=True,\n        copy_technical_tags=True,\n        copy_instrument_info=True,\n        action_on_exist=\"RENAM\",\n    ) # CreateProjectDataCopyBatch | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a project data copy batch.\n        api_response = api_instance.create_project_data_copy_batch(project_id, create_project_data_copy_batch)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataCopyBatchApi-&gt;create_project_data_copy_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project to which the data will be copied create_project_data_copy_batch CreateProjectDataCopyBatch"},{"location":"v2/docs/ProjectDataCopyBatchApi/#return-type","title":"Return type","text":"<p>ProjectDataCopyBatch</p>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The project data copy batch is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#get_project_data_copy_batch","title":"get_project_data_copy_batch","text":"<p>ProjectDataCopyBatch get_project_data_copy_batch(project_id, batch_id)</p> <p>Retrieve a project data copy batch.</p>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_copy_batch_api\nfrom libica.openapi.v2.model.project_data_copy_batch import ProjectDataCopyBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_copy_batch_api.ProjectDataCopyBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project data copy batch.\n        api_response = api_instance.get_project_data_copy_batch(project_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataCopyBatchApi-&gt;get_project_data_copy_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str"},{"location":"v2/docs/ProjectDataCopyBatchApi/#return-type_1","title":"Return type","text":"<p>ProjectDataCopyBatch</p>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The project data copy batch is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#get_project_data_copy_batch_item","title":"get_project_data_copy_batch_item","text":"<p>ProjectDataCopyBatchItem get_project_data_copy_batch_item(project_id, batch_id, item_id)</p> <p>Retrieve a project data copy batch item.</p>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_copy_batch_api\nfrom libica.openapi.v2.model.project_data_copy_batch_item import ProjectDataCopyBatchItem\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_copy_batch_api.ProjectDataCopyBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n    item_id = \"itemId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project data copy batch item.\n        api_response = api_instance.get_project_data_copy_batch_item(project_id, batch_id, item_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataCopyBatchApi-&gt;get_project_data_copy_batch_item: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str item_id str"},{"location":"v2/docs/ProjectDataCopyBatchApi/#return-type_2","title":"Return type","text":"<p>ProjectDataCopyBatchItem</p>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The project data copy batch item is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#get_project_data_copy_batch_items","title":"get_project_data_copy_batch_items","text":"<p>ProjectDataCopyBatchItemPagedList get_project_data_copy_batch_items(project_id, batch_id)</p> <p>Retrieve a list of project data copy batch items.</p>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_copy_batch_api\nfrom libica.openapi.v2.model.project_data_copy_batch_item_paged_list import ProjectDataCopyBatchItemPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_copy_batch_api.ProjectDataCopyBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n    status = [\n        \"QUEUED\",\n    ] # [str] | The statuses to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of project data copy batch items.\n        api_response = api_instance.get_project_data_copy_batch_items(project_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataCopyBatchApi-&gt;get_project_data_copy_batch_items: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of project data copy batch items.\n        api_response = api_instance.get_project_data_copy_batch_items(project_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataCopyBatchApi-&gt;get_project_data_copy_batch_items: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str status [str] The statuses to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional]"},{"location":"v2/docs/ProjectDataCopyBatchApi/#return-type_3","title":"Return type","text":"<p>ProjectDataCopyBatchItemPagedList</p>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataCopyBatchApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project data copy batch items is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataCopyBatchItem/","title":"ProjectDataCopyBatchItem","text":""},{"location":"v2/docs/ProjectDataCopyBatchItem/#properties","title":"Properties","text":"Name Type Description Notes id str request ProjectDataCopyBatchItemRequest processing ProjectDataCopyBatchItemProcessing created_project_data ProjectData [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataCopyBatchItemPagedList/","title":"ProjectDataCopyBatchItemPagedList","text":""},{"location":"v2/docs/ProjectDataCopyBatchItemPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [ProjectDataCopyBatchItem] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataCopyBatchItemProcessing/","title":"ProjectDataCopyBatchItemProcessing","text":""},{"location":"v2/docs/ProjectDataCopyBatchItemProcessing/#properties","title":"Properties","text":"Name Type Description Notes status str additional_status_information str, none_type Additional information regarding the status of this batch item. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataCopyBatchItemRequest/","title":"ProjectDataCopyBatchItemRequest","text":""},{"location":"v2/docs/ProjectDataCopyBatchItemRequest/#properties","title":"Properties","text":"Name Type Description Notes data_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataLinkingBatch/","title":"ProjectDataLinkingBatch","text":""},{"location":"v2/docs/ProjectDataLinkingBatch/#properties","title":"Properties","text":"Name Type Description Notes id str job Job any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/","title":"libica.openapi.v2.ProjectDataLinkingBatchApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_project_data_linking_batch POST /api/projects/{projectId}/dataLinkingBatch Create a project data linking batch. get_project_data_linking_batch GET /api/projects/{projectId}/dataLinkingBatch/{batchId} Retrieve a project data linking batch. get_project_data_linking_batch_item GET /api/projects/{projectId}/dataLinkingBatch/{batchId}/items/{itemId} Retrieve a project data linking batch item. get_project_data_linking_batch_items GET /api/projects/{projectId}/dataLinkingBatch/{batchId}/items Retrieve a list of project data linking batch items."},{"location":"v2/docs/ProjectDataLinkingBatchApi/#create_project_data_linking_batch","title":"create_project_data_linking_batch","text":"<p>ProjectDataLinkingBatch create_project_data_linking_batch(project_id, create_project_data_linking_batch)</p> <p>Create a project data linking batch.</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#changelog-for-this-endpoint-multiple-versions-exist-note-that-the-values-for-request-headers-content-type-and-accept-must-contain-a-matching-version-v3-initial-version-deprecated-its-recommended-to-limit-the-amount-of-links-per-batch-to-25000-recommended-to-use-v4-for-performance-efficiency-v4-more-efficient-handles-folder-contents-via-the-folder-item-instead-of-creating-separate-items-for-all-contents","title":"Changelog For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.  ## [V3] Initial version deprecated.  It's recommended to limit the amount of links per batch to 25.000. Recommended to use V4 for performance efficiency. ## [V4] More efficient, handles folder contents via the folder item, instead of creating separate items for all contents.","text":""},{"location":"v2/docs/ProjectDataLinkingBatchApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_linking_batch_api\nfrom libica.openapi.v2.model.create_project_data_linking_batch import CreateProjectDataLinkingBatch\nfrom libica.openapi.v2.model.project_data_linking_batch import ProjectDataLinkingBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_linking_batch_api.ProjectDataLinkingBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_project_data_linking_batch = CreateProjectDataLinkingBatch(\n        items=[\n            CreateProjectDataLinkingBatchItem(\n                data_id=\"data_id_example\",\n            ),\n        ],\n    ) # CreateProjectDataLinkingBatch | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a project data linking batch.\n        api_response = api_instance.create_project_data_linking_batch(project_id, create_project_data_linking_batch)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataLinkingBatchApi-&gt;create_project_data_linking_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str create_project_data_linking_batch CreateProjectDataLinkingBatch"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#return-type","title":"Return type","text":"<p>ProjectDataLinkingBatch</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json, application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The project data linking batch is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#get_project_data_linking_batch","title":"get_project_data_linking_batch","text":"<p>ProjectDataLinkingBatch get_project_data_linking_batch(project_id, batch_id)</p> <p>Retrieve a project data linking batch.</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_linking_batch_api\nfrom libica.openapi.v2.model.project_data_linking_batch import ProjectDataLinkingBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_linking_batch_api.ProjectDataLinkingBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project data linking batch.\n        api_response = api_instance.get_project_data_linking_batch(project_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataLinkingBatchApi-&gt;get_project_data_linking_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#return-type_1","title":"Return type","text":"<p>ProjectDataLinkingBatch</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The project data linking batch is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#get_project_data_linking_batch_item","title":"get_project_data_linking_batch_item","text":"<p>ProjectDataLinkingBatchItemV4 get_project_data_linking_batch_item(project_id, batch_id, item_id)</p> <p>Retrieve a project data linking batch item.</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#changelog-for-this-endpoint-multiple-versions-exist-note-that-the-values-for-request-headers-content-type-and-accept-must-contain-a-matching-version-v3-initial-version-deprecated-returns-partially_linked-item-processing-status-as-failed-v4-supports-partially_linked-item-processing-status","title":"Changelog For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.  ## [V3] Initial version, deprecated, returns PARTIALLY_LINKED item processing status as FAILED. ## [V4] Supports PARTIALLY_LINKED item processing status.","text":""},{"location":"v2/docs/ProjectDataLinkingBatchApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_linking_batch_api\nfrom libica.openapi.v2.model.project_data_linking_batch_item_v4 import ProjectDataLinkingBatchItemV4\nfrom libica.openapi.v2.model.project_data_linking_batch_item import ProjectDataLinkingBatchItem\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_linking_batch_api.ProjectDataLinkingBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n    item_id = \"itemId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project data linking batch item.\n        api_response = api_instance.get_project_data_linking_batch_item(project_id, batch_id, item_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataLinkingBatchApi-&gt;get_project_data_linking_batch_item: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str item_id str"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#return-type_2","title":"Return type","text":"<p>ProjectDataLinkingBatchItemV4</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The project data linking batch item is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#get_project_data_linking_batch_items","title":"get_project_data_linking_batch_items","text":"<p>ProjectDataLinkingBatchItemPagedListV4 get_project_data_linking_batch_items(project_id, batch_id)</p> <p>Retrieve a list of project data linking batch items.</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#changelog-for-this-endpoint-multiple-versions-exist-note-that-the-values-for-request-headers-content-type-and-accept-must-contain-a-matching-version-v3-initial-version-deprecated-returns-partially_linked-item-processing-status-as-failed-v4-supports-partially_linked-item-processing-status_1","title":"Changelog For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.  ## [V3] Initial version, deprecated, returns PARTIALLY_LINKED item processing status as FAILED. ## [V4] Supports PARTIALLY_LINKED item processing status.","text":""},{"location":"v2/docs/ProjectDataLinkingBatchApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_linking_batch_api\nfrom libica.openapi.v2.model.project_data_linking_batch_item_paged_list_v4 import ProjectDataLinkingBatchItemPagedListV4\nfrom libica.openapi.v2.model.project_data_linking_batch_item_paged_list import ProjectDataLinkingBatchItemPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_linking_batch_api.ProjectDataLinkingBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n    status = [\n        \"INITIALISED\",\n    ] # [str] | The statuses to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of project data linking batch items.\n        api_response = api_instance.get_project_data_linking_batch_items(project_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataLinkingBatchApi-&gt;get_project_data_linking_batch_items: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of project data linking batch items.\n        api_response = api_instance.get_project_data_linking_batch_items(project_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataLinkingBatchApi-&gt;get_project_data_linking_batch_items: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str status [str] The statuses to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional]"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#return-type_3","title":"Return type","text":"<p>ProjectDataLinkingBatchItemPagedListV4</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataLinkingBatchApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project data linking batch items is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataLinkingBatchItem/","title":"ProjectDataLinkingBatchItem","text":""},{"location":"v2/docs/ProjectDataLinkingBatchItem/#properties","title":"Properties","text":"Name Type Description Notes id str request ProjectDataLinkingBatchItemRequest processing ProjectDataLinkingBatchItemProcessing created_project_data ProjectData [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataLinkingBatchItemPagedList/","title":"ProjectDataLinkingBatchItemPagedList","text":""},{"location":"v2/docs/ProjectDataLinkingBatchItemPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [ProjectDataLinkingBatchItem] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataLinkingBatchItemPagedListV4/","title":"ProjectDataLinkingBatchItemPagedListV4","text":""},{"location":"v2/docs/ProjectDataLinkingBatchItemPagedListV4/#properties","title":"Properties","text":"Name Type Description Notes items [ProjectDataLinkingBatchItemV4] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataLinkingBatchItemProcessing/","title":"ProjectDataLinkingBatchItemProcessing","text":""},{"location":"v2/docs/ProjectDataLinkingBatchItemProcessing/#properties","title":"Properties","text":"Name Type Description Notes status str additional_status_information str, none_type Additional information regarding the status of this batch item. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataLinkingBatchItemProcessingV4/","title":"ProjectDataLinkingBatchItemProcessingV4","text":""},{"location":"v2/docs/ProjectDataLinkingBatchItemProcessingV4/#properties","title":"Properties","text":"Name Type Description Notes status str Possible values are: INITIALISED, WAITING_RESOURCES, RUNNING, LINKED, ALREADY_LINKED, FAILED, PARTIALLY_LINKED. More types could be added in a future release. additional_status_information str, none_type Additional information regarding the status of this batch item. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataLinkingBatchItemRequest/","title":"ProjectDataLinkingBatchItemRequest","text":""},{"location":"v2/docs/ProjectDataLinkingBatchItemRequest/#properties","title":"Properties","text":"Name Type Description Notes data_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataLinkingBatchItemV4/","title":"ProjectDataLinkingBatchItemV4","text":""},{"location":"v2/docs/ProjectDataLinkingBatchItemV4/#properties","title":"Properties","text":"Name Type Description Notes id str request ProjectDataLinkingBatchItemRequest processing ProjectDataLinkingBatchItemProcessingV4 created_project_data ProjectData [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataMoveBatch/","title":"ProjectDataMoveBatch","text":""},{"location":"v2/docs/ProjectDataMoveBatch/#properties","title":"Properties","text":"Name Type Description Notes id str job Job destination_folder_id str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataMoveBatchApi/","title":"libica.openapi.v2.ProjectDataMoveBatchApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_project_data_move_batch POST /api/projects/{projectId}/dataMoveBatch Create a project data move batch. get_project_data_move_batch GET /api/projects/{projectId}/dataMoveBatch/{batchId} Retrieve a project data move batch. get_project_data_move_batch_item GET /api/projects/{projectId}/dataMoveBatch/{batchId}/items/{itemId} Retrieve a project data move batch item. get_project_data_move_batch_items POST /api/projects/{projectId}/dataMoveBatch/{batchId}/items:search Retrieve a list of project data move batch items."},{"location":"v2/docs/ProjectDataMoveBatchApi/#create_project_data_move_batch","title":"create_project_data_move_batch","text":"<p>ProjectDataMoveBatch create_project_data_move_batch(project_id, create_project_data_move_batch)</p> <p>Create a project data move batch.</p>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_move_batch_api\nfrom libica.openapi.v2.model.create_project_data_move_batch import CreateProjectDataMoveBatch\nfrom libica.openapi.v2.model.project_data_move_batch import ProjectDataMoveBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_move_batch_api.ProjectDataMoveBatchApi(api_client)\n    project_id = \"projectId_example\" # str | The ID of the project to which the data will be moved\n    create_project_data_move_batch = CreateProjectDataMoveBatch(\n        items=[\n            CreateProjectDataMoveBatchItem(\n                data_id=\"data_id_example\",\n            ),\n        ],\n        destination_folder_id=\"destination_folder_id_example\",\n    ) # CreateProjectDataMoveBatch | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a project data move batch.\n        api_response = api_instance.create_project_data_move_batch(project_id, create_project_data_move_batch)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataMoveBatchApi-&gt;create_project_data_move_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project to which the data will be moved create_project_data_move_batch CreateProjectDataMoveBatch"},{"location":"v2/docs/ProjectDataMoveBatchApi/#return-type","title":"Return type","text":"<p>ProjectDataMoveBatch</p>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The project data move batch is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#get_project_data_move_batch","title":"get_project_data_move_batch","text":"<p>ProjectDataMoveBatch get_project_data_move_batch(project_id, batch_id)</p> <p>Retrieve a project data move batch.</p>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_move_batch_api\nfrom libica.openapi.v2.model.project_data_move_batch import ProjectDataMoveBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_move_batch_api.ProjectDataMoveBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project data move batch.\n        api_response = api_instance.get_project_data_move_batch(project_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataMoveBatchApi-&gt;get_project_data_move_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str"},{"location":"v2/docs/ProjectDataMoveBatchApi/#return-type_1","title":"Return type","text":"<p>ProjectDataMoveBatch</p>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The project data move batch is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#get_project_data_move_batch_item","title":"get_project_data_move_batch_item","text":"<p>ProjectDataMoveBatchItem get_project_data_move_batch_item(project_id, batch_id, item_id)</p> <p>Retrieve a project data move batch item.</p>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_move_batch_api\nfrom libica.openapi.v2.model.project_data_move_batch_item import ProjectDataMoveBatchItem\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_move_batch_api.ProjectDataMoveBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n    item_id = \"itemId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project data move batch item.\n        api_response = api_instance.get_project_data_move_batch_item(project_id, batch_id, item_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataMoveBatchApi-&gt;get_project_data_move_batch_item: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str item_id str"},{"location":"v2/docs/ProjectDataMoveBatchApi/#return-type_2","title":"Return type","text":"<p>ProjectDataMoveBatchItem</p>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The project data move batch item is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#get_project_data_move_batch_items","title":"get_project_data_move_batch_items","text":"<p>ProjectDataMoveBatchItemPagedList get_project_data_move_batch_items(project_id, batch_id)</p> <p>Retrieve a list of project data move batch items.</p>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_move_batch_api\nfrom libica.openapi.v2.model.project_data_move_batch_item_query_parameters import ProjectDataMoveBatchItemQueryParameters\nfrom libica.openapi.v2.model.project_data_move_batch_item_paged_list import ProjectDataMoveBatchItemPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_move_batch_api.ProjectDataMoveBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    project_data_move_batch_item_query_parameters = ProjectDataMoveBatchItemQueryParameters(\n        status=[\n            \"QUEUED\",\n        ],\n    ) # ProjectDataMoveBatchItemQueryParameters |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of project data move batch items.\n        api_response = api_instance.get_project_data_move_batch_items(project_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataMoveBatchApi-&gt;get_project_data_move_batch_items: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of project data move batch items.\n        api_response = api_instance.get_project_data_move_batch_items(project_id, batch_id, page_offset=page_offset, page_token=page_token, page_size=page_size, project_data_move_batch_item_query_parameters=project_data_move_batch_item_query_parameters)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataMoveBatchApi-&gt;get_project_data_move_batch_items: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] project_data_move_batch_item_query_parameters ProjectDataMoveBatchItemQueryParameters [optional]"},{"location":"v2/docs/ProjectDataMoveBatchApi/#return-type_3","title":"Return type","text":"<p>ProjectDataMoveBatchItemPagedList</p>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataMoveBatchApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project data move batch items is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataMoveBatchItem/","title":"ProjectDataMoveBatchItem","text":""},{"location":"v2/docs/ProjectDataMoveBatchItem/#properties","title":"Properties","text":"Name Type Description Notes id str request ProjectDataMoveBatchItemRequest processing ProjectDataMoveBatchItemProcessing created_project_data ProjectData [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataMoveBatchItemPagedList/","title":"ProjectDataMoveBatchItemPagedList","text":""},{"location":"v2/docs/ProjectDataMoveBatchItemPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [ProjectDataMoveBatchItem] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataMoveBatchItemProcessing/","title":"ProjectDataMoveBatchItemProcessing","text":""},{"location":"v2/docs/ProjectDataMoveBatchItemProcessing/#properties","title":"Properties","text":"Name Type Description Notes status str The status of the batch item. Possible values are: QUEUED, MOVING, MOVED, PARTIALLY_MOVED, FAILED. More statuses could be added in a future release. additional_status_information str, none_type Additional information regarding the status of this batch item. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataMoveBatchItemQueryParameters/","title":"ProjectDataMoveBatchItemQueryParameters","text":""},{"location":"v2/docs/ProjectDataMoveBatchItemQueryParameters/#properties","title":"Properties","text":"Name Type Description Notes status [str, none_type] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataMoveBatchItemRequest/","title":"ProjectDataMoveBatchItemRequest","text":""},{"location":"v2/docs/ProjectDataMoveBatchItemRequest/#properties","title":"Properties","text":"Name Type Description Notes data_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataPagedList/","title":"ProjectDataPagedList","text":""},{"location":"v2/docs/ProjectDataPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [ProjectData] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataTransferApi/","title":"libica.openapi.v2.ProjectDataTransferApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description abort_data_transfer POST /api/projects/{projectId}/dataTransfers/{dataTransferId}:abort Abort a data transfer. get_data_transfer GET /api/projects/{projectId}/dataTransfers/{dataTransferId} Retrieve a data transfer. get_data_transfers GET /api/projects/{projectId}/dataTransfers Retrieve a list of data transfers."},{"location":"v2/docs/ProjectDataTransferApi/#abort_data_transfer","title":"abort_data_transfer","text":"<p>abort_data_transfer(project_id, data_transfer_id)</p> <p>Abort a data transfer.</p> <p>Endpoint for aborting a data transfer.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectDataTransferApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_transfer_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_transfer_api.ProjectDataTransferApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_transfer_id = \"dataTransferId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Abort a data transfer.\n        api_instance.abort_data_transfer(project_id, data_transfer_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataTransferApi-&gt;abort_data_transfer: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataTransferApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str data_transfer_id str"},{"location":"v2/docs/ProjectDataTransferApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectDataTransferApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataTransferApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectDataTransferApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The data transfer is successfully aborted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataTransferApi/#get_data_transfer","title":"get_data_transfer","text":"<p>DataTransfer get_data_transfer(project_id, data_transfer_id)</p> <p>Retrieve a data transfer.</p>"},{"location":"v2/docs/ProjectDataTransferApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_transfer_api\nfrom libica.openapi.v2.model.data_transfer import DataTransfer\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_transfer_api.ProjectDataTransferApi(api_client)\n    project_id = \"projectId_example\" # str | \n    data_transfer_id = \"dataTransferId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a data transfer.\n        api_response = api_instance.get_data_transfer(project_id, data_transfer_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataTransferApi-&gt;get_data_transfer: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataTransferApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str data_transfer_id str"},{"location":"v2/docs/ProjectDataTransferApi/#return-type_1","title":"Return type","text":"<p>DataTransfer</p>"},{"location":"v2/docs/ProjectDataTransferApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataTransferApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataTransferApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The data transfer is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataTransferApi/#get_data_transfers","title":"get_data_transfers","text":"<p>DataTransferPagedList get_data_transfers(project_id)</p> <p>Retrieve a list of data transfers.</p> <p>Retrieve a list of data transfers for the current app (session), excluding web browser transfers.</p>"},{"location":"v2/docs/ProjectDataTransferApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_transfer_api\nfrom libica.openapi.v2.model.data_transfer_paged_list import DataTransferPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_transfer_api.ProjectDataTransferApi(api_client)\n    project_id = \"projectId_example\" # str | \n    connector = \"connector_example\" # str | The ID of the connector to filter on. (optional)\n    direction = \"direction_example\" # str | The direction to filter on. (optional)\n    status = \"status_example\" # str | The status to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - direction - connector - protocol - dataTransferred - status - statusMessage - duration  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of data transfers.\n        api_response = api_instance.get_data_transfers(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataTransferApi-&gt;get_data_transfers: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of data transfers.\n        api_response = api_instance.get_data_transfers(project_id, connector=connector, direction=direction, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataTransferApi-&gt;get_data_transfers: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataTransferApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str connector str The ID of the connector to filter on. [optional] direction str The direction to filter on. [optional] status str The status to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - direction - connector - protocol - dataTransferred - status - statusMessage - duration [optional]"},{"location":"v2/docs/ProjectDataTransferApi/#return-type_2","title":"Return type","text":"<p>DataTransferPagedList</p>"},{"location":"v2/docs/ProjectDataTransferApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataTransferApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataTransferApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The list of data transfers is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataUnlinkingBatch/","title":"ProjectDataUnlinkingBatch","text":""},{"location":"v2/docs/ProjectDataUnlinkingBatch/#properties","title":"Properties","text":"Name Type Description Notes id str job Job any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/","title":"libica.openapi.v2.ProjectDataUnlinkingBatchApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_project_data_unlinking_batch POST /api/projects/{projectId}/dataUnlinkingBatch Create a project data unlinking batch. get_project_data_unlinking_batch GET /api/projects/{projectId}/dataUnlinkingBatch/{batchId} Retrieve a project data unlinking batch. get_project_data_unlinking_batch_item GET /api/projects/{projectId}/dataUnlinkingBatch/{batchId}/items/{itemId} Retrieve a project data unlinking batch item. get_project_data_unlinking_batch_items GET /api/projects/{projectId}/dataUnlinkingBatch/{batchId}/items Retrieve a list of project data unlinking batch items."},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#create_project_data_unlinking_batch","title":"create_project_data_unlinking_batch","text":"<p>ProjectDataUnlinkingBatch create_project_data_unlinking_batch(project_id, create_project_data_unlinking_batch)</p> <p>Create a project data unlinking batch.</p>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_unlinking_batch_api\nfrom libica.openapi.v2.model.create_project_data_unlinking_batch import CreateProjectDataUnlinkingBatch\nfrom libica.openapi.v2.model.project_data_unlinking_batch import ProjectDataUnlinkingBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_unlinking_batch_api.ProjectDataUnlinkingBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_project_data_unlinking_batch = CreateProjectDataUnlinkingBatch(\n        items=[\n            CreateProjectDataUnlinkingBatchItem(\n                data_id=\"data_id_example\",\n            ),\n        ],\n    ) # CreateProjectDataUnlinkingBatch | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a project data unlinking batch.\n        api_response = api_instance.create_project_data_unlinking_batch(project_id, create_project_data_unlinking_batch)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataUnlinkingBatchApi-&gt;create_project_data_unlinking_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str create_project_data_unlinking_batch CreateProjectDataUnlinkingBatch"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#return-type","title":"Return type","text":"<p>ProjectDataUnlinkingBatch</p>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The project data unlinking batch is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#get_project_data_unlinking_batch","title":"get_project_data_unlinking_batch","text":"<p>ProjectDataUnlinkingBatch get_project_data_unlinking_batch(project_id, batch_id)</p> <p>Retrieve a project data unlinking batch.</p>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_unlinking_batch_api\nfrom libica.openapi.v2.model.project_data_unlinking_batch import ProjectDataUnlinkingBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_unlinking_batch_api.ProjectDataUnlinkingBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project data unlinking batch.\n        api_response = api_instance.get_project_data_unlinking_batch(project_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataUnlinkingBatchApi-&gt;get_project_data_unlinking_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#return-type_1","title":"Return type","text":"<p>ProjectDataUnlinkingBatch</p>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The project data unlinking batch is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#get_project_data_unlinking_batch_item","title":"get_project_data_unlinking_batch_item","text":"<p>ProjectDataUnlinkingBatchItem get_project_data_unlinking_batch_item(project_id, batch_id, item_id)</p> <p>Retrieve a project data unlinking batch item.</p>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_unlinking_batch_api\nfrom libica.openapi.v2.model.project_data_unlinking_batch_item import ProjectDataUnlinkingBatchItem\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_unlinking_batch_api.ProjectDataUnlinkingBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n    item_id = \"itemId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project data unlinking batch item.\n        api_response = api_instance.get_project_data_unlinking_batch_item(project_id, batch_id, item_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataUnlinkingBatchApi-&gt;get_project_data_unlinking_batch_item: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str item_id str"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#return-type_2","title":"Return type","text":"<p>ProjectDataUnlinkingBatchItem</p>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The project data unlinking batch item is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#get_project_data_unlinking_batch_items","title":"get_project_data_unlinking_batch_items","text":"<p>ProjectDataUnlinkingBatchItemPagedList get_project_data_unlinking_batch_items(project_id, batch_id)</p> <p>Retrieve a list of project data unlinking batch items.</p>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_unlinking_batch_api\nfrom libica.openapi.v2.model.project_data_unlinking_batch_item_paged_list import ProjectDataUnlinkingBatchItemPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_unlinking_batch_api.ProjectDataUnlinkingBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n    status = [\n        \"INITIALISED\",\n    ] # [str] | The statuses to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of project data unlinking batch items.\n        api_response = api_instance.get_project_data_unlinking_batch_items(project_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataUnlinkingBatchApi-&gt;get_project_data_unlinking_batch_items: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of project data unlinking batch items.\n        api_response = api_instance.get_project_data_unlinking_batch_items(project_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataUnlinkingBatchApi-&gt;get_project_data_unlinking_batch_items: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str status [str] The statuses to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional]"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#return-type_3","title":"Return type","text":"<p>ProjectDataUnlinkingBatchItemPagedList</p>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataUnlinkingBatchApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project data unlinking batch items is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataUnlinkingBatchItem/","title":"ProjectDataUnlinkingBatchItem","text":""},{"location":"v2/docs/ProjectDataUnlinkingBatchItem/#properties","title":"Properties","text":"Name Type Description Notes id str request ProjectDataUnlinkingBatchItemRequest processing ProjectDataUnlinkingBatchItemProcessing any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataUnlinkingBatchItemPagedList/","title":"ProjectDataUnlinkingBatchItemPagedList","text":""},{"location":"v2/docs/ProjectDataUnlinkingBatchItemPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [ProjectDataUnlinkingBatchItem] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataUnlinkingBatchItemProcessing/","title":"ProjectDataUnlinkingBatchItemProcessing","text":""},{"location":"v2/docs/ProjectDataUnlinkingBatchItemProcessing/#properties","title":"Properties","text":"Name Type Description Notes status str Possible values are: INITIALISED, WAITING_RESOURCES, RUNNING, UNLINKED, ALREADY_UNLINKED, FAILED, PARTIALLY_UNLINKED. More types could be added in a future release. additional_status_information str, none_type Additional information regarding the status of this batch item. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataUnlinkingBatchItemRequest/","title":"ProjectDataUnlinkingBatchItemRequest","text":""},{"location":"v2/docs/ProjectDataUnlinkingBatchItemRequest/#properties","title":"Properties","text":"Name Type Description Notes data_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataUpdateBatch/","title":"ProjectDataUpdateBatch","text":""},{"location":"v2/docs/ProjectDataUpdateBatch/#properties","title":"Properties","text":"Name Type Description Notes id str job Job any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/","title":"libica.openapi.v2.ProjectDataUpdateBatchApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_project_data_update_batch POST /api/projects/{projectId}/dataUpdateBatch Create a project data update batch.  Folder contents will be updated recursively.  Time archive/delete cannot be defined for folders. get_project_data_update_batch GET /api/projects/{projectId}/dataUpdateBatch/{batchId} Retrieve a project data update batch. get_project_data_update_batch_item GET /api/projects/{projectId}/dataUpdateBatch/{batchId}/items/{itemId} Retrieve a project data update batch item. get_project_data_update_batch_items GET /api/projects/{projectId}/dataUpdateBatch/{batchId}/items Retrieve a list of project data update batch items."},{"location":"v2/docs/ProjectDataUpdateBatchApi/#create_project_data_update_batch","title":"create_project_data_update_batch","text":"<p>ProjectDataUpdateBatch create_project_data_update_batch(project_id, create_project_data_update_batch)</p> <p>Create a project data update batch.  Folder contents will be updated recursively.  Time archive/delete cannot be defined for folders.</p> <p>Avoid specifying more than 5000 total dataIds per call if possible (specifying more than 100000 is not allowed).</p>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_update_batch_api\nfrom libica.openapi.v2.model.create_project_data_update_batch import CreateProjectDataUpdateBatch\nfrom libica.openapi.v2.model.project_data_update_batch import ProjectDataUpdateBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_update_batch_api.ProjectDataUpdateBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_project_data_update_batch = CreateProjectDataUpdateBatch(\n        data_update_groups=[\n            DataUpdateGroup(\n                data_ids=[\n                    \"data_ids_example\",\n                ],\n                user_tags=TagUpdate(\n                    add_tags=[\n                        \"add_tags_example\",\n                    ],\n                    remove_tags=[\n                        \"remove_tags_example\",\n                    ],\n                ),\n                technical_tags=TagUpdate(\n                    add_tags=[\n                        \"add_tags_example\",\n                    ],\n                    remove_tags=[\n                        \"remove_tags_example\",\n                    ],\n                ),\n                will_be_archived_at=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                will_be_deleted_at=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            ),\n        ],\n    ) # CreateProjectDataUpdateBatch | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a project data update batch.  Folder contents will be updated recursively.  Time archive/delete cannot be defined for folders.\n        api_response = api_instance.create_project_data_update_batch(project_id, create_project_data_update_batch)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataUpdateBatchApi-&gt;create_project_data_update_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str create_project_data_update_batch CreateProjectDataUpdateBatch"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#return-type","title":"Return type","text":"<p>ProjectDataUpdateBatch</p>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The project data update batch is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#get_project_data_update_batch","title":"get_project_data_update_batch","text":"<p>ProjectDataUpdateBatch get_project_data_update_batch(project_id, batch_id)</p> <p>Retrieve a project data update batch.</p>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_update_batch_api\nfrom libica.openapi.v2.model.project_data_update_batch import ProjectDataUpdateBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_update_batch_api.ProjectDataUpdateBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project data update batch.\n        api_response = api_instance.get_project_data_update_batch(project_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataUpdateBatchApi-&gt;get_project_data_update_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#return-type_1","title":"Return type","text":"<p>ProjectDataUpdateBatch</p>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The project data update batch is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#get_project_data_update_batch_item","title":"get_project_data_update_batch_item","text":"<p>ProjectDataUpdateBatchItem get_project_data_update_batch_item(project_id, batch_id, item_id)</p> <p>Retrieve a project data update batch item.</p>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_update_batch_api\nfrom libica.openapi.v2.model.project_data_update_batch_item import ProjectDataUpdateBatchItem\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_update_batch_api.ProjectDataUpdateBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n    item_id = \"itemId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project data update batch item.\n        api_response = api_instance.get_project_data_update_batch_item(project_id, batch_id, item_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataUpdateBatchApi-&gt;get_project_data_update_batch_item: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str item_id str"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#return-type_2","title":"Return type","text":"<p>ProjectDataUpdateBatchItem</p>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The project data update batch item is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#get_project_data_update_batch_items","title":"get_project_data_update_batch_items","text":"<p>ProjectDataUpdateBatchItemPagedList get_project_data_update_batch_items(project_id, batch_id)</p> <p>Retrieve a list of project data update batch items.</p>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_data_update_batch_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom libica.openapi.v2.model.project_data_update_batch_item_paged_list import ProjectDataUpdateBatchItemPagedList\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_data_update_batch_api.ProjectDataUpdateBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | \n    status = [\n        \"INITIALISED\",\n    ] # [str] | The statuses to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of project data update batch items.\n        api_response = api_instance.get_project_data_update_batch_items(project_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataUpdateBatchApi-&gt;get_project_data_update_batch_items: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of project data update batch items.\n        api_response = api_instance.get_project_data_update_batch_items(project_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectDataUpdateBatchApi-&gt;get_project_data_update_batch_items: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str status [str] The statuses to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional]"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#return-type_3","title":"Return type","text":"<p>ProjectDataUpdateBatchItemPagedList</p>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectDataUpdateBatchApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project data update batch items is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataUpdateBatchItem/","title":"ProjectDataUpdateBatchItem","text":""},{"location":"v2/docs/ProjectDataUpdateBatchItem/#properties","title":"Properties","text":"Name Type Description Notes id str request ProjectDataUpdateBatchItemRequest processing ProjectDataUpdateBatchItemProcessing any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataUpdateBatchItemPagedList/","title":"ProjectDataUpdateBatchItemPagedList","text":""},{"location":"v2/docs/ProjectDataUpdateBatchItemPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [ProjectDataUpdateBatchItem] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataUpdateBatchItemProcessing/","title":"ProjectDataUpdateBatchItemProcessing","text":""},{"location":"v2/docs/ProjectDataUpdateBatchItemProcessing/#properties","title":"Properties","text":"Name Type Description Notes status str additional_status_information str, none_type Additional information regarding the status of this batch item. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectDataUpdateBatchItemRequest/","title":"ProjectDataUpdateBatchItemRequest","text":""},{"location":"v2/docs/ProjectDataUpdateBatchItemRequest/#properties","title":"Properties","text":"Name Type Description Notes data_id str Data to apply the update to (recursively, if it's a folder). user_tags TagUpdate [optional] technical_tags TagUpdate [optional] will_be_archived_at datetime The timestamp when the data should be archived. [optional] will_be_deleted_at datetime The timestamp when the data should be deleted. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectFileAndUploadUrl/","title":"ProjectFileAndUploadUrl","text":""},{"location":"v2/docs/ProjectFileAndUploadUrl/#properties","title":"Properties","text":"Name Type Description Notes data Data project_id str upload_url str A pre-signed url which is temporarily available for uploading the data. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectFolderAndUploadSession/","title":"ProjectFolderAndUploadSession","text":""},{"location":"v2/docs/ProjectFolderAndUploadSession/#properties","title":"Properties","text":"Name Type Description Notes data Data project_id str upload_session FolderUploadSession any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectList/","title":"ProjectList","text":""},{"location":"v2/docs/ProjectList/#properties","title":"Properties","text":"Name Type Description Notes items [Project] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/","title":"libica.openapi.v2.ProjectNotificationSubscriptionsApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_notification_subscription POST /api/projects/{projectId}/notificationSubscriptions Create a notification subscription delete_notification_subscription DELETE /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Delete a notification subscription get_notification_subscription GET /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Retrieve a notification subscription get_notification_subscriptions GET /api/projects/{projectId}/notificationSubscriptions Retrieve notification subscriptions update_notification_subscription PUT /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Update a notification subscription"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#create_notification_subscription","title":"create_notification_subscription","text":"<p>NotificationSubscription create_notification_subscription(project_id, create_notification_subscription)</p> <p>Create a notification subscription</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_notification_subscriptions_api\nfrom libica.openapi.v2.model.create_notification_subscription import CreateNotificationSubscription\nfrom libica.openapi.v2.model.notification_subscription import NotificationSubscription\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_notification_subscriptions_api.ProjectNotificationSubscriptionsApi(api_client)\n    project_id = \"projectId_example\" # str | The ID of the project\n    create_notification_subscription = CreateNotificationSubscription(\n        event_code=\"event_code_example\",\n        payload_version=\"payload_version_example\",\n        filter_expression=\"filter_expression_example\",\n        enabled=True,\n        notification_channel_id=\"notification_channel_id_example\",\n    ) # CreateNotificationSubscription | The new subscription\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a notification subscription\n        api_response = api_instance.create_notification_subscription(project_id, create_notification_subscription)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectNotificationSubscriptionsApi-&gt;create_notification_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project create_notification_subscription CreateNotificationSubscription The new subscription"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#return-type","title":"Return type","text":"<p>NotificationSubscription</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The notification subscription is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#delete_notification_subscription","title":"delete_notification_subscription","text":"<p>delete_notification_subscription(project_id, subscription_id)</p> <p>Delete a notification subscription</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_notification_subscriptions_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_notification_subscriptions_api.ProjectNotificationSubscriptionsApi(api_client)\n    project_id = \"projectId_example\" # str | The ID of the project\n    subscription_id = \"subscriptionId_example\" # str | The ID of the notification subscription to delete\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Delete a notification subscription\n        api_instance.delete_notification_subscription(project_id, subscription_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectNotificationSubscriptionsApi-&gt;delete_notification_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the notification subscription to delete"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The notification subscription is successfully deleted - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#get_notification_subscription","title":"get_notification_subscription","text":"<p>NotificationSubscription get_notification_subscription(project_id, subscription_id)</p> <p>Retrieve a notification subscription</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_notification_subscriptions_api\nfrom libica.openapi.v2.model.notification_subscription import NotificationSubscription\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_notification_subscriptions_api.ProjectNotificationSubscriptionsApi(api_client)\n    project_id = \"projectId_example\" # str | The ID of the project\n    subscription_id = \"subscriptionId_example\" # str | The ID of the notification subscription\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a notification subscription\n        api_response = api_instance.get_notification_subscription(project_id, subscription_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectNotificationSubscriptionsApi-&gt;get_notification_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the notification subscription"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#return-type_2","title":"Return type","text":"<p>NotificationSubscription</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The notification subscription is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#get_notification_subscriptions","title":"get_notification_subscriptions","text":"<p>NotificationSubscriptionList get_notification_subscriptions(project_id)</p> <p>Retrieve notification subscriptions</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_notification_subscriptions_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom libica.openapi.v2.model.notification_subscription_list import NotificationSubscriptionList\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_notification_subscriptions_api.ProjectNotificationSubscriptionsApi(api_client)\n    project_id = \"projectId_example\" # str | The ID of the project\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve notification subscriptions\n        api_response = api_instance.get_notification_subscriptions(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectNotificationSubscriptionsApi-&gt;get_notification_subscriptions: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#return-type_3","title":"Return type","text":"<p>NotificationSubscriptionList</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The notification subscriptions are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#update_notification_subscription","title":"update_notification_subscription","text":"<p>NotificationSubscription update_notification_subscription(project_id, subscription_id, notification_subscription)</p> <p>Update a notification subscription</p> <p>Fields which can be updated:  - enabled  - eventCode  - filterExpression  - notificationChannel </p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_notification_subscriptions_api\nfrom libica.openapi.v2.model.notification_subscription import NotificationSubscription\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_notification_subscriptions_api.ProjectNotificationSubscriptionsApi(api_client)\n    project_id = \"projectId_example\" # str | The ID of the project\n    subscription_id = \"subscriptionId_example\" # str | The ID of the notification subscription to update\n    notification_subscription = NotificationSubscription(\n        id=\"id_example\",\n        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        owner_id=\"owner_id_example\",\n        tenant_id=\"tenant_id_example\",\n        tenant_name=\"tenant_name_example\",\n        event_code=\"event_code_example\",\n        payload_version=\"payload_version_example\",\n        filter_expression=\"filter_expression_example\",\n        enabled=True,\n        notification_channel=NotificationChannel(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            enabled=True,\n            type=\"MAIL\",\n            address=\"address_example\",\n            aws_region=\"aws_region_example\",\n            application=ApplicationV4(\n                id=\"id_example\",\n                name=\"name_example\",\n            ),\n        ),\n        application=ApplicationV4(\n            id=\"id_example\",\n            name=\"name_example\",\n        ),\n    ) # NotificationSubscription | The updated subscription\n    if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update a notification subscription\n        api_response = api_instance.update_notification_subscription(project_id, subscription_id, notification_subscription)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectNotificationSubscriptionsApi-&gt;update_notification_subscription: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update a notification subscription\n        api_response = api_instance.update_notification_subscription(project_id, subscription_id, notification_subscription, if_match=if_match)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectNotificationSubscriptionsApi-&gt;update_notification_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the notification subscription to update notification_subscription NotificationSubscription The updated subscription if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional]"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#return-type_4","title":"Return type","text":"<p>NotificationSubscription</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectNotificationSubscriptionsApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The notification subscription is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPagedList/","title":"ProjectPagedList","text":""},{"location":"v2/docs/ProjectPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [Project] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectPermission/","title":"ProjectPermission","text":""},{"location":"v2/docs/ProjectPermission/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str role_project str role_flow str role_base str role_bench str membership_type str upload_allowed bool download_allowed bool tenant_name str, none_type [optional] user User [optional] email_address str, none_type Only present when membershipType is EMAIL [optional] workgroup Workgroup [optional] invitation_accepted bool, none_type Only present when membershipType is EMAIL [optional] invitation_rejected bool, none_type Only present when user is invited by EMAIL [optional] application ApplicationV4 [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectPermissionApi/","title":"libica.openapi.v2.ProjectPermissionApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_project_permission POST /api/projects/{projectId}/permissions Create a project permission. get_project_permission GET /api/projects/{projectId}/permissions/{permissionId} Retrieve a project permission. get_project_permissions GET /api/projects/{projectId}/permissions Retrieve a list of project permissions. update_project_permission PUT /api/projects/{projectId}/permissions/{permissionId} Update a project permission."},{"location":"v2/docs/ProjectPermissionApi/#create_project_permission","title":"create_project_permission","text":"<p>ProjectPermissionV4 create_project_permission(project_id, create_project_permission_v4)</p> <p>Create a project permission.</p>"},{"location":"v2/docs/ProjectPermissionApi/#changelog-for-this-endpoint-multiple-versions-exist-note-that-the-values-for-request-headers-content-type-and-accept-must-contain-a-matching-version-v3-initial-version-v4-added-administrator-role-for-bench-the-role-attributes-are-strings-instead-of-enums-to-support-future-additions-in-a-backward-compatible-manner","title":"Changelog For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.  ## [V3] Initial version ## [V4] Added 'Administrator' role for Bench. The role attributes are strings instead of enums to support future additions in a backward compatible manner.","text":""},{"location":"v2/docs/ProjectPermissionApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_permission_api\nfrom libica.openapi.v2.model.project_permission_v4 import ProjectPermissionV4\nfrom libica.openapi.v2.model.create_project_permission import CreateProjectPermission\nfrom libica.openapi.v2.model.create_project_permission_v4 import CreateProjectPermissionV4\nfrom libica.openapi.v2.model.project_permission import ProjectPermission\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_permission_api.ProjectPermissionApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_project_permission_v4 = CreateProjectPermissionV4(\n        role_project=\"NONE\",\n        role_flow=\"CONTRIBUTO\",\n        role_base=\"CONTRIBUTO\",\n        role_bench=\"ADMINISTRATO\",\n        membership_type=\"USER\",\n        user_id=\"user_id_example\",\n        email_address=\"email_address_example\",\n        workgroup_id=\"workgroup_id_example\",\n        upload_allowed=True,\n        download_allowed=True,\n    ) # CreateProjectPermissionV4 | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a project permission.\n        api_response = api_instance.create_project_permission(project_id, create_project_permission_v4)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPermissionApi-&gt;create_project_permission: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPermissionApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str create_project_permission_v4 CreateProjectPermissionV4"},{"location":"v2/docs/ProjectPermissionApi/#return-type","title":"Return type","text":"<p>ProjectPermissionV4</p>"},{"location":"v2/docs/ProjectPermissionApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPermissionApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json, application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPermissionApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The project permission is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPermissionApi/#get_project_permission","title":"get_project_permission","text":"<p>ProjectPermissionV4 get_project_permission(project_id, permission_id)</p> <p>Retrieve a project permission.</p>"},{"location":"v2/docs/ProjectPermissionApi/#changelog-for-this-endpoint-multiple-versions-exist-note-that-the-values-for-request-headers-content-type-and-accept-must-contain-a-matching-version-v3-initial-version-v4-added-administrator-role-for-bench-the-role-attributes-are-strings-instead-of-enums-to-support-future-additions-in-a-backward-compatible-manner_1","title":"Changelog For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.  ## [V3] Initial version ## [V4] Added 'Administrator' role for Bench. The role attributes are strings instead of enums to support future additions in a backward compatible manner.","text":""},{"location":"v2/docs/ProjectPermissionApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_permission_api\nfrom libica.openapi.v2.model.project_permission_v4 import ProjectPermissionV4\nfrom libica.openapi.v2.model.project_permission import ProjectPermission\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_permission_api.ProjectPermissionApi(api_client)\n    project_id = \"projectId_example\" # str | \n    permission_id = \"permissionId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project permission.\n        api_response = api_instance.get_project_permission(project_id, permission_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPermissionApi-&gt;get_project_permission: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPermissionApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str permission_id str"},{"location":"v2/docs/ProjectPermissionApi/#return-type_1","title":"Return type","text":"<p>ProjectPermissionV4</p>"},{"location":"v2/docs/ProjectPermissionApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPermissionApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPermissionApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The project permission is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPermissionApi/#get_project_permissions","title":"get_project_permissions","text":"<p>ProjectPermissionListV4 get_project_permissions(project_id)</p> <p>Retrieve a list of project permissions.</p>"},{"location":"v2/docs/ProjectPermissionApi/#changelog-for-this-endpoint-multiple-versions-exist-note-that-the-values-for-request-headers-content-type-and-accept-must-contain-a-matching-version-v3-initial-version-v4-added-administrator-role-for-bench-the-role-attributes-are-strings-instead-of-enums-to-support-future-additions-in-a-backward-compatible-manner_2","title":"Changelog For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.  ## [V3] Initial version ## [V4] Added 'Administrator' role for Bench. The role attributes are strings instead of enums to support future additions in a backward compatible manner.","text":""},{"location":"v2/docs/ProjectPermissionApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_permission_api\nfrom libica.openapi.v2.model.project_permission_list_v4 import ProjectPermissionListV4\nfrom libica.openapi.v2.model.project_permission_list import ProjectPermissionList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_permission_api.ProjectPermissionApi(api_client)\n    project_id = \"projectId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of project permissions.\n        api_response = api_instance.get_project_permissions(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPermissionApi-&gt;get_project_permissions: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPermissionApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v2/docs/ProjectPermissionApi/#return-type_2","title":"Return type","text":"<p>ProjectPermissionListV4</p>"},{"location":"v2/docs/ProjectPermissionApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPermissionApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPermissionApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project permissions is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPermissionApi/#update_project_permission","title":"update_project_permission","text":"<p>ProjectPermissionV4 update_project_permission(project_id, permission_id, project_permission_v4)</p> <p>Update a project permission.</p>"},{"location":"v2/docs/ProjectPermissionApi/#changelog-for-this-endpoint-multiple-versions-exist-note-that-the-values-for-request-headers-content-type-and-accept-must-contain-a-matching-version-v3-initial-version-v4-added-administrator-role-for-bench-the-role-attributes-are-strings-instead-of-enums-to-support-future-additions-in-a-backward-compatible-manner-fields-which-can-be-updated-uploadallowed-downloadallowed-roleproject-roleflow-rolebase-rolebench","title":"Changelog For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.  ## [V3] Initial version ## [V4] Added 'Administrator' role for Bench. The role attributes are strings instead of enums to support future additions in a backward compatible manner. Fields which can be updated: - uploadAllowed - downloadAllowed - roleProject - roleFlow - roleBase - roleBench","text":""},{"location":"v2/docs/ProjectPermissionApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_permission_api\nfrom libica.openapi.v2.model.project_permission_v4 import ProjectPermissionV4\nfrom libica.openapi.v2.model.project_permission import ProjectPermission\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_permission_api.ProjectPermissionApi(api_client)\n    project_id = \"projectId_example\" # str | \n    permission_id = \"permissionId_example\" # str | \n    project_permission_v4 = ProjectPermissionV4(\n        id=\"id_example\",\n        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        owner_id=\"owner_id_example\",\n        tenant_id=\"tenant_id_example\",\n        tenant_name=\"tenant_name_example\",\n        role_project=\"role_project_example\",\n        role_flow=\"role_flow_example\",\n        role_base=\"role_base_example\",\n        role_bench=\"role_bench_example\",\n        membership_type=\"USER\",\n        user=User(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            username=\"username_example\",\n            email=\"email_example\",\n            firstname=\"firstname_example\",\n            lastname=\"lastname_example\",\n            active=True,\n            tenant_administrator=True,\n            job_title=\"job_title_example\",\n            greeting=\"MR\",\n            mobile_phone_number=\"mobile_phone_number_example\",\n            phone_number=\"phone_number_example\",\n            fax_number=\"fax_number_example\",\n            email_verified=True,\n            two_factor_authentication=True,\n            country=Country(\n                id=\"id_example\",\n                time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                owner_id=\"owner_id_example\",\n                tenant_id=\"tenant_id_example\",\n                tenant_name=\"tenant_name_example\",\n                code=\"code_example\",\n                name=\"name_example\",\n                region=\"region_example\",\n            ),\n            address_line1=\"address_line1_example\",\n            address_line2=\"address_line2_example\",\n            address_line3=\"address_line3_example\",\n            postal_code=\"postal_code_example\",\n            city=\"city_example\",\n            state=\"state_example\",\n        ),\n        email_address=\"email_address_example\",\n        workgroup=Workgroup(\n            id=\"id_example\",\n            name=\"name_example\",\n            description=\"description_example\",\n        ),\n        invitation_accepted=True,\n        invitation_rejected=True,\n        upload_allowed=True,\n        download_allowed=True,\n        application=ApplicationV4(\n            id=\"id_example\",\n            name=\"name_example\",\n        ),\n    ) # ProjectPermissionV4 | \n    if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update a project permission.\n        api_response = api_instance.update_project_permission(project_id, permission_id, project_permission_v4)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPermissionApi-&gt;update_project_permission: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update a project permission.\n        api_response = api_instance.update_project_permission(project_id, permission_id, project_permission_v4, if_match=if_match)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPermissionApi-&gt;update_project_permission: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPermissionApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str permission_id str project_permission_v4 ProjectPermissionV4 if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional]"},{"location":"v2/docs/ProjectPermissionApi/#return-type_3","title":"Return type","text":"<p>ProjectPermissionV4</p>"},{"location":"v2/docs/ProjectPermissionApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPermissionApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json, application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPermissionApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The project permission is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPermissionList/","title":"ProjectPermissionList","text":""},{"location":"v2/docs/ProjectPermissionList/#properties","title":"Properties","text":"Name Type Description Notes items [ProjectPermission] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectPermissionListV4/","title":"ProjectPermissionListV4","text":""},{"location":"v2/docs/ProjectPermissionListV4/#properties","title":"Properties","text":"Name Type Description Notes items [ProjectPermissionV4] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectPermissionV4/","title":"ProjectPermissionV4","text":""},{"location":"v2/docs/ProjectPermissionV4/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str role_project str Possible values are: NONE, VIEWER, CONTRIBUTOR, ADMINISTRATOR, DATA_PROVIDER. More types could be added in a future release. role_flow str Possible values are: NONE, VIEWER, CONTRIBUTOR. More types could be added in a future release. role_base str Possible values are: NONE, VIEWER, CONTRIBUTOR. More types could be added in a future release. role_bench str Possible values are: NONE, CONTRIBUTOR, ADMINISTRATOR. More types could be added in a future release. membership_type str upload_allowed bool download_allowed bool tenant_name str, none_type [optional] user User [optional] email_address str, none_type Only present when membershipType is EMAIL [optional] workgroup Workgroup [optional] invitation_accepted bool, none_type Only present when membershipType is EMAIL [optional] invitation_rejected bool, none_type Only present when user is invited by EMAIL [optional] application ApplicationV4 [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipeline/","title":"ProjectPipeline","text":""},{"location":"v2/docs/ProjectPipeline/#properties","title":"Properties","text":"Name Type Description Notes pipeline PipelineV3 project_id str bundle_links BundleList any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/","title":"libica.openapi.v2.ProjectPipelineApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_additional_project_pipeline_file POST /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles Create an additional input form file for a pipeline. create_cwl_json_pipeline POST /api/projects/{projectId}/pipelines:createCwlJsonPipeline Create a JSON based CWL pipeline within a project. create_cwl_pipeline POST /api/projects/{projectId}/pipelines:createCwlPipeline Create a CWL pipeline within a project. create_nextflow_json_pipeline POST /api/projects/{projectId}/pipelines:createNextflowJsonPipeline Create a JSON based Nextflow pipeline within a project. create_nextflow_pipeline POST /api/projects/{projectId}/pipelines:createNextflowPipeline Create a Nextflow pipeline within a project. create_project_pipeline_file POST /api/projects/{projectId}/pipelines/{pipelineId}/files Create a file for a pipeline. delete_additional_project_pipeline_file DELETE /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles/{fileId} Delete an additional input form file for a pipeline. delete_project_pipeline_file DELETE /api/projects/{projectId}/pipelines/{pipelineId}/files/{fileId} Delete a file for a pipeline. download_additional_file_content GET /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles/{fileId}/content Download the contents of an additional input form file. download_input_form_file_content GET /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/inputFormFile Download the contents of the input form file. download_on_render_file_content GET /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/onRenderFile Download the contents of the onRender file. download_on_submit_file_content GET /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/onSubmitFile Download the contents of the onSubmit file. download_project_pipeline_file_content GET /api/projects/{projectId}/pipelines/{pipelineId}/files/{fileId}/content Download the contents of a pipeline file. get_project_pipeline GET /api/projects/{projectId}/pipelines/{pipelineId} Retrieve a project pipeline. get_project_pipeline_additional_files GET /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles Retrieve additional input form files for a project pipeline. get_project_pipeline_configuration_parameters GET /api/projects/{projectId}/pipelines/{pipelineId}/configurationParameters Retrieve configuration parameters for a project pipeline. get_project_pipeline_files GET /api/projects/{projectId}/pipelines/{pipelineId}/files Retrieve files for a project pipeline. get_project_pipeline_html_documentation GET /api/projects/{projectId}/pipelines/{pipelineId}/documentation/HTML Retrieve HTML documentation for a project pipeline. get_project_pipeline_input_parameters GET /api/projects/{projectId}/pipelines/{pipelineId}/inputParameters Retrieve input parameters for a project pipeline. get_project_pipeline_reference_sets GET /api/projects/{projectId}/pipelines/{pipelineId}/referenceSets Retrieve the reference sets of a project pipeline. get_project_pipelines GET /api/projects/{projectId}/pipelines Retrieve a list of project pipelines. link_pipeline_to_project POST /api/projects/{projectId}/pipelines/{pipelineId} Link a pipeline to a project. release_project_pipeline POST /api/projects/{projectId}/pipelines/{pipelineId}:release Release a pipeline. unlink_pipeline_from_project DELETE /api/projects/{projectId}/pipelines/{pipelineId} Unlink a pipeline from a project. update_additional_file PUT /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles/{fileId}/content Update the contents of an additional input form file. update_general_attributes_project_pipeline POST /api/projects/{projectId}/pipelines/{pipelineId}/generalAttributes Update the general attributes of a project pipeline. update_input_form_file PUT /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/inputFormFile Update the contents of the input form file for a pipeline. update_on_render_file PUT /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/onRenderFile Update the contents of the onRender file for a pipeline. update_on_submit_file PUT /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/onSubmitFile Update the contents of the onSubmit file for a pipeline. update_project_pipeline_file PUT /api/projects/{projectId}/pipelines/{pipelineId}/files/{fileId}/content Update the contents of a file for a pipeline."},{"location":"v2/docs/ProjectPipelineApi/#create_additional_project_pipeline_file","title":"create_additional_project_pipeline_file","text":"<p>PipelineFile create_additional_project_pipeline_file(project_id, pipeline_id, content)</p> <p>Create an additional input form file for a pipeline.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.pipeline_file import PipelineFile\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to create a file for\n    content = open('/path/to/file', 'rb') # file_type | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create an additional input form file for a pipeline.\n        api_response = api_instance.create_additional_project_pipeline_file(project_id, pipeline_id, content)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;create_additional_project_pipeline_file: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to create a file for content file_type"},{"location":"v2/docs/ProjectPipelineApi/#return-type","title":"Return type","text":"<p>PipelineFile</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The pipeline file is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#create_cwl_json_pipeline","title":"create_cwl_json_pipeline","text":"<p>ProjectPipelineV4 create_cwl_json_pipeline(project_id, code, description, workflow_cwl_file, input_form_file, analysis_storage_id)</p> <p>Create a JSON based CWL pipeline within a project.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.pipeline_report_config import PipelineReportConfig\nfrom libica.openapi.v2.model.project_pipeline_v4 import ProjectPipelineV4\nfrom libica.openapi.v2.model.links import Links\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    code = \"26bUUGjjNSwg0_bs9ZayIM/dgN/b6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_dz/rEoBi0LnU8SsOWJ7wYrczi/Qdt8mVLxbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZepezJ0-VmLSUTLYyW- e_jxxzpBvw-y P/SI-13 AOsiPRVvnXrDhh58EJzzOxprDzE3pjHRAkK7vI7/jcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGxjARc6SZKg2qV/ hA054g00j8CXRM4JZgexx5/BmiUdb8V-5tS7Ce-8OP8jM6Q/ap ieHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8M6xmSejA6BGR RDxxWc493QsJ JFt/rxtNb3BtpHGNB33FSli/EaSDC3Jwlo9Aq-OZySuGXBwuNL5ICjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGahEx5as4igHCaW/gfGuN6Yogo9e2fmFQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z-LtIx RE8z6ZbHjz/3coUV uT/EXw3Z8KLTvaqhteQpbwYU8rf85eyxCXQ02l2UfQbP/Hwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9OYCpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3/B7Nke4pyLFXi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7RTuj3iloSmvq6ptM/paqws8RfvaYMfrqa8yWUb/aew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8imaC5It9ZEZjIoZP9V1EjbA-tFQv/KOFpHUcVNnqDdEconiUhJ/_OYqv01dQetO3oDTHSQdhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0N/GhiW92gAEui/l WoiEW-tzti/9q3K407VNjp2Rdt_M_wxbjDN svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hn/97bNktDzITop4y58kMdi7sEjYIZXQNI/G2UN7cFEvraG_8ul060s0W5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD/EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXx/cpcof84rc bTU20M2sFqt4zswj63S37gymcb35PFmFooUEItJ/WXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsgO_EkphsT/YD6 2t z_dodcIO0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08O/uXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSU/GAcLlmJPzj1b/En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd/34AbRwr1Mi1qq8Bv/7r73NXsLH6lkp_YwgeBZkfv7aEST19XJTe9 4t GIqXuFdD/054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YYD7uU6_-V/RO7VbVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GL/dkyb0ofYJLarfJrS4gkeTAfK5NMnpgtwWLpKWVb8A/uQa TKwyJvJPBgILfXHpRfA79W9rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpE/9wjR SU K0GOwW4T/aO1NV6_Hx-5jhuPYUigmskjs38qptZPjGbQcMS6bq4jio6/n_hxYgCm- Z/K_7Ms5LyP8NoYNVF5v/C_I7qzU/pSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL92Y/TDLRif4BX0k_kxk-VTaov2mlM18SfVTJ/mcMNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei/m5FrnEpLvFqwhHFvdn0kEWtwPAhULVh_u/c  m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW\" # str | The code of the CWL pipeline\n    description = \"description_example\" # str | The description of the CWL pipeline\n    workflow_cwl_file = open('/path/to/file', 'rb') # file_type | The CWL workflow file.\n    input_form_file = open('/path/to/file', 'rb') # file_type | The JSON based input form.\n    analysis_storage_id = \"analysis_storage_id_example\" # str | The id of the storage to use for the pipeline.\n    tool_cwl_files = [\n        open('/path/to/file', 'rb'),\n    ] # [file_type] |  (optional)\n    on_render_file = open('/path/to/file', 'rb') # file_type | A file that will render the current state of the input form. (optional)\n    on_submit_file = open('/path/to/file', 'rb') # file_type | A file that will submit the current state of the input form. (optional)\n    other_input_form_files = [\n        open('/path/to/file', 'rb'),\n    ] # [file_type] |  (optional)\n    metadata_model_file = open('/path/to/file', 'rb') # file_type, none_type | The metadata model json file(contents can be retrieved from the controlplane). (optional)\n    links = Links(\n        links=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n        licenses=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n        homepages=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n        publications=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n    ) # Links |  (optional)\n    version_comment = \"version_comment_example\" # str, none_type |  (optional)\n    categories = [\n        \"categories_example\",\n    ] # [str, none_type], none_type |  (optional)\n    html_documentation = \"html_documentation_example\" # str, none_type |  (optional)\n    proprietary = False # bool, none_type | A boolean which indicates if the code of this pipeline is proprietary (optional) if omitted the server will use the default value of False\n    report_configs = PipelineReportConfig(\n        configs=[\n            Config(\n                name=\"name_example\",\n                regex=\"regex_example\",\n                format=\"format_example\",\n            ),\n        ],\n    ) # PipelineReportConfig |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a JSON based CWL pipeline within a project.\n        api_response = api_instance.create_cwl_json_pipeline(project_id, code, description, workflow_cwl_file, input_form_file, analysis_storage_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;create_cwl_json_pipeline: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a JSON based CWL pipeline within a project.\n        api_response = api_instance.create_cwl_json_pipeline(project_id, code, description, workflow_cwl_file, input_form_file, analysis_storage_id, tool_cwl_files=tool_cwl_files, on_render_file=on_render_file, on_submit_file=on_submit_file, other_input_form_files=other_input_form_files, metadata_model_file=metadata_model_file, links=links, version_comment=version_comment, categories=categories, html_documentation=html_documentation, proprietary=proprietary, report_configs=report_configs)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;create_cwl_json_pipeline: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str code str The code of the CWL pipeline description str The description of the CWL pipeline workflow_cwl_file file_type The CWL workflow file. input_form_file file_type The JSON based input form. analysis_storage_id str The id of the storage to use for the pipeline. tool_cwl_files [file_type] [optional] on_render_file file_type A file that will render the current state of the input form. [optional] on_submit_file file_type A file that will submit the current state of the input form. [optional] other_input_form_files [file_type] [optional] metadata_model_file file_type, none_type The metadata model json file(contents can be retrieved from the controlplane). [optional] links Links [optional] version_comment str, none_type [optional] categories [str, none_type], none_type [optional] html_documentation str, none_type [optional] proprietary bool, none_type A boolean which indicates if the code of this pipeline is proprietary [optional] if omitted the server will use the default value of False report_configs PipelineReportConfig [optional]"},{"location":"v2/docs/ProjectPipelineApi/#return-type_1","title":"Return type","text":"<p>ProjectPipelineV4</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 201 The CWL pipeline is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#create_cwl_pipeline","title":"create_cwl_pipeline","text":"<p>ProjectPipeline create_cwl_pipeline(project_id, code, description, workflow_cwl_file, parameters_xml_file, analysis_storage_id)</p> <p>Create a CWL pipeline within a project.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.pipeline_report_config import PipelineReportConfig\nfrom libica.openapi.v2.model.project_pipeline import ProjectPipeline\nfrom libica.openapi.v2.model.links import Links\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    code = \"26bUUGjjNSwg0_bs9ZayIM/dgN/b6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_dz/rEoBi0LnU8SsOWJ7wYrczi/Qdt8mVLxbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZepezJ0-VmLSUTLYyW- e_jxxzpBvw-y P/SI-13 AOsiPRVvnXrDhh58EJzzOxprDzE3pjHRAkK7vI7/jcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGxjARc6SZKg2qV/ hA054g00j8CXRM4JZgexx5/BmiUdb8V-5tS7Ce-8OP8jM6Q/ap ieHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8M6xmSejA6BGR RDxxWc493QsJ JFt/rxtNb3BtpHGNB33FSli/EaSDC3Jwlo9Aq-OZySuGXBwuNL5ICjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGahEx5as4igHCaW/gfGuN6Yogo9e2fmFQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z-LtIx RE8z6ZbHjz/3coUV uT/EXw3Z8KLTvaqhteQpbwYU8rf85eyxCXQ02l2UfQbP/Hwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9OYCpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3/B7Nke4pyLFXi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7RTuj3iloSmvq6ptM/paqws8RfvaYMfrqa8yWUb/aew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8imaC5It9ZEZjIoZP9V1EjbA-tFQv/KOFpHUcVNnqDdEconiUhJ/_OYqv01dQetO3oDTHSQdhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0N/GhiW92gAEui/l WoiEW-tzti/9q3K407VNjp2Rdt_M_wxbjDN svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hn/97bNktDzITop4y58kMdi7sEjYIZXQNI/G2UN7cFEvraG_8ul060s0W5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD/EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXx/cpcof84rc bTU20M2sFqt4zswj63S37gymcb35PFmFooUEItJ/WXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsgO_EkphsT/YD6 2t z_dodcIO0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08O/uXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSU/GAcLlmJPzj1b/En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd/34AbRwr1Mi1qq8Bv/7r73NXsLH6lkp_YwgeBZkfv7aEST19XJTe9 4t GIqXuFdD/054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YYD7uU6_-V/RO7VbVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GL/dkyb0ofYJLarfJrS4gkeTAfK5NMnpgtwWLpKWVb8A/uQa TKwyJvJPBgILfXHpRfA79W9rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpE/9wjR SU K0GOwW4T/aO1NV6_Hx-5jhuPYUigmskjs38qptZPjGbQcMS6bq4jio6/n_hxYgCm- Z/K_7Ms5LyP8NoYNVF5v/C_I7qzU/pSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL92Y/TDLRif4BX0k_kxk-VTaov2mlM18SfVTJ/mcMNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei/m5FrnEpLvFqwhHFvdn0kEWtwPAhULVh_u/c  m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW\" # str | The code of the CWL pipeline\n    description = \"description_example\" # str | The description of the CWL pipeline\n    workflow_cwl_file = open('/path/to/file', 'rb') # file_type | The CWL workflow file.\n    parameters_xml_file = open('/path/to/file', 'rb') # file_type | \n    analysis_storage_id = \"analysis_storage_id_example\" # str | The id of the storage to use for the pipeline.\n    tool_cwl_files = [\n        open('/path/to/file', 'rb'),\n    ] # [file_type] |  (optional)\n    metadata_model_file = open('/path/to/file', 'rb') # file_type, none_type | The metadata model json file(contents can be retrieved from the controlplane). (optional)\n    links = Links(\n        links=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n        licenses=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n        homepages=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n        publications=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n    ) # Links |  (optional)\n    version_comment = \"version_comment_example\" # str, none_type |  (optional)\n    categories = [\n        \"categories_example\",\n    ] # [str, none_type], none_type |  (optional)\n    html_documentation = \"html_documentation_example\" # str, none_type |  (optional)\n    proprietary = False # bool, none_type | A boolean which indicates if the code of this pipeline is proprietary (optional) if omitted the server will use the default value of False\n    report_configs = PipelineReportConfig(\n        configs=[\n            Config(\n                name=\"name_example\",\n                regex=\"regex_example\",\n                format=\"format_example\",\n            ),\n        ],\n    ) # PipelineReportConfig |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a CWL pipeline within a project.\n        api_response = api_instance.create_cwl_pipeline(project_id, code, description, workflow_cwl_file, parameters_xml_file, analysis_storage_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;create_cwl_pipeline: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a CWL pipeline within a project.\n        api_response = api_instance.create_cwl_pipeline(project_id, code, description, workflow_cwl_file, parameters_xml_file, analysis_storage_id, tool_cwl_files=tool_cwl_files, metadata_model_file=metadata_model_file, links=links, version_comment=version_comment, categories=categories, html_documentation=html_documentation, proprietary=proprietary, report_configs=report_configs)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;create_cwl_pipeline: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str code str The code of the CWL pipeline description str The description of the CWL pipeline workflow_cwl_file file_type The CWL workflow file. parameters_xml_file file_type analysis_storage_id str The id of the storage to use for the pipeline. tool_cwl_files [file_type] [optional] metadata_model_file file_type, none_type The metadata model json file(contents can be retrieved from the controlplane). [optional] links Links [optional] version_comment str, none_type [optional] categories [str, none_type], none_type [optional] html_documentation str, none_type [optional] proprietary bool, none_type A boolean which indicates if the code of this pipeline is proprietary [optional] if omitted the server will use the default value of False report_configs PipelineReportConfig [optional]"},{"location":"v2/docs/ProjectPipelineApi/#return-type_2","title":"Return type","text":"<p>ProjectPipeline</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 201 The CWL pipeline is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#create_nextflow_json_pipeline","title":"create_nextflow_json_pipeline","text":"<p>PipelineV4 create_nextflow_json_pipeline(project_id, code, description, main_nextflow_file, input_form_file, analysis_storage_id)</p> <p>Create a JSON based Nextflow pipeline within a project.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.pipeline_report_config import PipelineReportConfig\nfrom libica.openapi.v2.model.links import Links\nfrom libica.openapi.v2.model.pipeline_v4 import PipelineV4\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    code = \"26bUUGjjNSwg0_bs9ZayIM/dgN/b6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_dz/rEoBi0LnU8SsOWJ7wYrczi/Qdt8mVLxbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZepezJ0-VmLSUTLYyW- e_jxxzpBvw-y P/SI-13 AOsiPRVvnXrDhh58EJzzOxprDzE3pjHRAkK7vI7/jcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGxjARc6SZKg2qV/ hA054g00j8CXRM4JZgexx5/BmiUdb8V-5tS7Ce-8OP8jM6Q/ap ieHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8M6xmSejA6BGR RDxxWc493QsJ JFt/rxtNb3BtpHGNB33FSli/EaSDC3Jwlo9Aq-OZySuGXBwuNL5ICjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGahEx5as4igHCaW/gfGuN6Yogo9e2fmFQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z-LtIx RE8z6ZbHjz/3coUV uT/EXw3Z8KLTvaqhteQpbwYU8rf85eyxCXQ02l2UfQbP/Hwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9OYCpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3/B7Nke4pyLFXi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7RTuj3iloSmvq6ptM/paqws8RfvaYMfrqa8yWUb/aew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8imaC5It9ZEZjIoZP9V1EjbA-tFQv/KOFpHUcVNnqDdEconiUhJ/_OYqv01dQetO3oDTHSQdhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0N/GhiW92gAEui/l WoiEW-tzti/9q3K407VNjp2Rdt_M_wxbjDN svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hn/97bNktDzITop4y58kMdi7sEjYIZXQNI/G2UN7cFEvraG_8ul060s0W5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD/EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXx/cpcof84rc bTU20M2sFqt4zswj63S37gymcb35PFmFooUEItJ/WXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsgO_EkphsT/YD6 2t z_dodcIO0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08O/uXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSU/GAcLlmJPzj1b/En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd/34AbRwr1Mi1qq8Bv/7r73NXsLH6lkp_YwgeBZkfv7aEST19XJTe9 4t GIqXuFdD/054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YYD7uU6_-V/RO7VbVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GL/dkyb0ofYJLarfJrS4gkeTAfK5NMnpgtwWLpKWVb8A/uQa TKwyJvJPBgILfXHpRfA79W9rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpE/9wjR SU K0GOwW4T/aO1NV6_Hx-5jhuPYUigmskjs38qptZPjGbQcMS6bq4jio6/n_hxYgCm- Z/K_7Ms5LyP8NoYNVF5v/C_I7qzU/pSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL92Y/TDLRif4BX0k_kxk-VTaov2mlM18SfVTJ/mcMNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei/m5FrnEpLvFqwhHFvdn0kEWtwPAhULVh_u/c  m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW\" # str | The code of the pipeline\n    description = \"description_example\" # str | The description of the pipeline\n    main_nextflow_file = open('/path/to/file', 'rb') # file_type | The main Nextflow file.\n    input_form_file = open('/path/to/file', 'rb') # file_type | The JSON based input form.\n    analysis_storage_id = \"analysis_storage_id_example\" # str | The id of the storage to use for the pipeline.\n    pipeline_language_version_id = \"pipeline_language_version_id_example\" # str, none_type | The id of the Nextflow version to use for the pipeline. (optional)\n    nextflow_config_file = open('/path/to/file', 'rb') # file_type | The Nextflow config file. (optional)\n    other_nextflow_files = [\n        open('/path/to/file', 'rb'),\n    ] # [file_type] |  (optional)\n    on_render_file = open('/path/to/file', 'rb') # file_type | A file that will render the current state of the input form. (optional)\n    on_submit_file = open('/path/to/file', 'rb') # file_type | A file that will submit the current state of the input form. (optional)\n    other_input_form_files = [\n        open('/path/to/file', 'rb'),\n    ] # [file_type] |  (optional)\n    metadata_model_file = open('/path/to/file', 'rb') # file_type, none_type | The metadata model json file(contents can be retrieved from the controlplane). (optional)\n    links = Links(\n        links=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n        licenses=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n        homepages=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n        publications=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n    ) # Links |  (optional)\n    version_comment = \"version_comment_example\" # str, none_type |  (optional)\n    categories = [\n        \"categories_example\",\n    ] # [str, none_type], none_type |  (optional)\n    html_documentation = \"html_documentation_example\" # str, none_type |  (optional)\n    proprietary = False # bool, none_type | A boolean which indicates if the code of this pipeline is proprietary (optional) if omitted the server will use the default value of False\n    report_configs = PipelineReportConfig(\n        configs=[\n            Config(\n                name=\"name_example\",\n                regex=\"regex_example\",\n                format=\"format_example\",\n            ),\n        ],\n    ) # PipelineReportConfig |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a JSON based Nextflow pipeline within a project.\n        api_response = api_instance.create_nextflow_json_pipeline(project_id, code, description, main_nextflow_file, input_form_file, analysis_storage_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;create_nextflow_json_pipeline: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a JSON based Nextflow pipeline within a project.\n        api_response = api_instance.create_nextflow_json_pipeline(project_id, code, description, main_nextflow_file, input_form_file, analysis_storage_id, pipeline_language_version_id=pipeline_language_version_id, nextflow_config_file=nextflow_config_file, other_nextflow_files=other_nextflow_files, on_render_file=on_render_file, on_submit_file=on_submit_file, other_input_form_files=other_input_form_files, metadata_model_file=metadata_model_file, links=links, version_comment=version_comment, categories=categories, html_documentation=html_documentation, proprietary=proprietary, report_configs=report_configs)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;create_nextflow_json_pipeline: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str code str The code of the pipeline description str The description of the pipeline main_nextflow_file file_type The main Nextflow file. input_form_file file_type The JSON based input form. analysis_storage_id str The id of the storage to use for the pipeline. pipeline_language_version_id str, none_type The id of the Nextflow version to use for the pipeline. [optional] nextflow_config_file file_type The Nextflow config file. [optional] other_nextflow_files [file_type] [optional] on_render_file file_type A file that will render the current state of the input form. [optional] on_submit_file file_type A file that will submit the current state of the input form. [optional] other_input_form_files [file_type] [optional] metadata_model_file file_type, none_type The metadata model json file(contents can be retrieved from the controlplane). [optional] links Links [optional] version_comment str, none_type [optional] categories [str, none_type], none_type [optional] html_documentation str, none_type [optional] proprietary bool, none_type A boolean which indicates if the code of this pipeline is proprietary [optional] if omitted the server will use the default value of False report_configs PipelineReportConfig [optional]"},{"location":"v2/docs/ProjectPipelineApi/#return-type_3","title":"Return type","text":"<p>PipelineV4</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 201 The Nextflow pipeline is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#create_nextflow_pipeline","title":"create_nextflow_pipeline","text":"<p>ProjectPipeline create_nextflow_pipeline(project_id, code, description, main_nextflow_file, parameters_xml_file, analysis_storage_id)</p> <p>Create a Nextflow pipeline within a project.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.pipeline_report_config import PipelineReportConfig\nfrom libica.openapi.v2.model.project_pipeline import ProjectPipeline\nfrom libica.openapi.v2.model.links import Links\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    code = \"26bUUGjjNSwg0_bs9ZayIM/dgN/b6gvxmPb9GcsM61ate1RA89q3w1l4eH4XxEz-5awxoFZxHzs6ED-kjUSnTINkYPUndNl8pmPg5K897Fu1JEFj9R1_dz/rEoBi0LnU8SsOWJ7wYrczi/Qdt8mVLxbg4bCLrLBcmXxWQK6MzKSg5jphei0IfRRwpnT_Z-qKa_YppZepezJ0-VmLSUTLYyW- e_jxxzpBvw-y P/SI-13 AOsiPRVvnXrDhh58EJzzOxprDzE3pjHRAkK7vI7/jcoPqzNk YKJOXJ2zkgYnmU-hV4pJhQ7dhTAGxjARc6SZKg2qV/ hA054g00j8CXRM4JZgexx5/BmiUdb8V-5tS7Ce-8OP8jM6Q/ap ieHoJL0cOHxhIz6IzRjPiSbv46JLcKaA-xTwLJcAkoNQxJsCUIkorO-2KAnnTOE8M6xmSejA6BGR RDxxWc493QsJ JFt/rxtNb3BtpHGNB33FSli/EaSDC3Jwlo9Aq-OZySuGXBwuNL5ICjOL uxZFN7oEXv3Rjr7mZXbY7cFU6HPiDV aM8XFtx5ef7XxGahEx5as4igHCaW/gfGuN6Yogo9e2fmFQ_q_V0iz1l6lakAtMD7gXmnBhySbG7coPhWOlWnLvrLZaxa78JI_LGepDuQ3z-LtIx RE8z6ZbHjz/3coUV uT/EXw3Z8KLTvaqhteQpbwYU8rf85eyxCXQ02l2UfQbP/Hwb TbI1I6mS 9V-ofBBak wevR6F 37RS4Mqp-z9OYCpSjEqZEdbOOqMNkk0MEG4PgSZp-tY7nzp2V09rLuCvfKd3/B7Nke4pyLFXi20uVuBIVQWxeziEmPj4-KIZ4EBDYGMeHwlQHgxMV_coQzDZPhSAcDWSu58NayafWzmTt-P7RTuj3iloSmvq6ptM/paqws8RfvaYMfrqa8yWUb/aew8fGzxL8UBpf4IYjQxCBv0aEqODMs6 __HvAARQCZ_HKqroXyt6-Y8imaC5It9ZEZjIoZP9V1EjbA-tFQv/KOFpHUcVNnqDdEconiUhJ/_OYqv01dQetO3oDTHSQdhLouT7merxKTcqNMpXfpU5ktnd4BBULIW0N/GhiW92gAEui/l WoiEW-tzti/9q3K407VNjp2Rdt_M_wxbjDN svNTMlZscMPUeqTE205sTZIkhsadNbiDH3R9hn/97bNktDzITop4y58kMdi7sEjYIZXQNI/G2UN7cFEvraG_8ul060s0W5myfNUsZOAfyRSKwumr7vrmbObYZ5LLOTkAJpJ6yD/EyKvzp oyT1iV44YK Q7W9XH_ nC87n1lMXx/cpcof84rc bTU20M2sFqt4zswj63S37gymcb35PFmFooUEItJ/WXmmb6rN-PG7CfVVrIXdUuyma63xZJQfyqFaad9jaJKwsaFZawt9CZCsgO_EkphsT/YD6 2t z_dodcIO0StQgTXeyp0Q-9qUn4jz1sIzDHdZi5DAKyeNjBARo-Dde72ZQ7rgUiF6NuAm_ZXdh 6NvD08O/uXF_iMcrZ0AkcxL21NwNNfADepMfPI jxbyGRU9VFh-_a9Mbcva1MSFLSU/GAcLlmJPzj1b/En KXp2ZJ1qP6EIAQRw6KWw-PSWFS0LzB0tz6JsM zfsuuNyQ1F qNTmvGd/34AbRwr1Mi1qq8Bv/7r73NXsLH6lkp_YwgeBZkfv7aEST19XJTe9 4t GIqXuFdD/054gT-SQFzTGrV3v TunXGLysUh_by7pmMGuKPyyeSFxct6Ze7099nRsM3R50i8YYD7uU6_-V/RO7VbVfLxqbCc-GimutTgMtTfBOiI07gLv8fxp8Rrvb2oVixDwL_5GL/dkyb0ofYJLarfJrS4gkeTAfK5NMnpgtwWLpKWVb8A/uQa TKwyJvJPBgILfXHpRfA79W9rCcVEcc1VmOZvW3--sp_E2t2terN4_2lcppBwgjIIFpE/9wjR SU K0GOwW4T/aO1NV6_Hx-5jhuPYUigmskjs38qptZPjGbQcMS6bq4jio6/n_hxYgCm- Z/K_7Ms5LyP8NoYNVF5v/C_I7qzU/pSP39e4y_L 2jAgjSpNK_48uV-MZ7CZL92Y/TDLRif4BX0k_kxk-VTaov2mlM18SfVTJ/mcMNVIO85230RBh-y9g8MNnnvGKT10t-mI5XH9biew58zTl0rQVIApvKA eQe3wv SD86JI2WO4rz8dSltvVqfei/m5FrnEpLvFqwhHFvdn0kEWtwPAhULVh_u/c  m 15yE3/jO3gKaP YHCaCFHZkWsh-mLTR_p_ZhJXuOoIsNHZsK m5ntCxGzmy4lVW_PKmo 4vtEAhOm289Yqnh43gtmE0DcSlXRhP/iRTQHkAPGO AROE GYzP3aIBvIz2Du0PJgDeBXnU3IgkF7V-jBW/R9V8PHmR5UHiFYWfIRAHRUzlaQ_5fkL16fmprt8wmIyj95MZALC3mmE-9-9QIQ_TxYHnPGd129xGytHvWDBO-HWa9uog_gy/B_Lcv_NbdKzBHV0mHJ0otqw-2cVo74hoJwmXoaUvId-qA0zLPa/yNACHAPKtKgQ-wkE FxSQB6am1_36v_4sO/L0 obeH_A5Q g0U8nnM/tLSIw h_9TVGO7HSAcUt2jm2mJ6jxIaRYSQHPbXmRPRzaWrmwaKy4EMWPwbc-aU2Q37XoigypCN/O vMz_s2eIdV-ysI6yTso6oV4n2icY_UqIX3aXe8/fjQVrmDXiXxxvBTvfg06jgn9-ScpKH8N5C4XWGVGRk3j37rxQmI4kwvKHhIKCAUvIkWH6jwZxFRo eIKF/u9HDcrUBkJ7XvQAc-6hPCiLNyumZW bZ1Z1lFtnk615uonsVXHfF05q0NRqj15TZJbNNeHStQMOuYC_jqdm9E9SG W_klzb/D/EIYyIete7WHGdGvaz8OlgB8y7yFT3urhGfXNdaf9LPJpeol/Hsm_twH5CZ0hw5E79TYBg5mTcvHosbmds0/lnttAjUMBqupVLK3x4 0AG976YmWGXzKcfMwo/AJe6AqMxeiI54JCwm88akvPHFEeT/B2_DFbeoWsodas1SE0ZbMSAutkOh5Xxm5JinIE-HSc3Uum5CXQM8IAqgV7Pt7UP7R-a-gxq3pkrhbyaL /g06Y18ROfY0YdRY3jzlcCRRc0YCrW8XRt5tBgOBd9I6/WfODawxODTr6XaLBZ4N4HcKJ0/9/176mYQK5G5Zg_-QRvAnzbzYh01qrNB/0OPLkLvQwJMAZYcIIuHLVBKQgB0tiFZAgCaX_xRaJdoCvlRQ2NFmqxndmXhZUKursXMGxzxNhAE-TRB8qkmv3x3zsY/hWxhBU-WrXobNN/UrgSnP/Hqo0hrfoM/2nH G5cT7PUzahLIwtoU8svwt-H5quoR L8lSHdFBrWE3qxdnl3KF6G9CqDK1MEEUL/z_3v2OEgVjFWE0PvPA tgxkNhx5gRDEgjBNW\" # str | The code of the pipeline\n    description = \"description_example\" # str | The description of the pipeline\n    main_nextflow_file = open('/path/to/file', 'rb') # file_type | The main Nextflow file.\n    parameters_xml_file = open('/path/to/file', 'rb') # file_type | \n    analysis_storage_id = \"analysis_storage_id_example\" # str | The id of the storage to use for the pipeline.\n    pipeline_language_version_id = \"pipeline_language_version_id_example\" # str, none_type | The id of the Nextflow version to use for the pipeline. (optional)\n    nextflow_config_file = open('/path/to/file', 'rb') # file_type | The Nextflow config file. (optional)\n    other_nextflow_files = [\n        open('/path/to/file', 'rb'),\n    ] # [file_type] |  (optional)\n    metadata_model_file = open('/path/to/file', 'rb') # file_type, none_type | The metadata model json file(contents can be retrieved from the controlplane). (optional)\n    links = Links(\n        links=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n        licenses=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n        homepages=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n        publications=[\n            Link(\n                name=\"name_example\",\n                url=\"url_example\",\n            ),\n        ],\n    ) # Links |  (optional)\n    version_comment = \"version_comment_example\" # str, none_type |  (optional)\n    categories = [\n        \"categories_example\",\n    ] # [str, none_type], none_type |  (optional)\n    html_documentation = \"html_documentation_example\" # str, none_type |  (optional)\n    proprietary = False # bool, none_type | A boolean which indicates if the code of this pipeline is proprietary (optional) if omitted the server will use the default value of False\n    report_configs = PipelineReportConfig(\n        configs=[\n            Config(\n                name=\"name_example\",\n                regex=\"regex_example\",\n                format=\"format_example\",\n            ),\n        ],\n    ) # PipelineReportConfig |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a Nextflow pipeline within a project.\n        api_response = api_instance.create_nextflow_pipeline(project_id, code, description, main_nextflow_file, parameters_xml_file, analysis_storage_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;create_nextflow_pipeline: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a Nextflow pipeline within a project.\n        api_response = api_instance.create_nextflow_pipeline(project_id, code, description, main_nextflow_file, parameters_xml_file, analysis_storage_id, pipeline_language_version_id=pipeline_language_version_id, nextflow_config_file=nextflow_config_file, other_nextflow_files=other_nextflow_files, metadata_model_file=metadata_model_file, links=links, version_comment=version_comment, categories=categories, html_documentation=html_documentation, proprietary=proprietary, report_configs=report_configs)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;create_nextflow_pipeline: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str code str The code of the pipeline description str The description of the pipeline main_nextflow_file file_type The main Nextflow file. parameters_xml_file file_type analysis_storage_id str The id of the storage to use for the pipeline. pipeline_language_version_id str, none_type The id of the Nextflow version to use for the pipeline. [optional] nextflow_config_file file_type The Nextflow config file. [optional] other_nextflow_files [file_type] [optional] metadata_model_file file_type, none_type The metadata model json file(contents can be retrieved from the controlplane). [optional] links Links [optional] version_comment str, none_type [optional] categories [str, none_type], none_type [optional] html_documentation str, none_type [optional] proprietary bool, none_type A boolean which indicates if the code of this pipeline is proprietary [optional] if omitted the server will use the default value of False report_configs PipelineReportConfig [optional]"},{"location":"v2/docs/ProjectPipelineApi/#return-type_4","title":"Return type","text":"<p>ProjectPipeline</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 201 The Nextflow pipeline is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#create_project_pipeline_file","title":"create_project_pipeline_file","text":"<p>PipelineFile create_project_pipeline_file(project_id, pipeline_id, content)</p> <p>Create a file for a pipeline.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.pipeline_file import PipelineFile\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to create a file for\n    content = open('/path/to/file', 'rb') # file_type | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a file for a pipeline.\n        api_response = api_instance.create_project_pipeline_file(project_id, pipeline_id, content)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;create_project_pipeline_file: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to create a file for content file_type"},{"location":"v2/docs/ProjectPipelineApi/#return-type_5","title":"Return type","text":"<p>PipelineFile</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_5","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 201 The pipeline file is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#delete_additional_project_pipeline_file","title":"delete_additional_project_pipeline_file","text":"<p>delete_additional_project_pipeline_file(project_id, pipeline_id, file_id)</p> <p>Delete an additional input form file for a pipeline.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_6","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to delete an additional file for\n    file_id = \"fileId_example\" # str | The ID of the pipeline file\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Delete an additional input form file for a pipeline.\n        api_instance.delete_additional_project_pipeline_file(project_id, pipeline_id, file_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;delete_additional_project_pipeline_file: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to delete an additional file for file_id str The ID of the pipeline file"},{"location":"v2/docs/ProjectPipelineApi/#return-type_6","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_6","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 204 The pipeline file is successfully deleted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#delete_project_pipeline_file","title":"delete_project_pipeline_file","text":"<p>delete_project_pipeline_file(project_id, pipeline_id, file_id)</p> <p>Delete a file for a pipeline.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_7","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to delete a file for\n    file_id = \"fileId_example\" # str | The ID of the pipeline file\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Delete a file for a pipeline.\n        api_instance.delete_project_pipeline_file(project_id, pipeline_id, file_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;delete_project_pipeline_file: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to delete a file for file_id str The ID of the pipeline file"},{"location":"v2/docs/ProjectPipelineApi/#return-type_7","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_7","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 204 The pipeline file is successfully deleted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#download_additional_file_content","title":"download_additional_file_content","text":"<p>file_type download_additional_file_content(project_id, pipeline_id, file_id)</p> <p>Download the contents of an additional input form file.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_8","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to retrieve the additional file for\n    file_id = \"fileId_example\" # str | The ID of the additional file\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Download the contents of an additional input form file.\n        api_response = api_instance.download_additional_file_content(project_id, pipeline_id, file_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;download_additional_file_content: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve the additional file for file_id str The ID of the additional file"},{"location":"v2/docs/ProjectPipelineApi/#return-type_8","title":"Return type","text":"<p>file_type</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_8","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/octet-stream</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 200 The file is successfully downloaded. * Content-Disposition - Contains name of the additional file to be downloaded.  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#download_input_form_file_content","title":"download_input_form_file_content","text":"<p>file_type download_input_form_file_content(project_id, pipeline_id)</p> <p>Download the contents of the input form file.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_9","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to retrieve the input form file for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Download the contents of the input form file.\n        api_response = api_instance.download_input_form_file_content(project_id, pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;download_input_form_file_content: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_9","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve the input form file for"},{"location":"v2/docs/ProjectPipelineApi/#return-type_9","title":"Return type","text":"<p>file_type</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_9","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_9","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/octet-stream</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_9","title":"HTTP response details","text":"Status code Description Response headers 200 The input form file is successfully downloaded. * Content-Disposition - Contains name of the additional file to be downloaded.  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#download_on_render_file_content","title":"download_on_render_file_content","text":"<p>file_type download_on_render_file_content(project_id, pipeline_id)</p> <p>Download the contents of the onRender file.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_10","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to retrieve the onRender file for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Download the contents of the onRender file.\n        api_response = api_instance.download_on_render_file_content(project_id, pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;download_on_render_file_content: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_10","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve the onRender file for"},{"location":"v2/docs/ProjectPipelineApi/#return-type_10","title":"Return type","text":"<p>file_type</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_10","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_10","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/octet-stream</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_10","title":"HTTP response details","text":"Status code Description Response headers 200 The onRender file is successfully downloaded. * Content-Disposition - Contains name of the additional file to be downloaded.  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#download_on_submit_file_content","title":"download_on_submit_file_content","text":"<p>file_type download_on_submit_file_content(project_id, pipeline_id)</p> <p>Download the contents of the onSubmit file.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_11","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to retrieve the onSubmit file for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Download the contents of the onSubmit file.\n        api_response = api_instance.download_on_submit_file_content(project_id, pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;download_on_submit_file_content: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_11","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve the onSubmit file for"},{"location":"v2/docs/ProjectPipelineApi/#return-type_11","title":"Return type","text":"<p>file_type</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_11","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_11","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/octet-stream</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_11","title":"HTTP response details","text":"Status code Description Response headers 200 The onSubmit file is successfully downloaded. * Content-Disposition - Contains name of the additional file to be downloaded.  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#download_project_pipeline_file_content","title":"download_project_pipeline_file_content","text":"<p>file_type download_project_pipeline_file_content(project_id, pipeline_id, file_id)</p> <p>Download the contents of a pipeline file.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_12","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to retrieve files for\n    file_id = \"fileId_example\" # str | The ID of the pipeline file\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Download the contents of a pipeline file.\n        api_response = api_instance.download_project_pipeline_file_content(project_id, pipeline_id, file_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;download_project_pipeline_file_content: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_12","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve files for file_id str The ID of the pipeline file"},{"location":"v2/docs/ProjectPipelineApi/#return-type_12","title":"Return type","text":"<p>file_type</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_12","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_12","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/octet-stream</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_12","title":"HTTP response details","text":"Status code Description Response headers 200 The pipeline file is successfully downloaded. * Content-Disposition - Contains name of the additional file to be downloaded.  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#get_project_pipeline","title":"get_project_pipeline","text":"<p>ProjectPipelineV4 get_project_pipeline(project_id, pipeline_id)</p> <p>Retrieve a project pipeline.</p> <p>Retrieves a project pipeline. This can be a pipeline from a linked bundle or an entitled, unlinked bundle.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_13","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.project_pipeline_v4 import ProjectPipelineV4\nfrom libica.openapi.v2.model.project_pipeline import ProjectPipeline\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project pipeline.\n        api_response = api_instance.get_project_pipeline(project_id, pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;get_project_pipeline: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_13","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve"},{"location":"v2/docs/ProjectPipelineApi/#return-type_13","title":"Return type","text":"<p>ProjectPipelineV4</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_13","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_13","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_13","title":"HTTP response details","text":"Status code Description Response headers 200 The project pipeline is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#get_project_pipeline_additional_files","title":"get_project_pipeline_additional_files","text":"<p>PipelineFileList get_project_pipeline_additional_files(project_id, pipeline_id)</p> <p>Retrieve additional input form files for a project pipeline.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_14","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.pipeline_file_list import PipelineFileList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to retrieve files for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve additional input form files for a project pipeline.\n        api_response = api_instance.get_project_pipeline_additional_files(project_id, pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;get_project_pipeline_additional_files: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_14","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve files for"},{"location":"v2/docs/ProjectPipelineApi/#return-type_14","title":"Return type","text":"<p>PipelineFileList</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_14","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_14","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_14","title":"HTTP response details","text":"Status code Description Response headers 200 The files are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#get_project_pipeline_configuration_parameters","title":"get_project_pipeline_configuration_parameters","text":"<p>PipelineConfigurationParameterList get_project_pipeline_configuration_parameters(project_id, pipeline_id)</p> <p>Retrieve configuration parameters for a project pipeline.</p> <p>The pipeline can originate from a linked bundle.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_15","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.pipeline_configuration_parameter_list import PipelineConfigurationParameterList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to retrieve input parameters for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve configuration parameters for a project pipeline.\n        api_response = api_instance.get_project_pipeline_configuration_parameters(project_id, pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;get_project_pipeline_configuration_parameters: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_15","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve input parameters for"},{"location":"v2/docs/ProjectPipelineApi/#return-type_15","title":"Return type","text":"<p>PipelineConfigurationParameterList</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_15","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_15","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_15","title":"HTTP response details","text":"Status code Description Response headers 200 The configuration parameters are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#get_project_pipeline_files","title":"get_project_pipeline_files","text":"<p>PipelineFileList get_project_pipeline_files(project_id, pipeline_id)</p> <p>Retrieve files for a project pipeline.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_16","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.pipeline_file_list import PipelineFileList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to retrieve files for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve files for a project pipeline.\n        api_response = api_instance.get_project_pipeline_files(project_id, pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;get_project_pipeline_files: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_16","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve files for"},{"location":"v2/docs/ProjectPipelineApi/#return-type_16","title":"Return type","text":"<p>PipelineFileList</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_16","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_16","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_16","title":"HTTP response details","text":"Status code Description Response headers 200 The files are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#get_project_pipeline_html_documentation","title":"get_project_pipeline_html_documentation","text":"<p>PipelineHtmlDocumentation get_project_pipeline_html_documentation(project_id, pipeline_id)</p> <p>Retrieve HTML documentation for a project pipeline.</p> <p>Retrieve HTML documentation for a project pipeline. This can be a pipeline from a linked bundle.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_17","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.pipeline_html_documentation import PipelineHtmlDocumentation\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to retrieve HTML documentation from\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve HTML documentation for a project pipeline.\n        api_response = api_instance.get_project_pipeline_html_documentation(project_id, pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;get_project_pipeline_html_documentation: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_17","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve HTML documentation from"},{"location":"v2/docs/ProjectPipelineApi/#return-type_17","title":"Return type","text":"<p>PipelineHtmlDocumentation</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_17","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_17","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_17","title":"HTTP response details","text":"Status code Description Response headers 200 The HTML documentation is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#get_project_pipeline_input_parameters","title":"get_project_pipeline_input_parameters","text":"<p>InputParameterList get_project_pipeline_input_parameters(project_id, pipeline_id)</p> <p>Retrieve input parameters for a project pipeline.</p> <p>The pipeline can originate from a linked bundle.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_18","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.input_parameter_list import InputParameterList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to retrieve input parameters for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve input parameters for a project pipeline.\n        api_response = api_instance.get_project_pipeline_input_parameters(project_id, pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;get_project_pipeline_input_parameters: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_18","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve input parameters for"},{"location":"v2/docs/ProjectPipelineApi/#return-type_18","title":"Return type","text":"<p>InputParameterList</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_18","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_18","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_18","title":"HTTP response details","text":"Status code Description Response headers 200 The input parameters are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#get_project_pipeline_reference_sets","title":"get_project_pipeline_reference_sets","text":"<p>ReferenceSetList get_project_pipeline_reference_sets(project_id, pipeline_id)</p> <p>Retrieve the reference sets of a project pipeline.</p> <p>Retrieve the reference sets of a project pipeline. This can be a pipeline from a linked bundle.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_19","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.reference_set_list import ReferenceSetList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline to retrieve reference sets for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the reference sets of a project pipeline.\n        api_response = api_instance.get_project_pipeline_reference_sets(project_id, pipeline_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;get_project_pipeline_reference_sets: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_19","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the pipeline to retrieve reference sets for"},{"location":"v2/docs/ProjectPipelineApi/#return-type_19","title":"Return type","text":"<p>ReferenceSetList</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_19","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_19","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_19","title":"HTTP response details","text":"Status code Description Response headers 200 The list of reference sets is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#get_project_pipelines","title":"get_project_pipelines","text":"<p>ProjectPipelineList get_project_pipelines(project_id)</p> <p>Retrieve a list of project pipelines.</p> <p>Lists all pipelines that are available to the project.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_20","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.project_pipeline_list import ProjectPipelineList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | The ID of the project to retrieve pipelines for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of project pipelines.\n        api_response = api_instance.get_project_pipelines(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;get_project_pipelines: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_20","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project to retrieve pipelines for"},{"location":"v2/docs/ProjectPipelineApi/#return-type_20","title":"Return type","text":"<p>ProjectPipelineList</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_20","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_20","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_20","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project pipelines is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#link_pipeline_to_project","title":"link_pipeline_to_project","text":"<p>link_pipeline_to_project(project_id, pipeline_id)</p> <p>Link a pipeline to a project.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_21","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Link a pipeline to a project.\n        api_instance.link_pipeline_to_project(project_id, pipeline_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;link_pipeline_to_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_21","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the pipeline"},{"location":"v2/docs/ProjectPipelineApi/#return-type_21","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_21","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_21","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_21","title":"HTTP response details","text":"Status code Description Response headers 204 The pipeline is successfully linked to the project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#release_project_pipeline","title":"release_project_pipeline","text":"<p>release_project_pipeline(project_id, pipeline_id)</p> <p>Release a pipeline.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_22","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Release a pipeline.\n        api_instance.release_project_pipeline(project_id, pipeline_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;release_project_pipeline: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_22","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the pipeline"},{"location":"v2/docs/ProjectPipelineApi/#return-type_22","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_22","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_22","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_22","title":"HTTP response details","text":"Status code Description Response headers 204 The pipeline is successfully released. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#unlink_pipeline_from_project","title":"unlink_pipeline_from_project","text":"<p>unlink_pipeline_from_project(project_id, pipeline_id)</p> <p>Unlink a pipeline from a project.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_23","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the pipeline\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Unlink a pipeline from a project.\n        api_instance.unlink_pipeline_from_project(project_id, pipeline_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;unlink_pipeline_from_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_23","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the pipeline"},{"location":"v2/docs/ProjectPipelineApi/#return-type_23","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_23","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_23","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_23","title":"HTTP response details","text":"Status code Description Response headers 204 The pipeline is successfully unlinked from the project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#update_additional_file","title":"update_additional_file","text":"<p>update_additional_file(project_id, pipeline_id, file_id, content)</p> <p>Update the contents of an additional input form file.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_24","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to update the additional file for\n    file_id = \"fileId_example\" # str | The ID of the additional file\n    content = open('/path/to/file', 'rb') # file_type | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update the contents of an additional input form file.\n        api_instance.update_additional_file(project_id, pipeline_id, file_id, content)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;update_additional_file: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_24","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to update the additional file for file_id str The ID of the additional file content file_type"},{"location":"v2/docs/ProjectPipelineApi/#return-type_24","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_24","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_24","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_24","title":"HTTP response details","text":"Status code Description Response headers 200 The file is successfully updated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#update_general_attributes_project_pipeline","title":"update_general_attributes_project_pipeline","text":"<p>PipelineV4 update_general_attributes_project_pipeline(project_id, pipeline_id, pipeline_update)</p> <p>Update the general attributes of a project pipeline.</p> <p>Attributes which can be updated: - code - description - languageVersion - proprietary </p>"},{"location":"v2/docs/ProjectPipelineApi/#example_25","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.pipeline_update import PipelineUpdate\nfrom libica.openapi.v2.model.pipeline_v4 import PipelineV4\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to update\n    pipeline_update = PipelineUpdate(\n        code=\"code_example\",\n        description=\"description_example\",\n        language_version=\"language_version_example\",\n        proprietary=True,\n    ) # PipelineUpdate | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update the general attributes of a project pipeline.\n        api_response = api_instance.update_general_attributes_project_pipeline(project_id, pipeline_id, pipeline_update)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;update_general_attributes_project_pipeline: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_25","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to update pipeline_update PipelineUpdate"},{"location":"v2/docs/ProjectPipelineApi/#return-type_25","title":"Return type","text":"<p>PipelineV4</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_25","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_25","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_25","title":"HTTP response details","text":"Status code Description Response headers 200 The pipeline is successfully updated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#update_input_form_file","title":"update_input_form_file","text":"<p>update_input_form_file(project_id, pipeline_id, content)</p> <p>Update the contents of the input form file for a pipeline.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_26","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to update a file for\n    content = open('/path/to/file', 'rb') # file_type | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update the contents of the input form file for a pipeline.\n        api_instance.update_input_form_file(project_id, pipeline_id, content)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;update_input_form_file: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_26","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to update a file for content file_type"},{"location":"v2/docs/ProjectPipelineApi/#return-type_26","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_26","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_26","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_26","title":"HTTP response details","text":"Status code Description Response headers 200 The input  form file is successfully updated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#update_on_render_file","title":"update_on_render_file","text":"<p>update_on_render_file(project_id, pipeline_id, content)</p> <p>Update the contents of the onRender file for a pipeline.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_27","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to update the onRender file for\n    content = open('/path/to/file', 'rb') # file_type | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update the contents of the onRender file for a pipeline.\n        api_instance.update_on_render_file(project_id, pipeline_id, content)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;update_on_render_file: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_27","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to update the onRender file for content file_type"},{"location":"v2/docs/ProjectPipelineApi/#return-type_27","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_27","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_27","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_27","title":"HTTP response details","text":"Status code Description Response headers 200 The onRender file is successfully updated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#update_on_submit_file","title":"update_on_submit_file","text":"<p>update_on_submit_file(project_id, pipeline_id, content)</p> <p>Update the contents of the onSubmit file for a pipeline.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_28","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to update the onSubmit file for\n    content = open('/path/to/file', 'rb') # file_type | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update the contents of the onSubmit file for a pipeline.\n        api_instance.update_on_submit_file(project_id, pipeline_id, content)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;update_on_submit_file: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_28","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to update the onSubmit file for content file_type"},{"location":"v2/docs/ProjectPipelineApi/#return-type_28","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_28","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_28","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_28","title":"HTTP response details","text":"Status code Description Response headers 200 The onSubmit file is successfully updated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineApi/#update_project_pipeline_file","title":"update_project_pipeline_file","text":"<p>update_project_pipeline_file(project_id, pipeline_id, file_id, content)</p> <p>Update the contents of a file for a pipeline.</p>"},{"location":"v2/docs/ProjectPipelineApi/#example_29","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_pipeline_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_pipeline_api.ProjectPipelineApi(api_client)\n    project_id = \"projectId_example\" # str | \n    pipeline_id = \"pipelineId_example\" # str | The ID of the project pipeline to update a file for\n    file_id = \"fileId_example\" # str | The ID of the pipeline file\n    content = open('/path/to/file', 'rb') # file_type | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update the contents of a file for a pipeline.\n        api_instance.update_project_pipeline_file(project_id, pipeline_id, file_id, content)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;update_project_pipeline_file: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectPipelineApi/#parameters_29","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to update a file for file_id str The ID of the pipeline file content file_type"},{"location":"v2/docs/ProjectPipelineApi/#return-type_29","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectPipelineApi/#authorization_29","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectPipelineApi/#http-request-headers_29","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectPipelineApi/#http-response-details_29","title":"HTTP response details","text":"Status code Description Response headers 200 The pipeline file is successfully updated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineList/","title":"ProjectPipelineList","text":""},{"location":"v2/docs/ProjectPipelineList/#properties","title":"Properties","text":"Name Type Description Notes items [ProjectPipeline] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectPipelineV4/","title":"ProjectPipelineV4","text":""},{"location":"v2/docs/ProjectPipelineV4/#properties","title":"Properties","text":"Name Type Description Notes pipeline PipelineV4 project_id str bundle_links BundleList any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectSample/","title":"ProjectSample","text":""},{"location":"v2/docs/ProjectSample/#properties","title":"Properties","text":"Name Type Description Notes sample Sample project_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/","title":"libica.openapi.v2.ProjectSampleApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description add_metadata_model_to_sample POST /api/projects/{projectId}/samples/{sampleId}/metadata/{metadataModelId} Add a metadata model to a sample. complete_project_sample POST /api/projects/{projectId}/samples/{sampleId}:complete Completes the sample after data has been linked to it. create_sample_in_project POST /api/projects/{projectId}/samples Create a new sample in this project deep_delete_sample POST /api/projects/{projectId}/samples/{sampleId}:deleteDeep Delete a sample together with all of its data. delete_and_unlink_sample POST /api/projects/{projectId}/samples/{sampleId}:deleteUnlink Delete a sample and unlink its data. delete_sample_with_input POST /api/projects/{projectId}/samples/{sampleId}:deleteWithInput Delete a sample as well as its input data. get_project_sample GET /api/projects/{projectId}/samples/{sampleId} Retrieve a project sample. get_project_sample_analyses GET /api/projects/{projectId}/samples/{sampleId}/analyses Retrieve the list of analyses. get_project_samples POST /api/projects/{projectId}/samples:search Retrieve project samples. get_projects_for_sample GET /api/projects/{projectId}/samples/{sampleId}/projects Retrieve a list of projects for this sample. get_sample_data_list GET /api/projects/{projectId}/samples/{sampleId}/data Retrieve the list of sample data. get_sample_history GET /api/projects/{projectId}/samples/{sampleId}/history Retrieve sample history. get_sample_metadata_field GET /api/projects/{projectId}/samples/{sampleId}/metadata/field/{fieldId} Retrieve a metadata field. get_sample_metadata_field_count GET /api/projects/{projectId}/samples/{sampleId}/metadata/{fieldId}/fieldCount Retrieves the number of occurrences of a given field. link_data_to_sample POST /api/projects/{projectId}/samples/{sampleId}/data/{dataId} Link data to a sample. link_sample_to_project POST /api/projects/{projectId}/samples/{sampleId} Link a sample to a project. mark_sample_deleted POST /api/projects/{projectId}/samples/{sampleId}:deleteMark Mark a sample deleted. search_project_sample_analyses POST /api/projects/{projectId}/samples/{sampleId}/analyses:search Search analyses for sample. unlink_data_from_sample POST /api/projects/{projectId}/samples/{sampleId}/data/{dataId}:unlink Unlink data from a sample. unlink_sample_from_project POST /api/projects/{projectId}/samples/{sampleId}:unlink Unlink a sample from a project. update_project_sample PUT /api/projects/{projectId}/samples/{sampleId} Update a project sample. update_sample_metadata_fields POST /api/projects/{projectId}/samples/{sampleId}/metadata:updateFields Update metadata fields."},{"location":"v2/docs/ProjectSampleApi/#add_metadata_model_to_sample","title":"add_metadata_model_to_sample","text":"<p>add_metadata_model_to_sample(project_id, sample_id, metadata_model_id)</p> <p>Add a metadata model to a sample.</p>"},{"location":"v2/docs/ProjectSampleApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n    metadata_model_id = \"metadataModelId_example\" # str | The ID of the metadata model\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Add a metadata model to a sample.\n        api_instance.add_metadata_model_to_sample(project_id, sample_id, metadata_model_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;add_metadata_model_to_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample metadata_model_id str The ID of the metadata model"},{"location":"v2/docs/ProjectSampleApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The metadata model is successfully added to the sample. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#complete_project_sample","title":"complete_project_sample","text":"<p>complete_project_sample(project_id, sample_id)</p> <p>Completes the sample after data has been linked to it.</p> <p>Completes the sample after data has been linked to it. The sample status will be set to 'Available' and a sample completed event will be triggered as well.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Completes the sample after data has been linked to it.\n        api_instance.complete_project_sample(project_id, sample_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;complete_project_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str"},{"location":"v2/docs/ProjectSampleApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The sample is successfully completed. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#create_sample_in_project","title":"create_sample_in_project","text":"<p>ProjectSample create_sample_in_project(project_id, create_sample)</p> <p>Create a new sample in this project</p>"},{"location":"v2/docs/ProjectSampleApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.create_sample import CreateSample\nfrom libica.openapi.v2.model.project_sample import ProjectSample\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_sample = CreateSample(\n        name=\"name_example\",\n        description=\"description_example\",\n        tags=OptionalSampleTags(\n            technical_tags=[\n                \"technical_tags_example\",\n            ],\n            user_tags=[\n                \"user_tags_example\",\n            ],\n            connector_tags=[\n                \"connector_tags_example\",\n            ],\n            run_in_tags=[\n                \"run_in_tags_example\",\n            ],\n        ),\n    ) # CreateSample | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a new sample in this project\n        api_response = api_instance.create_sample_in_project(project_id, create_sample)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;create_sample_in_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str create_sample CreateSample"},{"location":"v2/docs/ProjectSampleApi/#return-type_2","title":"Return type","text":"<p>ProjectSample</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 201 The sample is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#deep_delete_sample","title":"deep_delete_sample","text":"<p>deep_delete_sample(project_id, sample_id)</p> <p>Delete a sample together with all of its data.</p> <p>Endpoint deleting a sample together with all of its data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Delete a sample together with all of its data.\n        api_instance.deep_delete_sample(project_id, sample_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;deep_delete_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample"},{"location":"v2/docs/ProjectSampleApi/#return-type_3","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 204 The sample and all of its data are successfully deleted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#delete_and_unlink_sample","title":"delete_and_unlink_sample","text":"<p>delete_and_unlink_sample(project_id, sample_id)</p> <p>Delete a sample and unlink its data.</p> <p>Endpoint for deleting a sample while unlinking its data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Delete a sample and unlink its data.\n        api_instance.delete_and_unlink_sample(project_id, sample_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;delete_and_unlink_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample"},{"location":"v2/docs/ProjectSampleApi/#return-type_4","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 204 The sample is successfully deleted and the its data is successfully unlinked. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#delete_sample_with_input","title":"delete_sample_with_input","text":"<p>delete_sample_with_input(project_id, sample_id)</p> <p>Delete a sample as well as its input data.</p> <p>Endpoint for deleting a sample as well as its input data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Delete a sample as well as its input data.\n        api_instance.delete_sample_with_input(project_id, sample_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;delete_sample_with_input: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample"},{"location":"v2/docs/ProjectSampleApi/#return-type_5","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_5","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 204 The sample and its input data are successfully deleted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#get_project_sample","title":"get_project_sample","text":"<p>ProjectSample get_project_sample(project_id, sample_id)</p> <p>Retrieve a project sample.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_6","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.project_sample import ProjectSample\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a project sample.\n        api_response = api_instance.get_project_sample(project_id, sample_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_project_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample"},{"location":"v2/docs/ProjectSampleApi/#return-type_6","title":"Return type","text":"<p>ProjectSample</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_6","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 200 The project sample is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#get_project_sample_analyses","title":"get_project_sample_analyses","text":"<p>AnalysisPagedListV3 get_project_sample_analyses(project_id, sample_id)</p> <p>Retrieve the list of analyses.</p> <p>This endpoint only returns V3 items. Use the search endpoint to get V4 items.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_7","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.analysis_paged_list_v3 import AnalysisPagedListV3\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n    reference = \"reference_example\" # str | The reference to filter on. (optional)\n    userreference = \"userreference_example\" # str | The user-reference to filter on. (optional)\n    status = \"status_example\" # str | The status to filter on. (optional)\n    usertag = \"usertag_example\" # str | The user-tags to filter on. (optional)\n    technicaltag = \"technicaltag_example\" # str | The technical-tags to filter on. (optional)\n    referencetag = \"referencetag_example\" # str | The reference-data-tags to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the list of analyses.\n        api_response = api_instance.get_project_sample_analyses(project_id, sample_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_project_sample_analyses: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve the list of analyses.\n        api_response = api_instance.get_project_sample_analyses(project_id, sample_id, reference=reference, userreference=userreference, status=status, usertag=usertag, technicaltag=technicaltag, referencetag=referencetag, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_project_sample_analyses: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample reference str The reference to filter on. [optional] userreference str The user-reference to filter on. [optional] status str The status to filter on. [optional] usertag str The user-tags to filter on. [optional] technicaltag str The technical-tags to filter on. [optional] referencetag str The reference-data-tags to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary [optional]"},{"location":"v2/docs/ProjectSampleApi/#return-type_7","title":"Return type","text":"<p>AnalysisPagedListV3</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_7","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project analyses is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#get_project_samples","title":"get_project_samples","text":"<p>ProjectSamplePagedList get_project_samples(project_id, find_project_samples)</p> <p>Retrieve project samples.</p> <p>Endpoint for retrieving project samples. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_8","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.find_project_samples import FindProjectSamples\nfrom libica.openapi.v2.model.project_sample_paged_list import ProjectSamplePagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    find_project_samples = FindProjectSamples(\n        conditions=[\n            FindSampleCondition(\n                metadata_field=FieldId(\n                    id=\"id_example\",\n                ),\n                field=\"field_example\",\n                match_mode=\"EXACT\",\n                values=[\n                    \"values_example\",\n                ],\n            ),\n        ],\n        date_conditions=[\n            FindSampleDateCondition(\n                metadata_field=FieldId(\n                    id=\"id_example\",\n                ),\n                field=\"field_example\",\n                before_date=\"before_date_example\",\n                after_date=\"after_date_example\",\n            ),\n        ],\n        number_conditions=[\n            FindSampleNumberCondition(\n                metadata_field=FieldId(\n                    id=\"id_example\",\n                ),\n                field=\"field_example\",\n                lower_bound=\"lower_bound_example\",\n                upper_bound=\"upper_bound_example\",\n            ),\n        ],\n        boolean_conditions=[\n            FindSampleBooleanCondition(\n                metadata_field=Field(\n                    id=\"id_example\",\n                    name=\"name_example\",\n                    description=\"description_example\",\n                    field_type=\"TEXT\",\n                    required=True,\n                    multivalued=True,\n                    filled_by_pipeline=True,\n                    fields=[\n                        Field(),\n                    ],\n                    enumeration_values=[\n                        \"enumeration_values_example\",\n                    ],\n                ),\n                field=\"field_example\",\n                value=\"value_example\",\n            ),\n        ],\n        full_text_search_string=\"full_text_search_string_example\",\n        include_deleted=False,\n        user_tags=[\n            \"user_tags_example\",\n        ],\n        user_tag_match_mode=\"EXACT\",\n        run_input_tags=[\n            \"run_input_tags_example\",\n        ],\n        run_input_tag_match_mode=\"EXACT\",\n        connector_tags=[\n            \"connector_tags_example\",\n        ],\n        connector_tag_match_mode=\"EXACT\",\n        tech_tags=[\n            \"tech_tags_example\",\n        ],\n        tech_tag_match_mode=\"EXACT\",\n        instrument_run_ids=[\n            \"instrument_run_ids_example\",\n        ],\n    ) # FindProjectSamples | \n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve project samples.\n        api_response = api_instance.get_project_samples(project_id, find_project_samples)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_project_samples: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve project samples.\n        api_response = api_instance.get_project_samples(project_id, find_project_samples, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_project_samples: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes project_id str find_project_samples FindProjectSamples page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status [optional]"},{"location":"v2/docs/ProjectSampleApi/#return-type_8","title":"Return type","text":"<p>ProjectSamplePagedList</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_8","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 200 The project samples are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#get_projects_for_sample","title":"get_projects_for_sample","text":"<p>ProjectList get_projects_for_sample(project_id, sample_id)</p> <p>Retrieve a list of projects for this sample.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_9","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.project_list import ProjectList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of projects for this sample.\n        api_response = api_instance.get_projects_for_sample(project_id, sample_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_projects_for_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_9","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample"},{"location":"v2/docs/ProjectSampleApi/#return-type_9","title":"Return type","text":"<p>ProjectList</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_9","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_9","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_9","title":"HTTP response details","text":"Status code Description Response headers 200 The list of projects is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#get_sample_data_list","title":"get_sample_data_list","text":"<p>DataPagedList get_sample_data_list(project_id, sample_id)</p> <p>Retrieve the list of sample data.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_10","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.data_paged_list import DataPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample to retrieve data for\n    full_text = \"fullText_example\" # str | To search through multiple fields of data. (optional)\n    id = [\n        \"id_example\",\n    ] # [str] | The ids to filter on. This will always match exact. (optional)\n    filename = [\n        \"filename_example\",\n    ] # [str] | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional)\n    filename_match_mode = \"EXACT\" # str | How the filenames are filtered.  (optional)\n    file_path = [\n        \"filePath_example\",\n    ] # [str] | The paths of the files to filter on. (optional)\n    file_path_match_mode = \"STARTS_WITH_CASE_INSENSITIVE\" # str | How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). (optional) if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\"\n    status = [\n        \"PARTIAL\",\n    ] # [str] | The statuses to filter on. (optional)\n    format_id = [\n        \"formatId_example\",\n    ] # [str] | The IDs of the formats to filter on. (optional)\n    format_code = [\n        \"formatCode_example\",\n    ] # [str] | The codes of the formats to filter on. (optional)\n    type = \"FILE\" # str | The type to filter on. (optional)\n    parent_folder_id = [\n        \"parentFolderId_example\",\n    ] # [str] | The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. (optional)\n    parent_folder_path = \"parentFolderPath_example\" # str | The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files. (optional)\n    creation_date_after = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    creation_date_before = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_after = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_before = dateutil_parser('1970-01-01T00:00:00.00Z') # datetime | The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    user_tag = [\n        \"userTag_example\",\n    ] # [str] | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional)\n    user_tag_match_mode = \"EXACT\" # str | How the usertags are filtered.  (optional)\n    run_input_tag = [\n        \"runInputTag_example\",\n    ] # [str] | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_input_tag_match_mode = \"EXACT\" # str | How the runInputTags are filtered.  (optional)\n    run_output_tag = [\n        \"runOutputTag_example\",\n    ] # [str] | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_output_tag_match_mode = \"EXACT\" # str | How the runOutputTags are filtered.  (optional)\n    connector_tag = [\n        \"connectorTag_example\",\n    ] # [str] | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional)\n    connector_tag_match_mode = \"EXACT\" # str | How the connectorTags are filtered.  (optional)\n    technical_tag = [\n        \"technicalTag_example\",\n    ] # [str] | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional)\n    technical_tag_match_mode = \"EXACT\" # str | How the technicalTags are filtered.  (optional)\n    not_in_run = True # bool | When set to true, the data will be filtered on data which is not used in a run. (optional)\n    instrument_run_id = [\n        \"instrumentRunId_example\",\n    ] # [str] | The instrument run IDs of the sequencing runs to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the list of sample data.\n        api_response = api_instance.get_sample_data_list(project_id, sample_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_sample_data_list: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve the list of sample data.\n        api_response = api_instance.get_sample_data_list(project_id, sample_id, full_text=full_text, id=id, filename=filename, filename_match_mode=filename_match_mode, file_path=file_path, file_path_match_mode=file_path_match_mode, status=status, format_id=format_id, format_code=format_code, type=type, parent_folder_id=parent_folder_id, parent_folder_path=parent_folder_path, creation_date_after=creation_date_after, creation_date_before=creation_date_before, status_date_after=status_date_after, status_date_before=status_date_before, user_tag=user_tag, user_tag_match_mode=user_tag_match_mode, run_input_tag=run_input_tag, run_input_tag_match_mode=run_input_tag_match_mode, run_output_tag=run_output_tag, run_output_tag_match_mode=run_output_tag_match_mode, connector_tag=connector_tag, connector_tag_match_mode=connector_tag_match_mode, technical_tag=technical_tag, technical_tag_match_mode=technical_tag_match_mode, not_in_run=not_in_run, instrument_run_id=instrument_run_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_sample_data_list: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_10","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample to retrieve data for full_text str To search through multiple fields of data. [optional] id [str] The ids to filter on. This will always match exact. [optional] filename [str] The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] file_path [str] The paths of the files to filter on. [optional] file_path_match_mode str How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). [optional] if omitted the server will use the default value of \"STARTS_WITH_CASE_INSENSITIVE\" status [str] The statuses to filter on. [optional] format_id [str] The IDs of the formats to filter on. [optional] format_code [str] The codes of the formats to filter on. [optional] type str The type to filter on. [optional] parent_folder_id [str] The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. [optional] parent_folder_path str The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files. [optional] creation_date_after datetime The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before datetime The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after datetime The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before datetime The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag [str] The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag [str] The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag [str] The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag [str] The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag [str] The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run bool When set to true, the data will be filtered on data which is not used in a run. [optional] instrument_run_id [str] The instrument run IDs of the sequencing runs to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt [optional]"},{"location":"v2/docs/ProjectSampleApi/#return-type_10","title":"Return type","text":"<p>DataPagedList</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_10","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_10","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_10","title":"HTTP response details","text":"Status code Description Response headers 200 The list of sample data is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#get_sample_history","title":"get_sample_history","text":"<p>SampleHistoryList get_sample_history(project_id, sample_id)</p> <p>Retrieve sample history.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_11","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.sample_history_list import SampleHistoryList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve sample history.\n        api_response = api_instance.get_sample_history(project_id, sample_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_sample_history: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_11","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample"},{"location":"v2/docs/ProjectSampleApi/#return-type_11","title":"Return type","text":"<p>SampleHistoryList</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_11","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_11","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_11","title":"HTTP response details","text":"Status code Description Response headers 200 The sample history is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#get_sample_metadata_field","title":"get_sample_metadata_field","text":"<p>Field get_sample_metadata_field(project_id, sample_id, field_id)</p> <p>Retrieve a metadata field.</p> <p>Returns a list of values for the field with identifier fieldId belonging to the sample with identifier sampleId. If the field is a group field that can occur more than once or belongs to a group field that can occur more than once the return value will have one entry in the list for each occurrence. If not the return value will be a single value list</p>"},{"location":"v2/docs/ProjectSampleApi/#example_12","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.field import Field\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n    field_id = \"fieldId_example\" # str | The ID of the field\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a metadata field.\n        api_response = api_instance.get_sample_metadata_field(project_id, sample_id, field_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_sample_metadata_field: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_12","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample field_id str The ID of the field"},{"location":"v2/docs/ProjectSampleApi/#return-type_12","title":"Return type","text":"<p>Field</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_12","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_12","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_12","title":"HTTP response details","text":"Status code Description Response headers 200 The metadata field is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#get_sample_metadata_field_count","title":"get_sample_metadata_field_count","text":"<p>Field get_sample_metadata_field_count(project_id, sample_id, field_id)</p> <p>Retrieves the number of occurrences of a given field.</p> <p>Returns a list of values for the field with identifier fieldId belonging to the sample with identifier sampleId. If the field is a group field that can occur more than once or belongs to a group field that can occur more than once the return value will have one entry in the list for each occurrence. If not the return value will be a single value list</p>"},{"location":"v2/docs/ProjectSampleApi/#example_13","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.field import Field\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n    field_id = \"fieldId_example\" # str | The ID of the field\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieves the number of occurrences of a given field.\n        api_response = api_instance.get_sample_metadata_field_count(project_id, sample_id, field_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_sample_metadata_field_count: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_13","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample field_id str The ID of the field"},{"location":"v2/docs/ProjectSampleApi/#return-type_13","title":"Return type","text":"<p>Field</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_13","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_13","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_13","title":"HTTP response details","text":"Status code Description Response headers 200 The number of occurrences is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#link_data_to_sample","title":"link_data_to_sample","text":"<p>link_data_to_sample(project_id, sample_id, data_id)</p> <p>Link data to a sample.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_14","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n    data_id = \"dataId_example\" # str | The ID of the data to link\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Link data to a sample.\n        api_instance.link_data_to_sample(project_id, sample_id, data_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;link_data_to_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_14","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample data_id str The ID of the data to link"},{"location":"v2/docs/ProjectSampleApi/#return-type_14","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_14","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_14","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_14","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully linked to the sample. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#link_sample_to_project","title":"link_sample_to_project","text":"<p>ProjectSample link_sample_to_project(project_id, sample_id)</p> <p>Link a sample to a project.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_15","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.project_sample import ProjectSample\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Link a sample to a project.\n        api_response = api_instance.link_sample_to_project(project_id, sample_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;link_sample_to_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_15","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str"},{"location":"v2/docs/ProjectSampleApi/#return-type_15","title":"Return type","text":"<p>ProjectSample</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_15","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_15","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_15","title":"HTTP response details","text":"Status code Description Response headers 201 The sample is successfully linked to the project. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#mark_sample_deleted","title":"mark_sample_deleted","text":"<p>mark_sample_deleted(project_id, sample_id)</p> <p>Mark a sample deleted.</p> <p>Endpoint for marking a sample as deleted.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_16","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Mark a sample deleted.\n        api_instance.mark_sample_deleted(project_id, sample_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;mark_sample_deleted: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_16","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample"},{"location":"v2/docs/ProjectSampleApi/#return-type_16","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_16","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_16","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_16","title":"HTTP response details","text":"Status code Description Response headers 204 The sample is successfully marked as deleted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#search_project_sample_analyses","title":"search_project_sample_analyses","text":"<p>AnalysisPagedListV4 search_project_sample_analyses(project_id, sample_id)</p> <p>Search analyses for sample.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_17","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.analysis_query_parameters import AnalysisQueryParameters\nfrom libica.openapi.v2.model.analysis_paged_list_v4 import AnalysisPagedListV4\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary  (optional)\n    analysis_query_parameters = AnalysisQueryParameters(\n        reference=\"reference_example\",\n        user_reference=\"user_reference_example\",\n        status=[\n            \"SUCCEEDED\",\n        ],\n        user_tags=[\n            \"user_tags_example\",\n        ],\n        technical_tags=[\n            \"technical_tags_example\",\n        ],\n        reference_tags=[\n            \"reference_tags_example\",\n        ],\n    ) # AnalysisQueryParameters |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Search analyses for sample.\n        api_response = api_instance.search_project_sample_analyses(project_id, sample_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;search_project_sample_analyses: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Search analyses for sample.\n        api_response = api_instance.search_project_sample_analyses(project_id, sample_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort, analysis_query_parameters=analysis_query_parameters)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;search_project_sample_analyses: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_17","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary [optional] analysis_query_parameters AnalysisQueryParameters [optional]"},{"location":"v2/docs/ProjectSampleApi/#return-type_17","title":"Return type","text":"<p>AnalysisPagedListV4</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_17","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_17","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_17","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project analyses is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#unlink_data_from_sample","title":"unlink_data_from_sample","text":"<p>unlink_data_from_sample(project_id, sample_id, data_id)</p> <p>Unlink data from a sample.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_18","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | The ID of the sample\n    data_id = \"dataId_example\" # str | The ID of the data to unlink\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Unlink data from a sample.\n        api_instance.unlink_data_from_sample(project_id, sample_id, data_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;unlink_data_from_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_18","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample data_id str The ID of the data to unlink"},{"location":"v2/docs/ProjectSampleApi/#return-type_18","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_18","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_18","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_18","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully unlinked from the sample. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#unlink_sample_from_project","title":"unlink_sample_from_project","text":"<p>unlink_sample_from_project(project_id, sample_id)</p> <p>Unlink a sample from a project.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_19","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Unlink a sample from a project.\n        api_instance.unlink_sample_from_project(project_id, sample_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;unlink_sample_from_project: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_19","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str"},{"location":"v2/docs/ProjectSampleApi/#return-type_19","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_19","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_19","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_19","title":"HTTP response details","text":"Status code Description Response headers 204 The sample is successfully unlinked from the project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#update_project_sample","title":"update_project_sample","text":"<p>ProjectSample update_project_sample(project_id, sample_id, project_sample)</p> <p>Update a project sample.</p> <p>Fields which can be updated: - sample.name - sample.description - sample.status - sample.tags</p>"},{"location":"v2/docs/ProjectSampleApi/#example_20","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.project_sample import ProjectSample\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | \n    project_sample = ProjectSample(\n        sample=Sample(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            name=\"name_example\",\n            description=\"description_example\",\n            tags=SampleTag(\n                technical_tags=[\n                    \"technical_tags_example\",\n                ],\n                user_tags=[\n                    \"user_tags_example\",\n                ],\n                connector_tags=[\n                    \"connector_tags_example\",\n                ],\n                run_in_tags=[\n                    \"run_in_tags_example\",\n                ],\n            ),\n            region=Region(\n                id=\"id_example\",\n                time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                owner_id=\"owner_id_example\",\n                tenant_id=\"tenant_id_example\",\n                tenant_name=\"tenant_name_example\",\n                code=\"code_example\",\n                country=Country(\n                    id=\"id_example\",\n                    time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n                    owner_id=\"owner_id_example\",\n                    tenant_id=\"tenant_id_example\",\n                    tenant_name=\"tenant_name_example\",\n                    code=\"code_example\",\n                    name=\"name_example\",\n                    region=\"region_example\",\n                ),\n                city_name=\"city_name_example\",\n            ),\n            application=ApplicationV4(\n                id=\"id_example\",\n                name=\"name_example\",\n            ),\n            status=\"DELETED\",\n            metadata_valid=True,\n            metadata=[\n                MetadataField(\n                    id=\"id_example\",\n                    index=1,\n                    name=\"name_example\",\n                    field_type=\"TEXT\",\n                    values=[\n                        \"values_example\",\n                    ],\n                    group_values=[\n                        MetadataField(),\n                    ],\n                ),\n            ],\n            sequencing_runs=[\n                SequencingRun(\n                    id=\"id_example\",\n                    instrument_run_id=\"instrument_run_id_example\",\n                    name=\"name_example\",\n                ),\n            ],\n        ),\n        project_id=\"project_id_example\",\n    ) # ProjectSample | \n    if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update a project sample.\n        api_response = api_instance.update_project_sample(project_id, sample_id, project_sample)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;update_project_sample: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update a project sample.\n        api_response = api_instance.update_project_sample(project_id, sample_id, project_sample, if_match=if_match)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;update_project_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_20","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str project_sample ProjectSample if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional]"},{"location":"v2/docs/ProjectSampleApi/#return-type_20","title":"Return type","text":"<p>ProjectSample</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_20","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_20","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_20","title":"HTTP response details","text":"Status code Description Response headers 200 The sample is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleApi/#update_sample_metadata_fields","title":"update_sample_metadata_fields","text":"<p>Sample update_sample_metadata_fields(project_id, sample_id, update_metadata)</p> <p>Update metadata fields.</p> <p>Endpoint for updating metadata fields.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/ProjectSampleApi/#example_21","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_api\nfrom libica.openapi.v2.model.update_metadata import UpdateMetadata\nfrom libica.openapi.v2.model.sample import Sample\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_api.ProjectSampleApi(api_client)\n    project_id = \"projectId_example\" # str | \n    sample_id = \"sampleId_example\" # str | \n    update_metadata = UpdateMetadata(\n        update_single_metadata_fields=[\n            UpdateSingleMetadataField(\n                field_id=FieldId(\n                    id=\"id_example\",\n                ),\n                field_name=\"field_name_example\",\n                values=[\n                    \"values_example\",\n                ],\n            ),\n        ],\n        update_metadata_field_groups=[\n            UpdateMetadataFieldGroup(\n                field_id=FieldId(\n                    id=\"id_example\",\n                ),\n                field_name=\"field_name_example\",\n                index=1,\n                update_single_metadata_fields=[\n                    UpdateSingleMetadataField(\n                        field_id=FieldId(\n                            id=\"id_example\",\n                        ),\n                        field_name=\"field_name_example\",\n                        values=[\n                            \"values_example\",\n                        ],\n                    ),\n                ],\n            ),\n        ],\n    ) # UpdateMetadata | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update metadata fields.\n        api_response = api_instance.update_sample_metadata_fields(project_id, sample_id, update_metadata)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;update_sample_metadata_fields: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleApi/#parameters_21","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str update_metadata UpdateMetadata"},{"location":"v2/docs/ProjectSampleApi/#return-type_21","title":"Return type","text":"<p>Sample</p>"},{"location":"v2/docs/ProjectSampleApi/#authorization_21","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleApi/#http-request-headers_21","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleApi/#http-response-details_21","title":"HTTP response details","text":"Status code Description Response headers 204 The metadata is successfully updated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleBatchApi/","title":"libica.openapi.v2.ProjectSampleBatchApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_sample_creation_batch POST /api/projects/{projectId}/sampleCreationBatch Create a sample creation batch. get_sample_creation_batch GET /api/projects/{projectId}/sampleCreationBatch/{batchId} Retrieve a sample creation batch. get_sample_creation_batch_item GET /api/projects/{projectId}/sampleCreationBatch/{batchId}/items/{itemId} Retrieve a sample creation batch item. get_sample_creation_batch_items GET /api/projects/{projectId}/sampleCreationBatch/{batchId}/items Retrieve a list of sample creation batch items."},{"location":"v2/docs/ProjectSampleBatchApi/#create_sample_creation_batch","title":"create_sample_creation_batch","text":"<p>SampleCreationBatch create_sample_creation_batch(project_id, create_sample_creation_batch)</p> <p>Create a sample creation batch.</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_batch_api\nfrom libica.openapi.v2.model.create_sample_creation_batch import CreateSampleCreationBatch\nfrom libica.openapi.v2.model.sample_creation_batch import SampleCreationBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_batch_api.ProjectSampleBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    create_sample_creation_batch = CreateSampleCreationBatch(\n        items=[\n            CreateSampleCreationBatchSampleItem(\n                sample_to_create=CreateSample(\n                    name=\"name_example\",\n                    description=\"description_example\",\n                    tags=OptionalSampleTags(\n                        technical_tags=[\n                            \"technical_tags_example\",\n                        ],\n                        user_tags=[\n                            \"user_tags_example\",\n                        ],\n                        connector_tags=[\n                            \"connector_tags_example\",\n                        ],\n                        run_in_tags=[\n                            \"run_in_tags_example\",\n                        ],\n                    ),\n                ),\n                data_to_link=[\n                    CreateSampleCreationBatchDataItem(\n                        data_id=\"data_id_example\",\n                    ),\n                ],\n                complete_sample=True,\n            ),\n        ],\n    ) # CreateSampleCreationBatch | \n    idempotency_key = \"Idempotency-Key_example\" # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a sample creation batch.\n        api_response = api_instance.create_sample_creation_batch(project_id, create_sample_creation_batch)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleBatchApi-&gt;create_sample_creation_batch: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Create a sample creation batch.\n        api_response = api_instance.create_sample_creation_batch(project_id, create_sample_creation_batch, idempotency_key=idempotency_key)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleBatchApi-&gt;create_sample_creation_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleBatchApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str create_sample_creation_batch CreateSampleCreationBatch idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v2/docs/ProjectSampleBatchApi/#return-type","title":"Return type","text":"<p>SampleCreationBatch</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/x-www-form-urlencoded, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleBatchApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The sample creation batch is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#get_sample_creation_batch","title":"get_sample_creation_batch","text":"<p>SampleCreationBatch get_sample_creation_batch(project_id, batch_id)</p> <p>Retrieve a sample creation batch.</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_batch_api\nfrom libica.openapi.v2.model.sample_creation_batch import SampleCreationBatch\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_batch_api.ProjectSampleBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | The ID of the sample creation batch\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a sample creation batch.\n        api_response = api_instance.get_sample_creation_batch(project_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleBatchApi-&gt;get_sample_creation_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleBatchApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str The ID of the sample creation batch"},{"location":"v2/docs/ProjectSampleBatchApi/#return-type_1","title":"Return type","text":"<p>SampleCreationBatch</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleBatchApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The sample creation batch is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#get_sample_creation_batch_item","title":"get_sample_creation_batch_item","text":"<p>SampleCreationBatchSampleItem get_sample_creation_batch_item(project_id, batch_id, item_id)</p> <p>Retrieve a sample creation batch item.</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_batch_api\nfrom libica.openapi.v2.model.sample_creation_batch_sample_item import SampleCreationBatchSampleItem\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_batch_api.ProjectSampleBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | The ID of the sample creation batch\n    item_id = \"itemId_example\" # str | The ID of the sample creation batch item\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a sample creation batch item.\n        api_response = api_instance.get_sample_creation_batch_item(project_id, batch_id, item_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleBatchApi-&gt;get_sample_creation_batch_item: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleBatchApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str The ID of the sample creation batch item_id str The ID of the sample creation batch item"},{"location":"v2/docs/ProjectSampleBatchApi/#return-type_2","title":"Return type","text":"<p>SampleCreationBatchSampleItem</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleBatchApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The sample creation batch item is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#get_sample_creation_batch_items","title":"get_sample_creation_batch_items","text":"<p>SampleCreationBatchItemPagedList get_sample_creation_batch_items(project_id, batch_id)</p> <p>Retrieve a list of sample creation batch items.</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_sample_batch_api\nfrom libica.openapi.v2.model.sample_creation_batch_item_paged_list import SampleCreationBatchItemPagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_sample_batch_api.ProjectSampleBatchApi(api_client)\n    project_id = \"projectId_example\" # str | \n    batch_id = \"batchId_example\" # str | The ID of the sample creation batch\n    status = [\n        \"INITIALIZED\",\n    ] # [str] | The statuses to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of sample creation batch items.\n        api_response = api_instance.get_sample_creation_batch_items(project_id, batch_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleBatchApi-&gt;get_sample_creation_batch_items: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of sample creation batch items.\n        api_response = api_instance.get_sample_creation_batch_items(project_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectSampleBatchApi-&gt;get_sample_creation_batch_items: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectSampleBatchApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str The ID of the sample creation batch status [str] The statuses to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional]"},{"location":"v2/docs/ProjectSampleBatchApi/#return-type_3","title":"Return type","text":"<p>SampleCreationBatchItemPagedList</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectSampleBatchApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectSampleBatchApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of sample creation batch items is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectSamplePagedList/","title":"ProjectSamplePagedList","text":""},{"location":"v2/docs/ProjectSamplePagedList/#properties","title":"Properties","text":"Name Type Description Notes items [ProjectSample] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectTag/","title":"ProjectTag","text":""},{"location":"v2/docs/ProjectTag/#properties","title":"Properties","text":"Name Type Description Notes technical_tags [str] user_tags [str] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ProjectWorkflowSessionApi/","title":"libica.openapi.v2.ProjectWorkflowSessionApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_workflow_session_configurations GET /api/projects/{projectId}/workflowSessions/{workflowSessionId}/configurations Retrieve the configurations of a workflow session. get_workflow_session_inputs GET /api/projects/{projectId}/workflowSessions/{workflowSessionId}/inputs Retrieve the inputs of a workflow session. get_workflow_sessions GET /api/projects/{projectId}/workflowSessions Retrieve the list of workflow sessions. search_orchestrated_analyses POST /api/projects/{projectId}/workflowSessions/{workflowSessionId}/analyses:search Search analyses orchestrated by the workflow session. search_workflow_sessions POST /api/projects/{projectId}/workflowSessions:search Search workflow sessions."},{"location":"v2/docs/ProjectWorkflowSessionApi/#get_workflow_session_configurations","title":"get_workflow_session_configurations","text":"<p>WorkflowSessionConfigurationList get_workflow_session_configurations(project_id, workflow_session_id)</p> <p>Retrieve the configurations of a workflow session.</p>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_workflow_session_api\nfrom libica.openapi.v2.model.workflow_session_configuration_list import WorkflowSessionConfigurationList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_workflow_session_api.ProjectWorkflowSessionApi(api_client)\n    project_id = \"projectId_example\" # str | \n    workflow_session_id = \"workflowSessionId_example\" # str | The ID of the workflow session to retrieve the configuration for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the configurations of a workflow session.\n        api_response = api_instance.get_workflow_session_configurations(project_id, workflow_session_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectWorkflowSessionApi-&gt;get_workflow_session_configurations: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str workflow_session_id str The ID of the workflow session to retrieve the configuration for"},{"location":"v2/docs/ProjectWorkflowSessionApi/#return-type","title":"Return type","text":"<p>WorkflowSessionConfigurationList</p>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The configurations of the workflow session are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#get_workflow_session_inputs","title":"get_workflow_session_inputs","text":"<p>WorkflowSessionInputList get_workflow_session_inputs(project_id, workflow_session_id)</p> <p>Retrieve the inputs of a workflow session.</p>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_workflow_session_api\nfrom libica.openapi.v2.model.workflow_session_input_list import WorkflowSessionInputList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_workflow_session_api.ProjectWorkflowSessionApi(api_client)\n    project_id = \"projectId_example\" # str | \n    workflow_session_id = \"workflowSessionId_example\" # str | The ID of the workflow session to retrieve the inputs for\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the inputs of a workflow session.\n        api_response = api_instance.get_workflow_session_inputs(project_id, workflow_session_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectWorkflowSessionApi-&gt;get_workflow_session_inputs: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str workflow_session_id str The ID of the workflow session to retrieve the inputs for"},{"location":"v2/docs/ProjectWorkflowSessionApi/#return-type_1","title":"Return type","text":"<p>WorkflowSessionInputList</p>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The inputs of the workflow session are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#get_workflow_sessions","title":"get_workflow_sessions","text":"<p>WorkflowSessionPagedListV3 get_workflow_sessions(project_id)</p> <p>Retrieve the list of workflow sessions.</p> <p>This endpoint only returns V3 items. Use the search endpoint to get V4 items.</p>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_workflow_session_api\nfrom libica.openapi.v2.model.workflow_session_paged_list_v3 import WorkflowSessionPagedListV3\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_workflow_session_api.ProjectWorkflowSessionApi(api_client)\n    project_id = \"projectId_example\" # str | \n    reference = \"reference_example\" # str | The reference to filter on. (optional)\n    userreference = \"userreference_example\" # str | The user-reference to filter on. (optional)\n    status = \"status_example\" # str | The status to filter on. (optional)\n    usertag = \"usertag_example\" # str | The user-tags to filter on. (optional)\n    technicaltag = \"technicaltag_example\" # str | The technical-tags to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - workflow  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve the list of workflow sessions.\n        api_response = api_instance.get_workflow_sessions(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectWorkflowSessionApi-&gt;get_workflow_sessions: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve the list of workflow sessions.\n        api_response = api_instance.get_workflow_sessions(project_id, reference=reference, userreference=userreference, status=status, usertag=usertag, technicaltag=technicaltag, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectWorkflowSessionApi-&gt;get_workflow_sessions: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str reference str The reference to filter on. [optional] userreference str The user-reference to filter on. [optional] status str The status to filter on. [optional] usertag str The user-tags to filter on. [optional] technicaltag str The technical-tags to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - workflow [optional]"},{"location":"v2/docs/ProjectWorkflowSessionApi/#return-type_2","title":"Return type","text":"<p>WorkflowSessionPagedListV3</p>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project workflow sessions is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#search_orchestrated_analyses","title":"search_orchestrated_analyses","text":"<p>WorkflowSessionAnalysisPagedListV4 search_orchestrated_analyses(project_id, workflow_session_id)</p> <p>Search analyses orchestrated by the workflow session.</p>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_workflow_session_api\nfrom libica.openapi.v2.model.analysis_query_parameters import AnalysisQueryParameters\nfrom libica.openapi.v2.model.workflow_session_analysis_paged_list_v4 import WorkflowSessionAnalysisPagedListV4\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_workflow_session_api.ProjectWorkflowSessionApi(api_client)\n    project_id = \"projectId_example\" # str | \n    workflow_session_id = \"workflowSessionId_example\" # str | \n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary  (optional)\n    analysis_query_parameters = AnalysisQueryParameters(\n        reference=\"reference_example\",\n        user_reference=\"user_reference_example\",\n        status=[\n            \"SUCCEEDED\",\n        ],\n        user_tags=[\n            \"user_tags_example\",\n        ],\n        technical_tags=[\n            \"technical_tags_example\",\n        ],\n        reference_tags=[\n            \"reference_tags_example\",\n        ],\n    ) # AnalysisQueryParameters |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Search analyses orchestrated by the workflow session.\n        api_response = api_instance.search_orchestrated_analyses(project_id, workflow_session_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectWorkflowSessionApi-&gt;search_orchestrated_analyses: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Search analyses orchestrated by the workflow session.\n        api_response = api_instance.search_orchestrated_analyses(project_id, workflow_session_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort, analysis_query_parameters=analysis_query_parameters)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectWorkflowSessionApi-&gt;search_orchestrated_analyses: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str workflow_session_id str page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary [optional] analysis_query_parameters AnalysisQueryParameters [optional]"},{"location":"v2/docs/ProjectWorkflowSessionApi/#return-type_3","title":"Return type","text":"<p>WorkflowSessionAnalysisPagedListV4</p>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of orchestrated analyses is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#search_workflow_sessions","title":"search_workflow_sessions","text":"<p>WorkflowSessionPagedListV4 search_workflow_sessions(project_id)</p> <p>Search workflow sessions.</p>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import project_workflow_session_api\nfrom libica.openapi.v2.model.analysis_query_parameters import AnalysisQueryParameters\nfrom libica.openapi.v2.model.workflow_session_paged_list_v4 import WorkflowSessionPagedListV4\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = project_workflow_session_api.ProjectWorkflowSessionApi(api_client)\n    project_id = \"projectId_example\" # str | \n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - workflow  (optional)\n    analysis_query_parameters = AnalysisQueryParameters(\n        reference=\"reference_example\",\n        user_reference=\"user_reference_example\",\n        status=[\n            \"SUCCEEDED\",\n        ],\n        user_tags=[\n            \"user_tags_example\",\n        ],\n        technical_tags=[\n            \"technical_tags_example\",\n        ],\n        reference_tags=[\n            \"reference_tags_example\",\n        ],\n    ) # AnalysisQueryParameters |  (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Search workflow sessions.\n        api_response = api_instance.search_workflow_sessions(project_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectWorkflowSessionApi-&gt;search_workflow_sessions: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Search workflow sessions.\n        api_response = api_instance.search_workflow_sessions(project_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort, analysis_query_parameters=analysis_query_parameters)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ProjectWorkflowSessionApi-&gt;search_workflow_sessions: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - workflow [optional] analysis_query_parameters AnalysisQueryParameters [optional]"},{"location":"v2/docs/ProjectWorkflowSessionApi/#return-type_4","title":"Return type","text":"<p>WorkflowSessionPagedListV4</p>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ProjectWorkflowSessionApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project workflow sessions is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/RcloneTempCredentials/","title":"RcloneTempCredentials","text":""},{"location":"v2/docs/RcloneTempCredentials/#properties","title":"Properties","text":"Name Type Description Notes config {str: (str,)} The config in key value format. file_path_prefix str The prefix of the file path. storage_type str The type of the object storage. expiration_time str The timestamp when the credentials expire. upload_session_id str, none_type The folder upload session id which can be used after upload to complete the upload session. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ReferenceData/","title":"ReferenceData","text":""},{"location":"v2/docs/ReferenceData/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the reference data version str The version of the reference data type_list ReferenceDataTypeList tenant_name str, none_type [optional] species Species [optional] data_format DataFormat [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ReferenceDataList/","title":"ReferenceDataList","text":""},{"location":"v2/docs/ReferenceDataList/#properties","title":"Properties","text":"Name Type Description Notes items [ReferenceData] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ReferenceDataType/","title":"ReferenceDataType","text":""},{"location":"v2/docs/ReferenceDataType/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the reference data type tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ReferenceDataTypeList/","title":"ReferenceDataTypeList","text":""},{"location":"v2/docs/ReferenceDataTypeList/#properties","title":"Properties","text":"Name Type Description Notes items [ReferenceDataType] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ReferenceSet/","title":"ReferenceSet","text":""},{"location":"v2/docs/ReferenceSet/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the reference set reference_data_list ReferenceDataList tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ReferenceSetApi/","title":"libica.openapi.v2.ReferenceSetApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_reference_sets GET /api/referenceSets Retrieve a list of of reference sets. get_species GET /api/referenceSets/{referenceSetId}/species Retrieve a list of species linked to the reference set."},{"location":"v2/docs/ReferenceSetApi/#get_reference_sets","title":"get_reference_sets","text":"<p>ReferenceSetList get_reference_sets()</p> <p>Retrieve a list of of reference sets.</p>"},{"location":"v2/docs/ReferenceSetApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import reference_set_api\nfrom libica.openapi.v2.model.reference_set_list import ReferenceSetList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = reference_set_api.ReferenceSetApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve a list of of reference sets.\n        api_response = api_instance.get_reference_sets()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ReferenceSetApi-&gt;get_reference_sets: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ReferenceSetApi/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/ReferenceSetApi/#return-type","title":"Return type","text":"<p>ReferenceSetList</p>"},{"location":"v2/docs/ReferenceSetApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ReferenceSetApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ReferenceSetApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of reference sets is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ReferenceSetApi/#get_species","title":"get_species","text":"<p>SpeciesList get_species(reference_set_id)</p> <p>Retrieve a list of species linked to the reference set.</p>"},{"location":"v2/docs/ReferenceSetApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import reference_set_api\nfrom libica.openapi.v2.model.species_list import SpeciesList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = reference_set_api.ReferenceSetApi(api_client)\n    reference_set_id = \"referenceSetId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of species linked to the reference set.\n        api_response = api_instance.get_species(reference_set_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling ReferenceSetApi-&gt;get_species: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/ReferenceSetApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes reference_set_id str"},{"location":"v2/docs/ReferenceSetApi/#return-type_1","title":"Return type","text":"<p>SpeciesList</p>"},{"location":"v2/docs/ReferenceSetApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/ReferenceSetApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/ReferenceSetApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The list of species is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/ReferenceSetList/","title":"ReferenceSetList","text":""},{"location":"v2/docs/ReferenceSetList/#properties","title":"Properties","text":"Name Type Description Notes items [ReferenceSet] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Region/","title":"Region","text":""},{"location":"v2/docs/Region/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str country Country city_name str tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/RegionApi/","title":"libica.openapi.v2.RegionApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_region GET /api/regions/{regionId} Retrieve a region. Only the regions the user has access to through his/her entitlements can be retrieved. get_regions GET /api/regions Retrieve a list of regions. Only the regions the user has access to through his/her entitlements are returned."},{"location":"v2/docs/RegionApi/#get_region","title":"get_region","text":"<p>Region get_region(region_id)</p> <p>Retrieve a region. Only the regions the user has access to through his/her entitlements can be retrieved.</p>"},{"location":"v2/docs/RegionApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import region_api\nfrom libica.openapi.v2.model.region import Region\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = region_api.RegionApi(api_client)\n    region_id = \"regionId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a region. Only the regions the user has access to through his/her entitlements can be retrieved.\n        api_response = api_instance.get_region(region_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling RegionApi-&gt;get_region: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/RegionApi/#parameters","title":"Parameters","text":"Name Type Description Notes region_id str"},{"location":"v2/docs/RegionApi/#return-type","title":"Return type","text":"<p>Region</p>"},{"location":"v2/docs/RegionApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/RegionApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/RegionApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The region is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/RegionApi/#get_regions","title":"get_regions","text":"<p>RegionList get_regions()</p> <p>Retrieve a list of regions. Only the regions the user has access to through his/her entitlements are returned.</p>"},{"location":"v2/docs/RegionApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import region_api\nfrom libica.openapi.v2.model.region_list import RegionList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = region_api.RegionApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve a list of regions. Only the regions the user has access to through his/her entitlements are returned.\n        api_response = api_instance.get_regions()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling RegionApi-&gt;get_regions: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/RegionApi/#parameters_1","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/RegionApi/#return-type_1","title":"Return type","text":"<p>RegionList</p>"},{"location":"v2/docs/RegionApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/RegionApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/RegionApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The list of regions is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/RegionList/","title":"RegionList","text":""},{"location":"v2/docs/RegionList/#properties","title":"Properties","text":"Name Type Description Notes items [Region] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/RegionV4/","title":"RegionV4","text":""},{"location":"v2/docs/RegionV4/#properties","title":"Properties","text":"Name Type Description Notes id str code str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Sample/","title":"Sample","text":""},{"location":"v2/docs/Sample/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the sample tags SampleTag region Region status str metadata_valid bool Whether the metadata is valid metadata [MetadataField] The metadata of the sample tenant_name str, none_type [optional] description str, none_type The description of the sample [optional] application ApplicationV4 [optional] sequencing_runs [SequencingRun], none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SampleApi/","title":"libica.openapi.v2.SampleApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_samples GET /api/samples Retrieve a list of samples."},{"location":"v2/docs/SampleApi/#get_samples","title":"get_samples","text":"<p>SamplePagedList get_samples(region)</p> <p>Retrieve a list of samples.</p>"},{"location":"v2/docs/SampleApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import sample_api\nfrom libica.openapi.v2.model.sample_paged_list import SamplePagedList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = sample_api.SampleApi(api_client)\n    region = \"region_example\" # str | The ID of the region to filter on. This parameter is required.\n    search = \"search_example\" # str | To search through multiple fields of data. (optional)\n    user_tags = \"userTags_example\" # str | The user tags to filter on. (optional)\n    technical_tags = \"technicalTags_example\" # str | The technical tags to filter on. (optional)\n    page_offset = \"pageOffset_example\" # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = \"pageToken_example\" # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = \"pageSize_example\" # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = \"sort_example\" # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a list of samples.\n        api_response = api_instance.get_samples(region)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling SampleApi-&gt;get_samples: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of samples.\n        api_response = api_instance.get_samples(region, search=search, user_tags=user_tags, technical_tags=technical_tags, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling SampleApi-&gt;get_samples: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/SampleApi/#parameters","title":"Parameters","text":"Name Type Description Notes region str The ID of the region to filter on. This parameter is required. search str To search through multiple fields of data. [optional] user_tags str The user tags to filter on. [optional] technical_tags str The technical tags to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status [optional]"},{"location":"v2/docs/SampleApi/#return-type","title":"Return type","text":"<p>SamplePagedList</p>"},{"location":"v2/docs/SampleApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/SampleApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/SampleApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of samples is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/SampleCreationBatch/","title":"SampleCreationBatch","text":""},{"location":"v2/docs/SampleCreationBatch/#properties","title":"Properties","text":"Name Type Description Notes id str job Job [optional] sequencing_run_id str, none_type The sequencingRunId to link to all created samples and linked data [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SampleCreationBatchItemPagedList/","title":"SampleCreationBatchItemPagedList","text":""},{"location":"v2/docs/SampleCreationBatchItemPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [SampleCreationBatchSampleItem] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SampleCreationBatchItemProcessing/","title":"SampleCreationBatchItemProcessing","text":""},{"location":"v2/docs/SampleCreationBatchItemProcessing/#properties","title":"Properties","text":"Name Type Description Notes status str additional_status_information str, none_type Additional information regarding the status of this batch item. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SampleCreationBatchItemRequest/","title":"SampleCreationBatchItemRequest","text":""},{"location":"v2/docs/SampleCreationBatchItemRequest/#properties","title":"Properties","text":"Name Type Description Notes sample_to_create CreateSample complete_sample bool Indicates whether the sample must be completed. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SampleCreationBatchSampleItem/","title":"SampleCreationBatchSampleItem","text":""},{"location":"v2/docs/SampleCreationBatchSampleItem/#properties","title":"Properties","text":"Name Type Description Notes id str request SampleCreationBatchItemRequest processing SampleCreationBatchItemProcessing created_sample Sample [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SampleHistory/","title":"SampleHistory","text":""},{"location":"v2/docs/SampleHistory/#properties","title":"Properties","text":"Name Type Description Notes occurred_at datetime When the change was made source str In which context the change was made text str What was changed user str, none_type The user that made the change [optional] run str, none_type In which execution context the change was made [optional] project str, none_type In which project context the change was made [optional] model int, none_type In which model context the change was made [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SampleHistoryList/","title":"SampleHistoryList","text":""},{"location":"v2/docs/SampleHistoryList/#properties","title":"Properties","text":"Name Type Description Notes items [SampleHistory] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SamplePagedList/","title":"SamplePagedList","text":""},{"location":"v2/docs/SamplePagedList/#properties","title":"Properties","text":"Name Type Description Notes items [Sample] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SampleTag/","title":"SampleTag","text":""},{"location":"v2/docs/SampleTag/#properties","title":"Properties","text":"Name Type Description Notes technical_tags [str] user_tags [str] connector_tags [str] run_in_tags [str] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/ScheduleDownload/","title":"ScheduleDownload","text":""},{"location":"v2/docs/ScheduleDownload/#properties","title":"Properties","text":"Name Type Description Notes connector_id str [optional] protocol str [optional]  if omitted the server will use the default value of \"HTTPS\" local_path str [optional] disable_hashing bool [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SearchMatchingActivationCodesForCwlAnalysis/","title":"SearchMatchingActivationCodesForCwlAnalysis","text":""},{"location":"v2/docs/SearchMatchingActivationCodesForCwlAnalysis/#properties","title":"Properties","text":"Name Type Description Notes project_id str pipeline_id str analysis_input CwlAnalysisInput any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SearchMatchingActivationCodesForNextflowAnalysis/","title":"SearchMatchingActivationCodesForNextflowAnalysis","text":""},{"location":"v2/docs/SearchMatchingActivationCodesForNextflowAnalysis/#properties","title":"Properties","text":"Name Type Description Notes project_id str pipeline_id str analysis_input NextflowAnalysisInput any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SequencingRun/","title":"SequencingRun","text":""},{"location":"v2/docs/SequencingRun/#properties","title":"Properties","text":"Name Type Description Notes id str instrument_run_id str name str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SequencingRunApi/","title":"libica.openapi.v2.SequencingRunApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_sequencing_run GET /api/sequencingRuns/{sequencingRunId} Retrieve a sequencing run."},{"location":"v2/docs/SequencingRunApi/#get_sequencing_run","title":"get_sequencing_run","text":"<p>SequencingRun get_sequencing_run(sequencing_run_id)</p> <p>Retrieve a sequencing run.</p>"},{"location":"v2/docs/SequencingRunApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import sequencing_run_api\nfrom libica.openapi.v2.model.sequencing_run import SequencingRun\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = sequencing_run_api.SequencingRunApi(api_client)\n    sequencing_run_id = \"sequencingRunId_example\" # str | The ID of the sequencing run to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a sequencing run.\n        api_response = api_instance.get_sequencing_run(sequencing_run_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling SequencingRunApi-&gt;get_sequencing_run: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/SequencingRunApi/#parameters","title":"Parameters","text":"Name Type Description Notes sequencing_run_id str The ID of the sequencing run to retrieve"},{"location":"v2/docs/SequencingRunApi/#return-type","title":"Return type","text":"<p>SequencingRun</p>"},{"location":"v2/docs/SequencingRunApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/SequencingRunApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/SequencingRunApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The sequencing run is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/Settings/","title":"Settings","text":"<p>This object contains a \\\"anyOf\\\" construct. Depending on which type, you will receive a StringSettings-, IntegerSettings or OptionsSettings object.</p>"},{"location":"v2/docs/Settings/#properties","title":"Properties","text":"Name Type Description Notes default_values [str] [optional] options [str] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Species/","title":"Species","text":""},{"location":"v2/docs/Species/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the species tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SpeciesList/","title":"SpeciesList","text":""},{"location":"v2/docs/SpeciesList/#properties","title":"Properties","text":"Name Type Description Notes items [Species] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/StorageBundle/","title":"StorageBundle","text":""},{"location":"v2/docs/StorageBundle/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str bundle_name str The name of the storage bundle entitlement_name str The name of the parent entitlement region Region tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/StorageBundleApi/","title":"libica.openapi.v2.StorageBundleApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_storage_bundles GET /api/storageBundles Retrieve a list of storage bundles."},{"location":"v2/docs/StorageBundleApi/#get_storage_bundles","title":"get_storage_bundles","text":"<p>StorageBundleList get_storage_bundles()</p> <p>Retrieve a list of storage bundles.</p>"},{"location":"v2/docs/StorageBundleApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_bundle_api\nfrom libica.openapi.v2.model.storage_bundle_list import StorageBundleList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_bundle_api.StorageBundleApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve a list of storage bundles.\n        api_response = api_instance.get_storage_bundles()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageBundleApi-&gt;get_storage_bundles: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageBundleApi/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/StorageBundleApi/#return-type","title":"Return type","text":"<p>StorageBundleList</p>"},{"location":"v2/docs/StorageBundleApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageBundleApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/StorageBundleApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of storage bundles is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StorageBundleList/","title":"StorageBundleList","text":""},{"location":"v2/docs/StorageBundleList/#properties","title":"Properties","text":"Name Type Description Notes items [StorageBundle] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/StorageConfiguration/","title":"StorageConfiguration","text":""},{"location":"v2/docs/StorageConfiguration/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the storage configuration status str region Region is_default bool An indication if this is the default in region for new projects type str defaults to \"AWS_S3\" tenant_name str, none_type [optional] description str, none_type An optional description [optional] error_message str, none_type An optional error message when something went wrong with the configuration [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/StorageConfigurationApi/","title":"libica.openapi.v2.StorageConfigurationApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_storage_configuration POST /api/storageConfigurations Create a new storage configuration get_storage_configuration GET /api/storageConfigurations/{storageConfigurationId} Retrieve a storage configuration. get_storage_configuration_details GET /api/storageConfigurations/{storageConfigurationId}/details Retrieve a storage configuration detail. get_storage_configurations GET /api/storageConfigurations Retrieve a list of storage configurations. share_storage_configuration POST /api/storageConfigurations/{storageConfigurationId}:share Share your own storage configuration with tenant. validate_storage_configuration POST /api/storageConfigurations/{storageConfigurationId}:validate Start validation of your storage configuration."},{"location":"v2/docs/StorageConfigurationApi/#create_storage_configuration","title":"create_storage_configuration","text":"<p>StorageConfiguration create_storage_configuration(create_storage_configuration)</p> <p>Create a new storage configuration</p>"},{"location":"v2/docs/StorageConfigurationApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_configuration_api\nfrom libica.openapi.v2.model.storage_configuration import StorageConfiguration\nfrom libica.openapi.v2.model.create_storage_configuration import CreateStorageConfiguration\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_configuration_api.StorageConfigurationApi(api_client)\n    create_storage_configuration = CreateStorageConfiguration(\n        name=\"wwat4ikwowtta-2mh1lcafqw2zhes0\",\n        description=\"description_example\",\n        storage_credential_id=\"storage_credential_id_example\",\n        type=\"AWS_S3\",\n        aws_details=AWSDetails(\n            bucket_name=\"bucket_name_example\",\n            key_prefix=\"jR,rZ#UM/?R,Fp^l6$ARjbhJk C&gt;i H'qT\\{&lt;?'es#)#iK.YM{Rag2/!KB!k@5oXh.:\",\n            server_side_encryption_algorithm=\"server_side_encryption_algorithm_example\",\n            server_side_encryption_key=\"server_side_encryption_key_example\",\n        ),\n        region_id=\"region_id_example\",\n    ) # CreateStorageConfiguration | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a new storage configuration\n        api_response = api_instance.create_storage_configuration(create_storage_configuration)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageConfigurationApi-&gt;create_storage_configuration: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageConfigurationApi/#parameters","title":"Parameters","text":"Name Type Description Notes create_storage_configuration CreateStorageConfiguration"},{"location":"v2/docs/StorageConfigurationApi/#return-type","title":"Return type","text":"<p>StorageConfiguration</p>"},{"location":"v2/docs/StorageConfigurationApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageConfigurationApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/StorageConfigurationApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The storage configuration is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StorageConfigurationApi/#get_storage_configuration","title":"get_storage_configuration","text":"<p>StorageConfiguration get_storage_configuration(storage_configuration_id)</p> <p>Retrieve a storage configuration.</p>"},{"location":"v2/docs/StorageConfigurationApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_configuration_api\nfrom libica.openapi.v2.model.storage_configuration import StorageConfiguration\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_configuration_api.StorageConfigurationApi(api_client)\n    storage_configuration_id = \"storageConfigurationId_example\" # str | The ID of the storage configuration to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a storage configuration.\n        api_response = api_instance.get_storage_configuration(storage_configuration_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageConfigurationApi-&gt;get_storage_configuration: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageConfigurationApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes storage_configuration_id str The ID of the storage configuration to retrieve"},{"location":"v2/docs/StorageConfigurationApi/#return-type_1","title":"Return type","text":"<p>StorageConfiguration</p>"},{"location":"v2/docs/StorageConfigurationApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageConfigurationApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/StorageConfigurationApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The storage configuration is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StorageConfigurationApi/#get_storage_configuration_details","title":"get_storage_configuration_details","text":"<p>StorageConfigurationDetails get_storage_configuration_details(storage_configuration_id)</p> <p>Retrieve a storage configuration detail.</p>"},{"location":"v2/docs/StorageConfigurationApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_configuration_api\nfrom libica.openapi.v2.model.storage_configuration_details import StorageConfigurationDetails\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_configuration_api.StorageConfigurationApi(api_client)\n    storage_configuration_id = \"storageConfigurationId_example\" # str | The ID of the storage configuration to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a storage configuration detail.\n        api_response = api_instance.get_storage_configuration_details(storage_configuration_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageConfigurationApi-&gt;get_storage_configuration_details: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageConfigurationApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes storage_configuration_id str The ID of the storage configuration to retrieve"},{"location":"v2/docs/StorageConfigurationApi/#return-type_2","title":"Return type","text":"<p>StorageConfigurationDetails</p>"},{"location":"v2/docs/StorageConfigurationApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageConfigurationApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/StorageConfigurationApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The storage configuration detail is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StorageConfigurationApi/#get_storage_configurations","title":"get_storage_configurations","text":"<p>StorageConfigurationWithDetailsList get_storage_configurations()</p> <p>Retrieve a list of storage configurations.</p>"},{"location":"v2/docs/StorageConfigurationApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_configuration_api\nfrom libica.openapi.v2.model.storage_configuration_with_details_list import StorageConfigurationWithDetailsList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_configuration_api.StorageConfigurationApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve a list of storage configurations.\n        api_response = api_instance.get_storage_configurations()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageConfigurationApi-&gt;get_storage_configurations: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageConfigurationApi/#parameters_3","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/StorageConfigurationApi/#return-type_3","title":"Return type","text":"<p>StorageConfigurationWithDetailsList</p>"},{"location":"v2/docs/StorageConfigurationApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageConfigurationApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/StorageConfigurationApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of storage configurations is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StorageConfigurationApi/#share_storage_configuration","title":"share_storage_configuration","text":"<p>share_storage_configuration(storage_configuration_id)</p> <p>Share your own storage configuration with tenant.</p> <p>Here you share your own storage configuration with all the other users in your tenant.</p>"},{"location":"v2/docs/StorageConfigurationApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_configuration_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_configuration_api.StorageConfigurationApi(api_client)\n    storage_configuration_id = \"storageConfigurationId_example\" # str | The ID of the storage configuration to share\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Share your own storage configuration with tenant.\n        api_instance.share_storage_configuration(storage_configuration_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageConfigurationApi-&gt;share_storage_configuration: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageConfigurationApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes storage_configuration_id str The ID of the storage configuration to share"},{"location":"v2/docs/StorageConfigurationApi/#return-type_4","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/StorageConfigurationApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageConfigurationApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/StorageConfigurationApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 204 The storage configuration is successfully shared. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StorageConfigurationApi/#validate_storage_configuration","title":"validate_storage_configuration","text":"<p>validate_storage_configuration(storage_configuration_id)</p> <p>Start validation of your storage configuration.</p> <p>Here you start the validation of your storage configuration.</p>"},{"location":"v2/docs/StorageConfigurationApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_configuration_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_configuration_api.StorageConfigurationApi(api_client)\n    storage_configuration_id = \"storageConfigurationId_example\" # str | The ID of the storage configuration to validate\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Start validation of your storage configuration.\n        api_instance.validate_storage_configuration(storage_configuration_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageConfigurationApi-&gt;validate_storage_configuration: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageConfigurationApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes storage_configuration_id str The ID of the storage configuration to validate"},{"location":"v2/docs/StorageConfigurationApi/#return-type_5","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/StorageConfigurationApi/#authorization_5","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageConfigurationApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/StorageConfigurationApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 204 The storage configuration validation is successfully started. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StorageConfigurationDetails/","title":"StorageConfigurationDetails","text":""},{"location":"v2/docs/StorageConfigurationDetails/#properties","title":"Properties","text":"Name Type Description Notes aws_s3 AWSDetails [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/StorageConfigurationWithDetails/","title":"StorageConfigurationWithDetails","text":""},{"location":"v2/docs/StorageConfigurationWithDetails/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the storage configuration status str region Region is_default bool An indication if this is the default in region for new projects storage_configuration_details StorageConfigurationDetails type str defaults to \"AWS_S3\" tenant_name str, none_type [optional] description str, none_type An optional description [optional] error_message str, none_type An optional error message when something went wrong with the configuration [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/StorageConfigurationWithDetailsList/","title":"StorageConfigurationWithDetailsList","text":""},{"location":"v2/docs/StorageConfigurationWithDetailsList/#properties","title":"Properties","text":"Name Type Description Notes items [StorageConfigurationWithDetails] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/StorageCredential/","title":"StorageCredential","text":""},{"location":"v2/docs/StorageCredential/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str type str defaults to \"AWS_USER\" tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/StorageCredentialList/","title":"StorageCredentialList","text":""},{"location":"v2/docs/StorageCredentialList/#properties","title":"Properties","text":"Name Type Description Notes items [StorageCredential] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/StorageCredentialsApi/","title":"libica.openapi.v2.StorageCredentialsApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_storage_credential POST /api/storageCredentials Create a new storage credential get_storage_credential GET /api/storageCredentials/{storageCredentialId} Retrieve a storage credential. get_storage_credentials GET /api/storageCredentials Retrieve a list of storage credentials. share_storage_credential POST /api/storageCredentials/{storageCredentialId}:share Share your own storage credentials with tenant. update_storage_credential_secrets POST /api/storageCredentials/{storageCredentialId}:updateSecrets Update a storage credential's secrets."},{"location":"v2/docs/StorageCredentialsApi/#create_storage_credential","title":"create_storage_credential","text":"<p>StorageCredential create_storage_credential(create_storage_credential)</p> <p>Create a new storage credential</p>"},{"location":"v2/docs/StorageCredentialsApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_credentials_api\nfrom libica.openapi.v2.model.create_storage_credential import CreateStorageCredential\nfrom libica.openapi.v2.model.storage_credential import StorageCredential\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_credentials_api.StorageCredentialsApi(api_client)\n    create_storage_credential = CreateStorageCredential(\n        name=\"zBAMDTMv2D2ylmgd10Z3UB\",\n        type=\"AWS_USER\",\n        aws_credentials=AwsCredentials(\n            access_key_id=\"+\",\n            secret_access_key=\"+\",\n        ),\n    ) # CreateStorageCredential | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Create a new storage credential\n        api_response = api_instance.create_storage_credential(create_storage_credential)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageCredentialsApi-&gt;create_storage_credential: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageCredentialsApi/#parameters","title":"Parameters","text":"Name Type Description Notes create_storage_credential CreateStorageCredential"},{"location":"v2/docs/StorageCredentialsApi/#return-type","title":"Return type","text":"<p>StorageCredential</p>"},{"location":"v2/docs/StorageCredentialsApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageCredentialsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/StorageCredentialsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The storage credential is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StorageCredentialsApi/#get_storage_credential","title":"get_storage_credential","text":"<p>StorageCredential get_storage_credential(storage_credential_id)</p> <p>Retrieve a storage credential.</p>"},{"location":"v2/docs/StorageCredentialsApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_credentials_api\nfrom libica.openapi.v2.model.storage_credential import StorageCredential\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_credentials_api.StorageCredentialsApi(api_client)\n    storage_credential_id = \"storageCredentialId_example\" # str | The ID of the storage credential to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a storage credential.\n        api_response = api_instance.get_storage_credential(storage_credential_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageCredentialsApi-&gt;get_storage_credential: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageCredentialsApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes storage_credential_id str The ID of the storage credential to retrieve"},{"location":"v2/docs/StorageCredentialsApi/#return-type_1","title":"Return type","text":"<p>StorageCredential</p>"},{"location":"v2/docs/StorageCredentialsApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageCredentialsApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/StorageCredentialsApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The storage credential is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StorageCredentialsApi/#get_storage_credentials","title":"get_storage_credentials","text":"<p>StorageCredentialList get_storage_credentials()</p> <p>Retrieve a list of storage credentials.</p>"},{"location":"v2/docs/StorageCredentialsApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_credentials_api\nfrom libica.openapi.v2.model.storage_credential_list import StorageCredentialList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_credentials_api.StorageCredentialsApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve a list of storage credentials.\n        api_response = api_instance.get_storage_credentials()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageCredentialsApi-&gt;get_storage_credentials: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageCredentialsApi/#parameters_2","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/StorageCredentialsApi/#return-type_2","title":"Return type","text":"<p>StorageCredentialList</p>"},{"location":"v2/docs/StorageCredentialsApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageCredentialsApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/StorageCredentialsApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The list of storage credentials is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StorageCredentialsApi/#share_storage_credential","title":"share_storage_credential","text":"<p>share_storage_credential(storage_credential_id)</p> <p>Share your own storage credentials with tenant.</p> <p>Here you share your own storage credentials with all the other users in your tenant.</p>"},{"location":"v2/docs/StorageCredentialsApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_credentials_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_credentials_api.StorageCredentialsApi(api_client)\n    storage_credential_id = \"storageCredentialId_example\" # str | The ID of the storage credential to share\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Share your own storage credentials with tenant.\n        api_instance.share_storage_credential(storage_credential_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageCredentialsApi-&gt;share_storage_credential: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageCredentialsApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes storage_credential_id str The ID of the storage credential to share"},{"location":"v2/docs/StorageCredentialsApi/#return-type_3","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/StorageCredentialsApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageCredentialsApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/StorageCredentialsApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 204 The storage credential is successfully shared. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StorageCredentialsApi/#update_storage_credential_secrets","title":"update_storage_credential_secrets","text":"<p>update_storage_credential_secrets(storage_credential_id, update_storage_credential_secrets)</p> <p>Update a storage credential's secrets.</p> <p>When your storage credentials change or get updated due to security reasons you need to update them here.</p>"},{"location":"v2/docs/StorageCredentialsApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import storage_credentials_api\nfrom libica.openapi.v2.model.update_storage_credential_secrets import UpdateStorageCredentialSecrets\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = storage_credentials_api.StorageCredentialsApi(api_client)\n    storage_credential_id = \"storageCredentialId_example\" # str | \n    update_storage_credential_secrets = UpdateStorageCredentialSecrets(\n        aws_credentials=AwsCredentials(\n            access_key_id=\"+\",\n            secret_access_key=\"+\",\n        ),\n    ) # UpdateStorageCredentialSecrets | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update a storage credential's secrets.\n        api_instance.update_storage_credential_secrets(storage_credential_id, update_storage_credential_secrets)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling StorageCredentialsApi-&gt;update_storage_credential_secrets: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/StorageCredentialsApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes storage_credential_id str update_storage_credential_secrets UpdateStorageCredentialSecrets"},{"location":"v2/docs/StorageCredentialsApi/#return-type_4","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/StorageCredentialsApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/StorageCredentialsApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/StorageCredentialsApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 204 The storage credential secrets are successfully updated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/StringSettings/","title":"StringSettings","text":""},{"location":"v2/docs/StringSettings/#properties","title":"Properties","text":"Name Type Description Notes default_values [str] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/SystemApi/","title":"libica.openapi.v2.SystemApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_system_info GET /api/system/info Retrieve system information."},{"location":"v2/docs/SystemApi/#get_system_info","title":"get_system_info","text":"<p>SystemInfo get_system_info()</p> <p>Retrieve system information.</p>"},{"location":"v2/docs/SystemApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import system_api\nfrom libica.openapi.v2.model.system_info import SystemInfo\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = system_api.SystemApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve system information.\n        api_response = api_instance.get_system_info()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling SystemApi-&gt;get_system_info: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/SystemApi/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/SystemApi/#return-type","title":"Return type","text":"<p>SystemInfo</p>"},{"location":"v2/docs/SystemApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/SystemApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/SystemApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The system information is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/SystemInfo/","title":"SystemInfo","text":""},{"location":"v2/docs/SystemInfo/#properties","title":"Properties","text":"Name Type Description Notes name str version str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/TagUpdate/","title":"TagUpdate","text":""},{"location":"v2/docs/TagUpdate/#properties","title":"Properties","text":"Name Type Description Notes add_tags [str] [optional] remove_tags [str] [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/TempCredentials/","title":"TempCredentials","text":""},{"location":"v2/docs/TempCredentials/#properties","title":"Properties","text":"Name Type Description Notes aws_temp_credentials AwsTempCredentials [optional] rclone_temp_credentials RcloneTempCredentials [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/TenantIdentifier/","title":"TenantIdentifier","text":""},{"location":"v2/docs/TenantIdentifier/#properties","title":"Properties","text":"Name Type Description Notes id str name str The unique name of the tenant. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/TermsOfUse/","title":"TermsOfUse","text":""},{"location":"v2/docs/TermsOfUse/#properties","title":"Properties","text":"Name Type Description Notes terms_of_use str Terms of Use for a bundle. Supports plain text or HTML. requires_user_acceptance bool Flag indicating whether the Terms of Use should be accepted before using/viewing the bundle. release_version str Version number of the Terms of Use. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/TermsOfUseAcceptance/","title":"TermsOfUseAcceptance","text":""},{"location":"v2/docs/TermsOfUseAcceptance/#properties","title":"Properties","text":"Name Type Description Notes accepted bool Are the terms of use accepted first_acceptance_date datetime Date of the first time the terms of use were accepted. version_terms_of_use_first_accept str Version of the first accepted Terms of Use. last_acceptance_date datetime Date of the last time the terms of use were accepted. [optional] version_terms_of_use_last_accept str Version of the last accepted Terms of Use. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Token/","title":"Token","text":""},{"location":"v2/docs/Token/#properties","title":"Properties","text":"Name Type Description Notes token str [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/TokenApi/","title":"libica.openapi.v2.TokenApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_jwt_token POST /api/tokens Generate a JWT using an API-key, Basic Authentication or a psToken. refresh_jwt_token POST /api/tokens:refresh Refresh a JWT using a not yet expired, still valid JWT."},{"location":"v2/docs/TokenApi/#create_jwt_token","title":"create_jwt_token","text":"<p>Token create_jwt_token()</p> <p>Generate a JWT using an API-key, Basic Authentication or a psToken.</p> <p>Generate a JWT using an API-key, Basic Authentication or a psToken. When using Basic Authentication, and you are member of several tenants, also provide the tenant request parameter to indicate for which tenant you want to authenticate. Note that Basic Authentication will not work for SSO (Single Sign On) enabled authentication.</p>"},{"location":"v2/docs/TokenApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Basic Authentication (BasicAuth):</li> <li>Bearer (psToken) Authentication (PsTokenAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import token_api\nfrom libica.openapi.v2.model.token import Token\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure HTTP basic authorization: BasicAuth\nconfiguration = libica.openapi.v2.Configuration(\n    username = 'YOUR_USERNAME',\n    password = 'YOUR_PASSWORD'\n)\n\n# Configure Bearer authorization (psToken): PsTokenAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = token_api.TokenApi(api_client)\n    tenant = \"tenant_example\" # str, none_type | The name of your tenant in case you have access to multiple tenants. (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Generate a JWT using an API-key, Basic Authentication or a psToken.\n        api_response = api_instance.create_jwt_token(tenant=tenant)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling TokenApi-&gt;create_jwt_token: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/TokenApi/#parameters","title":"Parameters","text":"Name Type Description Notes tenant str, none_type The name of your tenant in case you have access to multiple tenants. [optional]"},{"location":"v2/docs/TokenApi/#return-type","title":"Return type","text":"<p>Token</p>"},{"location":"v2/docs/TokenApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, BasicAuth, PsTokenAuth</p>"},{"location":"v2/docs/TokenApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/TokenApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The JWT is successfully generated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/TokenApi/#refresh_jwt_token","title":"refresh_jwt_token","text":"<p>Token refresh_jwt_token()</p> <p>Refresh a JWT using a not yet expired, still valid JWT.</p> <p>When still having a valid JWT, this endpoint can be used to extend the validity.Refreshing the JWT is not possible if it has been created using an API-key.</p>"},{"location":"v2/docs/TokenApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import token_api\nfrom libica.openapi.v2.model.token import Token\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = token_api.TokenApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Refresh a JWT using a not yet expired, still valid JWT.\n        api_response = api_instance.refresh_jwt_token()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling TokenApi-&gt;refresh_jwt_token: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/TokenApi/#parameters_1","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/TokenApi/#return-type_1","title":"Return type","text":"<p>Token</p>"},{"location":"v2/docs/TokenApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth</p>"},{"location":"v2/docs/TokenApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/TokenApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The JWT is successfully refreshed. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/Type/","title":"Type","text":""},{"location":"v2/docs/Type/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str name str The name of the reference data type tenant_name str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/TypeList/","title":"TypeList","text":""},{"location":"v2/docs/TypeList/#properties","title":"Properties","text":"Name Type Description Notes items [Type] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/UpdateMetadata/","title":"UpdateMetadata","text":""},{"location":"v2/docs/UpdateMetadata/#properties","title":"Properties","text":"Name Type Description Notes update_single_metadata_fields [UpdateSingleMetadataField], none_type List of metadata fields to be updated [optional] update_metadata_field_groups [UpdateMetadataFieldGroup], none_type List of metadata field groups to be updated [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/UpdateMetadataFieldGroup/","title":"UpdateMetadataFieldGroup","text":"<p>List of metadata field groups to be updated</p>"},{"location":"v2/docs/UpdateMetadataFieldGroup/#properties","title":"Properties","text":"Name Type Description Notes index int Which metadata row index to update update_single_metadata_fields [UpdateSingleMetadataField] List of metadata fields to be updated field_id FieldId [optional] field_name str, none_type The field name to be updated. Either the field ID or field name is required. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/UpdateSingleMetadataField/","title":"UpdateSingleMetadataField","text":"<p>List of metadata fields to be updated</p>"},{"location":"v2/docs/UpdateSingleMetadataField/#properties","title":"Properties","text":"Name Type Description Notes field_id FieldId [optional] field_name str, none_type The field name to be updated. Either the field ID or field name is required. [optional] values [str] The updated value(s) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/UpdateStorageCredentialSecrets/","title":"UpdateStorageCredentialSecrets","text":""},{"location":"v2/docs/UpdateStorageCredentialSecrets/#properties","title":"Properties","text":"Name Type Description Notes aws_credentials AwsCredentials [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Upload/","title":"Upload","text":""},{"location":"v2/docs/Upload/#properties","title":"Properties","text":"Name Type Description Notes url str A pre-signed url which is temporarily available for uploading the data. any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/UploadRule/","title":"UploadRule","text":""},{"location":"v2/docs/UploadRule/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str code str local_folder str The local folder to monitor. Files in this folder on your local environment will be uploaded to the specified project. Only files matching the filePattern will be uploaded. file_pattern str The regular expression to match a file name. eg: to match all files use '.*' project Project tenant_name str, none_type [optional] active bool, none_type [optional] description str, none_type [optional] data_format DataFormat [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/UploadRuleList/","title":"UploadRuleList","text":""},{"location":"v2/docs/UploadRuleList/#properties","title":"Properties","text":"Name Type Description Notes items [UploadRule] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/User/","title":"User","text":""},{"location":"v2/docs/User/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str username str email str active bool tenant_administrator bool email_verified bool two_factor_authentication bool tenant_name str, none_type [optional] firstname str, none_type [optional] lastname str, none_type [optional] job_title str, none_type [optional] greeting str, none_type [optional] mobile_phone_number str, none_type [optional] phone_number str, none_type [optional] fax_number str, none_type [optional] country Country [optional] address_line1 str, none_type [optional] address_line2 str, none_type [optional] address_line3 str, none_type [optional] postal_code str, none_type [optional] city str, none_type [optional] state str, none_type [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/UserApi/","title":"libica.openapi.v2.UserApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description approve_user POST /api/users/{userId}:approve Approve a user. assign_tenant_admin_rights_to_user POST /api/users/{userId}:assignTenantAdministratorRights Assign tenant administrator rights to a user. get_user GET /api/users/{userId} Retrieve a user. get_users GET /api/users Retrieve a list of users. revoke_tenant_admin_rights_to_user POST /api/users/{userId}:revokeTenantAdministratorRights Revoke tenant administrator rights to a user. update_user PUT /api/users/{userId} Update a user."},{"location":"v2/docs/UserApi/#approve_user","title":"approve_user","text":"<p>approve_user(user_id)</p> <p>Approve a user.</p> <p>Endpoint for approving a user.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/UserApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import user_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = user_api.UserApi(api_client)\n    user_id = \"userId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Approve a user.\n        api_instance.approve_user(user_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling UserApi-&gt;approve_user: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/UserApi/#parameters","title":"Parameters","text":"Name Type Description Notes user_id str"},{"location":"v2/docs/UserApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/UserApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/UserApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/UserApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The user is successfully approved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/UserApi/#assign_tenant_admin_rights_to_user","title":"assign_tenant_admin_rights_to_user","text":"<p>assign_tenant_admin_rights_to_user(user_id)</p> <p>Assign tenant administrator rights to a user.</p> <p>Endpoint for assigning tenant administrator rights to a user.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/UserApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import user_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = user_api.UserApi(api_client)\n    user_id = \"userId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Assign tenant administrator rights to a user.\n        api_instance.assign_tenant_admin_rights_to_user(user_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling UserApi-&gt;assign_tenant_admin_rights_to_user: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/UserApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes user_id str"},{"location":"v2/docs/UserApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/UserApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/UserApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/UserApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The tenant administrator rights are successfully assigned. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/UserApi/#get_user","title":"get_user","text":"<p>User get_user(user_id)</p> <p>Retrieve a user.</p>"},{"location":"v2/docs/UserApi/#example_2","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import user_api\nfrom libica.openapi.v2.model.user import User\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = user_api.UserApi(api_client)\n    user_id = \"userId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a user.\n        api_response = api_instance.get_user(user_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling UserApi-&gt;get_user: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/UserApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes user_id str"},{"location":"v2/docs/UserApi/#return-type_2","title":"Return type","text":"<p>User</p>"},{"location":"v2/docs/UserApi/#authorization_2","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/UserApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/UserApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The user is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/UserApi/#get_users","title":"get_users","text":"<p>UserList get_users()</p> <p>Retrieve a list of users.</p>"},{"location":"v2/docs/UserApi/#example_3","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import user_api\nfrom libica.openapi.v2.model.user_list import UserList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = user_api.UserApi(api_client)\n    email_address = \"emailAddress_example\" # str, none_type | The email address to filter on (optional)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Retrieve a list of users.\n        api_response = api_instance.get_users(email_address=email_address)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling UserApi-&gt;get_users: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/UserApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes email_address str, none_type The email address to filter on [optional]"},{"location":"v2/docs/UserApi/#return-type_3","title":"Return type","text":"<p>UserList</p>"},{"location":"v2/docs/UserApi/#authorization_3","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/UserApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/UserApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of users is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/UserApi/#revoke_tenant_admin_rights_to_user","title":"revoke_tenant_admin_rights_to_user","text":"<p>revoke_tenant_admin_rights_to_user(user_id)</p> <p>Revoke tenant administrator rights to a user.</p> <p>Endpoint for revoking tenant administrator rights to a user.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v2/docs/UserApi/#example_4","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import user_api\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = user_api.UserApi(api_client)\n    user_id = \"userId_example\" # str | \n\n    # example passing only required values which don't have defaults set\n    try:\n        # Revoke tenant administrator rights to a user.\n        api_instance.revoke_tenant_admin_rights_to_user(user_id)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling UserApi-&gt;revoke_tenant_admin_rights_to_user: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/UserApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes user_id str"},{"location":"v2/docs/UserApi/#return-type_4","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v2/docs/UserApi/#authorization_4","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/UserApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v2/docs/UserApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 204 The tenant administrator rights are successfully revoked. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/UserApi/#update_user","title":"update_user","text":"<p>User update_user(user_id, user)</p> <p>Update a user.</p> <p>Fields which can be updated: - greeting - two factor authentication - job title - first name - last name - mobile phone number - phone number - fax number - address lines - postal code - city - country - state</p>"},{"location":"v2/docs/UserApi/#example_5","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import user_api\nfrom libica.openapi.v2.model.user import User\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = user_api.UserApi(api_client)\n    user_id = \"userId_example\" # str | \n    user = User(\n        id=\"id_example\",\n        time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n        owner_id=\"owner_id_example\",\n        tenant_id=\"tenant_id_example\",\n        tenant_name=\"tenant_name_example\",\n        username=\"username_example\",\n        email=\"email_example\",\n        firstname=\"firstname_example\",\n        lastname=\"lastname_example\",\n        active=True,\n        tenant_administrator=True,\n        job_title=\"job_title_example\",\n        greeting=\"MR\",\n        mobile_phone_number=\"mobile_phone_number_example\",\n        phone_number=\"phone_number_example\",\n        fax_number=\"fax_number_example\",\n        email_verified=True,\n        two_factor_authentication=True,\n        country=Country(\n            id=\"id_example\",\n            time_created=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            time_modified=dateutil_parser('1970-01-01T00:00:00.00Z'),\n            owner_id=\"owner_id_example\",\n            tenant_id=\"tenant_id_example\",\n            tenant_name=\"tenant_name_example\",\n            code=\"code_example\",\n            name=\"name_example\",\n            region=\"region_example\",\n        ),\n        address_line1=\"address_line1_example\",\n        address_line2=\"address_line2_example\",\n        address_line3=\"address_line3_example\",\n        postal_code=\"postal_code_example\",\n        city=\"city_example\",\n        state=\"state_example\",\n    ) # User | \n    if_match = \"If-Match_example\" # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Update a user.\n        api_response = api_instance.update_user(user_id, user)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling UserApi-&gt;update_user: %s\\n\" % e)\n\n    # example passing only required values which don't have defaults set\n    # and optional values\n    try:\n        # Update a user.\n        api_response = api_instance.update_user(user_id, user, if_match=if_match)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling UserApi-&gt;update_user: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/UserApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes user_id str user User if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional]"},{"location":"v2/docs/UserApi/#return-type_5","title":"Return type","text":"<p>User</p>"},{"location":"v2/docs/UserApi/#authorization_5","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/UserApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/UserApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 200 The user is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/UserIdentifier/","title":"UserIdentifier","text":""},{"location":"v2/docs/UserIdentifier/#properties","title":"Properties","text":"Name Type Description Notes id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/UserList/","title":"UserList","text":""},{"location":"v2/docs/UserList/#properties","title":"Properties","text":"Name Type Description Notes items [User] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Workflow/","title":"Workflow","text":""},{"location":"v2/docs/Workflow/#properties","title":"Properties","text":"Name Type Description Notes id str code str The code of the workflow urn str The URN of the workflow. The format is urn:ilmn:ica:\\&lt;type of the object\\&gt;:\\&lt;ID of the object\\&gt;#\\&lt;optional human readable hint representing the object\\&gt;. The hint can be omitted, in that case the hashtag (#) must also be omitted. description str The description of the workflow analysis_storage AnalysisStorage language_version PipelineLanguageVersion [optional] workflow_tags PipelineTag [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/WorkflowSession/","title":"WorkflowSession","text":""},{"location":"v2/docs/WorkflowSession/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime owner_id str tenant_id str user_reference str The user reference of the workflow session workflow Workflow status str The status of the workflow session tags WorkflowSessionTag tenant_name str, none_type [optional] start_date datetime, none_type When the workflow session was started [optional] end_date datetime, none_type When the workflow session was finished [optional] summary str, none_type The summary of the workflow session [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/WorkflowSessionAnalysisPagedListV4/","title":"WorkflowSessionAnalysisPagedListV4","text":""},{"location":"v2/docs/WorkflowSessionAnalysisPagedListV4/#properties","title":"Properties","text":"Name Type Description Notes items [WorkflowSessionAnalysisV4] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/WorkflowSessionAnalysisV4/","title":"WorkflowSessionAnalysisV4","text":""},{"location":"v2/docs/WorkflowSessionAnalysisV4/#properties","title":"Properties","text":"Name Type Description Notes analysis AnalysisV4 project Project workflow_session_id str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/WorkflowSessionConfiguration/","title":"WorkflowSessionConfiguration","text":""},{"location":"v2/docs/WorkflowSessionConfiguration/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the configuration multi_value bool Whether the configuration has multiple values values [str] The configuration values any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/WorkflowSessionConfigurationList/","title":"WorkflowSessionConfigurationList","text":""},{"location":"v2/docs/WorkflowSessionConfigurationList/#properties","title":"Properties","text":"Name Type Description Notes items [WorkflowSessionConfiguration] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/WorkflowSessionData/","title":"WorkflowSessionData","text":"<p>The workflow-session-data used as input by the workflow session.</p>"},{"location":"v2/docs/WorkflowSessionData/#properties","title":"Properties","text":"Name Type Description Notes data_id str The id of the file/folder. format DataFormat name str The name of the file/folder as it was processed by the workflow session. data_type str mount_path str The requested location where the input file was located on the machine that was running the workflow. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/WorkflowSessionExternalData/","title":"WorkflowSessionExternalData","text":"<p>The external data used as input by the workflow session.</p>"},{"location":"v2/docs/WorkflowSessionExternalData/#properties","title":"Properties","text":"Name Type Description Notes url str type str Possible values are: s3, http, basespace. More types could be added in a future release. mount_path str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/WorkflowSessionInput/","title":"WorkflowSessionInput","text":""},{"location":"v2/docs/WorkflowSessionInput/#properties","title":"Properties","text":"Name Type Description Notes code str The name of the input-parameter. analysis_data [WorkflowSessionData], none_type The workflow-session-data used as input by the workflow session. [optional] external_data [WorkflowSessionExternalData], none_type The external data used as input by the workflow session. [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/WorkflowSessionInputList/","title":"WorkflowSessionInputList","text":""},{"location":"v2/docs/WorkflowSessionInputList/#properties","title":"Properties","text":"Name Type Description Notes items [WorkflowSessionInput] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/WorkflowSessionPagedList/","title":"WorkflowSessionPagedList","text":""},{"location":"v2/docs/WorkflowSessionPagedList/#properties","title":"Properties","text":"Name Type Description Notes items [WorkflowSession] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/WorkflowSessionPagedListV3/","title":"WorkflowSessionPagedListV3","text":""},{"location":"v2/docs/WorkflowSessionPagedListV3/#properties","title":"Properties","text":"Name Type Description Notes items [WorkflowSessionV3] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/WorkflowSessionPagedListV4/","title":"WorkflowSessionPagedListV4","text":""},{"location":"v2/docs/WorkflowSessionPagedListV4/#properties","title":"Properties","text":"Name Type Description Notes items [WorkflowSessionV4] next_page_token str, none_type The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int, none_type The number of records remaining (used in cursor based pagination) [optional] total_item_count int, none_type The total number of records matching the search criteria (used in offset based pagination) [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/WorkflowSessionTag/","title":"WorkflowSessionTag","text":""},{"location":"v2/docs/WorkflowSessionTag/#properties","title":"Properties","text":"Name Type Description Notes technical_tags [str, none_type], none_type Technical tags [optional] user_tags [str, none_type], none_type User tags [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/WorkflowSessionV3/","title":"WorkflowSessionV3","text":""},{"location":"v2/docs/WorkflowSessionV3/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime owner_id str tenant_id str user_reference str The user reference of the workflow session workflow WorkflowV3 status str The status of the workflow session tags WorkflowSessionTag tenant_name str, none_type [optional] start_date datetime, none_type When the workflow session was started [optional] end_date datetime, none_type When the workflow session was finished [optional] summary str, none_type The summary of the workflow session [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/WorkflowSessionV4/","title":"WorkflowSessionV4","text":""},{"location":"v2/docs/WorkflowSessionV4/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime owner UserIdentifier tenant TenantIdentifier user_reference str The user reference of the workflow session workflow WorkflowV4 status str The status of the workflow session tags WorkflowSessionTag start_date datetime, none_type When the workflow session was started [optional] end_date datetime, none_type When the workflow session was finished [optional] summary str, none_type The summary of the workflow session [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/WorkflowV3/","title":"WorkflowV3","text":""},{"location":"v2/docs/WorkflowV3/#properties","title":"Properties","text":"Name Type Description Notes id str code str The code of the workflow urn str The URN of the workflow. The format is urn:ilmn:ica:\\&lt;type of the object\\&gt;:\\&lt;ID of the object\\&gt;#\\&lt;optional human readable hint representing the object\\&gt;. The hint can be omitted, in that case the hashtag (#) must also be omitted. description str The description of the workflow analysis_storage AnalysisStorageV3 language_version PipelineLanguageVersion [optional] workflow_tags PipelineTag [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/WorkflowV4/","title":"WorkflowV4","text":""},{"location":"v2/docs/WorkflowV4/#properties","title":"Properties","text":"Name Type Description Notes id str code str The code of the workflow urn str The URN of the workflow. The format is urn:ilmn:ica:\\&lt;type of the object\\&gt;:\\&lt;ID of the object\\&gt;#\\&lt;optional human readable hint representing the object\\&gt;. The hint can be omitted, in that case the hashtag (#) must also be omitted. description str The description of the workflow analysis_storage AnalysisStorageV4 language_version PipelineLanguageVersion [optional] workflow_tags PipelineTag [optional] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/Workgroup/","title":"Workgroup","text":""},{"location":"v2/docs/Workgroup/#properties","title":"Properties","text":"Name Type Description Notes id str name str description str any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v2/docs/WorkgroupApi/","title":"libica.openapi.v2.WorkgroupApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_workgroup GET /api/workgroups/{workgroupId} Retrieve a workgroup. get_workgroups GET /api/workgroups Retrieve a list of workgroups."},{"location":"v2/docs/WorkgroupApi/#get_workgroup","title":"get_workgroup","text":"<p>Workgroup get_workgroup(workgroup_id)</p> <p>Retrieve a workgroup.</p>"},{"location":"v2/docs/WorkgroupApi/#example","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import workgroup_api\nfrom libica.openapi.v2.model.workgroup import Workgroup\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = workgroup_api.WorkgroupApi(api_client)\n    workgroup_id = \"workgroupId_example\" # str | The ID of the workgroup to retrieve\n\n    # example passing only required values which don't have defaults set\n    try:\n        # Retrieve a workgroup.\n        api_response = api_instance.get_workgroup(workgroup_id)\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling WorkgroupApi-&gt;get_workgroup: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/WorkgroupApi/#parameters","title":"Parameters","text":"Name Type Description Notes workgroup_id str The ID of the workgroup to retrieve"},{"location":"v2/docs/WorkgroupApi/#return-type","title":"Return type","text":"<p>Workgroup</p>"},{"location":"v2/docs/WorkgroupApi/#authorization","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/WorkgroupApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/WorkgroupApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The workgroup is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/WorkgroupApi/#get_workgroups","title":"get_workgroups","text":"<p>WorkgroupList get_workgroups()</p> <p>Retrieve a list of workgroups.</p>"},{"location":"v2/docs/WorkgroupApi/#example_1","title":"Example","text":"<ul> <li>Api Key Authentication (ApiKeyAuth):</li> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import time\nimport libica.openapi.v2\nfrom libica.openapi.v2.api import workgroup_api\nfrom libica.openapi.v2.model.workgroup_list import WorkgroupList\nfrom libica.openapi.v2.model.problem import Problem\nfrom pprint import pprint\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v2.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = 'YOUR_API_KEY'\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v2.Configuration(\n    access_token = 'YOUR_BEARER_TOKEN'\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v2.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = workgroup_api.WorkgroupApi(api_client)\n\n    # example, this endpoint has no required or optional parameters\n    try:\n        # Retrieve a list of workgroups.\n        api_response = api_instance.get_workgroups()\n        pprint(api_response)\n    except libica.openapi.v2.ApiException as e:\n        print(\"Exception when calling WorkgroupApi-&gt;get_workgroups: %s\\n\" % e)\n</code></pre>"},{"location":"v2/docs/WorkgroupApi/#parameters_1","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v2/docs/WorkgroupApi/#return-type_1","title":"Return type","text":"<p>WorkgroupList</p>"},{"location":"v2/docs/WorkgroupApi/#authorization_1","title":"Authorization","text":"<p>ApiKeyAuth, JwtAuth</p>"},{"location":"v2/docs/WorkgroupApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v2/docs/WorkgroupApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The list of workgroups is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v2/docs/WorkgroupList/","title":"WorkgroupList","text":""},{"location":"v2/docs/WorkgroupList/#properties","title":"Properties","text":"Name Type Description Notes items [Workgroup] any string name bool, date, datetime, dict, float, int, list, str, none_type any string name can be used but the value must be the correct type [optional] <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/","title":"libica.openapi.v3","text":"<p>This API can be used to interact with Illumina Connected Analytics. Authentication <p> Authentication to the  API can be done in multiple ways: <ul><li>For the entire API, except for the POST /tokens endpoint: API-key + JWT</li> <li>Only for the POST /tokens endpoint: API-key + Basic Authentication</li></ul> </p> <p> API-key API keys are managed within the Illumina portal where you can manage your profile after you have logged on. The API-key has to be provided in the X-API-Key header parameter when executing API calls to ICA. In the background, a JWT will be requested at the IDP of Illumina to create a session. A good practice is to not use the API-key for every API call, but to first generate a JWT and to use that for authentication in subsequent calls. </p> <p> JWT To avoid using an API-key for each call, we recommend to request a JWT via the POST /tokens endpoint  using this API-key. The JWT will expire after a pre-configured period specified by a tenant administrator through the IAM console in the Illumina portal. The JWT is the preferred way for authentication.A not yet expired, still valid JWT could be refreshed using the POST /tokens:refresh endpoint.Refreshing the JWT is not possible if the JWT was generated by using an API-key. </p> <p> Basic Authentication Basic authentication is only supported by the POST /tokens endpoint for generating a JWT. Use \\\"Basic base64encoded(emailaddress:password)\\\" in the \\\"Authorization\\\" header parameter for this authentication method. In case having access to multiple tenants using the same email-address, also provide the \\\"tenant\\\" request parameter to indicate what tenant you would like to request a JWT for. </p> <p> Compression If the API client provides request header 'Accept-Encoding' with value 'gzip', then the API applies GZIP compression on the JSON response. This significantly reduces the size and thus the download time of the response, which results in faster end-to-end API calls. In case of compression, the API also provides response header 'Content-Encoding' with value 'gzip', as indication for the client that decompression is required. </p> </p> <p>The <code>libica.openapi.v3</code> package is automatically generated by the OpenAPI Generator project:</p> <ul> <li>API version: 3</li> <li>Package version: 1.0.0</li> <li>Build date: 2025-06-05T15:19:46.120828+10:00[Australia/Melbourne]</li> <li>Generator version: 7.13.0</li> <li>Build package: org.openapitools.codegen.languages.PythonClientCodegen</li> </ul>"},{"location":"v3/#requirements","title":"Requirements.","text":"<p>Python 3.9+</p>"},{"location":"v3/#installation-usage","title":"Installation &amp; Usage","text":"<p>This python library package is generated without supporting files like setup.py or requirements files</p> <p>To be able to use it, you will need these dependencies in your own package that uses this library:</p> <ul> <li>urllib3 &gt;= 2.1.0, &lt; 3.0.0</li> <li>python-dateutil &gt;= 2.8.2</li> <li>pydantic &gt;= 2</li> <li>typing-extensions &gt;= 4.7.1</li> </ul>"},{"location":"v3/#getting-started","title":"Getting Started","text":"<p>In your own code, to use this library to connect and interact with libica.openapi.v3, you can run the following:</p> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.AnalysisStorageApi(api_client)\n\n    try:\n        # Retrieve the list of analysis storage options.\n        api_response = api_instance.get_analysis_storage_options()\n        print(\"The response of AnalysisStorageApi-&gt;get_analysis_storage_options:\\n\")\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling AnalysisStorageApi-&gt;get_analysis_storage_options: %s\\n\" % e)\n</code></pre>"},{"location":"v3/#documentation-for-api-endpoints","title":"Documentation for API Endpoints","text":"<p>All URIs are relative to /ica/rest</p> Class Method HTTP request Description AnalysisStorageApi get_analysis_storage_options GET /api/analysisStorages Retrieve the list of analysis storage options. BundleApi accept_terms_of_use_bundle POST /api/bundles/{bundleId}/termsOfUse:accept accept terms of use for a bundle BundleApi create_bundle POST /api/bundles Create a new bundle BundleApi deprecate_bundle POST /api/bundles/{bundleId}:deprecate deprecate a bundle BundleApi get_bundle GET /api/bundles/{bundleId} Retrieve a bundle. BundleApi get_bundle_terms_of_use GET /api/bundles/{bundleId}/termsOfUse Retrieve the last version of terms of use for a bundle. BundleApi get_bundles GET /api/bundles Retrieve a list of bundles. BundleApi get_terms_of_use_acceptance GET /api/bundles/{bundleId}/termsOfUse/userAcceptance/currentUser Retrieve the acceptance record for a bundle for the current user. BundleApi insert_bundle_terms_of_use POST /api/bundles/{bundleId}/termsOfUse:new Insert a new version of the terms of use for a bundle BundleApi release_bundle POST /api/bundles/{bundleId}:release release a bundle BundleDataApi get_bundle_data GET /api/bundles/{bundleId}/data Retrieve the list of bundle data. BundleDataApi link_data_to_bundle POST /api/bundles/{bundleId}/data/{dataId} Link data to this bundle. BundleDataApi unlink_data_from_bundle DELETE /api/bundles/{bundleId}/data/{dataId} Unlink data from this bundle. BundleDataLinkingBatchApi create_bundle_data_linking_batch POST /api/bundles/{bundleId}/dataLinkingBatch Create a bundle data linking batch. BundleDataLinkingBatchApi get_bundle_data_linking_batch GET /api/bundles/{bundleId}/dataLinkingBatch/{batchId} Retrieve a bundle data linking batch. BundleDataLinkingBatchApi get_bundle_data_linking_batch_item GET /api/bundles/{bundleId}/dataLinkingBatch/{batchId}/items/{itemId} Retrieve a bundle data linking batch item. BundleDataLinkingBatchApi get_bundle_data_linking_batch_items GET /api/bundles/{bundleId}/dataLinkingBatch/{batchId}/items Retrieve a list of bundle data linking batch items. BundleDataUnlinkingBatchApi create_bundle_data_unlinking_batch POST /api/bundles/{bundleId}/dataUnlinkingBatch Create a bundle data unlinking batch. BundleDataUnlinkingBatchApi get_bundle_data_unlinking_batch GET /api/bundles/{bundleId}/dataUnlinkingBatch/{batchId} Retrieve a bundle data unlinking batch. BundleDataUnlinkingBatchApi get_bundle_data_unlinking_batch_item GET /api/bundles/{bundleId}/dataUnlinkingBatch/{batchId}/items/{itemId} Retrieve a bundle data unlinking batch item. BundleDataUnlinkingBatchApi get_bundle_data_unlinking_batch_items GET /api/bundles/{bundleId}/dataUnlinkingBatch/{batchId}/items Retrieve a list of bundle data unlinking batch items. BundlePipelineApi get_bundle_pipelines GET /api/bundles/{bundleId}/pipelines Retrieve a list of bundle pipelines. BundlePipelineApi link_pipeline_to_bundle POST /api/bundles/{bundleId}/pipelines/{pipelineId} Link a pipeline to a bundle. BundlePipelineApi unlink_pipeline_from_bundle DELETE /api/bundles/{bundleId}/pipelines/{pipelineId} Unlink a pipeline from a bundle. BundleSampleApi get_bundle_samples GET /api/bundles/{bundleId}/samples Retrieve a list of bundle samples. BundleSampleApi link_sample_to_bundle POST /api/bundles/{bundleId}/samples/{sampleId} Link a sample to a bundle. BundleSampleApi unlink_sample_from_bundle DELETE /api/bundles/{bundleId}/samples/{sampleId} Unlink a sample from a bundle. BundleToolApi get_bundle_tools GET /api/bundles/{bundleId}/tools Retrieve a list of bundle tools. BundleToolApi get_tools_eligible_for_linking_to_bundle GET /api/bundles/{bundleId}/tools/eligibleForLinking Retrieve a list of tools eligible for linking to the bundle. BundleToolApi link_tool_to_bundle POST /api/bundles/{bundleId}/tools/{toolId} Link a tool to a bundle BundleToolApi unlink_tool_from_bundle DELETE /api/bundles/{bundleId}/tools/{toolId} Unlink a tool from this bundle. ConnectorApi cancel_connector POST /api/connectors/{connectorId}:cancel Cancel a connector. ConnectorApi create_connector POST /api/connectors Create a connector. ConnectorApi create_download_rule POST /api/connectors/{connectorId}/downloadRules Create a download rule. ConnectorApi create_upload_rule POST /api/connectors/{connectorId}/uploadRules Create an upload rule. ConnectorApi delete_download_rule DELETE /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Delete a download rule. ConnectorApi delete_upload_rule DELETE /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Delete an upload rule. ConnectorApi disable_connector POST /api/connectors/{connectorId}:disable Disable a connector. ConnectorApi enable_connector POST /api/connectors/{connectorId}:enable Enable a connector. ConnectorApi get_connector GET /api/connectors/{connectorId} Retrieve a connector. ConnectorApi get_connectors GET /api/connectors Retrieve a list of connectors. ConnectorApi get_download_rule GET /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Retrieve a download rule. ConnectorApi get_download_rules GET /api/connectors/{connectorId}/downloadRules Retrieve a list of download rules. ConnectorApi get_upload_rule GET /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Retrieve an upload rule. ConnectorApi get_upload_rules GET /api/connectors/{connectorId}/uploadRules Retrieve a list of upload rules. ConnectorApi update_download_rule PUT /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Update a download rule. ConnectorApi update_upload_rule PUT /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Update an upload rule. DataApi create_download_url_for_data_without_project_context POST /api/data/{dataUrn}:createDownloadUrl Retrieve a download URL for this data. DataApi create_inline_view_url_for_data_without_project_context POST /api/data/{dataUrn}:createInlineViewUrl Retrieve an URL for this data to use for inline view in a browser. DataApi get_data GET /api/data/{dataUrn} Retrieve a data. DataFormatApi get_data_formats GET /api/dataFormats Retrieve a list of data formats. DockerImageApi add_regions POST /api/dockerImages/{imageId}:addRegions Add regions to an existing Docker image. DockerImageApi create_external_docker_image POST /api/dockerImages:createExternal Create an external Docker image. DockerImageApi create_internal_docker_image POST /api/dockerImages:createInternal Create an internal Docker image. DockerImageApi get_docker_image GET /api/dockerImages/{imageId} Retrieve a Docker image. Only the Docker image the user has access to can be retrieved. DockerImageApi get_docker_images GET /api/dockerImages Retrieve a list of Docker images. Only the Docker images the user has access to are returned. DockerImageApi remove_regions POST /api/dockerImages/{imageId}:removeRegions Remove regions to an existing Docker image. EntitledBundleApi accept_terms_of_use_entitled_bundle POST /api/entitledbundles/{entitledBundleId}/termsOfUse:accept Accept terms of use for an entitled bundle EntitledBundleApi get_entitled_bundle GET /api/entitledbundles/{entitledBundleId} Retrieve an entitled bundle. EntitledBundleApi get_entitled_bundle_terms_of_use GET /api/entitledbundles/{entitledBundleId}/termsOfUse Retrieve the last version of terms of use for an entitled bundle. EntitledBundleApi get_entitled_bundle_terms_of_use_acceptance GET /api/entitledbundles/{entitledBundleId}/termsOfUse/userAcceptance/currentUser Retrieve the acceptance record for an entitled bundle for the current user. EntitledBundleApi get_entitled_bundles GET /api/entitledbundles Retrieve a list of entitled bundles. EntitlementDetailApi find_all_matching_activation_codes_for_cwl POST /api/activationCodes:findAllMatchingForCwl Search all matching activation code details for a Cwl pipeline. EntitlementDetailApi find_all_matching_activation_codes_for_nextflow POST /api/activationCodes:findAllMatchingForNextflow Search all matching activation code details for a Nextflow pipeline. EntitlementDetailApi find_best_matching_activation_code_for_cwl POST /api/activationCodes:findBestMatchingForCwl Search the best matching activation code detail for Cwl pipeline. EntitlementDetailApi find_best_matching_activation_codes_for_nextflow POST /api/activationCodes:findBestMatchingForNextflow Search the best matching activation code details for Nextflow pipeline. EventCodeApi get_event_codes GET /api/eventCodes Retrieve event codes EventLogApi get_event_logs GET /api/eventLog Retrieve a list of event logs. EventLogApi search_event_logs POST /api/eventLog:search Search event logs. JobApi get_job GET /api/jobs/{jobId} Retrieve a job. JobApi get_jobs GET /api/jobs Retrieve a list of jobs. MetadataModelApi get_metadata_model GET /api/metadataModels/{metadataModelId} Retrieve a metadata model. Only metadata models that the user has access to can be retrieved. MetadataModelApi get_metadata_model_fields GET /api/metadataModels/{metadataModelId}/fields Retrieve the fields of a metadata model. Only metadata models that the user has access to can be retrieved. MetadataModelApi get_metadata_models GET /api/metadataModels Retrieve the metadata models for the tenant associated to the security context. MetadataModelApi get_tenant_model GET /api/metadataModels/tenantModel Retrieve the tenant model for the tenant associated to the security context. NotificationChannelApi create_notification_channel POST /api/notificationChannels Create a notification channel NotificationChannelApi delete_notification_channel DELETE /api/notificationChannels/{channelId} Delete a notification channel NotificationChannelApi get_notification_channel GET /api/notificationChannels/{channelId} Retrieve a notification channel NotificationChannelApi get_notification_channels GET /api/notificationChannels Retrieve notification channels NotificationChannelApi update_notification_channel PUT /api/notificationChannels/{channelId} Update a notification channel PipelineApi download_pipeline_file_content GET /api/pipelines/{pipelineId}/files/{fileId}/content Download the contents of a pipeline file. PipelineApi get_pipeline GET /api/pipelines/{pipelineId} Retrieve a pipeline. PipelineApi get_pipeline_configuration_parameters GET /api/pipelines/{pipelineId}/configurationParameters Retrieve configuration parameters for a pipeline. PipelineApi get_pipeline_files GET /api/pipelines/{pipelineId}/files Retrieve files for a pipeline. PipelineApi get_pipeline_html_documentation GET /api/pipelines/{pipelineId}/documentation/HTML Retrieve HTML documentation for a project pipeline. PipelineApi get_pipeline_input_parameters GET /api/pipelines/{pipelineId}/inputParameters Retrieve input parameters for a pipeline. PipelineApi get_pipeline_reference_sets GET /api/pipelines/{pipelineId}/referenceSets Retrieve the reference sets of a pipeline. PipelineApi get_pipelines GET /api/pipelines Retrieve a list of pipelines. PipelineLanguageApi get_nextflow_versions GET /api/pipelineLanguages/nextflow/versions Retrieve a list of nextflow versions. ProjectApi change_project_owner POST /api/projects/{projectId}:changeOwner Change the project owner. ProjectApi create_project POST /api/projects Create a new project. ProjectApi get_project GET /api/projects/{projectId} Retrieve a project. ProjectApi get_project_bundle GET /api/projects/{projectId}/bundles/{bundleId} Retrieve a project bundle. ProjectApi get_project_bundles GET /api/projects/{projectId}/bundles Retrieve project bundles. ProjectApi get_projects GET /api/projects Retrieve a list of projects. ProjectApi hide_project POST /api/projects/{projectId}:hide Hide a project. ProjectApi link_project_bundle POST /api/projects/{projectId}/bundles/{bundleId} Link a bundle to a project. ProjectApi unlink_project_bundle DELETE /api/projects/{projectId}/bundles/{bundleId} Unlink a bundle from a project. ProjectApi update_project PUT /api/projects/{projectId} Update a project. ProjectAnalysisApi abort_analysis POST /api/projects/{projectId}/analyses/{analysisId}:abort Abort an analysis. ProjectAnalysisApi create_cwl_analysis POST /api/projects/{projectId}/analysis:cwl Create and start an analysis for a CWL pipeline. ProjectAnalysisApi create_cwl_analysis_with_json_input POST /api/projects/{projectId}/analysis:cwlWithJsonInput Create and start an analysis for a CWL pipeline with an input.json. ProjectAnalysisApi create_cwl_analysis_with_structured_input POST /api/projects/{projectId}/analysis:cwlWithStructuredInput Create and start an analysis for a CWL pipeline with a structured input. ProjectAnalysisApi create_cwl_json_analysis POST /api/projects/{projectId}/analysis:cwlJson Create and start an analysis for a JSON based CWL pipeline. ProjectAnalysisApi create_nextflow_analysis POST /api/projects/{projectId}/analysis:nextflow Create and start an analysis for a Nextflow pipeline. ProjectAnalysisApi create_nextflow_analysis_with_custom_input POST /api/projects/{projectId}/analysis:nextflowWithCustomInput Create and initiate an analysis for a Nextflow pipeline using a custom input, provided in either YAML format or an escaped JSON string. ProjectAnalysisApi create_nextflow_json_analysis POST /api/projects/{projectId}/analysis:nextflowJson Create and start an analysis for a JSON based Nextflow pipeline. ProjectAnalysisApi get_analyses GET /api/projects/{projectId}/analyses Retrieve the list of analyses. ProjectAnalysisApi get_analysis GET /api/projects/{projectId}/analyses/{analysisId} Retrieve an analysis. ProjectAnalysisApi get_analysis_configurations GET /api/projects/{projectId}/analyses/{analysisId}/configurations Retrieve the configurations of an analysis. ProjectAnalysisApi get_analysis_inputs GET /api/projects/{projectId}/analyses/{analysisId}/inputs Retrieve the inputs of an analysis. ProjectAnalysisApi get_analysis_outputs GET /api/projects/{projectId}/analyses/{analysisId}/outputs Retrieve the outputs of an analysis (limited to the first 200.000 files per output folder). When trying to retrieve the listed data with an endpoint such as GET /api/data/{dataUrn}, data which has already been deleted will be skipped. ProjectAnalysisApi get_analysis_reports GET /api/projects/{projectId}/analyses/{analysisId}/reports Retrieve the report configs and associated reports. ProjectAnalysisApi get_analysis_steps GET /api/projects/{projectId}/analyses/{analysisId}/steps Retrieve the individual steps of an analysis. ProjectAnalysisApi get_analysis_usage_details GET /api/projects/{projectId}/analyses/{analysisId}/usage Retrieve the analysis usage details. ProjectAnalysisApi get_cwl_input_json GET /api/projects/{projectId}/analyses/{analysisId}/cwl/inputJson Retrieve the input json of a CWL analysis. ProjectAnalysisApi get_cwl_output_json GET /api/projects/{projectId}/analyses/{analysisId}/cwl/outputJson Retrieve the output json of a CWL analysis. ProjectAnalysisApi get_project_analysis_input_form_values GET /api/projects/{projectId}/analyses/{analysisId}/inputFormValues Retrieve the values from an input form. ProjectAnalysisApi get_raw_analysis_output GET /api/projects/{projectId}/analyses/{analysisId}/rawOutput Retrieve the raw output of an analysis. ProjectAnalysisApi search_analyses POST /api/projects/{projectId}/analysis:search Search analyses. ProjectAnalysisApi update_analysis PUT /api/projects/{projectId}/analyses/{analysisId} Update an analysis. ProjectAnalysisCreationBatchApi create_analysis_creation_batch POST /api/projects/{projectId}/analysisCreationBatch Create and start multiple analyses in batch. ProjectAnalysisCreationBatchApi get_analysis_creation_batch GET /api/projects/{projectId}/analysisCreationBatch/{batchId} Retrieve a analysis creation batch. ProjectAnalysisCreationBatchApi get_analysis_creation_batch_item GET /api/projects/{projectId}/analysisCreationBatch/{batchId}/items/{itemId} Retrieve a analysis creation batch item. ProjectAnalysisCreationBatchApi get_analysis_creation_batch_items GET /api/projects/{projectId}/analysisCreationBatch/{batchId}/items Retrieve a list of analysis creation batch items. ProjectAnalysisStorageApi get_project_analysis_storage_options GET /api/projects/{projectId}/analysisStorages Retrieve the list of project analysis storage options. ProjectBaseApi create_base_connection_details POST /api/projects/{projectId}/base:connectionDetails Creates the connection details to snowflake instance. ProjectBaseApi get_base_job GET /api/projects/{projectId}/base/jobs/{baseJobId} Retrieve a base job. ProjectBaseApi get_base_jobs GET /api/projects/{projectId}/base/jobs Retrieve a list of base jobs ProjectBaseApi get_base_tables GET /api/projects/{projectId}/base/tables Retrieve a list of base tables. ProjectBaseApi load_data POST /api/projects/{projectId}/base/tables/{tableId}:loadData Load data in a base table. ProjectCustomEventsApi create_custom_event POST /api/projects/{projectId}/customEvents Create a new custom event. ProjectCustomNotificationSubscriptionsApi create_custom_notification_subscription POST /api/projects/{projectId}/customNotificationSubscriptions Create a custom notification subscription ProjectCustomNotificationSubscriptionsApi delete_custom_notification_subscription DELETE /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Delete a custom notification subscription ProjectCustomNotificationSubscriptionsApi get_custom_notification_subscription GET /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Retrieve a notification subscription ProjectCustomNotificationSubscriptionsApi get_custom_notification_subscriptions GET /api/projects/{projectId}/customNotificationSubscriptions Retrieve notification subscriptions ProjectCustomNotificationSubscriptionsApi update_custom_notification_subscription PUT /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Update a notification subscription ProjectDataApi add_secondary_data POST /api/projects/{projectId}/data/{dataId}/secondaryData/{secondaryDataId} Add secondary data to data. ProjectDataApi archive_data POST /api/projects/{projectId}/data/{dataId}:archive Schedule this data for archival. ProjectDataApi complete_folder_upload_session POST /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId}:complete Complete a trackable folder upload session. ProjectDataApi create_data_in_project POST /api/projects/{projectId}/data Create data in this project. ProjectDataApi create_download_url_for_data POST /api/projects/{projectId}/data/{dataId}:createDownloadUrl Retrieve a download URL for this data. ProjectDataApi create_download_urls_for_data POST /api/projects/{projectId}/data:createDownloadUrls Retrieve download URLs for the data. ProjectDataApi create_file POST /api/projects/{projectId}/data:createFile Create a file in this project. ProjectDataApi create_file_with_temporary_credentials POST /api/projects/{projectId}/data:createFileWithTemporaryCredentials Create a file in this project, and retrieve temporary credentials for it. ProjectDataApi create_file_with_upload_url POST /api/projects/{projectId}/data:createFileWithUploadUrl Create a file in this project, and retrieve an upload url for it. ProjectDataApi create_folder POST /api/projects/{projectId}/data:createFolder Create a folder in this project. ProjectDataApi create_folder_upload_session POST /api/projects/{projectId}/data/{dataId}/folderUploadSessions Create a trackable folder upload session. ProjectDataApi create_folder_with_temporary_credentials POST /api/projects/{projectId}/data:createFolderWithTemporaryCredentials Create a folder in this project, and and retrieve temporary credentials for it. ProjectDataApi create_folder_with_upload_session POST /api/projects/{projectId}/data:createFolderWithUploadSession Create a folder in this project, and create a trackable folder upload session. ProjectDataApi create_inline_view_url_for_data POST /api/projects/{projectId}/data/{dataId}:createInlineViewUrl Retrieve an URL for this data to use for inline view in a browser. ProjectDataApi create_non_indexed_folder POST /api/projects/{projectId}/data:createNonIndexedFolder Create a non indexed folder in this project. The folder will be created as a top-level folder. ProjectDataApi create_temporary_credentials_for_data POST /api/projects/{projectId}/data/{dataId}:createTemporaryCredentials Retrieve temporary credentials for this data. ProjectDataApi create_upload_url_for_data POST /api/projects/{projectId}/data/{dataId}:createUploadUrl Retrieve an upload URL for this data. ProjectDataApi delete_data POST /api/projects/{projectId}/data/{dataId}:delete Schedule this data for deletion. ProjectDataApi get_data_eligible_for_linking GET /api/projects/{projectId}/data/eligibleForLinking Retrieve a list of data eligible for linking to the current project. ProjectDataApi get_folder_upload_session GET /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId} Retrieve folder upload session details. ProjectDataApi get_non_sample_project_data GET /api/projects/{projectId}/data/nonSampleData Retrieve a list of project data not linked to a sample. ProjectDataApi get_project_data GET /api/projects/{projectId}/data/{dataId} Retrieve a project data. ProjectDataApi get_project_data_children GET /api/projects/{projectId}/data/{dataId}/children Retrieve the children of this data. ProjectDataApi get_project_data_list GET /api/projects/{projectId}/data Retrieve the list of project data. ProjectDataApi get_projects_linked_to_data GET /api/projects/{projectId}/data/{dataId}/linkedProjects Retrieve a list of projects to which this data is linked. ProjectDataApi get_secondary_data GET /api/projects/{projectId}/data/{dataId}/secondaryData Retrieve a list of secondary data for data. ProjectDataApi link_data_to_project POST /api/projects/{projectId}/data/{dataId} Link data to this project. ProjectDataApi remove_secondary_data DELETE /api/projects/{projectId}/data/{dataId}/secondaryData/{secondaryDataId} Remove secondary data from data. ProjectDataApi schedule_download_for_data POST /api/projects/{projectId}/data/{dataId}:scheduleDownload Schedule a download. ProjectDataApi unarchive_data POST /api/projects/{projectId}/data/{dataId}:unarchive Schedule this data for unarchival. ProjectDataApi unlink_data_from_project POST /api/projects/{projectId}/data/{dataId}:unlink Unlink data from this project. ProjectDataApi update_project_data PUT /api/projects/{projectId}/data/{dataId} Update this project data. ProjectDataCopyBatchApi create_project_data_copy_batch POST /api/projects/{projectId}/dataCopyBatch Create a project data copy batch. ProjectDataCopyBatchApi get_project_data_copy_batch GET /api/projects/{projectId}/dataCopyBatch/{batchId} Retrieve a project data copy batch. ProjectDataCopyBatchApi get_project_data_copy_batch_item GET /api/projects/{projectId}/dataCopyBatch/{batchId}/items/{itemId} Retrieve a project data copy batch item. ProjectDataCopyBatchApi get_project_data_copy_batch_items GET /api/projects/{projectId}/dataCopyBatch/{batchId}/items Retrieve a list of project data copy batch items. ProjectDataLinkingBatchApi create_project_data_linking_batch POST /api/projects/{projectId}/dataLinkingBatch Create a project data linking batch. ProjectDataLinkingBatchApi get_project_data_linking_batch GET /api/projects/{projectId}/dataLinkingBatch/{batchId} Retrieve a project data linking batch. ProjectDataLinkingBatchApi get_project_data_linking_batch_item GET /api/projects/{projectId}/dataLinkingBatch/{batchId}/items/{itemId} Retrieve a project data linking batch item. ProjectDataLinkingBatchApi get_project_data_linking_batch_items GET /api/projects/{projectId}/dataLinkingBatch/{batchId}/items Retrieve a list of project data linking batch items. ProjectDataMoveBatchApi create_project_data_move_batch POST /api/projects/{projectId}/dataMoveBatch Create a project data move batch. ProjectDataMoveBatchApi get_project_data_move_batch GET /api/projects/{projectId}/dataMoveBatch/{batchId} Retrieve a project data move batch. ProjectDataMoveBatchApi get_project_data_move_batch_item GET /api/projects/{projectId}/dataMoveBatch/{batchId}/items/{itemId} Retrieve a project data move batch item. ProjectDataMoveBatchApi get_project_data_move_batch_items POST /api/projects/{projectId}/dataMoveBatch/{batchId}/items:search Retrieve a list of project data move batch items. ProjectDataTransferApi abort_data_transfer POST /api/projects/{projectId}/dataTransfers/{dataTransferId}:abort Abort a data transfer. ProjectDataTransferApi get_data_transfer GET /api/projects/{projectId}/dataTransfers/{dataTransferId} Retrieve a data transfer. ProjectDataTransferApi get_data_transfers GET /api/projects/{projectId}/dataTransfers Retrieve a list of data transfers. ProjectDataUnlinkingBatchApi create_project_data_unlinking_batch POST /api/projects/{projectId}/dataUnlinkingBatch Create a project data unlinking batch. ProjectDataUnlinkingBatchApi get_project_data_unlinking_batch GET /api/projects/{projectId}/dataUnlinkingBatch/{batchId} Retrieve a project data unlinking batch. ProjectDataUnlinkingBatchApi get_project_data_unlinking_batch_item GET /api/projects/{projectId}/dataUnlinkingBatch/{batchId}/items/{itemId} Retrieve a project data unlinking batch item. ProjectDataUnlinkingBatchApi get_project_data_unlinking_batch_items GET /api/projects/{projectId}/dataUnlinkingBatch/{batchId}/items Retrieve a list of project data unlinking batch items. ProjectDataUpdateBatchApi create_project_data_update_batch POST /api/projects/{projectId}/dataUpdateBatch Create a project data update batch.  Folder contents will be updated recursively.  Time archive/delete cannot be defined for folders. ProjectDataUpdateBatchApi get_project_data_update_batch GET /api/projects/{projectId}/dataUpdateBatch/{batchId} Retrieve a project data update batch. ProjectDataUpdateBatchApi get_project_data_update_batch_item GET /api/projects/{projectId}/dataUpdateBatch/{batchId}/items/{itemId} Retrieve a project data update batch item. ProjectDataUpdateBatchApi get_project_data_update_batch_items GET /api/projects/{projectId}/dataUpdateBatch/{batchId}/items Retrieve a list of project data update batch items. ProjectNotificationSubscriptionsApi create_notification_subscription POST /api/projects/{projectId}/notificationSubscriptions Create a notification subscription ProjectNotificationSubscriptionsApi delete_notification_subscription DELETE /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Delete a notification subscription ProjectNotificationSubscriptionsApi get_notification_subscription GET /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Retrieve a notification subscription ProjectNotificationSubscriptionsApi get_notification_subscriptions GET /api/projects/{projectId}/notificationSubscriptions Retrieve notification subscriptions ProjectNotificationSubscriptionsApi update_notification_subscription PUT /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Update a notification subscription ProjectPermissionApi create_project_permission POST /api/projects/{projectId}/permissions Create a project permission. ProjectPermissionApi get_project_permission GET /api/projects/{projectId}/permissions/{permissionId} Retrieve a project permission. ProjectPermissionApi get_project_permissions GET /api/projects/{projectId}/permissions Retrieve a list of project permissions. ProjectPermissionApi update_project_permission PUT /api/projects/{projectId}/permissions/{permissionId} Update a project permission. ProjectPipelineApi create_additional_project_pipeline_file POST /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles Create an additional input form file for a pipeline. ProjectPipelineApi create_cwl_json_pipeline POST /api/projects/{projectId}/pipelines:createCwlJsonPipeline Create a JSON based CWL pipeline within a project. ProjectPipelineApi create_cwl_pipeline POST /api/projects/{projectId}/pipelines:createCwlPipeline Create a CWL pipeline within a project. ProjectPipelineApi create_nextflow_json_pipeline POST /api/projects/{projectId}/pipelines:createNextflowJsonPipeline Create a JSON based Nextflow pipeline within a project. ProjectPipelineApi create_nextflow_pipeline POST /api/projects/{projectId}/pipelines:createNextflowPipeline Create a Nextflow pipeline within a project. ProjectPipelineApi create_project_pipeline_file POST /api/projects/{projectId}/pipelines/{pipelineId}/files Create a file for a pipeline. ProjectPipelineApi delete_additional_project_pipeline_file DELETE /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles/{fileId} Delete an additional input form file for a pipeline. ProjectPipelineApi delete_project_pipeline_file DELETE /api/projects/{projectId}/pipelines/{pipelineId}/files/{fileId} Delete a file for a pipeline. ProjectPipelineApi download_additional_file_content GET /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles/{fileId}/content Download the contents of an additional input form file. ProjectPipelineApi download_input_form_file_content GET /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/inputFormFile Download the contents of the input form file. ProjectPipelineApi download_on_render_file_content GET /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/onRenderFile Download the contents of the onRender file. ProjectPipelineApi download_on_submit_file_content GET /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/onSubmitFile Download the contents of the onSubmit file. ProjectPipelineApi download_project_pipeline_file_content GET /api/projects/{projectId}/pipelines/{pipelineId}/files/{fileId}/content Download the contents of a pipeline file. ProjectPipelineApi get_project_pipeline GET /api/projects/{projectId}/pipelines/{pipelineId} Retrieve a project pipeline. ProjectPipelineApi get_project_pipeline_additional_files GET /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles Retrieve additional input form files for a project pipeline. ProjectPipelineApi get_project_pipeline_configuration_parameters GET /api/projects/{projectId}/pipelines/{pipelineId}/configurationParameters Retrieve configuration parameters for a project pipeline. ProjectPipelineApi get_project_pipeline_files GET /api/projects/{projectId}/pipelines/{pipelineId}/files Retrieve files for a project pipeline. ProjectPipelineApi get_project_pipeline_html_documentation GET /api/projects/{projectId}/pipelines/{pipelineId}/documentation/HTML Retrieve HTML documentation for a project pipeline. ProjectPipelineApi get_project_pipeline_input_parameters GET /api/projects/{projectId}/pipelines/{pipelineId}/inputParameters Retrieve input parameters for a project pipeline. ProjectPipelineApi get_project_pipeline_reference_sets GET /api/projects/{projectId}/pipelines/{pipelineId}/referenceSets Retrieve the reference sets of a project pipeline. ProjectPipelineApi get_project_pipelines GET /api/projects/{projectId}/pipelines Retrieve a list of project pipelines. ProjectPipelineApi link_pipeline_to_project POST /api/projects/{projectId}/pipelines/{pipelineId} Link a pipeline to a project. ProjectPipelineApi release_project_pipeline POST /api/projects/{projectId}/pipelines/{pipelineId}:release Release a pipeline. ProjectPipelineApi unlink_pipeline_from_project DELETE /api/projects/{projectId}/pipelines/{pipelineId} Unlink a pipeline from a project. ProjectPipelineApi update_additional_file PUT /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles/{fileId}/content Update the contents of an additional input form file. ProjectPipelineApi update_general_attributes_project_pipeline POST /api/projects/{projectId}/pipelines/{pipelineId}/generalAttributes Update the general attributes of a project pipeline. ProjectPipelineApi update_input_form_file PUT /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/inputFormFile Update the contents of the input form file for a pipeline. ProjectPipelineApi update_on_render_file PUT /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/onRenderFile Update the contents of the onRender file for a pipeline. ProjectPipelineApi update_on_submit_file PUT /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/onSubmitFile Update the contents of the onSubmit file for a pipeline. ProjectPipelineApi update_project_pipeline_file PUT /api/projects/{projectId}/pipelines/{pipelineId}/files/{fileId}/content Update the contents of a file for a pipeline. ProjectSampleApi add_metadata_model_to_sample POST /api/projects/{projectId}/samples/{sampleId}/metadata/{metadataModelId} Add a metadata model to a sample. ProjectSampleApi complete_project_sample POST /api/projects/{projectId}/samples/{sampleId}:complete Completes the sample after data has been linked to it. ProjectSampleApi create_sample_in_project POST /api/projects/{projectId}/samples Create a new sample in this project ProjectSampleApi deep_delete_sample POST /api/projects/{projectId}/samples/{sampleId}:deleteDeep Delete a sample together with all of its data. ProjectSampleApi delete_and_unlink_sample POST /api/projects/{projectId}/samples/{sampleId}:deleteUnlink Delete a sample and unlink its data. ProjectSampleApi delete_sample_with_input POST /api/projects/{projectId}/samples/{sampleId}:deleteWithInput Delete a sample as well as its input data. ProjectSampleApi get_project_sample GET /api/projects/{projectId}/samples/{sampleId} Retrieve a project sample. ProjectSampleApi get_project_sample_analyses GET /api/projects/{projectId}/samples/{sampleId}/analyses Retrieve the list of analyses. ProjectSampleApi get_project_samples POST /api/projects/{projectId}/samples:search Retrieve project samples. ProjectSampleApi get_projects_for_sample GET /api/projects/{projectId}/samples/{sampleId}/projects Retrieve a list of projects for this sample. ProjectSampleApi get_sample_data_list GET /api/projects/{projectId}/samples/{sampleId}/data Retrieve the list of sample data. ProjectSampleApi get_sample_history GET /api/projects/{projectId}/samples/{sampleId}/history Retrieve sample history. ProjectSampleApi get_sample_metadata_field GET /api/projects/{projectId}/samples/{sampleId}/metadata/field/{fieldId} Retrieve a metadata field. ProjectSampleApi get_sample_metadata_field_count GET /api/projects/{projectId}/samples/{sampleId}/metadata/{fieldId}/fieldCount Retrieves the number of occurrences of a given field. ProjectSampleApi link_data_to_sample POST /api/projects/{projectId}/samples/{sampleId}/data/{dataId} Link data to a sample. ProjectSampleApi link_sample_to_project POST /api/projects/{projectId}/samples/{sampleId} Link a sample to a project. ProjectSampleApi mark_sample_deleted POST /api/projects/{projectId}/samples/{sampleId}:deleteMark Mark a sample deleted. ProjectSampleApi search_project_sample_analyses POST /api/projects/{projectId}/samples/{sampleId}/analyses:search Search analyses for sample. ProjectSampleApi unlink_data_from_sample POST /api/projects/{projectId}/samples/{sampleId}/data/{dataId}:unlink Unlink data from a sample. ProjectSampleApi unlink_sample_from_project POST /api/projects/{projectId}/samples/{sampleId}:unlink Unlink a sample from a project. ProjectSampleApi update_project_sample PUT /api/projects/{projectId}/samples/{sampleId} Update a project sample. ProjectSampleApi update_sample_metadata_fields POST /api/projects/{projectId}/samples/{sampleId}/metadata:updateFields Update metadata fields. ProjectSampleBatchApi create_sample_creation_batch POST /api/projects/{projectId}/sampleCreationBatch Create a sample creation batch. ProjectSampleBatchApi get_sample_creation_batch GET /api/projects/{projectId}/sampleCreationBatch/{batchId} Retrieve a sample creation batch. ProjectSampleBatchApi get_sample_creation_batch_item GET /api/projects/{projectId}/sampleCreationBatch/{batchId}/items/{itemId} Retrieve a sample creation batch item. ProjectSampleBatchApi get_sample_creation_batch_items GET /api/projects/{projectId}/sampleCreationBatch/{batchId}/items Retrieve a list of sample creation batch items. ProjectWorkflowSessionApi get_workflow_session_configurations GET /api/projects/{projectId}/workflowSessions/{workflowSessionId}/configurations Retrieve the configurations of a workflow session. ProjectWorkflowSessionApi get_workflow_session_inputs GET /api/projects/{projectId}/workflowSessions/{workflowSessionId}/inputs Retrieve the inputs of a workflow session. ProjectWorkflowSessionApi get_workflow_sessions GET /api/projects/{projectId}/workflowSessions Retrieve the list of workflow sessions. ProjectWorkflowSessionApi search_orchestrated_analyses POST /api/projects/{projectId}/workflowSessions/{workflowSessionId}/analyses:search Search analyses orchestrated by the workflow session. ProjectWorkflowSessionApi search_workflow_sessions POST /api/projects/{projectId}/workflowSessions:search Search workflow sessions. ReferenceSetApi get_reference_sets GET /api/referenceSets Retrieve a list of of reference sets. ReferenceSetApi get_species GET /api/referenceSets/{referenceSetId}/species Retrieve a list of species linked to the reference set. RegionApi get_region GET /api/regions/{regionId} Retrieve a region. Only the regions the user has access to through his/her entitlements can be retrieved. RegionApi get_regions GET /api/regions Retrieve a list of regions. Only the regions the user has access to through his/her entitlements are returned. SampleApi get_samples GET /api/samples Retrieve a list of samples. SequencingRunApi get_sequencing_run GET /api/sequencingRuns/{sequencingRunId} Retrieve a sequencing run. StorageBundleApi get_storage_bundles GET /api/storageBundles Retrieve a list of storage bundles. StorageConfigurationApi create_storage_configuration POST /api/storageConfigurations Create a new storage configuration StorageConfigurationApi get_storage_configuration GET /api/storageConfigurations/{storageConfigurationId} Retrieve a storage configuration. StorageConfigurationApi get_storage_configuration_details GET /api/storageConfigurations/{storageConfigurationId}/details Retrieve a storage configuration detail. StorageConfigurationApi get_storage_configurations GET /api/storageConfigurations Retrieve a list of storage configurations. StorageConfigurationApi share_storage_configuration POST /api/storageConfigurations/{storageConfigurationId}:share Share your own storage configuration with tenant. StorageConfigurationApi validate_storage_configuration POST /api/storageConfigurations/{storageConfigurationId}:validate Start validation of your storage configuration. StorageCredentialsApi create_storage_credential POST /api/storageCredentials Create a new storage credential StorageCredentialsApi get_storage_credential GET /api/storageCredentials/{storageCredentialId} Retrieve a storage credential. StorageCredentialsApi get_storage_credentials GET /api/storageCredentials Retrieve a list of storage credentials. StorageCredentialsApi share_storage_credential POST /api/storageCredentials/{storageCredentialId}:share Share your own storage credentials with tenant. StorageCredentialsApi update_storage_credential_secrets POST /api/storageCredentials/{storageCredentialId}:updateSecrets Update a storage credential's secrets. SystemApi get_system_info GET /api/system/info Retrieve system information. TokenApi create_jwt_token POST /api/tokens Generate a JWT using an API-key, Basic Authentication or a psToken. TokenApi refresh_jwt_token POST /api/tokens:refresh Refresh a JWT using a not yet expired, still valid JWT. UserApi approve_user POST /api/users/{userId}:approve Approve a user. UserApi assign_tenant_admin_rights_to_user POST /api/users/{userId}:assignTenantAdministratorRights Assign tenant administrator rights to a user. UserApi get_user GET /api/users/{userId} Retrieve a user. UserApi get_users GET /api/users Retrieve a list of users. UserApi revoke_tenant_admin_rights_to_user POST /api/users/{userId}:revokeTenantAdministratorRights Revoke tenant administrator rights to a user. UserApi update_user PUT /api/users/{userId} Update a user. WorkgroupApi get_workgroup GET /api/workgroups/{workgroupId} Retrieve a workgroup. WorkgroupApi get_workgroups GET /api/workgroups Retrieve a list of workgroups."},{"location":"v3/#documentation-for-models","title":"Documentation For Models","text":"<ul> <li>AWSDetails</li> <li>ActivationCodeDetail</li> <li>ActivationCodeDetailList</li> <li>ActivationCodeDetailUsage</li> <li>AnalysisBaseSpaceDataDetails</li> <li>AnalysisCreationBatch</li> <li>AnalysisCreationBatchItemPagedListV3</li> <li>AnalysisCreationBatchItemPagedListV4</li> <li>AnalysisCreationBatchItemProcessing</li> <li>AnalysisCreationBatchItemRequest</li> <li>AnalysisCreationBatchItemV3</li> <li>AnalysisCreationBatchItemV4</li> <li>AnalysisData</li> <li>AnalysisDataInput</li> <li>AnalysisExternalData</li> <li>AnalysisInput</li> <li>AnalysisInputDataMount</li> <li>AnalysisInputExternalData</li> <li>AnalysisInputList</li> <li>AnalysisOutput</li> <li>AnalysisOutputList</li> <li>AnalysisOutputMapping</li> <li>AnalysisPagedListV3</li> <li>AnalysisPagedListV4</li> <li>AnalysisParameterInput</li> <li>AnalysisPrice</li> <li>AnalysisQueryParameters</li> <li>AnalysisRawOutput</li> <li>AnalysisReferenceDataParameter</li> <li>AnalysisReportData</li> <li>AnalysisReportEntry</li> <li>AnalysisReportEntryList</li> <li>AnalysisS3DataDetails</li> <li>AnalysisStep</li> <li>AnalysisStepList</li> <li>AnalysisStepLogs</li> <li>AnalysisStorageListV3</li> <li>AnalysisStorageListV4</li> <li>AnalysisStorageV3</li> <li>AnalysisStorageV4</li> <li>AnalysisTag</li> <li>AnalysisUsageDetails</li> <li>AnalysisV3</li> <li>AnalysisV4</li> <li>Application</li> <li>ApplicationV4</li> <li>AwsCredentials</li> <li>AwsTempCredentials</li> <li>BaseConnection</li> <li>BaseJob</li> <li>BaseJobList</li> <li>BenchSettings</li> <li>Bundle</li> <li>BundleData</li> <li>BundleDataLinkingBatch</li> <li>BundleDataLinkingBatchItem</li> <li>BundleDataLinkingBatchItemPagedList</li> <li>BundleDataLinkingBatchItemProcessing</li> <li>BundleDataLinkingBatchItemRequest</li> <li>BundleDataPagedList</li> <li>BundleDataUnlinkingBatch</li> <li>BundleDataUnlinkingBatchItem</li> <li>BundleDataUnlinkingBatchItemPagedList</li> <li>BundleDataUnlinkingBatchItemProcessing</li> <li>BundleDataUnlinkingBatchItemRequest</li> <li>BundleList</li> <li>BundlePagedList</li> <li>BundlePipeline</li> <li>BundlePipelineList</li> <li>BundleSample</li> <li>BundleSamplePagedList</li> <li>BundleTool</li> <li>BundleToolsList</li> <li>CWLToolDefinition</li> <li>ChangeProjectOwner</li> <li>CompleteFolderUploadSession</li> <li>Config</li> <li>Connector</li> <li>ConnectorList</li> <li>Country</li> <li>CreateAnalysisCreationBatch</li> <li>CreateAnalysisTag</li> <li>CreateBundle</li> <li>CreateBundleDataLinkingBatch</li> <li>CreateBundleDataLinkingBatchItem</li> <li>CreateBundleDataUnlinkingBatch</li> <li>CreateBundleDataUnlinkingBatchItem</li> <li>CreateConnector</li> <li>CreateCustomEvent</li> <li>CreateCustomNotificationSubscription</li> <li>CreateCwlAnalysis</li> <li>CreateCwlJsonAnalysis</li> <li>CreateCwlWithJsonInputAnalysis</li> <li>CreateCwlWithStructuredInputAnalysis</li> <li>CreateData</li> <li>CreateDownloadRule</li> <li>CreateExternalDockerImage</li> <li>CreateFileAndTemporaryCredentials</li> <li>CreateFileAndUploadUrl</li> <li>CreateFileData</li> <li>CreateFolder</li> <li>CreateFolderAndTemporaryCredentials</li> <li>CreateInternalDockerImage</li> <li>CreateNextflowAnalysis</li> <li>CreateNextflowJsonAnalysis</li> <li>CreateNextflowWithCustomInputAnalysis</li> <li>CreateNonIndexedFolder</li> <li>CreateNotificationChannel</li> <li>CreateNotificationSubscription</li> <li>CreateProject</li> <li>CreateProjectDataCopyBatch</li> <li>CreateProjectDataCopyBatchItem</li> <li>CreateProjectDataLinkingBatch</li> <li>CreateProjectDataLinkingBatchItem</li> <li>CreateProjectDataMoveBatch</li> <li>CreateProjectDataMoveBatchItem</li> <li>CreateProjectDataUnlinkingBatch</li> <li>CreateProjectDataUnlinkingBatchItem</li> <li>CreateProjectDataUpdateBatch</li> <li>CreateProjectPermission</li> <li>CreateProjectPermissionV4</li> <li>CreateSample</li> <li>CreateSampleCreationBatch</li> <li>CreateSampleCreationBatchDataItem</li> <li>CreateSampleCreationBatchSampleItem</li> <li>CreateStorageConfiguration</li> <li>CreateStorageCredential</li> <li>CreateTemporaryCredentials</li> <li>CreateTermsOfUse</li> <li>CreateUploadRule</li> <li>CustomNotificationSubscription</li> <li>CustomNotificationSubscriptionList</li> <li>CwlAnalysisInput</li> <li>CwlAnalysisInputJson</li> <li>CwlAnalysisJsonInput</li> <li>CwlAnalysisOutputJson</li> <li>CwlAnalysisStructuredInput</li> <li>CwlAnalysisWithJsonInput</li> <li>CwlAnalysisWithStructuredInput</li> <li>CwlJsonAnalysisInput</li> <li>CwlToolDefinitionList</li> <li>Data</li> <li>DataDetails</li> <li>DataFormat</li> <li>DataFormatPagedList</li> <li>DataIdOrPathList</li> <li>DataList</li> <li>DataPagedList</li> <li>DataTag</li> <li>DataTransfer</li> <li>DataTransferPagedList</li> <li>DataUpdateGroup</li> <li>DataUrlWithPath</li> <li>DataUrlWithPathList</li> <li>DockerImage</li> <li>DockerImageAccess</li> <li>DockerImageList</li> <li>DockerImageRegion</li> <li>DockerImageRegionList</li> <li>Download</li> <li>DownloadRule</li> <li>DownloadRuleList</li> <li>EventCode</li> <li>EventCodeList</li> <li>EventLogListV3</li> <li>EventLogPagedListV4</li> <li>EventLogQueryParametersV4</li> <li>EventLogV3</li> <li>EventLogV4</li> <li>ExecutionConfiguration</li> <li>ExecutionConfigurationList</li> <li>ExternalDockerImageSettings</li> <li>FieldId</li> <li>FieldList</li> <li>FindProjectSamples</li> <li>FindSampleBooleanCondition</li> <li>FindSampleCondition</li> <li>FindSampleDateCondition</li> <li>FindSampleNumberCondition</li> <li>FolderDetails</li> <li>FolderUploadSession</li> <li>InlineView</li> <li>InputFormBaseSpaceDataDetails</li> <li>InputFormData</li> <li>InputFormExternalData</li> <li>InputFormField</li> <li>InputFormFieldChoice</li> <li>InputFormFieldDataFilter</li> <li>InputFormFieldList</li> <li>InputFormFieldValues</li> <li>InputFormGroup</li> <li>InputFormGroupField</li> <li>InputFormGroupFieldValues</li> <li>InputFormS3DataDetails</li> <li>InputFormWithExternalData</li> <li>InputParameter</li> <li>InputParameterList</li> <li>InputPart</li> <li>InputPartMediaType</li> <li>IntegerSettings</li> <li>InternalDockerImageSettings</li> <li>Job</li> <li>JobPagedList</li> <li>Link</li> <li>Links</li> <li>LoadDataInBaseRequest</li> <li>MetadataField</li> <li>MetadataModel</li> <li>MetadataModelList</li> <li>Model</li> <li>ModelField</li> <li>MultipartFormDataInput</li> <li>NextflowAnalysisInput</li> <li>NextflowAnalysisWithCustomInput</li> <li>NextflowJsonAnalysisInput</li> <li>NotificationChannel</li> <li>NotificationChannelList</li> <li>NotificationSubscription</li> <li>NotificationSubscriptionList</li> <li>OptionSettings</li> <li>OptionalSampleTags</li> <li>PipelineBundle</li> <li>PipelineConfigurationParameter</li> <li>PipelineConfigurationParameterList</li> <li>PipelineFile</li> <li>PipelineFileList</li> <li>PipelineHtmlDocumentation</li> <li>PipelineLanguageVersion</li> <li>PipelineLanguageVersionList</li> <li>PipelineList</li> <li>PipelineReportConfig</li> <li>PipelineTag</li> <li>PipelineUpdate</li> <li>PipelineV3</li> <li>PipelineV4</li> <li>Problem</li> <li>Project</li> <li>ProjectBaseTable</li> <li>ProjectBaseTableList</li> <li>ProjectBundle</li> <li>ProjectBundleList</li> <li>ProjectData</li> <li>ProjectDataAndTemporaryCredentials</li> <li>ProjectDataCopyBatch</li> <li>ProjectDataCopyBatchItem</li> <li>ProjectDataCopyBatchItemPagedList</li> <li>ProjectDataCopyBatchItemProcessing</li> <li>ProjectDataCopyBatchItemRequest</li> <li>ProjectDataLinkingBatch</li> <li>ProjectDataLinkingBatchItem</li> <li>ProjectDataLinkingBatchItemPagedList</li> <li>ProjectDataLinkingBatchItemPagedListV4</li> <li>ProjectDataLinkingBatchItemProcessing</li> <li>ProjectDataLinkingBatchItemProcessingV4</li> <li>ProjectDataLinkingBatchItemRequest</li> <li>ProjectDataLinkingBatchItemV4</li> <li>ProjectDataMoveBatch</li> <li>ProjectDataMoveBatchItem</li> <li>ProjectDataMoveBatchItemPagedList</li> <li>ProjectDataMoveBatchItemProcessing</li> <li>ProjectDataMoveBatchItemQueryParameters</li> <li>ProjectDataMoveBatchItemRequest</li> <li>ProjectDataPagedList</li> <li>ProjectDataUnlinkingBatch</li> <li>ProjectDataUnlinkingBatchItem</li> <li>ProjectDataUnlinkingBatchItemPagedList</li> <li>ProjectDataUnlinkingBatchItemProcessing</li> <li>ProjectDataUnlinkingBatchItemRequest</li> <li>ProjectDataUpdateBatch</li> <li>ProjectDataUpdateBatchItem</li> <li>ProjectDataUpdateBatchItemPagedList</li> <li>ProjectDataUpdateBatchItemProcessing</li> <li>ProjectDataUpdateBatchItemRequest</li> <li>ProjectFileAndUploadUrl</li> <li>ProjectFolderAndUploadSession</li> <li>ProjectList</li> <li>ProjectPagedList</li> <li>ProjectPermission</li> <li>ProjectPermissionList</li> <li>ProjectPermissionListV4</li> <li>ProjectPermissionV4</li> <li>ProjectPipeline</li> <li>ProjectPipelineList</li> <li>ProjectPipelineV4</li> <li>ProjectSample</li> <li>ProjectSamplePagedList</li> <li>ProjectTag</li> <li>RcloneTempCredentials</li> <li>ReferenceData</li> <li>ReferenceDataList</li> <li>ReferenceDataType</li> <li>ReferenceDataTypeList</li> <li>ReferenceSet</li> <li>ReferenceSetList</li> <li>Region</li> <li>RegionList</li> <li>RegionV4</li> <li>Sample</li> <li>SampleCreationBatch</li> <li>SampleCreationBatchItemPagedList</li> <li>SampleCreationBatchItemProcessing</li> <li>SampleCreationBatchItemRequest</li> <li>SampleCreationBatchSampleItem</li> <li>SampleHistory</li> <li>SampleHistoryList</li> <li>SamplePagedList</li> <li>SampleTag</li> <li>ScheduleDownload</li> <li>SearchMatchingActivationCodesForCwlAnalysis</li> <li>SearchMatchingActivationCodesForNextflowAnalysis</li> <li>SequencingRun</li> <li>Settings</li> <li>Species</li> <li>SpeciesList</li> <li>StorageBundle</li> <li>StorageBundleList</li> <li>StorageConfiguration</li> <li>StorageConfigurationDetails</li> <li>StorageConfigurationWithDetails</li> <li>StorageConfigurationWithDetailsList</li> <li>StorageCredential</li> <li>StorageCredentialList</li> <li>StringSettings</li> <li>SystemInfo</li> <li>TagUpdate</li> <li>TempCredentials</li> <li>TenantIdentifier</li> <li>TermsOfUse</li> <li>TermsOfUseAcceptance</li> <li>Token</li> <li>UpdateMetadata</li> <li>UpdateMetadataFieldGroup</li> <li>UpdateSingleMetadataField</li> <li>UpdateStorageCredentialSecrets</li> <li>Upload</li> <li>UploadRule</li> <li>UploadRuleList</li> <li>User</li> <li>UserIdentifier</li> <li>UserList</li> <li>WorkflowSessionAnalysisPagedListV4</li> <li>WorkflowSessionAnalysisV4</li> <li>WorkflowSessionConfiguration</li> <li>WorkflowSessionConfigurationList</li> <li>WorkflowSessionData</li> <li>WorkflowSessionExternalData</li> <li>WorkflowSessionInput</li> <li>WorkflowSessionInputList</li> <li>WorkflowSessionPagedListV3</li> <li>WorkflowSessionPagedListV4</li> <li>WorkflowSessionTag</li> <li>WorkflowSessionV3</li> <li>WorkflowSessionV4</li> <li>WorkflowV3</li> <li>WorkflowV4</li> <li>Workgroup</li> <li>WorkgroupList</li> </ul>"},{"location":"v3/#documentation-for-authorization","title":"Documentation For Authorization","text":"<p>Authentication schemes defined for the API: </p>"},{"location":"v3/#jwtauth","title":"JwtAuth","text":"<ul> <li>Type: Bearer authentication (JWT)</li> </ul>"},{"location":"v3/#pstokenauth","title":"PsTokenAuth","text":"<ul> <li>Type: Bearer authentication (psToken)</li> </ul>"},{"location":"v3/#apikeyauth","title":"ApiKeyAuth","text":"<ul> <li>Type: API key</li> <li>API key parameter name: X-API-Key</li> <li>Location: HTTP header</li> </ul>"},{"location":"v3/#basicauth","title":"BasicAuth","text":"<ul> <li>Type: HTTP basic authentication</li> </ul>"},{"location":"v3/#author","title":"Author","text":""},{"location":"v3/docs/AWSDetails/","title":"AWSDetails","text":""},{"location":"v3/docs/AWSDetails/#properties","title":"Properties","text":"Name Type Description Notes bucket_name str The name of the s3 bucket key_prefix str Key prefix within the bucket for ICA to operate within. Data may only be created having this prefix and the given credentials will only give access to it. If not set, default is to allow operation on the full bucket. No leading slash, and must end with a trailing slash. [optional] server_side_encryption_algorithm str Used to specify the type of server-side encryption (SSE) to be used on the object provider. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. For example, specify \\\"AES256\\\" for SSE-S3, or \\\"AWS:KMS\\\" for SSE-KMS. By default if none is specified, \\\"AES256\\\" will be used. [optional] server_side_encryption_key str Used to specify the server-side encryption key that might be associated with the specified server-side encryption algorithm. This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value. Value will be ignored if encryption is \\\"AES256\\\". [optional]"},{"location":"v3/docs/AWSDetails/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.aws_details import AWSDetails\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AWSDetails from a JSON string\naws_details_instance = AWSDetails.from_json(json)\n# print the JSON string representation of the object\nprint(AWSDetails.to_json())\n\n# convert the object into a dict\naws_details_dict = aws_details_instance.to_dict()\n# create an instance of AWSDetails from a dict\naws_details_from_dict = AWSDetails.from_dict(aws_details_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ActivationCodeDetail/","title":"ActivationCodeDetail","text":""},{"location":"v3/docs/ActivationCodeDetail/#properties","title":"Properties","text":"Name Type Description Notes id str allowed_slots int The allowed slot within this code, -1 means unlimited used_slots int Indicates how many slots can are used. moved_slots int The slots that where moved to another activation code original_slots int The assigned allowed slot within this code, -1 means unlimited pipeline_bundle PipelineBundle usages List[ActivationCodeDetailUsage]"},{"location":"v3/docs/ActivationCodeDetail/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.activation_code_detail import ActivationCodeDetail\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ActivationCodeDetail from a JSON string\nactivation_code_detail_instance = ActivationCodeDetail.from_json(json)\n# print the JSON string representation of the object\nprint(ActivationCodeDetail.to_json())\n\n# convert the object into a dict\nactivation_code_detail_dict = activation_code_detail_instance.to_dict()\n# create an instance of ActivationCodeDetail from a dict\nactivation_code_detail_from_dict = ActivationCodeDetail.from_dict(activation_code_detail_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ActivationCodeDetailList/","title":"ActivationCodeDetailList","text":""},{"location":"v3/docs/ActivationCodeDetailList/#properties","title":"Properties","text":"Name Type Description Notes items List[ActivationCodeDetail]"},{"location":"v3/docs/ActivationCodeDetailList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.activation_code_detail_list import ActivationCodeDetailList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ActivationCodeDetailList from a JSON string\nactivation_code_detail_list_instance = ActivationCodeDetailList.from_json(json)\n# print the JSON string representation of the object\nprint(ActivationCodeDetailList.to_json())\n\n# convert the object into a dict\nactivation_code_detail_list_dict = activation_code_detail_list_instance.to_dict()\n# create an instance of ActivationCodeDetailList from a dict\nactivation_code_detail_list_from_dict = ActivationCodeDetailList.from_dict(activation_code_detail_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ActivationCodeDetailUsage/","title":"ActivationCodeDetailUsage","text":""},{"location":"v3/docs/ActivationCodeDetailUsage/#properties","title":"Properties","text":"Name Type Description Notes id str project Project [optional] used_slots int Indicates how many slots can are used, -1 means unused allowed_slots int Indicates how many slots can be used, -1 means unlimited"},{"location":"v3/docs/ActivationCodeDetailUsage/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.activation_code_detail_usage import ActivationCodeDetailUsage\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ActivationCodeDetailUsage from a JSON string\nactivation_code_detail_usage_instance = ActivationCodeDetailUsage.from_json(json)\n# print the JSON string representation of the object\nprint(ActivationCodeDetailUsage.to_json())\n\n# convert the object into a dict\nactivation_code_detail_usage_dict = activation_code_detail_usage_instance.to_dict()\n# create an instance of ActivationCodeDetailUsage from a dict\nactivation_code_detail_usage_from_dict = ActivationCodeDetailUsage.from_dict(activation_code_detail_usage_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisBaseSpaceDataDetails/","title":"AnalysisBaseSpaceDataDetails","text":""},{"location":"v3/docs/AnalysisBaseSpaceDataDetails/#properties","title":"Properties","text":"Name Type Description Notes workgroup_id str [optional] extensions str [optional] path_prefix str [optional]"},{"location":"v3/docs/AnalysisBaseSpaceDataDetails/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_base_space_data_details import AnalysisBaseSpaceDataDetails\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisBaseSpaceDataDetails from a JSON string\nanalysis_base_space_data_details_instance = AnalysisBaseSpaceDataDetails.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisBaseSpaceDataDetails.to_json())\n\n# convert the object into a dict\nanalysis_base_space_data_details_dict = analysis_base_space_data_details_instance.to_dict()\n# create an instance of AnalysisBaseSpaceDataDetails from a dict\nanalysis_base_space_data_details_from_dict = AnalysisBaseSpaceDataDetails.from_dict(analysis_base_space_data_details_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisCreationBatch/","title":"AnalysisCreationBatch","text":""},{"location":"v3/docs/AnalysisCreationBatch/#properties","title":"Properties","text":"Name Type Description Notes id str job Job [optional]"},{"location":"v3/docs/AnalysisCreationBatch/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_creation_batch import AnalysisCreationBatch\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisCreationBatch from a JSON string\nanalysis_creation_batch_instance = AnalysisCreationBatch.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisCreationBatch.to_json())\n\n# convert the object into a dict\nanalysis_creation_batch_dict = analysis_creation_batch_instance.to_dict()\n# create an instance of AnalysisCreationBatch from a dict\nanalysis_creation_batch_from_dict = AnalysisCreationBatch.from_dict(analysis_creation_batch_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisCreationBatchItemPagedListV3/","title":"AnalysisCreationBatchItemPagedListV3","text":""},{"location":"v3/docs/AnalysisCreationBatchItemPagedListV3/#properties","title":"Properties","text":"Name Type Description Notes items List[AnalysisCreationBatchItemV3] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/AnalysisCreationBatchItemPagedListV3/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_creation_batch_item_paged_list_v3 import AnalysisCreationBatchItemPagedListV3\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisCreationBatchItemPagedListV3 from a JSON string\nanalysis_creation_batch_item_paged_list_v3_instance = AnalysisCreationBatchItemPagedListV3.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisCreationBatchItemPagedListV3.to_json())\n\n# convert the object into a dict\nanalysis_creation_batch_item_paged_list_v3_dict = analysis_creation_batch_item_paged_list_v3_instance.to_dict()\n# create an instance of AnalysisCreationBatchItemPagedListV3 from a dict\nanalysis_creation_batch_item_paged_list_v3_from_dict = AnalysisCreationBatchItemPagedListV3.from_dict(analysis_creation_batch_item_paged_list_v3_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisCreationBatchItemPagedListV4/","title":"AnalysisCreationBatchItemPagedListV4","text":""},{"location":"v3/docs/AnalysisCreationBatchItemPagedListV4/#properties","title":"Properties","text":"Name Type Description Notes items List[AnalysisCreationBatchItemV4] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/AnalysisCreationBatchItemPagedListV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_creation_batch_item_paged_list_v4 import AnalysisCreationBatchItemPagedListV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisCreationBatchItemPagedListV4 from a JSON string\nanalysis_creation_batch_item_paged_list_v4_instance = AnalysisCreationBatchItemPagedListV4.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisCreationBatchItemPagedListV4.to_json())\n\n# convert the object into a dict\nanalysis_creation_batch_item_paged_list_v4_dict = analysis_creation_batch_item_paged_list_v4_instance.to_dict()\n# create an instance of AnalysisCreationBatchItemPagedListV4 from a dict\nanalysis_creation_batch_item_paged_list_v4_from_dict = AnalysisCreationBatchItemPagedListV4.from_dict(analysis_creation_batch_item_paged_list_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisCreationBatchItemProcessing/","title":"AnalysisCreationBatchItemProcessing","text":""},{"location":"v3/docs/AnalysisCreationBatchItemProcessing/#properties","title":"Properties","text":"Name Type Description Notes status str additional_status_information str Additional information regarding the status of this batch item. [optional]"},{"location":"v3/docs/AnalysisCreationBatchItemProcessing/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_creation_batch_item_processing import AnalysisCreationBatchItemProcessing\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisCreationBatchItemProcessing from a JSON string\nanalysis_creation_batch_item_processing_instance = AnalysisCreationBatchItemProcessing.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisCreationBatchItemProcessing.to_json())\n\n# convert the object into a dict\nanalysis_creation_batch_item_processing_dict = analysis_creation_batch_item_processing_instance.to_dict()\n# create an instance of AnalysisCreationBatchItemProcessing from a dict\nanalysis_creation_batch_item_processing_from_dict = AnalysisCreationBatchItemProcessing.from_dict(analysis_creation_batch_item_processing_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisCreationBatchItemRequest/","title":"AnalysisCreationBatchItemRequest","text":""},{"location":"v3/docs/AnalysisCreationBatchItemRequest/#properties","title":"Properties","text":"Name Type Description Notes user_reference str pipeline_id str The pipeline for which an analysis will be created. tags AnalysisTag"},{"location":"v3/docs/AnalysisCreationBatchItemRequest/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_creation_batch_item_request import AnalysisCreationBatchItemRequest\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisCreationBatchItemRequest from a JSON string\nanalysis_creation_batch_item_request_instance = AnalysisCreationBatchItemRequest.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisCreationBatchItemRequest.to_json())\n\n# convert the object into a dict\nanalysis_creation_batch_item_request_dict = analysis_creation_batch_item_request_instance.to_dict()\n# create an instance of AnalysisCreationBatchItemRequest from a dict\nanalysis_creation_batch_item_request_from_dict = AnalysisCreationBatchItemRequest.from_dict(analysis_creation_batch_item_request_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisCreationBatchItemV3/","title":"AnalysisCreationBatchItemV3","text":""},{"location":"v3/docs/AnalysisCreationBatchItemV3/#properties","title":"Properties","text":"Name Type Description Notes id str request AnalysisCreationBatchItemRequest processing AnalysisCreationBatchItemProcessing created_analysis AnalysisV3 [optional]"},{"location":"v3/docs/AnalysisCreationBatchItemV3/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_creation_batch_item_v3 import AnalysisCreationBatchItemV3\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisCreationBatchItemV3 from a JSON string\nanalysis_creation_batch_item_v3_instance = AnalysisCreationBatchItemV3.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisCreationBatchItemV3.to_json())\n\n# convert the object into a dict\nanalysis_creation_batch_item_v3_dict = analysis_creation_batch_item_v3_instance.to_dict()\n# create an instance of AnalysisCreationBatchItemV3 from a dict\nanalysis_creation_batch_item_v3_from_dict = AnalysisCreationBatchItemV3.from_dict(analysis_creation_batch_item_v3_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisCreationBatchItemV4/","title":"AnalysisCreationBatchItemV4","text":""},{"location":"v3/docs/AnalysisCreationBatchItemV4/#properties","title":"Properties","text":"Name Type Description Notes id str request AnalysisCreationBatchItemRequest processing AnalysisCreationBatchItemProcessing created_analysis AnalysisV4 [optional]"},{"location":"v3/docs/AnalysisCreationBatchItemV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_creation_batch_item_v4 import AnalysisCreationBatchItemV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisCreationBatchItemV4 from a JSON string\nanalysis_creation_batch_item_v4_instance = AnalysisCreationBatchItemV4.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisCreationBatchItemV4.to_json())\n\n# convert the object into a dict\nanalysis_creation_batch_item_v4_dict = analysis_creation_batch_item_v4_instance.to_dict()\n# create an instance of AnalysisCreationBatchItemV4 from a dict\nanalysis_creation_batch_item_v4_from_dict = AnalysisCreationBatchItemV4.from_dict(analysis_creation_batch_item_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisData/","title":"AnalysisData","text":""},{"location":"v3/docs/AnalysisData/#properties","title":"Properties","text":"Name Type Description Notes children List[AnalysisData] [optional] data_id str The id of the file/folder. format DataFormat name str The name of the file/folder as it was processed by the analysis. data_type str mount_path str The requested location where the input file was located on the machine that was running the pipeline. [optional]"},{"location":"v3/docs/AnalysisData/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_data import AnalysisData\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisData from a JSON string\nanalysis_data_instance = AnalysisData.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisData.to_json())\n\n# convert the object into a dict\nanalysis_data_dict = analysis_data_instance.to_dict()\n# create an instance of AnalysisData from a dict\nanalysis_data_from_dict = AnalysisData.from_dict(analysis_data_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisDataInput/","title":"AnalysisDataInput","text":""},{"location":"v3/docs/AnalysisDataInput/#properties","title":"Properties","text":"Name Type Description Notes parameter_code str data_ids List[str] [optional] mounts List[AnalysisInputDataMount] [optional] external_data List[AnalysisInputExternalData] [optional]"},{"location":"v3/docs/AnalysisDataInput/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_data_input import AnalysisDataInput\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisDataInput from a JSON string\nanalysis_data_input_instance = AnalysisDataInput.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisDataInput.to_json())\n\n# convert the object into a dict\nanalysis_data_input_dict = analysis_data_input_instance.to_dict()\n# create an instance of AnalysisDataInput from a dict\nanalysis_data_input_from_dict = AnalysisDataInput.from_dict(analysis_data_input_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisExternalData/","title":"AnalysisExternalData","text":"<p>The external data used as input by the analysis.</p>"},{"location":"v3/docs/AnalysisExternalData/#properties","title":"Properties","text":"Name Type Description Notes url str type str Possible values are: s3, http, basespace. More types could be added in a future release. mount_path str"},{"location":"v3/docs/AnalysisExternalData/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_external_data import AnalysisExternalData\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisExternalData from a JSON string\nanalysis_external_data_instance = AnalysisExternalData.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisExternalData.to_json())\n\n# convert the object into a dict\nanalysis_external_data_dict = analysis_external_data_instance.to_dict()\n# create an instance of AnalysisExternalData from a dict\nanalysis_external_data_from_dict = AnalysisExternalData.from_dict(analysis_external_data_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisInput/","title":"AnalysisInput","text":""},{"location":"v3/docs/AnalysisInput/#properties","title":"Properties","text":"Name Type Description Notes code str The name of the input-parameter. analysis_data List[AnalysisData] The analysis-data used as input by the analysis. [optional] external_data List[AnalysisExternalData] The external data used as input by the analysis. [optional]"},{"location":"v3/docs/AnalysisInput/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_input import AnalysisInput\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisInput from a JSON string\nanalysis_input_instance = AnalysisInput.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisInput.to_json())\n\n# convert the object into a dict\nanalysis_input_dict = analysis_input_instance.to_dict()\n# create an instance of AnalysisInput from a dict\nanalysis_input_from_dict = AnalysisInput.from_dict(analysis_input_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisInputDataMount/","title":"AnalysisInputDataMount","text":""},{"location":"v3/docs/AnalysisInputDataMount/#properties","title":"Properties","text":"Name Type Description Notes data_id str mount_path str The mount path is the location where the input file will be located on the machine that is running the pipeline. The use of a relative path is encouraged, but an absolute path is also allowed. The path should end with the file name, which may differ from the original input data."},{"location":"v3/docs/AnalysisInputDataMount/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_input_data_mount import AnalysisInputDataMount\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisInputDataMount from a JSON string\nanalysis_input_data_mount_instance = AnalysisInputDataMount.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisInputDataMount.to_json())\n\n# convert the object into a dict\nanalysis_input_data_mount_dict = analysis_input_data_mount_instance.to_dict()\n# create an instance of AnalysisInputDataMount from a dict\nanalysis_input_data_mount_from_dict = AnalysisInputDataMount.from_dict(analysis_input_data_mount_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisInputExternalData/","title":"AnalysisInputExternalData","text":""},{"location":"v3/docs/AnalysisInputExternalData/#properties","title":"Properties","text":"Name Type Description Notes url str type str mount_path str The mount path is the location where the input file will be located on the machine that is running the pipeline. The use of a relative path is encouraged, but an absolute path is also allowed. The path should end with the file name, which may differ from the original input data. [optional] s3_details AnalysisS3DataDetails [optional] basespace_details AnalysisBaseSpaceDataDetails [optional]"},{"location":"v3/docs/AnalysisInputExternalData/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_input_external_data import AnalysisInputExternalData\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisInputExternalData from a JSON string\nanalysis_input_external_data_instance = AnalysisInputExternalData.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisInputExternalData.to_json())\n\n# convert the object into a dict\nanalysis_input_external_data_dict = analysis_input_external_data_instance.to_dict()\n# create an instance of AnalysisInputExternalData from a dict\nanalysis_input_external_data_from_dict = AnalysisInputExternalData.from_dict(analysis_input_external_data_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisInputList/","title":"AnalysisInputList","text":""},{"location":"v3/docs/AnalysisInputList/#properties","title":"Properties","text":"Name Type Description Notes items List[AnalysisInput]"},{"location":"v3/docs/AnalysisInputList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_input_list import AnalysisInputList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisInputList from a JSON string\nanalysis_input_list_instance = AnalysisInputList.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisInputList.to_json())\n\n# convert the object into a dict\nanalysis_input_list_dict = analysis_input_list_instance.to_dict()\n# create an instance of AnalysisInputList from a dict\nanalysis_input_list_from_dict = AnalysisInputList.from_dict(analysis_input_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisOutput/","title":"AnalysisOutput","text":""},{"location":"v3/docs/AnalysisOutput/#properties","title":"Properties","text":"Name Type Description Notes code str The name of the output-parameter. project_id str The ID of the project containing the analysis-data produced by the analysis for the output-parameter. [optional] data List[AnalysisData] [optional]"},{"location":"v3/docs/AnalysisOutput/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_output import AnalysisOutput\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisOutput from a JSON string\nanalysis_output_instance = AnalysisOutput.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisOutput.to_json())\n\n# convert the object into a dict\nanalysis_output_dict = analysis_output_instance.to_dict()\n# create an instance of AnalysisOutput from a dict\nanalysis_output_from_dict = AnalysisOutput.from_dict(analysis_output_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisOutputList/","title":"AnalysisOutputList","text":""},{"location":"v3/docs/AnalysisOutputList/#properties","title":"Properties","text":"Name Type Description Notes items List[AnalysisOutput]"},{"location":"v3/docs/AnalysisOutputList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_output_list import AnalysisOutputList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisOutputList from a JSON string\nanalysis_output_list_instance = AnalysisOutputList.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisOutputList.to_json())\n\n# convert the object into a dict\nanalysis_output_list_dict = analysis_output_list_instance.to_dict()\n# create an instance of AnalysisOutputList from a dict\nanalysis_output_list_from_dict = AnalysisOutputList.from_dict(analysis_output_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisOutputMapping/","title":"AnalysisOutputMapping","text":""},{"location":"v3/docs/AnalysisOutputMapping/#properties","title":"Properties","text":"Name Type Description Notes source_path str type str [optional] target_project_id str target_path str action_on_exist str [optional]"},{"location":"v3/docs/AnalysisOutputMapping/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_output_mapping import AnalysisOutputMapping\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisOutputMapping from a JSON string\nanalysis_output_mapping_instance = AnalysisOutputMapping.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisOutputMapping.to_json())\n\n# convert the object into a dict\nanalysis_output_mapping_dict = analysis_output_mapping_instance.to_dict()\n# create an instance of AnalysisOutputMapping from a dict\nanalysis_output_mapping_from_dict = AnalysisOutputMapping.from_dict(analysis_output_mapping_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisPagedListV3/","title":"AnalysisPagedListV3","text":""},{"location":"v3/docs/AnalysisPagedListV3/#properties","title":"Properties","text":"Name Type Description Notes items List[AnalysisV3] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/AnalysisPagedListV3/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_paged_list_v3 import AnalysisPagedListV3\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisPagedListV3 from a JSON string\nanalysis_paged_list_v3_instance = AnalysisPagedListV3.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisPagedListV3.to_json())\n\n# convert the object into a dict\nanalysis_paged_list_v3_dict = analysis_paged_list_v3_instance.to_dict()\n# create an instance of AnalysisPagedListV3 from a dict\nanalysis_paged_list_v3_from_dict = AnalysisPagedListV3.from_dict(analysis_paged_list_v3_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisPagedListV4/","title":"AnalysisPagedListV4","text":""},{"location":"v3/docs/AnalysisPagedListV4/#properties","title":"Properties","text":"Name Type Description Notes items List[AnalysisV4] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/AnalysisPagedListV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_paged_list_v4 import AnalysisPagedListV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisPagedListV4 from a JSON string\nanalysis_paged_list_v4_instance = AnalysisPagedListV4.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisPagedListV4.to_json())\n\n# convert the object into a dict\nanalysis_paged_list_v4_dict = analysis_paged_list_v4_instance.to_dict()\n# create an instance of AnalysisPagedListV4 from a dict\nanalysis_paged_list_v4_from_dict = AnalysisPagedListV4.from_dict(analysis_paged_list_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisParameterInput/","title":"AnalysisParameterInput","text":"<p>Supports multi-value parameters, only one of attributes 'value' or 'multiValue' must be provided</p>"},{"location":"v3/docs/AnalysisParameterInput/#properties","title":"Properties","text":"Name Type Description Notes code str [optional] value str The value for single-value parameters. [optional] multi_value List[Optional[str]] The values for multi-value parameters. [optional]"},{"location":"v3/docs/AnalysisParameterInput/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_parameter_input import AnalysisParameterInput\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisParameterInput from a JSON string\nanalysis_parameter_input_instance = AnalysisParameterInput.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisParameterInput.to_json())\n\n# convert the object into a dict\nanalysis_parameter_input_dict = analysis_parameter_input_instance.to_dict()\n# create an instance of AnalysisParameterInput from a dict\nanalysis_parameter_input_from_dict = AnalysisParameterInput.from_dict(analysis_parameter_input_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisPrice/","title":"AnalysisPrice","text":""},{"location":"v3/docs/AnalysisPrice/#properties","title":"Properties","text":"Name Type Description Notes amount float The amount of the analysis price [optional] currency str The currency of the analysis price [optional] [default to 'iCredit']"},{"location":"v3/docs/AnalysisPrice/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_price import AnalysisPrice\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisPrice from a JSON string\nanalysis_price_instance = AnalysisPrice.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisPrice.to_json())\n\n# convert the object into a dict\nanalysis_price_dict = analysis_price_instance.to_dict()\n# create an instance of AnalysisPrice from a dict\nanalysis_price_from_dict = AnalysisPrice.from_dict(analysis_price_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisQueryParameters/","title":"AnalysisQueryParameters","text":""},{"location":"v3/docs/AnalysisQueryParameters/#properties","title":"Properties","text":"Name Type Description Notes reference str The reference to filter on. [optional] user_reference str The user-reference to filter on. [optional] status List[Optional[str]] [optional] user_tags List[Optional[str]] The user-tags to filter on. [optional] technical_tags List[Optional[str]] The technical-tags to filter on. [optional] reference_tags List[Optional[str]] The reference-data-tags to filter on. [optional]"},{"location":"v3/docs/AnalysisQueryParameters/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_query_parameters import AnalysisQueryParameters\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisQueryParameters from a JSON string\nanalysis_query_parameters_instance = AnalysisQueryParameters.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisQueryParameters.to_json())\n\n# convert the object into a dict\nanalysis_query_parameters_dict = analysis_query_parameters_instance.to_dict()\n# create an instance of AnalysisQueryParameters from a dict\nanalysis_query_parameters_from_dict = AnalysisQueryParameters.from_dict(analysis_query_parameters_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisRawOutput/","title":"AnalysisRawOutput","text":""},{"location":"v3/docs/AnalysisRawOutput/#properties","title":"Properties","text":"Name Type Description Notes raw_output str The raw output of the analysis."},{"location":"v3/docs/AnalysisRawOutput/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_raw_output import AnalysisRawOutput\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisRawOutput from a JSON string\nanalysis_raw_output_instance = AnalysisRawOutput.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisRawOutput.to_json())\n\n# convert the object into a dict\nanalysis_raw_output_dict = analysis_raw_output_instance.to_dict()\n# create an instance of AnalysisRawOutput from a dict\nanalysis_raw_output_from_dict = AnalysisRawOutput.from_dict(analysis_raw_output_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisReferenceDataParameter/","title":"AnalysisReferenceDataParameter","text":""},{"location":"v3/docs/AnalysisReferenceDataParameter/#properties","title":"Properties","text":"Name Type Description Notes parameter_code str [optional] reference_data_id str [optional]"},{"location":"v3/docs/AnalysisReferenceDataParameter/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_reference_data_parameter import AnalysisReferenceDataParameter\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisReferenceDataParameter from a JSON string\nanalysis_reference_data_parameter_instance = AnalysisReferenceDataParameter.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisReferenceDataParameter.to_json())\n\n# convert the object into a dict\nanalysis_reference_data_parameter_dict = analysis_reference_data_parameter_instance.to_dict()\n# create an instance of AnalysisReferenceDataParameter from a dict\nanalysis_reference_data_parameter_from_dict = AnalysisReferenceDataParameter.from_dict(analysis_reference_data_parameter_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisReportData/","title":"AnalysisReportData","text":"<p>The list of analysis report files</p>"},{"location":"v3/docs/AnalysisReportData/#properties","title":"Properties","text":"Name Type Description Notes data_id str The data id of the report [optional] format str The format of the report [optional] name str The name of the report file [optional]"},{"location":"v3/docs/AnalysisReportData/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_report_data import AnalysisReportData\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisReportData from a JSON string\nanalysis_report_data_instance = AnalysisReportData.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisReportData.to_json())\n\n# convert the object into a dict\nanalysis_report_data_dict = analysis_report_data_instance.to_dict()\n# create an instance of AnalysisReportData from a dict\nanalysis_report_data_from_dict = AnalysisReportData.from_dict(analysis_report_data_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisReportEntry/","title":"AnalysisReportEntry","text":""},{"location":"v3/docs/AnalysisReportEntry/#properties","title":"Properties","text":"Name Type Description Notes report_title str The name of the report config [optional] report_data List[AnalysisReportData] The list of analysis report files [optional]"},{"location":"v3/docs/AnalysisReportEntry/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_report_entry import AnalysisReportEntry\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisReportEntry from a JSON string\nanalysis_report_entry_instance = AnalysisReportEntry.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisReportEntry.to_json())\n\n# convert the object into a dict\nanalysis_report_entry_dict = analysis_report_entry_instance.to_dict()\n# create an instance of AnalysisReportEntry from a dict\nanalysis_report_entry_from_dict = AnalysisReportEntry.from_dict(analysis_report_entry_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisReportEntryList/","title":"AnalysisReportEntryList","text":""},{"location":"v3/docs/AnalysisReportEntryList/#properties","title":"Properties","text":"Name Type Description Notes items List[AnalysisReportEntry]"},{"location":"v3/docs/AnalysisReportEntryList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_report_entry_list import AnalysisReportEntryList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisReportEntryList from a JSON string\nanalysis_report_entry_list_instance = AnalysisReportEntryList.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisReportEntryList.to_json())\n\n# convert the object into a dict\nanalysis_report_entry_list_dict = analysis_report_entry_list_instance.to_dict()\n# create an instance of AnalysisReportEntryList from a dict\nanalysis_report_entry_list_from_dict = AnalysisReportEntryList.from_dict(analysis_report_entry_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisS3DataDetails/","title":"AnalysisS3DataDetails","text":""},{"location":"v3/docs/AnalysisS3DataDetails/#properties","title":"Properties","text":"Name Type Description Notes storage_credentials_id str The storage credentials with the S3 access key. [optional]"},{"location":"v3/docs/AnalysisS3DataDetails/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_s3_data_details import AnalysisS3DataDetails\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisS3DataDetails from a JSON string\nanalysis_s3_data_details_instance = AnalysisS3DataDetails.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisS3DataDetails.to_json())\n\n# convert the object into a dict\nanalysis_s3_data_details_dict = analysis_s3_data_details_instance.to_dict()\n# create an instance of AnalysisS3DataDetails from a dict\nanalysis_s3_data_details_from_dict = AnalysisS3DataDetails.from_dict(analysis_s3_data_details_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisStep/","title":"AnalysisStep","text":""},{"location":"v3/docs/AnalysisStep/#properties","title":"Properties","text":"Name Type Description Notes id str name str status str The status of the analysis step queue_date datetime When the analysis step was queued [optional] start_date datetime When the analysis step was started [optional] end_date datetime When the analysis step was finished [optional] technical bool Indicates which kind of step was executed logs AnalysisStepLogs exit_code int The exit code of the analysis step [optional]"},{"location":"v3/docs/AnalysisStep/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_step import AnalysisStep\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisStep from a JSON string\nanalysis_step_instance = AnalysisStep.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisStep.to_json())\n\n# convert the object into a dict\nanalysis_step_dict = analysis_step_instance.to_dict()\n# create an instance of AnalysisStep from a dict\nanalysis_step_from_dict = AnalysisStep.from_dict(analysis_step_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisStepList/","title":"AnalysisStepList","text":""},{"location":"v3/docs/AnalysisStepList/#properties","title":"Properties","text":"Name Type Description Notes items List[AnalysisStep]"},{"location":"v3/docs/AnalysisStepList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_step_list import AnalysisStepList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisStepList from a JSON string\nanalysis_step_list_instance = AnalysisStepList.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisStepList.to_json())\n\n# convert the object into a dict\nanalysis_step_list_dict = analysis_step_list_instance.to_dict()\n# create an instance of AnalysisStepList from a dict\nanalysis_step_list_from_dict = AnalysisStepList.from_dict(analysis_step_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisStepLogs/","title":"AnalysisStepLogs","text":"<p>Contains references to the standard output (stdout) and standard error (stderr) log streams of an analysis step. In this object both log streams could be provided in 2 different formats: as a WebSocket stream URL or as an ICA Data reference. The status of the analysis step determines which format is provided: a WebSocket URL during step execution, a Data reference after step execution. Note however that an analysis step might not expose log streams at all, which would result in this object being empty. </p>"},{"location":"v3/docs/AnalysisStepLogs/#properties","title":"Properties","text":"Name Type Description Notes std_out_data Data [optional] std_out_stream str A WebSocket URL for reading the standard output log stream. Might be closed by ICA as soon as the analysis step execution has finished. [optional] std_err_data Data [optional] std_err_stream str A WebSocket URL for reading the standard error log stream. Might be closed by ICA as soon as the analysis step execution has finished. [optional]"},{"location":"v3/docs/AnalysisStepLogs/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_step_logs import AnalysisStepLogs\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisStepLogs from a JSON string\nanalysis_step_logs_instance = AnalysisStepLogs.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisStepLogs.to_json())\n\n# convert the object into a dict\nanalysis_step_logs_dict = analysis_step_logs_instance.to_dict()\n# create an instance of AnalysisStepLogs from a dict\nanalysis_step_logs_from_dict = AnalysisStepLogs.from_dict(analysis_step_logs_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisStorageApi/","title":"libica.openapi.v3.AnalysisStorageApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_analysis_storage_options GET /api/analysisStorages Retrieve the list of analysis storage options."},{"location":"v3/docs/AnalysisStorageApi/#get_analysis_storage_options","title":"get_analysis_storage_options","text":"<p>AnalysisStorageListV3 get_analysis_storage_options()</p> <p>Retrieve the list of analysis storage options.</p> <p>This endpoint only returns V3 items. Use the search project analysis storage endpoint to get V4 items.</p>"},{"location":"v3/docs/AnalysisStorageApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_storage_list_v3 import AnalysisStorageListV3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.AnalysisStorageApi(api_client)\n\n    try:\n        # Retrieve the list of analysis storage options.\n        api_response = api_instance.get_analysis_storage_options()\n        print(\"The response of AnalysisStorageApi-&gt;get_analysis_storage_options:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling AnalysisStorageApi-&gt;get_analysis_storage_options: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/AnalysisStorageApi/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v3/docs/AnalysisStorageApi/#return-type","title":"Return type","text":"<p>AnalysisStorageListV3</p>"},{"location":"v3/docs/AnalysisStorageApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/AnalysisStorageApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/AnalysisStorageApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of analysis storage options is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/AnalysisStorageListV3/","title":"AnalysisStorageListV3","text":""},{"location":"v3/docs/AnalysisStorageListV3/#properties","title":"Properties","text":"Name Type Description Notes items List[AnalysisStorageV3]"},{"location":"v3/docs/AnalysisStorageListV3/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_storage_list_v3 import AnalysisStorageListV3\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisStorageListV3 from a JSON string\nanalysis_storage_list_v3_instance = AnalysisStorageListV3.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisStorageListV3.to_json())\n\n# convert the object into a dict\nanalysis_storage_list_v3_dict = analysis_storage_list_v3_instance.to_dict()\n# create an instance of AnalysisStorageListV3 from a dict\nanalysis_storage_list_v3_from_dict = AnalysisStorageListV3.from_dict(analysis_storage_list_v3_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisStorageListV4/","title":"AnalysisStorageListV4","text":""},{"location":"v3/docs/AnalysisStorageListV4/#properties","title":"Properties","text":"Name Type Description Notes items List[AnalysisStorageV4]"},{"location":"v3/docs/AnalysisStorageListV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_storage_list_v4 import AnalysisStorageListV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisStorageListV4 from a JSON string\nanalysis_storage_list_v4_instance = AnalysisStorageListV4.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisStorageListV4.to_json())\n\n# convert the object into a dict\nanalysis_storage_list_v4_dict = analysis_storage_list_v4_instance.to_dict()\n# create an instance of AnalysisStorageListV4 from a dict\nanalysis_storage_list_v4_from_dict = AnalysisStorageListV4.from_dict(analysis_storage_list_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisStorageV3/","title":"AnalysisStorageV3","text":""},{"location":"v3/docs/AnalysisStorageV3/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] name str The name of the storage option description str The description about the storage option [optional]"},{"location":"v3/docs/AnalysisStorageV3/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_storage_v3 import AnalysisStorageV3\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisStorageV3 from a JSON string\nanalysis_storage_v3_instance = AnalysisStorageV3.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisStorageV3.to_json())\n\n# convert the object into a dict\nanalysis_storage_v3_dict = analysis_storage_v3_instance.to_dict()\n# create an instance of AnalysisStorageV3 from a dict\nanalysis_storage_v3_from_dict = AnalysisStorageV3.from_dict(analysis_storage_v3_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisStorageV4/","title":"AnalysisStorageV4","text":""},{"location":"v3/docs/AnalysisStorageV4/#properties","title":"Properties","text":"Name Type Description Notes id str name str The name of the storage option description str The description about the storage option [optional]"},{"location":"v3/docs/AnalysisStorageV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_storage_v4 import AnalysisStorageV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisStorageV4 from a JSON string\nanalysis_storage_v4_instance = AnalysisStorageV4.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisStorageV4.to_json())\n\n# convert the object into a dict\nanalysis_storage_v4_dict = analysis_storage_v4_instance.to_dict()\n# create an instance of AnalysisStorageV4 from a dict\nanalysis_storage_v4_from_dict = AnalysisStorageV4.from_dict(analysis_storage_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisTag/","title":"AnalysisTag","text":""},{"location":"v3/docs/AnalysisTag/#properties","title":"Properties","text":"Name Type Description Notes technical_tags List[str] Technical tags user_tags List[str] User tags reference_tags List[str] Reference tags"},{"location":"v3/docs/AnalysisTag/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_tag import AnalysisTag\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisTag from a JSON string\nanalysis_tag_instance = AnalysisTag.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisTag.to_json())\n\n# convert the object into a dict\nanalysis_tag_dict = analysis_tag_instance.to_dict()\n# create an instance of AnalysisTag from a dict\nanalysis_tag_from_dict = AnalysisTag.from_dict(analysis_tag_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisUsageDetails/","title":"AnalysisUsageDetails","text":""},{"location":"v3/docs/AnalysisUsageDetails/#properties","title":"Properties","text":"Name Type Description Notes price AnalysisPrice [optional]"},{"location":"v3/docs/AnalysisUsageDetails/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_usage_details import AnalysisUsageDetails\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisUsageDetails from a JSON string\nanalysis_usage_details_instance = AnalysisUsageDetails.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisUsageDetails.to_json())\n\n# convert the object into a dict\nanalysis_usage_details_dict = analysis_usage_details_instance.to_dict()\n# create an instance of AnalysisUsageDetails from a dict\nanalysis_usage_details_from_dict = AnalysisUsageDetails.from_dict(analysis_usage_details_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisV3/","title":"AnalysisV3","text":""},{"location":"v3/docs/AnalysisV3/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] reference str The unique reference of the analysis user_reference str The user reference of the analysis pipeline PipelineV3 workflow_session WorkflowSessionV3 [optional] status str The status of the analysis start_date datetime When the analysis was started [optional] end_date datetime When the analysis was finished [optional] summary str The summary of the analysis [optional] analysis_storage AnalysisStorageV3 [optional] analysis_priority str The priority of the analysis [optional] tags AnalysisTag application ApplicationV4 [optional]"},{"location":"v3/docs/AnalysisV3/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_v3 import AnalysisV3\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisV3 from a JSON string\nanalysis_v3_instance = AnalysisV3.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisV3.to_json())\n\n# convert the object into a dict\nanalysis_v3_dict = analysis_v3_instance.to_dict()\n# create an instance of AnalysisV3 from a dict\nanalysis_v3_from_dict = AnalysisV3.from_dict(analysis_v3_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AnalysisV4/","title":"AnalysisV4","text":""},{"location":"v3/docs/AnalysisV4/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner UserIdentifier tenant TenantIdentifier reference str The unique reference of the analysis user_reference str The user reference of the analysis pipeline PipelineV4 workflow_session WorkflowSessionV4 [optional] status str The status of the analysis start_date datetime When the analysis was started [optional] end_date datetime When the analysis was finished [optional] summary str The summary of the analysis [optional] analysis_storage AnalysisStorageV4 [optional] analysis_priority str The priority of the analysis [optional] tags AnalysisTag application ApplicationV4 [optional]"},{"location":"v3/docs/AnalysisV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.analysis_v4 import AnalysisV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AnalysisV4 from a JSON string\nanalysis_v4_instance = AnalysisV4.from_json(json)\n# print the JSON string representation of the object\nprint(AnalysisV4.to_json())\n\n# convert the object into a dict\nanalysis_v4_dict = analysis_v4_instance.to_dict()\n# create an instance of AnalysisV4 from a dict\nanalysis_v4_from_dict = AnalysisV4.from_dict(analysis_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/Application/","title":"Application","text":""},{"location":"v3/docs/Application/#properties","title":"Properties","text":"Name Type Description Notes id str name str The unique name identifying the application type str The type of the application display_name str The display name of the application [optional]"},{"location":"v3/docs/Application/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.application import Application\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of Application from a JSON string\napplication_instance = Application.from_json(json)\n# print the JSON string representation of the object\nprint(Application.to_json())\n\n# convert the object into a dict\napplication_dict = application_instance.to_dict()\n# create an instance of Application from a dict\napplication_from_dict = Application.from_dict(application_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ApplicationV4/","title":"ApplicationV4","text":""},{"location":"v3/docs/ApplicationV4/#properties","title":"Properties","text":"Name Type Description Notes id str name str"},{"location":"v3/docs/ApplicationV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.application_v4 import ApplicationV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ApplicationV4 from a JSON string\napplication_v4_instance = ApplicationV4.from_json(json)\n# print the JSON string representation of the object\nprint(ApplicationV4.to_json())\n\n# convert the object into a dict\napplication_v4_dict = application_v4_instance.to_dict()\n# create an instance of ApplicationV4 from a dict\napplication_v4_from_dict = ApplicationV4.from_dict(application_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AwsCredentials/","title":"AwsCredentials","text":""},{"location":"v3/docs/AwsCredentials/#properties","title":"Properties","text":"Name Type Description Notes access_key_id str The access key found in aws console secret_access_key str The secret access key found in aws console"},{"location":"v3/docs/AwsCredentials/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.aws_credentials import AwsCredentials\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AwsCredentials from a JSON string\naws_credentials_instance = AwsCredentials.from_json(json)\n# print the JSON string representation of the object\nprint(AwsCredentials.to_json())\n\n# convert the object into a dict\naws_credentials_dict = aws_credentials_instance.to_dict()\n# create an instance of AwsCredentials from a dict\naws_credentials_from_dict = AwsCredentials.from_dict(aws_credentials_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/AwsTempCredentials/","title":"AwsTempCredentials","text":""},{"location":"v3/docs/AwsTempCredentials/#properties","title":"Properties","text":"Name Type Description Notes access_key str The S3 access key. secret_key str The S3 secret key. session_token str The S3 session token. region str The S3 region. bucket str The S3 bucket name. object_prefix str The S3 object prefix these temporary credentials will give access to. server_side_encryption_algorithm str Used to specify the type of server-side encryption (SSE) to be used on the object provider. This value is used to determine the Amazon S3 header \\\"x-amz-server-side-encryption\\\" value. For example, specify \\\"AES256\\\" for SSE-S3, or \\\"AWS:KMS\\\" for SSE-KMS. By default if none is specified, \\\"AES256\\\" will be used. [optional] server_side_encryption_key str Used to specify the server-side encryption key that might be associated with the specified server-side encryption algorithm. This value can be the AWS KMS arn key, to be used for the Amazon S3 header \\\"x-amz-server-side-encryption-aws-kms-key-id\\\" value. Value will be ignored if encryption is \\\"AES256\\\" [optional]"},{"location":"v3/docs/AwsTempCredentials/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.aws_temp_credentials import AwsTempCredentials\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of AwsTempCredentials from a JSON string\naws_temp_credentials_instance = AwsTempCredentials.from_json(json)\n# print the JSON string representation of the object\nprint(AwsTempCredentials.to_json())\n\n# convert the object into a dict\naws_temp_credentials_dict = aws_temp_credentials_instance.to_dict()\n# create an instance of AwsTempCredentials from a dict\naws_temp_credentials_from_dict = AwsTempCredentials.from_dict(aws_temp_credentials_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BaseConnection/","title":"BaseConnection","text":""},{"location":"v3/docs/BaseConnection/#properties","title":"Properties","text":"Name Type Description Notes authenticator str Specifies the supported snowflake authenticator to use. Currently 'oauth' only is supported access_token str Specifies the OAuth token to use for authentication dns_name str snowflake dns name. Usually something like '&lt;&lt;account&gt;&gt;.snowflakecomputing.com' user_principal_name str Specifies the user principal name. This is required for some snowflake client (snowSQL for instance) database_name str Specifies the database name bound to the project specified schema_name str Specifies the schema name bound to the project specified warehouse_name str Specifies the warehouse name bound to the project specified role_name str Specifies the role name bound to the project specified"},{"location":"v3/docs/BaseConnection/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.base_connection import BaseConnection\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BaseConnection from a JSON string\nbase_connection_instance = BaseConnection.from_json(json)\n# print the JSON string representation of the object\nprint(BaseConnection.to_json())\n\n# convert the object into a dict\nbase_connection_dict = base_connection_instance.to_dict()\n# create an instance of BaseConnection from a dict\nbase_connection_from_dict = BaseConnection.from_dict(base_connection_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BaseJob/","title":"BaseJob","text":""},{"location":"v3/docs/BaseJob/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] description str A short description of the base job [optional] table ProjectBaseTable [optional] type str The type of the job status str The status of the job overall_duration int The duration of the job expressed in milliseconds [optional] details str Detailed description of the job [optional] bytes_billed int Bytes billed [optional]"},{"location":"v3/docs/BaseJob/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.base_job import BaseJob\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BaseJob from a JSON string\nbase_job_instance = BaseJob.from_json(json)\n# print the JSON string representation of the object\nprint(BaseJob.to_json())\n\n# convert the object into a dict\nbase_job_dict = base_job_instance.to_dict()\n# create an instance of BaseJob from a dict\nbase_job_from_dict = BaseJob.from_dict(base_job_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BaseJobList/","title":"BaseJobList","text":""},{"location":"v3/docs/BaseJobList/#properties","title":"Properties","text":"Name Type Description Notes items List[BaseJob] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/BaseJobList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.base_job_list import BaseJobList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BaseJobList from a JSON string\nbase_job_list_instance = BaseJobList.from_json(json)\n# print the JSON string representation of the object\nprint(BaseJobList.to_json())\n\n# convert the object into a dict\nbase_job_list_dict = base_job_list_instance.to_dict()\n# create an instance of BaseJobList from a dict\nbase_job_list_from_dict = BaseJobList.from_dict(base_job_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BenchSettings/","title":"BenchSettings","text":""},{"location":"v3/docs/BenchSettings/#properties","title":"Properties","text":"Name Type Description Notes cluster_compatible bool access DockerImageAccess"},{"location":"v3/docs/BenchSettings/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bench_settings import BenchSettings\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BenchSettings from a JSON string\nbench_settings_instance = BenchSettings.from_json(json)\n# print the JSON string representation of the object\nprint(BenchSettings.to_json())\n\n# convert the object into a dict\nbench_settings_dict = bench_settings_instance.to_dict()\n# create an instance of BenchSettings from a dict\nbench_settings_from_dict = BenchSettings.from_dict(bench_settings_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/Bundle/","title":"Bundle","text":""},{"location":"v3/docs/Bundle/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] name str short_description str [optional] region Region metadata_model MetadataModel [optional] release_version str version_comment str [optional] status str categories List[Optional[str]] category tags as string array [optional] links Links [optional]"},{"location":"v3/docs/Bundle/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bundle import Bundle\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of Bundle from a JSON string\nbundle_instance = Bundle.from_json(json)\n# print the JSON string representation of the object\nprint(Bundle.to_json())\n\n# convert the object into a dict\nbundle_dict = bundle_instance.to_dict()\n# create an instance of Bundle from a dict\nbundle_from_dict = Bundle.from_dict(bundle_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BundleApi/","title":"libica.openapi.v3.BundleApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description accept_terms_of_use_bundle POST /api/bundles/{bundleId}/termsOfUse:accept accept terms of use for a bundle create_bundle POST /api/bundles Create a new bundle deprecate_bundle POST /api/bundles/{bundleId}:deprecate deprecate a bundle get_bundle GET /api/bundles/{bundleId} Retrieve a bundle. get_bundle_terms_of_use GET /api/bundles/{bundleId}/termsOfUse Retrieve the last version of terms of use for a bundle. get_bundles GET /api/bundles Retrieve a list of bundles. get_terms_of_use_acceptance GET /api/bundles/{bundleId}/termsOfUse/userAcceptance/currentUser Retrieve the acceptance record for a bundle for the current user. insert_bundle_terms_of_use POST /api/bundles/{bundleId}/termsOfUse:new Insert a new version of the terms of use for a bundle release_bundle POST /api/bundles/{bundleId}:release release a bundle"},{"location":"v3/docs/BundleApi/#accept_terms_of_use_bundle","title":"accept_terms_of_use_bundle","text":"<p>accept_terms_of_use_bundle(bundle_id)</p> <p>accept terms of use for a bundle</p>"},{"location":"v3/docs/BundleApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleApi(api_client)\n    bundle_id = 'bundle_id_example' # str | The ID of the bundle where the terms of use are accepted of.\n\n    try:\n        # accept terms of use for a bundle\n        api_instance.accept_terms_of_use_bundle(bundle_id)\n    except Exception as e:\n        print(\"Exception when calling BundleApi-&gt;accept_terms_of_use_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleApi/#parameters","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle where the terms of use are accepted of."},{"location":"v3/docs/BundleApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/BundleApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/BundleApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The terms of use of the bundle is accepted - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleApi/#create_bundle","title":"create_bundle","text":"<p>Bundle create_bundle(create_bundle)</p> <p>Create a new bundle</p>"},{"location":"v3/docs/BundleApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.bundle import Bundle\nfrom libica.openapi.v3.models.create_bundle import CreateBundle\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleApi(api_client)\n    create_bundle = libica.openapi.v3.CreateBundle() # CreateBundle | \n\n    try:\n        # Create a new bundle\n        api_response = api_instance.create_bundle(create_bundle)\n        print(\"The response of BundleApi-&gt;create_bundle:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling BundleApi-&gt;create_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes create_bundle CreateBundle"},{"location":"v3/docs/BundleApi/#return-type_1","title":"Return type","text":"<p>Bundle</p>"},{"location":"v3/docs/BundleApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/BundleApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 201 The bundle is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleApi/#deprecate_bundle","title":"deprecate_bundle","text":"<p>deprecate_bundle(bundle_id)</p> <p>deprecate a bundle</p>"},{"location":"v3/docs/BundleApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleApi(api_client)\n    bundle_id = 'bundle_id_example' # str | The ID of the bundle to deprecate.\n\n    try:\n        # deprecate a bundle\n        api_instance.deprecate_bundle(bundle_id)\n    except Exception as e:\n        print(\"Exception when calling BundleApi-&gt;deprecate_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to deprecate."},{"location":"v3/docs/BundleApi/#return-type_2","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/BundleApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/BundleApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 204 The bundle is successfully deprecated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleApi/#get_bundle","title":"get_bundle","text":"<p>Bundle get_bundle(bundle_id)</p> <p>Retrieve a bundle.</p>"},{"location":"v3/docs/BundleApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.bundle import Bundle\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleApi(api_client)\n    bundle_id = 'bundle_id_example' # str | The ID of the bundle to retrieve\n\n    try:\n        # Retrieve a bundle.\n        api_response = api_instance.get_bundle(bundle_id)\n        print(\"The response of BundleApi-&gt;get_bundle:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling BundleApi-&gt;get_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to retrieve"},{"location":"v3/docs/BundleApi/#return-type_3","title":"Return type","text":"<p>Bundle</p>"},{"location":"v3/docs/BundleApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/BundleApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The bundle is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleApi/#get_bundle_terms_of_use","title":"get_bundle_terms_of_use","text":"<p>TermsOfUse get_bundle_terms_of_use(bundle_id)</p> <p>Retrieve the last version of terms of use for a bundle.</p>"},{"location":"v3/docs/BundleApi/#example_4","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.terms_of_use import TermsOfUse\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleApi(api_client)\n    bundle_id = 'bundle_id_example' # str | The ID of the bundle of the terms of use to retrieve\n\n    try:\n        # Retrieve the last version of terms of use for a bundle.\n        api_response = api_instance.get_bundle_terms_of_use(bundle_id)\n        print(\"The response of BundleApi-&gt;get_bundle_terms_of_use:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling BundleApi-&gt;get_bundle_terms_of_use: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle of the terms of use to retrieve"},{"location":"v3/docs/BundleApi/#return-type_4","title":"Return type","text":"<p>TermsOfUse</p>"},{"location":"v3/docs/BundleApi/#authorization_4","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/BundleApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 Terms of use are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleApi/#get_bundles","title":"get_bundles","text":"<p>BundlePagedList get_bundles(search=search, user_tags=user_tags, technical_tags=technical_tags, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)</p> <p>Retrieve a list of bundles.</p>"},{"location":"v3/docs/BundleApi/#example_5","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.bundle_paged_list import BundlePagedList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleApi(api_client)\n    search = 'search_example' # str | Search (optional)\n    user_tags = 'user_tags_example' # str | User tags to filter on (optional)\n    technical_tags = 'technical_tags_example' # str | Technical tags to filter on (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - name - shortDescription (optional)\n\n    try:\n        # Retrieve a list of bundles.\n        api_response = api_instance.get_bundles(search=search, user_tags=user_tags, technical_tags=technical_tags, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        print(\"The response of BundleApi-&gt;get_bundles:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling BundleApi-&gt;get_bundles: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes search str Search [optional] user_tags str User tags to filter on [optional] technical_tags str Technical tags to filter on [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - name - shortDescription [optional]"},{"location":"v3/docs/BundleApi/#return-type_5","title":"Return type","text":"<p>BundlePagedList</p>"},{"location":"v3/docs/BundleApi/#authorization_5","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/BundleApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 200 The list of bundles is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleApi/#get_terms_of_use_acceptance","title":"get_terms_of_use_acceptance","text":"<p>TermsOfUseAcceptance get_terms_of_use_acceptance(bundle_id)</p> <p>Retrieve the acceptance record for a bundle for the current user.</p>"},{"location":"v3/docs/BundleApi/#example_6","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.terms_of_use_acceptance import TermsOfUseAcceptance\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleApi(api_client)\n    bundle_id = 'bundle_id_example' # str | The ID of the bundle of the terms of use acceptance records.\n\n    try:\n        # Retrieve the acceptance record for a bundle for the current user.\n        api_response = api_instance.get_terms_of_use_acceptance(bundle_id)\n        print(\"The response of BundleApi-&gt;get_terms_of_use_acceptance:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling BundleApi-&gt;get_terms_of_use_acceptance: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle of the terms of use acceptance records."},{"location":"v3/docs/BundleApi/#return-type_6","title":"Return type","text":"<p>TermsOfUseAcceptance</p>"},{"location":"v3/docs/BundleApi/#authorization_6","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/BundleApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 200 Terms of use acceptance is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleApi/#insert_bundle_terms_of_use","title":"insert_bundle_terms_of_use","text":"<p>TermsOfUse insert_bundle_terms_of_use(bundle_id, create_terms_of_use)</p> <p>Insert a new version of the terms of use for a bundle</p>"},{"location":"v3/docs/BundleApi/#example_7","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_terms_of_use import CreateTermsOfUse\nfrom libica.openapi.v3.models.terms_of_use import TermsOfUse\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleApi(api_client)\n    bundle_id = 'bundle_id_example' # str | The ID of the bundle to update\n    create_terms_of_use = libica.openapi.v3.CreateTermsOfUse() # CreateTermsOfUse | \n\n    try:\n        # Insert a new version of the terms of use for a bundle\n        api_response = api_instance.insert_bundle_terms_of_use(bundle_id, create_terms_of_use)\n        print(\"The response of BundleApi-&gt;insert_bundle_terms_of_use:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling BundleApi-&gt;insert_bundle_terms_of_use: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to update create_terms_of_use CreateTermsOfUse"},{"location":"v3/docs/BundleApi/#return-type_7","title":"Return type","text":"<p>TermsOfUse</p>"},{"location":"v3/docs/BundleApi/#authorization_7","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/x-www-form-urlencoded, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/BundleApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 200 A new version of the terms of use are successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleApi/#release_bundle","title":"release_bundle","text":"<p>release_bundle(bundle_id)</p> <p>release a bundle</p>"},{"location":"v3/docs/BundleApi/#example_8","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleApi(api_client)\n    bundle_id = 'bundle_id_example' # str | The ID of the bundle to release\n\n    try:\n        # release a bundle\n        api_instance.release_bundle(bundle_id)\n    except Exception as e:\n        print(\"Exception when calling BundleApi-&gt;release_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to release"},{"location":"v3/docs/BundleApi/#return-type_8","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/BundleApi/#authorization_8","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/BundleApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 204 The bundle is successfully released - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleData/","title":"BundleData","text":""},{"location":"v3/docs/BundleData/#properties","title":"Properties","text":"Name Type Description Notes data Data bundle_id str"},{"location":"v3/docs/BundleData/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bundle_data import BundleData\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BundleData from a JSON string\nbundle_data_instance = BundleData.from_json(json)\n# print the JSON string representation of the object\nprint(BundleData.to_json())\n\n# convert the object into a dict\nbundle_data_dict = bundle_data_instance.to_dict()\n# create an instance of BundleData from a dict\nbundle_data_from_dict = BundleData.from_dict(bundle_data_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BundleDataApi/","title":"libica.openapi.v3.BundleDataApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_bundle_data GET /api/bundles/{bundleId}/data Retrieve the list of bundle data. link_data_to_bundle POST /api/bundles/{bundleId}/data/{dataId} Link data to this bundle. unlink_data_from_bundle DELETE /api/bundles/{bundleId}/data/{dataId} Unlink data from this bundle."},{"location":"v3/docs/BundleDataApi/#get_bundle_data","title":"get_bundle_data","text":"<p>BundleDataPagedList get_bundle_data(bundle_id, full_text=full_text, id=id, filename=filename, filename_match_mode=filename_match_mode, file_path=file_path, file_path_match_mode=file_path_match_mode, status=status, format_id=format_id, format_code=format_code, type=type, parent_folder_id=parent_folder_id, parent_folder_path=parent_folder_path, creation_date_after=creation_date_after, creation_date_before=creation_date_before, status_date_after=status_date_after, status_date_before=status_date_before, user_tag=user_tag, user_tag_match_mode=user_tag_match_mode, run_input_tag=run_input_tag, run_input_tag_match_mode=run_input_tag_match_mode, run_output_tag=run_output_tag, run_output_tag_match_mode=run_output_tag_match_mode, connector_tag=connector_tag, connector_tag_match_mode=connector_tag_match_mode, technical_tag=technical_tag, technical_tag_match_mode=technical_tag_match_mode, not_in_run=not_in_run, not_linked_to_sample=not_linked_to_sample, instrument_run_id=instrument_run_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)</p> <p>Retrieve the list of bundle data.</p>"},{"location":"v3/docs/BundleDataApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.bundle_data_paged_list import BundleDataPagedList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleDataApi(api_client)\n    bundle_id = 'bundle_id_example' # str | \n    full_text = 'full_text_example' # str | To search through multiple fields of data. (optional)\n    id = 'id_example' # str | The ids to filter on. This will always match exact. (optional)\n    filename = 'filename_example' # str | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional)\n    filename_match_mode = 'filename_match_mode_example' # str | How the filenames are filtered. (optional)\n    file_path = 'file_path_example' # str | The paths of the files to filter on. (optional)\n    file_path_match_mode = STARTS_WITH_CASE_INSENSITIVE # str | How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). (optional) (default to STARTS_WITH_CASE_INSENSITIVE)\n    status = 'status_example' # str | The statuses to filter on. (optional)\n    format_id = 'format_id_example' # str | The IDs of the formats to filter on. (optional)\n    format_code = 'format_code_example' # str | The codes of the formats to filter on. (optional)\n    type = 'type_example' # str | The type to filter on. (optional)\n    parent_folder_id = 'parent_folder_id_example' # str | The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. (optional)\n    parent_folder_path = 'parent_folder_path_example' # str | The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files. (optional)\n    creation_date_after = 'creation_date_after_example' # str | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    creation_date_before = 'creation_date_before_example' # str | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_after = 'status_date_after_example' # str | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_before = 'status_date_before_example' # str | The date before which the status has been updated Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    user_tag = 'user_tag_example' # str | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional)\n    user_tag_match_mode = 'user_tag_match_mode_example' # str | How the usertags are filtered. (optional)\n    run_input_tag = 'run_input_tag_example' # str | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_input_tag_match_mode = 'run_input_tag_match_mode_example' # str | How the runInputTags are filtered. (optional)\n    run_output_tag = 'run_output_tag_example' # str | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_output_tag_match_mode = 'run_output_tag_match_mode_example' # str | How the runOutputTags are filtered. (optional)\n    connector_tag = 'connector_tag_example' # str | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional)\n    connector_tag_match_mode = 'connector_tag_match_mode_example' # str | How the connectorTags are filtered. (optional)\n    technical_tag = 'technical_tag_example' # str | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional)\n    technical_tag_match_mode = 'technical_tag_match_mode_example' # str | How the technicalTags are filtered. (optional)\n    not_in_run = 'not_in_run_example' # str | When set to true, the data will be filtered on data which is not used in a run. (optional)\n    not_linked_to_sample = 'not_linked_to_sample_example' # str | When set to true only date that is unlinked to a sample will be returned.  This filter implies a filter of type File. (optional)\n    instrument_run_id = ['instrument_run_id_example'] # List[str] | The instrument run IDs of the sequencing runs to filter on. (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt (optional)\n\n    try:\n        # Retrieve the list of bundle data.\n        api_response = api_instance.get_bundle_data(bundle_id, full_text=full_text, id=id, filename=filename, filename_match_mode=filename_match_mode, file_path=file_path, file_path_match_mode=file_path_match_mode, status=status, format_id=format_id, format_code=format_code, type=type, parent_folder_id=parent_folder_id, parent_folder_path=parent_folder_path, creation_date_after=creation_date_after, creation_date_before=creation_date_before, status_date_after=status_date_after, status_date_before=status_date_before, user_tag=user_tag, user_tag_match_mode=user_tag_match_mode, run_input_tag=run_input_tag, run_input_tag_match_mode=run_input_tag_match_mode, run_output_tag=run_output_tag, run_output_tag_match_mode=run_output_tag_match_mode, connector_tag=connector_tag, connector_tag_match_mode=connector_tag_match_mode, technical_tag=technical_tag, technical_tag_match_mode=technical_tag_match_mode, not_in_run=not_in_run, not_linked_to_sample=not_linked_to_sample, instrument_run_id=instrument_run_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        print(\"The response of BundleDataApi-&gt;get_bundle_data:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling BundleDataApi-&gt;get_bundle_data: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleDataApi/#parameters","title":"Parameters","text":"Name Type Description Notes bundle_id str full_text str To search through multiple fields of data. [optional] id str The ids to filter on. This will always match exact. [optional] filename str The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] file_path str The paths of the files to filter on. [optional] file_path_match_mode str How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). [optional] [default to STARTS_WITH_CASE_INSENSITIVE] status str The statuses to filter on. [optional] format_id str The IDs of the formats to filter on. [optional] format_code str The codes of the formats to filter on. [optional] type str The type to filter on. [optional] parent_folder_id str The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. [optional] parent_folder_path str The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files. [optional] creation_date_after str The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before str The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after str The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before str The date before which the status has been updated Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag str The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag str The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag str The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag str The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag str The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run str When set to true, the data will be filtered on data which is not used in a run. [optional] not_linked_to_sample str When set to true only date that is unlinked to a sample will be returned.  This filter implies a filter of type File. [optional] instrument_run_id List[str] The instrument run IDs of the sequencing runs to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt [optional]"},{"location":"v3/docs/BundleDataApi/#return-type","title":"Return type","text":"<p>BundleDataPagedList</p>"},{"location":"v3/docs/BundleDataApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleDataApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/BundleDataApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of bundle data is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleDataApi/#link_data_to_bundle","title":"link_data_to_bundle","text":"<p>link_data_to_bundle(bundle_id, data_id)</p> <p>Link data to this bundle.</p>"},{"location":"v3/docs/BundleDataApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleDataApi(api_client)\n    bundle_id = 'bundle_id_example' # str | \n    data_id = 'data_id_example' # str | \n\n    try:\n        # Link data to this bundle.\n        api_instance.link_data_to_bundle(bundle_id, data_id)\n    except Exception as e:\n        print(\"Exception when calling BundleDataApi-&gt;link_data_to_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleDataApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes bundle_id str data_id str"},{"location":"v3/docs/BundleDataApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/BundleDataApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleDataApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/BundleDataApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully linked to this bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleDataApi/#unlink_data_from_bundle","title":"unlink_data_from_bundle","text":"<p>unlink_data_from_bundle(bundle_id, data_id)</p> <p>Unlink data from this bundle.</p> <p>Note that for folders, this only unlinks the folder itself, not the folder contents!  Use 'Bundle Data Unlinking Batch' for recursive unlinking.</p>"},{"location":"v3/docs/BundleDataApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleDataApi(api_client)\n    bundle_id = 'bundle_id_example' # str | \n    data_id = 'data_id_example' # str | \n\n    try:\n        # Unlink data from this bundle.\n        api_instance.unlink_data_from_bundle(bundle_id, data_id)\n    except Exception as e:\n        print(\"Exception when calling BundleDataApi-&gt;unlink_data_from_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleDataApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes bundle_id str data_id str"},{"location":"v3/docs/BundleDataApi/#return-type_2","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/BundleDataApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleDataApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/BundleDataApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully unlinked from this bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleDataLinkingBatch/","title":"BundleDataLinkingBatch","text":""},{"location":"v3/docs/BundleDataLinkingBatch/#properties","title":"Properties","text":"Name Type Description Notes id str job Job"},{"location":"v3/docs/BundleDataLinkingBatch/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bundle_data_linking_batch import BundleDataLinkingBatch\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BundleDataLinkingBatch from a JSON string\nbundle_data_linking_batch_instance = BundleDataLinkingBatch.from_json(json)\n# print the JSON string representation of the object\nprint(BundleDataLinkingBatch.to_json())\n\n# convert the object into a dict\nbundle_data_linking_batch_dict = bundle_data_linking_batch_instance.to_dict()\n# create an instance of BundleDataLinkingBatch from a dict\nbundle_data_linking_batch_from_dict = BundleDataLinkingBatch.from_dict(bundle_data_linking_batch_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BundleDataLinkingBatchApi/","title":"libica.openapi.v3.BundleDataLinkingBatchApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_bundle_data_linking_batch POST /api/bundles/{bundleId}/dataLinkingBatch Create a bundle data linking batch. get_bundle_data_linking_batch GET /api/bundles/{bundleId}/dataLinkingBatch/{batchId} Retrieve a bundle data linking batch. get_bundle_data_linking_batch_item GET /api/bundles/{bundleId}/dataLinkingBatch/{batchId}/items/{itemId} Retrieve a bundle data linking batch item. get_bundle_data_linking_batch_items GET /api/bundles/{bundleId}/dataLinkingBatch/{batchId}/items Retrieve a list of bundle data linking batch items."},{"location":"v3/docs/BundleDataLinkingBatchApi/#create_bundle_data_linking_batch","title":"create_bundle_data_linking_batch","text":"<p>BundleDataLinkingBatch create_bundle_data_linking_batch(bundle_id, create_bundle_data_linking_batch)</p> <p>Create a bundle data linking batch.</p>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.bundle_data_linking_batch import BundleDataLinkingBatch\nfrom libica.openapi.v3.models.create_bundle_data_linking_batch import CreateBundleDataLinkingBatch\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleDataLinkingBatchApi(api_client)\n    bundle_id = 'bundle_id_example' # str | \n    create_bundle_data_linking_batch = libica.openapi.v3.CreateBundleDataLinkingBatch() # CreateBundleDataLinkingBatch | \n\n    try:\n        # Create a bundle data linking batch.\n        api_response = api_instance.create_bundle_data_linking_batch(bundle_id, create_bundle_data_linking_batch)\n        print(\"The response of BundleDataLinkingBatchApi-&gt;create_bundle_data_linking_batch:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling BundleDataLinkingBatchApi-&gt;create_bundle_data_linking_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#parameters","title":"Parameters","text":"Name Type Description Notes bundle_id str create_bundle_data_linking_batch CreateBundleDataLinkingBatch"},{"location":"v3/docs/BundleDataLinkingBatchApi/#return-type","title":"Return type","text":"<p>BundleDataLinkingBatch</p>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The bundle data linking batch is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#get_bundle_data_linking_batch","title":"get_bundle_data_linking_batch","text":"<p>BundleDataLinkingBatch get_bundle_data_linking_batch(bundle_id, batch_id)</p> <p>Retrieve a bundle data linking batch.</p>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.bundle_data_linking_batch import BundleDataLinkingBatch\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleDataLinkingBatchApi(api_client)\n    bundle_id = 'bundle_id_example' # str | \n    batch_id = 'batch_id_example' # str | \n\n    try:\n        # Retrieve a bundle data linking batch.\n        api_response = api_instance.get_bundle_data_linking_batch(bundle_id, batch_id)\n        print(\"The response of BundleDataLinkingBatchApi-&gt;get_bundle_data_linking_batch:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling BundleDataLinkingBatchApi-&gt;get_bundle_data_linking_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes bundle_id str batch_id str"},{"location":"v3/docs/BundleDataLinkingBatchApi/#return-type_1","title":"Return type","text":"<p>BundleDataLinkingBatch</p>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The bundle data linking batch is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#get_bundle_data_linking_batch_item","title":"get_bundle_data_linking_batch_item","text":"<p>BundleDataLinkingBatchItem get_bundle_data_linking_batch_item(bundle_id, batch_id, item_id)</p> <p>Retrieve a bundle data linking batch item.</p>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.bundle_data_linking_batch_item import BundleDataLinkingBatchItem\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleDataLinkingBatchApi(api_client)\n    bundle_id = 'bundle_id_example' # str | \n    batch_id = 'batch_id_example' # str | \n    item_id = 'item_id_example' # str | \n\n    try:\n        # Retrieve a bundle data linking batch item.\n        api_response = api_instance.get_bundle_data_linking_batch_item(bundle_id, batch_id, item_id)\n        print(\"The response of BundleDataLinkingBatchApi-&gt;get_bundle_data_linking_batch_item:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling BundleDataLinkingBatchApi-&gt;get_bundle_data_linking_batch_item: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes bundle_id str batch_id str item_id str"},{"location":"v3/docs/BundleDataLinkingBatchApi/#return-type_2","title":"Return type","text":"<p>BundleDataLinkingBatchItem</p>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The bundle data linking batch item is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#get_bundle_data_linking_batch_items","title":"get_bundle_data_linking_batch_items","text":"<p>BundleDataLinkingBatchItemPagedList get_bundle_data_linking_batch_items(bundle_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size)</p> <p>Retrieve a list of bundle data linking batch items.</p>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.bundle_data_linking_batch_item_paged_list import BundleDataLinkingBatchItemPagedList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleDataLinkingBatchApi(api_client)\n    bundle_id = 'bundle_id_example' # str | \n    batch_id = 'batch_id_example' # str | \n    status = ['status_example'] # List[str] | The statuses to filter on. (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n\n    try:\n        # Retrieve a list of bundle data linking batch items.\n        api_response = api_instance.get_bundle_data_linking_batch_items(bundle_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size)\n        print(\"The response of BundleDataLinkingBatchApi-&gt;get_bundle_data_linking_batch_items:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling BundleDataLinkingBatchApi-&gt;get_bundle_data_linking_batch_items: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes bundle_id str batch_id str status List[str] The statuses to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional]"},{"location":"v3/docs/BundleDataLinkingBatchApi/#return-type_3","title":"Return type","text":"<p>BundleDataLinkingBatchItemPagedList</p>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/BundleDataLinkingBatchApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of bundle data linking batch items is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleDataLinkingBatchItem/","title":"BundleDataLinkingBatchItem","text":""},{"location":"v3/docs/BundleDataLinkingBatchItem/#properties","title":"Properties","text":"Name Type Description Notes id str request BundleDataLinkingBatchItemRequest processing BundleDataLinkingBatchItemProcessing bundle_data BundleData [optional]"},{"location":"v3/docs/BundleDataLinkingBatchItem/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bundle_data_linking_batch_item import BundleDataLinkingBatchItem\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BundleDataLinkingBatchItem from a JSON string\nbundle_data_linking_batch_item_instance = BundleDataLinkingBatchItem.from_json(json)\n# print the JSON string representation of the object\nprint(BundleDataLinkingBatchItem.to_json())\n\n# convert the object into a dict\nbundle_data_linking_batch_item_dict = bundle_data_linking_batch_item_instance.to_dict()\n# create an instance of BundleDataLinkingBatchItem from a dict\nbundle_data_linking_batch_item_from_dict = BundleDataLinkingBatchItem.from_dict(bundle_data_linking_batch_item_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BundleDataLinkingBatchItemPagedList/","title":"BundleDataLinkingBatchItemPagedList","text":""},{"location":"v3/docs/BundleDataLinkingBatchItemPagedList/#properties","title":"Properties","text":"Name Type Description Notes items List[BundleDataLinkingBatchItem] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/BundleDataLinkingBatchItemPagedList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bundle_data_linking_batch_item_paged_list import BundleDataLinkingBatchItemPagedList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BundleDataLinkingBatchItemPagedList from a JSON string\nbundle_data_linking_batch_item_paged_list_instance = BundleDataLinkingBatchItemPagedList.from_json(json)\n# print the JSON string representation of the object\nprint(BundleDataLinkingBatchItemPagedList.to_json())\n\n# convert the object into a dict\nbundle_data_linking_batch_item_paged_list_dict = bundle_data_linking_batch_item_paged_list_instance.to_dict()\n# create an instance of BundleDataLinkingBatchItemPagedList from a dict\nbundle_data_linking_batch_item_paged_list_from_dict = BundleDataLinkingBatchItemPagedList.from_dict(bundle_data_linking_batch_item_paged_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BundleDataLinkingBatchItemProcessing/","title":"BundleDataLinkingBatchItemProcessing","text":""},{"location":"v3/docs/BundleDataLinkingBatchItemProcessing/#properties","title":"Properties","text":"Name Type Description Notes status str Possible values are: INITIALISED, WAITING_RESOURCES, RUNNING, LINKED, ALREADY_LINKED, FAILED, PARTIALLY_LINKED. More types could be added in a future release. additional_status_information str Additional information regarding the status of this batch item. [optional]"},{"location":"v3/docs/BundleDataLinkingBatchItemProcessing/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bundle_data_linking_batch_item_processing import BundleDataLinkingBatchItemProcessing\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BundleDataLinkingBatchItemProcessing from a JSON string\nbundle_data_linking_batch_item_processing_instance = BundleDataLinkingBatchItemProcessing.from_json(json)\n# print the JSON string representation of the object\nprint(BundleDataLinkingBatchItemProcessing.to_json())\n\n# convert the object into a dict\nbundle_data_linking_batch_item_processing_dict = bundle_data_linking_batch_item_processing_instance.to_dict()\n# create an instance of BundleDataLinkingBatchItemProcessing from a dict\nbundle_data_linking_batch_item_processing_from_dict = BundleDataLinkingBatchItemProcessing.from_dict(bundle_data_linking_batch_item_processing_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BundleDataLinkingBatchItemRequest/","title":"BundleDataLinkingBatchItemRequest","text":""},{"location":"v3/docs/BundleDataLinkingBatchItemRequest/#properties","title":"Properties","text":"Name Type Description Notes data_id str"},{"location":"v3/docs/BundleDataLinkingBatchItemRequest/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bundle_data_linking_batch_item_request import BundleDataLinkingBatchItemRequest\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BundleDataLinkingBatchItemRequest from a JSON string\nbundle_data_linking_batch_item_request_instance = BundleDataLinkingBatchItemRequest.from_json(json)\n# print the JSON string representation of the object\nprint(BundleDataLinkingBatchItemRequest.to_json())\n\n# convert the object into a dict\nbundle_data_linking_batch_item_request_dict = bundle_data_linking_batch_item_request_instance.to_dict()\n# create an instance of BundleDataLinkingBatchItemRequest from a dict\nbundle_data_linking_batch_item_request_from_dict = BundleDataLinkingBatchItemRequest.from_dict(bundle_data_linking_batch_item_request_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BundleDataPagedList/","title":"BundleDataPagedList","text":""},{"location":"v3/docs/BundleDataPagedList/#properties","title":"Properties","text":"Name Type Description Notes items List[BundleData] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/BundleDataPagedList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bundle_data_paged_list import BundleDataPagedList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BundleDataPagedList from a JSON string\nbundle_data_paged_list_instance = BundleDataPagedList.from_json(json)\n# print the JSON string representation of the object\nprint(BundleDataPagedList.to_json())\n\n# convert the object into a dict\nbundle_data_paged_list_dict = bundle_data_paged_list_instance.to_dict()\n# create an instance of BundleDataPagedList from a dict\nbundle_data_paged_list_from_dict = BundleDataPagedList.from_dict(bundle_data_paged_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BundleDataUnlinkingBatch/","title":"BundleDataUnlinkingBatch","text":""},{"location":"v3/docs/BundleDataUnlinkingBatch/#properties","title":"Properties","text":"Name Type Description Notes id str job Job"},{"location":"v3/docs/BundleDataUnlinkingBatch/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bundle_data_unlinking_batch import BundleDataUnlinkingBatch\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BundleDataUnlinkingBatch from a JSON string\nbundle_data_unlinking_batch_instance = BundleDataUnlinkingBatch.from_json(json)\n# print the JSON string representation of the object\nprint(BundleDataUnlinkingBatch.to_json())\n\n# convert the object into a dict\nbundle_data_unlinking_batch_dict = bundle_data_unlinking_batch_instance.to_dict()\n# create an instance of BundleDataUnlinkingBatch from a dict\nbundle_data_unlinking_batch_from_dict = BundleDataUnlinkingBatch.from_dict(bundle_data_unlinking_batch_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/","title":"libica.openapi.v3.BundleDataUnlinkingBatchApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_bundle_data_unlinking_batch POST /api/bundles/{bundleId}/dataUnlinkingBatch Create a bundle data unlinking batch. get_bundle_data_unlinking_batch GET /api/bundles/{bundleId}/dataUnlinkingBatch/{batchId} Retrieve a bundle data unlinking batch. get_bundle_data_unlinking_batch_item GET /api/bundles/{bundleId}/dataUnlinkingBatch/{batchId}/items/{itemId} Retrieve a bundle data unlinking batch item. get_bundle_data_unlinking_batch_items GET /api/bundles/{bundleId}/dataUnlinkingBatch/{batchId}/items Retrieve a list of bundle data unlinking batch items."},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#create_bundle_data_unlinking_batch","title":"create_bundle_data_unlinking_batch","text":"<p>BundleDataUnlinkingBatch create_bundle_data_unlinking_batch(bundle_id, create_bundle_data_unlinking_batch)</p> <p>Create a bundle data unlinking batch.</p>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.bundle_data_unlinking_batch import BundleDataUnlinkingBatch\nfrom libica.openapi.v3.models.create_bundle_data_unlinking_batch import CreateBundleDataUnlinkingBatch\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleDataUnlinkingBatchApi(api_client)\n    bundle_id = 'bundle_id_example' # str | \n    create_bundle_data_unlinking_batch = libica.openapi.v3.CreateBundleDataUnlinkingBatch() # CreateBundleDataUnlinkingBatch | \n\n    try:\n        # Create a bundle data unlinking batch.\n        api_response = api_instance.create_bundle_data_unlinking_batch(bundle_id, create_bundle_data_unlinking_batch)\n        print(\"The response of BundleDataUnlinkingBatchApi-&gt;create_bundle_data_unlinking_batch:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling BundleDataUnlinkingBatchApi-&gt;create_bundle_data_unlinking_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#parameters","title":"Parameters","text":"Name Type Description Notes bundle_id str create_bundle_data_unlinking_batch CreateBundleDataUnlinkingBatch"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#return-type","title":"Return type","text":"<p>BundleDataUnlinkingBatch</p>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The bundle data unlinking batch is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#get_bundle_data_unlinking_batch","title":"get_bundle_data_unlinking_batch","text":"<p>BundleDataUnlinkingBatch get_bundle_data_unlinking_batch(bundle_id, batch_id)</p> <p>Retrieve a bundle data unlinking batch.</p>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.bundle_data_unlinking_batch import BundleDataUnlinkingBatch\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleDataUnlinkingBatchApi(api_client)\n    bundle_id = 'bundle_id_example' # str | \n    batch_id = 'batch_id_example' # str | \n\n    try:\n        # Retrieve a bundle data unlinking batch.\n        api_response = api_instance.get_bundle_data_unlinking_batch(bundle_id, batch_id)\n        print(\"The response of BundleDataUnlinkingBatchApi-&gt;get_bundle_data_unlinking_batch:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling BundleDataUnlinkingBatchApi-&gt;get_bundle_data_unlinking_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes bundle_id str batch_id str"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#return-type_1","title":"Return type","text":"<p>BundleDataUnlinkingBatch</p>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The bundle data unlinking batch is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#get_bundle_data_unlinking_batch_item","title":"get_bundle_data_unlinking_batch_item","text":"<p>BundleDataUnlinkingBatchItem get_bundle_data_unlinking_batch_item(bundle_id, batch_id, item_id)</p> <p>Retrieve a bundle data unlinking batch item.</p>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.bundle_data_unlinking_batch_item import BundleDataUnlinkingBatchItem\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleDataUnlinkingBatchApi(api_client)\n    bundle_id = 'bundle_id_example' # str | \n    batch_id = 'batch_id_example' # str | \n    item_id = 'item_id_example' # str | \n\n    try:\n        # Retrieve a bundle data unlinking batch item.\n        api_response = api_instance.get_bundle_data_unlinking_batch_item(bundle_id, batch_id, item_id)\n        print(\"The response of BundleDataUnlinkingBatchApi-&gt;get_bundle_data_unlinking_batch_item:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling BundleDataUnlinkingBatchApi-&gt;get_bundle_data_unlinking_batch_item: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes bundle_id str batch_id str item_id str"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#return-type_2","title":"Return type","text":"<p>BundleDataUnlinkingBatchItem</p>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The bundle data unlinking batch item is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#get_bundle_data_unlinking_batch_items","title":"get_bundle_data_unlinking_batch_items","text":"<p>BundleDataUnlinkingBatchItemPagedList get_bundle_data_unlinking_batch_items(bundle_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)</p> <p>Retrieve a list of bundle data unlinking batch items.</p>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.bundle_data_unlinking_batch_item_paged_list import BundleDataUnlinkingBatchItemPagedList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleDataUnlinkingBatchApi(api_client)\n    bundle_id = 'bundle_id_example' # str | \n    batch_id = 'batch_id_example' # str | \n    status = ['status_example'] # List[str] | The statuses to filter on. (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\" (optional)\n\n    try:\n        # Retrieve a list of bundle data unlinking batch items.\n        api_response = api_instance.get_bundle_data_unlinking_batch_items(bundle_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        print(\"The response of BundleDataUnlinkingBatchApi-&gt;get_bundle_data_unlinking_batch_items:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling BundleDataUnlinkingBatchApi-&gt;get_bundle_data_unlinking_batch_items: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes bundle_id str batch_id str status List[str] The statuses to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\" [optional]"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#return-type_3","title":"Return type","text":"<p>BundleDataUnlinkingBatchItemPagedList</p>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/BundleDataUnlinkingBatchApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of bundle data unlinking batch items is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleDataUnlinkingBatchItem/","title":"BundleDataUnlinkingBatchItem","text":""},{"location":"v3/docs/BundleDataUnlinkingBatchItem/#properties","title":"Properties","text":"Name Type Description Notes id str request BundleDataUnlinkingBatchItemRequest processing BundleDataUnlinkingBatchItemProcessing"},{"location":"v3/docs/BundleDataUnlinkingBatchItem/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bundle_data_unlinking_batch_item import BundleDataUnlinkingBatchItem\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BundleDataUnlinkingBatchItem from a JSON string\nbundle_data_unlinking_batch_item_instance = BundleDataUnlinkingBatchItem.from_json(json)\n# print the JSON string representation of the object\nprint(BundleDataUnlinkingBatchItem.to_json())\n\n# convert the object into a dict\nbundle_data_unlinking_batch_item_dict = bundle_data_unlinking_batch_item_instance.to_dict()\n# create an instance of BundleDataUnlinkingBatchItem from a dict\nbundle_data_unlinking_batch_item_from_dict = BundleDataUnlinkingBatchItem.from_dict(bundle_data_unlinking_batch_item_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BundleDataUnlinkingBatchItemPagedList/","title":"BundleDataUnlinkingBatchItemPagedList","text":""},{"location":"v3/docs/BundleDataUnlinkingBatchItemPagedList/#properties","title":"Properties","text":"Name Type Description Notes items List[BundleDataUnlinkingBatchItem] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/BundleDataUnlinkingBatchItemPagedList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bundle_data_unlinking_batch_item_paged_list import BundleDataUnlinkingBatchItemPagedList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BundleDataUnlinkingBatchItemPagedList from a JSON string\nbundle_data_unlinking_batch_item_paged_list_instance = BundleDataUnlinkingBatchItemPagedList.from_json(json)\n# print the JSON string representation of the object\nprint(BundleDataUnlinkingBatchItemPagedList.to_json())\n\n# convert the object into a dict\nbundle_data_unlinking_batch_item_paged_list_dict = bundle_data_unlinking_batch_item_paged_list_instance.to_dict()\n# create an instance of BundleDataUnlinkingBatchItemPagedList from a dict\nbundle_data_unlinking_batch_item_paged_list_from_dict = BundleDataUnlinkingBatchItemPagedList.from_dict(bundle_data_unlinking_batch_item_paged_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BundleDataUnlinkingBatchItemProcessing/","title":"BundleDataUnlinkingBatchItemProcessing","text":""},{"location":"v3/docs/BundleDataUnlinkingBatchItemProcessing/#properties","title":"Properties","text":"Name Type Description Notes status str Possible values are: INITIALISED, WAITING_RESOURCES, RUNNING, UNLINKED, ALREADY_UNLINKED, FAILED, PARTIALLY_UNLINKED. More types could be added in a future release. additional_status_information str Additional information regarding the status of this batch item. [optional]"},{"location":"v3/docs/BundleDataUnlinkingBatchItemProcessing/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bundle_data_unlinking_batch_item_processing import BundleDataUnlinkingBatchItemProcessing\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BundleDataUnlinkingBatchItemProcessing from a JSON string\nbundle_data_unlinking_batch_item_processing_instance = BundleDataUnlinkingBatchItemProcessing.from_json(json)\n# print the JSON string representation of the object\nprint(BundleDataUnlinkingBatchItemProcessing.to_json())\n\n# convert the object into a dict\nbundle_data_unlinking_batch_item_processing_dict = bundle_data_unlinking_batch_item_processing_instance.to_dict()\n# create an instance of BundleDataUnlinkingBatchItemProcessing from a dict\nbundle_data_unlinking_batch_item_processing_from_dict = BundleDataUnlinkingBatchItemProcessing.from_dict(bundle_data_unlinking_batch_item_processing_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BundleDataUnlinkingBatchItemRequest/","title":"BundleDataUnlinkingBatchItemRequest","text":""},{"location":"v3/docs/BundleDataUnlinkingBatchItemRequest/#properties","title":"Properties","text":"Name Type Description Notes data_id str"},{"location":"v3/docs/BundleDataUnlinkingBatchItemRequest/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bundle_data_unlinking_batch_item_request import BundleDataUnlinkingBatchItemRequest\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BundleDataUnlinkingBatchItemRequest from a JSON string\nbundle_data_unlinking_batch_item_request_instance = BundleDataUnlinkingBatchItemRequest.from_json(json)\n# print the JSON string representation of the object\nprint(BundleDataUnlinkingBatchItemRequest.to_json())\n\n# convert the object into a dict\nbundle_data_unlinking_batch_item_request_dict = bundle_data_unlinking_batch_item_request_instance.to_dict()\n# create an instance of BundleDataUnlinkingBatchItemRequest from a dict\nbundle_data_unlinking_batch_item_request_from_dict = BundleDataUnlinkingBatchItemRequest.from_dict(bundle_data_unlinking_batch_item_request_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BundleList/","title":"BundleList","text":""},{"location":"v3/docs/BundleList/#properties","title":"Properties","text":"Name Type Description Notes items List[Bundle]"},{"location":"v3/docs/BundleList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bundle_list import BundleList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BundleList from a JSON string\nbundle_list_instance = BundleList.from_json(json)\n# print the JSON string representation of the object\nprint(BundleList.to_json())\n\n# convert the object into a dict\nbundle_list_dict = bundle_list_instance.to_dict()\n# create an instance of BundleList from a dict\nbundle_list_from_dict = BundleList.from_dict(bundle_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BundlePagedList/","title":"BundlePagedList","text":""},{"location":"v3/docs/BundlePagedList/#properties","title":"Properties","text":"Name Type Description Notes items List[Bundle] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/BundlePagedList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bundle_paged_list import BundlePagedList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BundlePagedList from a JSON string\nbundle_paged_list_instance = BundlePagedList.from_json(json)\n# print the JSON string representation of the object\nprint(BundlePagedList.to_json())\n\n# convert the object into a dict\nbundle_paged_list_dict = bundle_paged_list_instance.to_dict()\n# create an instance of BundlePagedList from a dict\nbundle_paged_list_from_dict = BundlePagedList.from_dict(bundle_paged_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BundlePipeline/","title":"BundlePipeline","text":""},{"location":"v3/docs/BundlePipeline/#properties","title":"Properties","text":"Name Type Description Notes pipeline PipelineV3 bundle_id str"},{"location":"v3/docs/BundlePipeline/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bundle_pipeline import BundlePipeline\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BundlePipeline from a JSON string\nbundle_pipeline_instance = BundlePipeline.from_json(json)\n# print the JSON string representation of the object\nprint(BundlePipeline.to_json())\n\n# convert the object into a dict\nbundle_pipeline_dict = bundle_pipeline_instance.to_dict()\n# create an instance of BundlePipeline from a dict\nbundle_pipeline_from_dict = BundlePipeline.from_dict(bundle_pipeline_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BundlePipelineApi/","title":"libica.openapi.v3.BundlePipelineApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_bundle_pipelines GET /api/bundles/{bundleId}/pipelines Retrieve a list of bundle pipelines. link_pipeline_to_bundle POST /api/bundles/{bundleId}/pipelines/{pipelineId} Link a pipeline to a bundle. unlink_pipeline_from_bundle DELETE /api/bundles/{bundleId}/pipelines/{pipelineId} Unlink a pipeline from a bundle."},{"location":"v3/docs/BundlePipelineApi/#get_bundle_pipelines","title":"get_bundle_pipelines","text":"<p>BundlePipelineList get_bundle_pipelines(bundle_id)</p> <p>Retrieve a list of bundle pipelines.</p>"},{"location":"v3/docs/BundlePipelineApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.bundle_pipeline_list import BundlePipelineList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundlePipelineApi(api_client)\n    bundle_id = 'bundle_id_example' # str | The ID of the bundle to retrieve pipelines for\n\n    try:\n        # Retrieve a list of bundle pipelines.\n        api_response = api_instance.get_bundle_pipelines(bundle_id)\n        print(\"The response of BundlePipelineApi-&gt;get_bundle_pipelines:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling BundlePipelineApi-&gt;get_bundle_pipelines: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundlePipelineApi/#parameters","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to retrieve pipelines for"},{"location":"v3/docs/BundlePipelineApi/#return-type","title":"Return type","text":"<p>BundlePipelineList</p>"},{"location":"v3/docs/BundlePipelineApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundlePipelineApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/BundlePipelineApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of bundle pipelines is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundlePipelineApi/#link_pipeline_to_bundle","title":"link_pipeline_to_bundle","text":"<p>link_pipeline_to_bundle(bundle_id, pipeline_id)</p> <p>Link a pipeline to a bundle.</p>"},{"location":"v3/docs/BundlePipelineApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundlePipelineApi(api_client)\n    bundle_id = 'bundle_id_example' # str | The ID of the bundle\n    pipeline_id = 'pipeline_id_example' # str | The ID of the pipeline\n\n    try:\n        # Link a pipeline to a bundle.\n        api_instance.link_pipeline_to_bundle(bundle_id, pipeline_id)\n    except Exception as e:\n        print(\"Exception when calling BundlePipelineApi-&gt;link_pipeline_to_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundlePipelineApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle pipeline_id str The ID of the pipeline"},{"location":"v3/docs/BundlePipelineApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/BundlePipelineApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundlePipelineApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/BundlePipelineApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The pipeline is successfully linked to the bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundlePipelineApi/#unlink_pipeline_from_bundle","title":"unlink_pipeline_from_bundle","text":"<p>unlink_pipeline_from_bundle(bundle_id, pipeline_id)</p> <p>Unlink a pipeline from a bundle.</p>"},{"location":"v3/docs/BundlePipelineApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundlePipelineApi(api_client)\n    bundle_id = 'bundle_id_example' # str | The ID of the bundle\n    pipeline_id = 'pipeline_id_example' # str | The ID of the pipeline\n\n    try:\n        # Unlink a pipeline from a bundle.\n        api_instance.unlink_pipeline_from_bundle(bundle_id, pipeline_id)\n    except Exception as e:\n        print(\"Exception when calling BundlePipelineApi-&gt;unlink_pipeline_from_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundlePipelineApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle pipeline_id str The ID of the pipeline"},{"location":"v3/docs/BundlePipelineApi/#return-type_2","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/BundlePipelineApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundlePipelineApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/BundlePipelineApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 204 The pipeline is successfully unlinked from the bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundlePipelineList/","title":"BundlePipelineList","text":""},{"location":"v3/docs/BundlePipelineList/#properties","title":"Properties","text":"Name Type Description Notes items List[BundlePipeline]"},{"location":"v3/docs/BundlePipelineList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bundle_pipeline_list import BundlePipelineList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BundlePipelineList from a JSON string\nbundle_pipeline_list_instance = BundlePipelineList.from_json(json)\n# print the JSON string representation of the object\nprint(BundlePipelineList.to_json())\n\n# convert the object into a dict\nbundle_pipeline_list_dict = bundle_pipeline_list_instance.to_dict()\n# create an instance of BundlePipelineList from a dict\nbundle_pipeline_list_from_dict = BundlePipelineList.from_dict(bundle_pipeline_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BundleSample/","title":"BundleSample","text":""},{"location":"v3/docs/BundleSample/#properties","title":"Properties","text":"Name Type Description Notes sample Sample bundle_id str"},{"location":"v3/docs/BundleSample/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bundle_sample import BundleSample\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BundleSample from a JSON string\nbundle_sample_instance = BundleSample.from_json(json)\n# print the JSON string representation of the object\nprint(BundleSample.to_json())\n\n# convert the object into a dict\nbundle_sample_dict = bundle_sample_instance.to_dict()\n# create an instance of BundleSample from a dict\nbundle_sample_from_dict = BundleSample.from_dict(bundle_sample_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BundleSampleApi/","title":"libica.openapi.v3.BundleSampleApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_bundle_samples GET /api/bundles/{bundleId}/samples Retrieve a list of bundle samples. link_sample_to_bundle POST /api/bundles/{bundleId}/samples/{sampleId} Link a sample to a bundle. unlink_sample_from_bundle DELETE /api/bundles/{bundleId}/samples/{sampleId} Unlink a sample from a bundle."},{"location":"v3/docs/BundleSampleApi/#get_bundle_samples","title":"get_bundle_samples","text":"<p>BundleSamplePagedList get_bundle_samples(bundle_id, search=search, user_tags=user_tags, technical_tags=technical_tags, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)</p> <p>Retrieve a list of bundle samples.</p>"},{"location":"v3/docs/BundleSampleApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.bundle_sample_paged_list import BundleSamplePagedList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleSampleApi(api_client)\n    bundle_id = 'bundle_id_example' # str | The ID of the bundle to get bundle samples from\n    search = 'search_example' # str | To search through multiple fields of data. (optional)\n    user_tags = 'user_tags_example' # str | The user tags to filter on. (optional)\n    technical_tags = 'technical_tags_example' # str | The technical tags to filter on. (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status (optional)\n\n    try:\n        # Retrieve a list of bundle samples.\n        api_response = api_instance.get_bundle_samples(bundle_id, search=search, user_tags=user_tags, technical_tags=technical_tags, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        print(\"The response of BundleSampleApi-&gt;get_bundle_samples:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling BundleSampleApi-&gt;get_bundle_samples: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleSampleApi/#parameters","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to get bundle samples from search str To search through multiple fields of data. [optional] user_tags str The user tags to filter on. [optional] technical_tags str The technical tags to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status [optional]"},{"location":"v3/docs/BundleSampleApi/#return-type","title":"Return type","text":"<p>BundleSamplePagedList</p>"},{"location":"v3/docs/BundleSampleApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleSampleApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/BundleSampleApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of bundle samples are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleSampleApi/#link_sample_to_bundle","title":"link_sample_to_bundle","text":"<p>link_sample_to_bundle(bundle_id, sample_id)</p> <p>Link a sample to a bundle.</p>"},{"location":"v3/docs/BundleSampleApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleSampleApi(api_client)\n    bundle_id = 'bundle_id_example' # str | \n    sample_id = 'sample_id_example' # str | \n\n    try:\n        # Link a sample to a bundle.\n        api_instance.link_sample_to_bundle(bundle_id, sample_id)\n    except Exception as e:\n        print(\"Exception when calling BundleSampleApi-&gt;link_sample_to_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleSampleApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes bundle_id str sample_id str"},{"location":"v3/docs/BundleSampleApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/BundleSampleApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleSampleApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/BundleSampleApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The sample is successfully linked to the bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleSampleApi/#unlink_sample_from_bundle","title":"unlink_sample_from_bundle","text":"<p>unlink_sample_from_bundle(bundle_id, sample_id)</p> <p>Unlink a sample from a bundle.</p>"},{"location":"v3/docs/BundleSampleApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleSampleApi(api_client)\n    bundle_id = 'bundle_id_example' # str | \n    sample_id = 'sample_id_example' # str | \n\n    try:\n        # Unlink a sample from a bundle.\n        api_instance.unlink_sample_from_bundle(bundle_id, sample_id)\n    except Exception as e:\n        print(\"Exception when calling BundleSampleApi-&gt;unlink_sample_from_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleSampleApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes bundle_id str sample_id str"},{"location":"v3/docs/BundleSampleApi/#return-type_2","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/BundleSampleApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleSampleApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/BundleSampleApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 204 The sample is successfully unlinked from the bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleSamplePagedList/","title":"BundleSamplePagedList","text":""},{"location":"v3/docs/BundleSamplePagedList/#properties","title":"Properties","text":"Name Type Description Notes items List[BundleSample] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/BundleSamplePagedList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bundle_sample_paged_list import BundleSamplePagedList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BundleSamplePagedList from a JSON string\nbundle_sample_paged_list_instance = BundleSamplePagedList.from_json(json)\n# print the JSON string representation of the object\nprint(BundleSamplePagedList.to_json())\n\n# convert the object into a dict\nbundle_sample_paged_list_dict = bundle_sample_paged_list_instance.to_dict()\n# create an instance of BundleSamplePagedList from a dict\nbundle_sample_paged_list_from_dict = BundleSamplePagedList.from_dict(bundle_sample_paged_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BundleTool/","title":"BundleTool","text":""},{"location":"v3/docs/BundleTool/#properties","title":"Properties","text":"Name Type Description Notes cwl_tool_definition CWLToolDefinition"},{"location":"v3/docs/BundleTool/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bundle_tool import BundleTool\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BundleTool from a JSON string\nbundle_tool_instance = BundleTool.from_json(json)\n# print the JSON string representation of the object\nprint(BundleTool.to_json())\n\n# convert the object into a dict\nbundle_tool_dict = bundle_tool_instance.to_dict()\n# create an instance of BundleTool from a dict\nbundle_tool_from_dict = BundleTool.from_dict(bundle_tool_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/BundleToolApi/","title":"libica.openapi.v3.BundleToolApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_bundle_tools GET /api/bundles/{bundleId}/tools Retrieve a list of bundle tools. get_tools_eligible_for_linking_to_bundle GET /api/bundles/{bundleId}/tools/eligibleForLinking Retrieve a list of tools eligible for linking to the bundle. link_tool_to_bundle POST /api/bundles/{bundleId}/tools/{toolId} Link a tool to a bundle unlink_tool_from_bundle DELETE /api/bundles/{bundleId}/tools/{toolId} Unlink a tool from this bundle."},{"location":"v3/docs/BundleToolApi/#get_bundle_tools","title":"get_bundle_tools","text":"<p>BundleToolsList get_bundle_tools(bundle_id)</p> <p>Retrieve a list of bundle tools.</p>"},{"location":"v3/docs/BundleToolApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.bundle_tools_list import BundleToolsList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleToolApi(api_client)\n    bundle_id = 'bundle_id_example' # str | The ID of the bundle to get tools from\n\n    try:\n        # Retrieve a list of bundle tools.\n        api_response = api_instance.get_bundle_tools(bundle_id)\n        print(\"The response of BundleToolApi-&gt;get_bundle_tools:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling BundleToolApi-&gt;get_bundle_tools: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleToolApi/#parameters","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to get tools from"},{"location":"v3/docs/BundleToolApi/#return-type","title":"Return type","text":"<p>BundleToolsList</p>"},{"location":"v3/docs/BundleToolApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleToolApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/BundleToolApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of bundle tools is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleToolApi/#get_tools_eligible_for_linking_to_bundle","title":"get_tools_eligible_for_linking_to_bundle","text":"<p>CwlToolDefinitionList get_tools_eligible_for_linking_to_bundle(bundle_id)</p> <p>Retrieve a list of tools eligible for linking to the bundle.</p>"},{"location":"v3/docs/BundleToolApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.cwl_tool_definition_list import CwlToolDefinitionList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleToolApi(api_client)\n    bundle_id = 'bundle_id_example' # str | The ID of the bundle to get the eligible tools for\n\n    try:\n        # Retrieve a list of tools eligible for linking to the bundle.\n        api_response = api_instance.get_tools_eligible_for_linking_to_bundle(bundle_id)\n        print(\"The response of BundleToolApi-&gt;get_tools_eligible_for_linking_to_bundle:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling BundleToolApi-&gt;get_tools_eligible_for_linking_to_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleToolApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to get the eligible tools for"},{"location":"v3/docs/BundleToolApi/#return-type_1","title":"Return type","text":"<p>CwlToolDefinitionList</p>"},{"location":"v3/docs/BundleToolApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleToolApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/BundleToolApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The list of tools is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleToolApi/#link_tool_to_bundle","title":"link_tool_to_bundle","text":"<p>link_tool_to_bundle(bundle_id, tool_id)</p> <p>Link a tool to a bundle</p>"},{"location":"v3/docs/BundleToolApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleToolApi(api_client)\n    bundle_id = 'bundle_id_example' # str | The ID of the bundle to link the tool to\n    tool_id = 'tool_id_example' # str | The ID of the tool to link\n\n    try:\n        # Link a tool to a bundle\n        api_instance.link_tool_to_bundle(bundle_id, tool_id)\n    except Exception as e:\n        print(\"Exception when calling BundleToolApi-&gt;link_tool_to_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleToolApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes bundle_id str The ID of the bundle to link the tool to tool_id str The ID of the tool to link"},{"location":"v3/docs/BundleToolApi/#return-type_2","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/BundleToolApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleToolApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/BundleToolApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 204 The tool is successfully linked to the bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleToolApi/#unlink_tool_from_bundle","title":"unlink_tool_from_bundle","text":"<p>unlink_tool_from_bundle(bundle_id, tool_id)</p> <p>Unlink a tool from this bundle.</p>"},{"location":"v3/docs/BundleToolApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.BundleToolApi(api_client)\n    bundle_id = 'bundle_id_example' # str | \n    tool_id = 'tool_id_example' # str | \n\n    try:\n        # Unlink a tool from this bundle.\n        api_instance.unlink_tool_from_bundle(bundle_id, tool_id)\n    except Exception as e:\n        print(\"Exception when calling BundleToolApi-&gt;unlink_tool_from_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/BundleToolApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes bundle_id str tool_id str"},{"location":"v3/docs/BundleToolApi/#return-type_3","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/BundleToolApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/BundleToolApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/BundleToolApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 204 The tool is successfully unlinked from this bundle. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/BundleToolsList/","title":"BundleToolsList","text":""},{"location":"v3/docs/BundleToolsList/#properties","title":"Properties","text":"Name Type Description Notes items List[BundleTool]"},{"location":"v3/docs/BundleToolsList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.bundle_tools_list import BundleToolsList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of BundleToolsList from a JSON string\nbundle_tools_list_instance = BundleToolsList.from_json(json)\n# print the JSON string representation of the object\nprint(BundleToolsList.to_json())\n\n# convert the object into a dict\nbundle_tools_list_dict = bundle_tools_list_instance.to_dict()\n# create an instance of BundleToolsList from a dict\nbundle_tools_list_from_dict = BundleToolsList.from_dict(bundle_tools_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CWLToolDefinition/","title":"CWLToolDefinition","text":""},{"location":"v3/docs/CWLToolDefinition/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] name str Name of the tool definition description str Description of the tool definition [optional] status str Status of the tool definition version_comment str version comment of the tool definition [optional] release_version int release version of the tool definition [optional] links Link [optional] categories List[Optional[str]] category tags as string array [optional]"},{"location":"v3/docs/CWLToolDefinition/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.cwl_tool_definition import CWLToolDefinition\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CWLToolDefinition from a JSON string\ncwl_tool_definition_instance = CWLToolDefinition.from_json(json)\n# print the JSON string representation of the object\nprint(CWLToolDefinition.to_json())\n\n# convert the object into a dict\ncwl_tool_definition_dict = cwl_tool_definition_instance.to_dict()\n# create an instance of CWLToolDefinition from a dict\ncwl_tool_definition_from_dict = CWLToolDefinition.from_dict(cwl_tool_definition_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ChangeProjectOwner/","title":"ChangeProjectOwner","text":""},{"location":"v3/docs/ChangeProjectOwner/#properties","title":"Properties","text":"Name Type Description Notes new_owner_id str The id of the new project owner."},{"location":"v3/docs/ChangeProjectOwner/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.change_project_owner import ChangeProjectOwner\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ChangeProjectOwner from a JSON string\nchange_project_owner_instance = ChangeProjectOwner.from_json(json)\n# print the JSON string representation of the object\nprint(ChangeProjectOwner.to_json())\n\n# convert the object into a dict\nchange_project_owner_dict = change_project_owner_instance.to_dict()\n# create an instance of ChangeProjectOwner from a dict\nchange_project_owner_from_dict = ChangeProjectOwner.from_dict(change_project_owner_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CompleteFolderUploadSession/","title":"CompleteFolderUploadSession","text":""},{"location":"v3/docs/CompleteFolderUploadSession/#properties","title":"Properties","text":"Name Type Description Notes number_of_expected_uploaded_files int The number of expected uploaded files within this session."},{"location":"v3/docs/CompleteFolderUploadSession/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.complete_folder_upload_session import CompleteFolderUploadSession\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CompleteFolderUploadSession from a JSON string\ncomplete_folder_upload_session_instance = CompleteFolderUploadSession.from_json(json)\n# print the JSON string representation of the object\nprint(CompleteFolderUploadSession.to_json())\n\n# convert the object into a dict\ncomplete_folder_upload_session_dict = complete_folder_upload_session_instance.to_dict()\n# create an instance of CompleteFolderUploadSession from a dict\ncomplete_folder_upload_session_from_dict = CompleteFolderUploadSession.from_dict(complete_folder_upload_session_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/Config/","title":"Config","text":""},{"location":"v3/docs/Config/#properties","title":"Properties","text":"Name Type Description Notes name str name of the report regex str regex pattern of the filename format str Format of the file [optional]"},{"location":"v3/docs/Config/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.config import Config\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of Config from a JSON string\nconfig_instance = Config.from_json(json)\n# print the JSON string representation of the object\nprint(Config.to_json())\n\n# convert the object into a dict\nconfig_dict = config_instance.to_dict()\n# create an instance of Config from a dict\nconfig_from_dict = Config.from_dict(config_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/Connector/","title":"Connector","text":""},{"location":"v3/docs/Connector/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] code str active bool connected bool Indicates if the connector is connected or not. This is cached so even when the connector is no longer connected, for a short time this still may return true. technical_code str Technical code to be used for processing. initialization_key str The key provided via other channels to initialize the installation. [optional] description str The general description of the connector instance including its purpose. [optional] mode str The mode the connector runs in. max_bandwidth float The maximum bandwidth defined in MB per second. [optional] max_concurrent_transfers int The maximum amount of concurrent transfers that this connector can execute. [optional] os str The target OS of the original connector installer. installation_status str new_connector_version_available bool"},{"location":"v3/docs/Connector/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.connector import Connector\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of Connector from a JSON string\nconnector_instance = Connector.from_json(json)\n# print the JSON string representation of the object\nprint(Connector.to_json())\n\n# convert the object into a dict\nconnector_dict = connector_instance.to_dict()\n# create an instance of Connector from a dict\nconnector_from_dict = Connector.from_dict(connector_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ConnectorApi/","title":"libica.openapi.v3.ConnectorApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description cancel_connector POST /api/connectors/{connectorId}:cancel Cancel a connector. create_connector POST /api/connectors Create a connector. create_download_rule POST /api/connectors/{connectorId}/downloadRules Create a download rule. create_upload_rule POST /api/connectors/{connectorId}/uploadRules Create an upload rule. delete_download_rule DELETE /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Delete a download rule. delete_upload_rule DELETE /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Delete an upload rule. disable_connector POST /api/connectors/{connectorId}:disable Disable a connector. enable_connector POST /api/connectors/{connectorId}:enable Enable a connector. get_connector GET /api/connectors/{connectorId} Retrieve a connector. get_connectors GET /api/connectors Retrieve a list of connectors. get_download_rule GET /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Retrieve a download rule. get_download_rules GET /api/connectors/{connectorId}/downloadRules Retrieve a list of download rules. get_upload_rule GET /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Retrieve an upload rule. get_upload_rules GET /api/connectors/{connectorId}/uploadRules Retrieve a list of upload rules. update_download_rule PUT /api/connectors/{connectorId}/downloadRules/{downloadRuleId} Update a download rule. update_upload_rule PUT /api/connectors/{connectorId}/uploadRules/{uploadRuleId} Update an upload rule."},{"location":"v3/docs/ConnectorApi/#cancel_connector","title":"cancel_connector","text":"<p>cancel_connector(connector_id)</p> <p>Cancel a connector.</p> <p>Endpoint for cancelling a connector. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/ConnectorApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ConnectorApi(api_client)\n    connector_id = 'connector_id_example' # str | \n\n    try:\n        # Cancel a connector.\n        api_instance.cancel_connector(connector_id)\n    except Exception as e:\n        print(\"Exception when calling ConnectorApi-&gt;cancel_connector: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ConnectorApi/#parameters","title":"Parameters","text":"Name Type Description Notes connector_id str"},{"location":"v3/docs/ConnectorApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ConnectorApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ConnectorApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ConnectorApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The connector is successfully cancelled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ConnectorApi/#create_connector","title":"create_connector","text":"<p>Connector create_connector(create_connector)</p> <p>Create a connector.</p>"},{"location":"v3/docs/ConnectorApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.connector import Connector\nfrom libica.openapi.v3.models.create_connector import CreateConnector\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ConnectorApi(api_client)\n    create_connector = libica.openapi.v3.CreateConnector() # CreateConnector | The connector to create.\n\n    try:\n        # Create a connector.\n        api_response = api_instance.create_connector(create_connector)\n        print(\"The response of ConnectorApi-&gt;create_connector:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ConnectorApi-&gt;create_connector: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ConnectorApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes create_connector CreateConnector The connector to create."},{"location":"v3/docs/ConnectorApi/#return-type_1","title":"Return type","text":"<p>Connector</p>"},{"location":"v3/docs/ConnectorApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ConnectorApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ConnectorApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 201 The connector is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ConnectorApi/#create_download_rule","title":"create_download_rule","text":"<p>DownloadRule create_download_rule(connector_id, create_download_rule)</p> <p>Create a download rule.</p>"},{"location":"v3/docs/ConnectorApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_download_rule import CreateDownloadRule\nfrom libica.openapi.v3.models.download_rule import DownloadRule\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ConnectorApi(api_client)\n    connector_id = 'connector_id_example' # str | \n    create_download_rule = libica.openapi.v3.CreateDownloadRule() # CreateDownloadRule | The target local folder where to write the data. Leading or trailing spaces are not accepted.\n\n    try:\n        # Create a download rule.\n        api_response = api_instance.create_download_rule(connector_id, create_download_rule)\n        print(\"The response of ConnectorApi-&gt;create_download_rule:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ConnectorApi-&gt;create_download_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ConnectorApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes connector_id str create_download_rule CreateDownloadRule The target local folder where to write the data. Leading or trailing spaces are not accepted."},{"location":"v3/docs/ConnectorApi/#return-type_2","title":"Return type","text":"<p>DownloadRule</p>"},{"location":"v3/docs/ConnectorApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ConnectorApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ConnectorApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 201 The download rule is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ConnectorApi/#create_upload_rule","title":"create_upload_rule","text":"<p>UploadRule create_upload_rule(connector_id, create_upload_rule)</p> <p>Create an upload rule.</p>"},{"location":"v3/docs/ConnectorApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_upload_rule import CreateUploadRule\nfrom libica.openapi.v3.models.upload_rule import UploadRule\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ConnectorApi(api_client)\n    connector_id = 'connector_id_example' # str | \n    create_upload_rule = libica.openapi.v3.CreateUploadRule() # CreateUploadRule | The local folder where to write the data. Leading or trailing spaces are not accepted.\n\n    try:\n        # Create an upload rule.\n        api_response = api_instance.create_upload_rule(connector_id, create_upload_rule)\n        print(\"The response of ConnectorApi-&gt;create_upload_rule:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ConnectorApi-&gt;create_upload_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ConnectorApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes connector_id str create_upload_rule CreateUploadRule The local folder where to write the data. Leading or trailing spaces are not accepted."},{"location":"v3/docs/ConnectorApi/#return-type_3","title":"Return type","text":"<p>UploadRule</p>"},{"location":"v3/docs/ConnectorApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ConnectorApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ConnectorApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 201 The upload rule is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ConnectorApi/#delete_download_rule","title":"delete_download_rule","text":"<p>delete_download_rule(connector_id, download_rule_id)</p> <p>Delete a download rule.</p>"},{"location":"v3/docs/ConnectorApi/#example_4","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ConnectorApi(api_client)\n    connector_id = 'connector_id_example' # str | \n    download_rule_id = 'download_rule_id_example' # str | \n\n    try:\n        # Delete a download rule.\n        api_instance.delete_download_rule(connector_id, download_rule_id)\n    except Exception as e:\n        print(\"Exception when calling ConnectorApi-&gt;delete_download_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ConnectorApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes connector_id str download_rule_id str"},{"location":"v3/docs/ConnectorApi/#return-type_4","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ConnectorApi/#authorization_4","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ConnectorApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ConnectorApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 204 The download rule is successfully deleted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ConnectorApi/#delete_upload_rule","title":"delete_upload_rule","text":"<p>delete_upload_rule(connector_id, upload_rule_id)</p> <p>Delete an upload rule.</p>"},{"location":"v3/docs/ConnectorApi/#example_5","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ConnectorApi(api_client)\n    connector_id = 'connector_id_example' # str | \n    upload_rule_id = 'upload_rule_id_example' # str | \n\n    try:\n        # Delete an upload rule.\n        api_instance.delete_upload_rule(connector_id, upload_rule_id)\n    except Exception as e:\n        print(\"Exception when calling ConnectorApi-&gt;delete_upload_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ConnectorApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes connector_id str upload_rule_id str"},{"location":"v3/docs/ConnectorApi/#return-type_5","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ConnectorApi/#authorization_5","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ConnectorApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ConnectorApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 204 The upload rule is successfully deleted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ConnectorApi/#disable_connector","title":"disable_connector","text":"<p>disable_connector(connector_id)</p> <p>Disable a connector.</p> <p>Endpoint for disabling a connector. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/ConnectorApi/#example_6","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ConnectorApi(api_client)\n    connector_id = 'connector_id_example' # str | \n\n    try:\n        # Disable a connector.\n        api_instance.disable_connector(connector_id)\n    except Exception as e:\n        print(\"Exception when calling ConnectorApi-&gt;disable_connector: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ConnectorApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes connector_id str"},{"location":"v3/docs/ConnectorApi/#return-type_6","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ConnectorApi/#authorization_6","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ConnectorApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ConnectorApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 204 The connector is successfully disabled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ConnectorApi/#enable_connector","title":"enable_connector","text":"<p>enable_connector(connector_id)</p> <p>Enable a connector.</p> <p>Endpoint for enabling a connector. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/ConnectorApi/#example_7","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ConnectorApi(api_client)\n    connector_id = 'connector_id_example' # str | \n\n    try:\n        # Enable a connector.\n        api_instance.enable_connector(connector_id)\n    except Exception as e:\n        print(\"Exception when calling ConnectorApi-&gt;enable_connector: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ConnectorApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes connector_id str"},{"location":"v3/docs/ConnectorApi/#return-type_7","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ConnectorApi/#authorization_7","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ConnectorApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ConnectorApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 204 The connector is successfully enabled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ConnectorApi/#get_connector","title":"get_connector","text":"<p>Connector get_connector(connector_id)</p> <p>Retrieve a connector.</p>"},{"location":"v3/docs/ConnectorApi/#example_8","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.connector import Connector\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ConnectorApi(api_client)\n    connector_id = 'connector_id_example' # str | \n\n    try:\n        # Retrieve a connector.\n        api_response = api_instance.get_connector(connector_id)\n        print(\"The response of ConnectorApi-&gt;get_connector:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ConnectorApi-&gt;get_connector: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ConnectorApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes connector_id str"},{"location":"v3/docs/ConnectorApi/#return-type_8","title":"Return type","text":"<p>Connector</p>"},{"location":"v3/docs/ConnectorApi/#authorization_8","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ConnectorApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ConnectorApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 200 The connector is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ConnectorApi/#get_connectors","title":"get_connectors","text":"<p>ConnectorList get_connectors(active_only=active_only)</p> <p>Retrieve a list of connectors.</p>"},{"location":"v3/docs/ConnectorApi/#example_9","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.connector_list import ConnectorList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ConnectorApi(api_client)\n    active_only = True # bool | When true only the active connectors will be returned. When false (default value) all connectors wil be returned. (optional)\n\n    try:\n        # Retrieve a list of connectors.\n        api_response = api_instance.get_connectors(active_only=active_only)\n        print(\"The response of ConnectorApi-&gt;get_connectors:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ConnectorApi-&gt;get_connectors: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ConnectorApi/#parameters_9","title":"Parameters","text":"Name Type Description Notes active_only bool When true only the active connectors will be returned. When false (default value) all connectors wil be returned. [optional]"},{"location":"v3/docs/ConnectorApi/#return-type_9","title":"Return type","text":"<p>ConnectorList</p>"},{"location":"v3/docs/ConnectorApi/#authorization_9","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ConnectorApi/#http-request-headers_9","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ConnectorApi/#http-response-details_9","title":"HTTP response details","text":"Status code Description Response headers 200 The list of connectors is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ConnectorApi/#get_download_rule","title":"get_download_rule","text":"<p>DownloadRule get_download_rule(connector_id, download_rule_id)</p> <p>Retrieve a download rule.</p>"},{"location":"v3/docs/ConnectorApi/#example_10","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.download_rule import DownloadRule\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ConnectorApi(api_client)\n    connector_id = 'connector_id_example' # str | \n    download_rule_id = 'download_rule_id_example' # str | \n\n    try:\n        # Retrieve a download rule.\n        api_response = api_instance.get_download_rule(connector_id, download_rule_id)\n        print(\"The response of ConnectorApi-&gt;get_download_rule:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ConnectorApi-&gt;get_download_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ConnectorApi/#parameters_10","title":"Parameters","text":"Name Type Description Notes connector_id str download_rule_id str"},{"location":"v3/docs/ConnectorApi/#return-type_10","title":"Return type","text":"<p>DownloadRule</p>"},{"location":"v3/docs/ConnectorApi/#authorization_10","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ConnectorApi/#http-request-headers_10","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ConnectorApi/#http-response-details_10","title":"HTTP response details","text":"Status code Description Response headers 200 The download rule is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ConnectorApi/#get_download_rules","title":"get_download_rules","text":"<p>DownloadRuleList get_download_rules(connector_id)</p> <p>Retrieve a list of download rules.</p>"},{"location":"v3/docs/ConnectorApi/#example_11","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.download_rule_list import DownloadRuleList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ConnectorApi(api_client)\n    connector_id = 'connector_id_example' # str | \n\n    try:\n        # Retrieve a list of download rules.\n        api_response = api_instance.get_download_rules(connector_id)\n        print(\"The response of ConnectorApi-&gt;get_download_rules:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ConnectorApi-&gt;get_download_rules: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ConnectorApi/#parameters_11","title":"Parameters","text":"Name Type Description Notes connector_id str"},{"location":"v3/docs/ConnectorApi/#return-type_11","title":"Return type","text":"<p>DownloadRuleList</p>"},{"location":"v3/docs/ConnectorApi/#authorization_11","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ConnectorApi/#http-request-headers_11","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ConnectorApi/#http-response-details_11","title":"HTTP response details","text":"Status code Description Response headers 200 The download rules are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ConnectorApi/#get_upload_rule","title":"get_upload_rule","text":"<p>UploadRule get_upload_rule(connector_id, upload_rule_id)</p> <p>Retrieve an upload rule.</p>"},{"location":"v3/docs/ConnectorApi/#example_12","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.upload_rule import UploadRule\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ConnectorApi(api_client)\n    connector_id = 'connector_id_example' # str | \n    upload_rule_id = 'upload_rule_id_example' # str | \n\n    try:\n        # Retrieve an upload rule.\n        api_response = api_instance.get_upload_rule(connector_id, upload_rule_id)\n        print(\"The response of ConnectorApi-&gt;get_upload_rule:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ConnectorApi-&gt;get_upload_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ConnectorApi/#parameters_12","title":"Parameters","text":"Name Type Description Notes connector_id str upload_rule_id str"},{"location":"v3/docs/ConnectorApi/#return-type_12","title":"Return type","text":"<p>UploadRule</p>"},{"location":"v3/docs/ConnectorApi/#authorization_12","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ConnectorApi/#http-request-headers_12","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ConnectorApi/#http-response-details_12","title":"HTTP response details","text":"Status code Description Response headers 200 The upload rule is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ConnectorApi/#get_upload_rules","title":"get_upload_rules","text":"<p>UploadRuleList get_upload_rules(connector_id)</p> <p>Retrieve a list of upload rules.</p>"},{"location":"v3/docs/ConnectorApi/#example_13","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.upload_rule_list import UploadRuleList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ConnectorApi(api_client)\n    connector_id = 'connector_id_example' # str | \n\n    try:\n        # Retrieve a list of upload rules.\n        api_response = api_instance.get_upload_rules(connector_id)\n        print(\"The response of ConnectorApi-&gt;get_upload_rules:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ConnectorApi-&gt;get_upload_rules: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ConnectorApi/#parameters_13","title":"Parameters","text":"Name Type Description Notes connector_id str"},{"location":"v3/docs/ConnectorApi/#return-type_13","title":"Return type","text":"<p>UploadRuleList</p>"},{"location":"v3/docs/ConnectorApi/#authorization_13","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ConnectorApi/#http-request-headers_13","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ConnectorApi/#http-response-details_13","title":"HTTP response details","text":"Status code Description Response headers 200 The upload rules are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ConnectorApi/#update_download_rule","title":"update_download_rule","text":"<p>DownloadRule update_download_rule(connector_id, download_rule_id, download_rule, if_match=if_match)</p> <p>Update a download rule.</p> <p>Fields which can be updated:  - code  - active  - description  - sequence  - formatCode  - projectName  - targetLocalFolder  - protocol  - fileNameExpression  - disableHashing</p>"},{"location":"v3/docs/ConnectorApi/#example_14","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.download_rule import DownloadRule\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ConnectorApi(api_client)\n    connector_id = 'connector_id_example' # str | \n    download_rule_id = 'download_rule_id_example' # str | \n    download_rule = libica.openapi.v3.DownloadRule() # DownloadRule | The target local folder where to write the data. Leading or trailing spaces are not accepted.\n    if_match = 'if_match_example' # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n\n    try:\n        # Update a download rule.\n        api_response = api_instance.update_download_rule(connector_id, download_rule_id, download_rule, if_match=if_match)\n        print(\"The response of ConnectorApi-&gt;update_download_rule:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ConnectorApi-&gt;update_download_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ConnectorApi/#parameters_14","title":"Parameters","text":"Name Type Description Notes connector_id str download_rule_id str download_rule DownloadRule The target local folder where to write the data. Leading or trailing spaces are not accepted. if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional]"},{"location":"v3/docs/ConnectorApi/#return-type_14","title":"Return type","text":"<p>DownloadRule</p>"},{"location":"v3/docs/ConnectorApi/#authorization_14","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ConnectorApi/#http-request-headers_14","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ConnectorApi/#http-response-details_14","title":"HTTP response details","text":"Status code Description Response headers 200 The download rule is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ConnectorApi/#update_upload_rule","title":"update_upload_rule","text":"<p>UploadRule update_upload_rule(connector_id, upload_rule_id, upload_rule, if_match=if_match)</p> <p>Update an upload rule.</p> <p>Fields which can be updated:  - code  - active  - description  - localFolder  - filePattern  - dataFormat</p>"},{"location":"v3/docs/ConnectorApi/#example_15","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.upload_rule import UploadRule\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ConnectorApi(api_client)\n    connector_id = 'connector_id_example' # str | \n    upload_rule_id = 'upload_rule_id_example' # str | \n    upload_rule = libica.openapi.v3.UploadRule() # UploadRule | The local folder where to write the data. Leading or trailing spaces are not accepted.\n    if_match = 'if_match_example' # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n\n    try:\n        # Update an upload rule.\n        api_response = api_instance.update_upload_rule(connector_id, upload_rule_id, upload_rule, if_match=if_match)\n        print(\"The response of ConnectorApi-&gt;update_upload_rule:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ConnectorApi-&gt;update_upload_rule: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ConnectorApi/#parameters_15","title":"Parameters","text":"Name Type Description Notes connector_id str upload_rule_id str upload_rule UploadRule The local folder where to write the data. Leading or trailing spaces are not accepted. if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional]"},{"location":"v3/docs/ConnectorApi/#return-type_15","title":"Return type","text":"<p>UploadRule</p>"},{"location":"v3/docs/ConnectorApi/#authorization_15","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ConnectorApi/#http-request-headers_15","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ConnectorApi/#http-response-details_15","title":"HTTP response details","text":"Status code Description Response headers 200 The upload rule is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ConnectorList/","title":"ConnectorList","text":""},{"location":"v3/docs/ConnectorList/#properties","title":"Properties","text":"Name Type Description Notes items List[Connector]"},{"location":"v3/docs/ConnectorList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.connector_list import ConnectorList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ConnectorList from a JSON string\nconnector_list_instance = ConnectorList.from_json(json)\n# print the JSON string representation of the object\nprint(ConnectorList.to_json())\n\n# convert the object into a dict\nconnector_list_dict = connector_list_instance.to_dict()\n# create an instance of ConnectorList from a dict\nconnector_list_from_dict = ConnectorList.from_dict(connector_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/Country/","title":"Country","text":""},{"location":"v3/docs/Country/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] code str The country code as defined by ISO. name str The full name of the country. region str The region where the country belong to."},{"location":"v3/docs/Country/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.country import Country\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of Country from a JSON string\ncountry_instance = Country.from_json(json)\n# print the JSON string representation of the object\nprint(Country.to_json())\n\n# convert the object into a dict\ncountry_dict = country_instance.to_dict()\n# create an instance of Country from a dict\ncountry_from_dict = Country.from_dict(country_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateAnalysisCreationBatch/","title":"CreateAnalysisCreationBatch","text":""},{"location":"v3/docs/CreateAnalysisCreationBatch/#properties","title":"Properties","text":"Name Type Description Notes cwl_items List[CreateCwlAnalysis] [optional] nextflow_items List[CreateNextflowAnalysis] [optional] nextflow_json_items List[CreateNextflowJsonAnalysis] [optional]"},{"location":"v3/docs/CreateAnalysisCreationBatch/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_analysis_creation_batch import CreateAnalysisCreationBatch\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateAnalysisCreationBatch from a JSON string\ncreate_analysis_creation_batch_instance = CreateAnalysisCreationBatch.from_json(json)\n# print the JSON string representation of the object\nprint(CreateAnalysisCreationBatch.to_json())\n\n# convert the object into a dict\ncreate_analysis_creation_batch_dict = create_analysis_creation_batch_instance.to_dict()\n# create an instance of CreateAnalysisCreationBatch from a dict\ncreate_analysis_creation_batch_from_dict = CreateAnalysisCreationBatch.from_dict(create_analysis_creation_batch_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateAnalysisTag/","title":"CreateAnalysisTag","text":""},{"location":"v3/docs/CreateAnalysisTag/#properties","title":"Properties","text":"Name Type Description Notes technical_tags List[Optional[str]] Technical tags [optional] user_tags List[Optional[str]] User tags [optional] reference_tags List[Optional[str]] Reference tags [optional]"},{"location":"v3/docs/CreateAnalysisTag/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_analysis_tag import CreateAnalysisTag\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateAnalysisTag from a JSON string\ncreate_analysis_tag_instance = CreateAnalysisTag.from_json(json)\n# print the JSON string representation of the object\nprint(CreateAnalysisTag.to_json())\n\n# convert the object into a dict\ncreate_analysis_tag_dict = create_analysis_tag_instance.to_dict()\n# create an instance of CreateAnalysisTag from a dict\ncreate_analysis_tag_from_dict = CreateAnalysisTag.from_dict(create_analysis_tag_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateBundle/","title":"CreateBundle","text":""},{"location":"v3/docs/CreateBundle/#properties","title":"Properties","text":"Name Type Description Notes name str short_description str [optional] bundle_release_version str bundle_version_comment str [optional] region_id str metadata_model_id str [optional] bundle_status str categories List[str] category tags as string array links Links [optional]"},{"location":"v3/docs/CreateBundle/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_bundle import CreateBundle\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateBundle from a JSON string\ncreate_bundle_instance = CreateBundle.from_json(json)\n# print the JSON string representation of the object\nprint(CreateBundle.to_json())\n\n# convert the object into a dict\ncreate_bundle_dict = create_bundle_instance.to_dict()\n# create an instance of CreateBundle from a dict\ncreate_bundle_from_dict = CreateBundle.from_dict(create_bundle_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateBundleDataLinkingBatch/","title":"CreateBundleDataLinkingBatch","text":""},{"location":"v3/docs/CreateBundleDataLinkingBatch/#properties","title":"Properties","text":"Name Type Description Notes items List[CreateBundleDataLinkingBatchItem]"},{"location":"v3/docs/CreateBundleDataLinkingBatch/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_bundle_data_linking_batch import CreateBundleDataLinkingBatch\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateBundleDataLinkingBatch from a JSON string\ncreate_bundle_data_linking_batch_instance = CreateBundleDataLinkingBatch.from_json(json)\n# print the JSON string representation of the object\nprint(CreateBundleDataLinkingBatch.to_json())\n\n# convert the object into a dict\ncreate_bundle_data_linking_batch_dict = create_bundle_data_linking_batch_instance.to_dict()\n# create an instance of CreateBundleDataLinkingBatch from a dict\ncreate_bundle_data_linking_batch_from_dict = CreateBundleDataLinkingBatch.from_dict(create_bundle_data_linking_batch_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateBundleDataLinkingBatchItem/","title":"CreateBundleDataLinkingBatchItem","text":""},{"location":"v3/docs/CreateBundleDataLinkingBatchItem/#properties","title":"Properties","text":"Name Type Description Notes data_id str"},{"location":"v3/docs/CreateBundleDataLinkingBatchItem/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_bundle_data_linking_batch_item import CreateBundleDataLinkingBatchItem\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateBundleDataLinkingBatchItem from a JSON string\ncreate_bundle_data_linking_batch_item_instance = CreateBundleDataLinkingBatchItem.from_json(json)\n# print the JSON string representation of the object\nprint(CreateBundleDataLinkingBatchItem.to_json())\n\n# convert the object into a dict\ncreate_bundle_data_linking_batch_item_dict = create_bundle_data_linking_batch_item_instance.to_dict()\n# create an instance of CreateBundleDataLinkingBatchItem from a dict\ncreate_bundle_data_linking_batch_item_from_dict = CreateBundleDataLinkingBatchItem.from_dict(create_bundle_data_linking_batch_item_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateBundleDataUnlinkingBatch/","title":"CreateBundleDataUnlinkingBatch","text":""},{"location":"v3/docs/CreateBundleDataUnlinkingBatch/#properties","title":"Properties","text":"Name Type Description Notes items List[CreateBundleDataUnlinkingBatchItem]"},{"location":"v3/docs/CreateBundleDataUnlinkingBatch/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_bundle_data_unlinking_batch import CreateBundleDataUnlinkingBatch\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateBundleDataUnlinkingBatch from a JSON string\ncreate_bundle_data_unlinking_batch_instance = CreateBundleDataUnlinkingBatch.from_json(json)\n# print the JSON string representation of the object\nprint(CreateBundleDataUnlinkingBatch.to_json())\n\n# convert the object into a dict\ncreate_bundle_data_unlinking_batch_dict = create_bundle_data_unlinking_batch_instance.to_dict()\n# create an instance of CreateBundleDataUnlinkingBatch from a dict\ncreate_bundle_data_unlinking_batch_from_dict = CreateBundleDataUnlinkingBatch.from_dict(create_bundle_data_unlinking_batch_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateBundleDataUnlinkingBatchItem/","title":"CreateBundleDataUnlinkingBatchItem","text":""},{"location":"v3/docs/CreateBundleDataUnlinkingBatchItem/#properties","title":"Properties","text":"Name Type Description Notes data_id str"},{"location":"v3/docs/CreateBundleDataUnlinkingBatchItem/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_bundle_data_unlinking_batch_item import CreateBundleDataUnlinkingBatchItem\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateBundleDataUnlinkingBatchItem from a JSON string\ncreate_bundle_data_unlinking_batch_item_instance = CreateBundleDataUnlinkingBatchItem.from_json(json)\n# print the JSON string representation of the object\nprint(CreateBundleDataUnlinkingBatchItem.to_json())\n\n# convert the object into a dict\ncreate_bundle_data_unlinking_batch_item_dict = create_bundle_data_unlinking_batch_item_instance.to_dict()\n# create an instance of CreateBundleDataUnlinkingBatchItem from a dict\ncreate_bundle_data_unlinking_batch_item_from_dict = CreateBundleDataUnlinkingBatchItem.from_dict(create_bundle_data_unlinking_batch_item_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateConnector/","title":"CreateConnector","text":""},{"location":"v3/docs/CreateConnector/#properties","title":"Properties","text":"Name Type Description Notes code str active bool description str The general description of the connector instance including its purpose. [optional] mode str The mode the connector runs in. max_bandwidth float The maximum bandwidth defined in MB per second. [optional] max_concurrent_transfers int The maximum amount of concurrent transfers that this connector can execute. [optional] [default to 2] os str The target OS of the original connector installer."},{"location":"v3/docs/CreateConnector/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_connector import CreateConnector\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateConnector from a JSON string\ncreate_connector_instance = CreateConnector.from_json(json)\n# print the JSON string representation of the object\nprint(CreateConnector.to_json())\n\n# convert the object into a dict\ncreate_connector_dict = create_connector_instance.to_dict()\n# create an instance of CreateConnector from a dict\ncreate_connector_from_dict = CreateConnector.from_dict(create_connector_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateCustomEvent/","title":"CreateCustomEvent","text":""},{"location":"v3/docs/CreateCustomEvent/#properties","title":"Properties","text":"Name Type Description Notes code str The event code that should match a custom subscription. content object The content that will be forwarded to the configured custom subscription destinations."},{"location":"v3/docs/CreateCustomEvent/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_custom_event import CreateCustomEvent\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateCustomEvent from a JSON string\ncreate_custom_event_instance = CreateCustomEvent.from_json(json)\n# print the JSON string representation of the object\nprint(CreateCustomEvent.to_json())\n\n# convert the object into a dict\ncreate_custom_event_dict = create_custom_event_instance.to_dict()\n# create an instance of CreateCustomEvent from a dict\ncreate_custom_event_from_dict = CreateCustomEvent.from_dict(create_custom_event_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateCustomNotificationSubscription/","title":"CreateCustomNotificationSubscription","text":""},{"location":"v3/docs/CreateCustomNotificationSubscription/#properties","title":"Properties","text":"Name Type Description Notes custom_event_code str The custom event code to subscribe to filter_expression str To be used when a notification applies to specific conditions. [optional] enabled bool Should this subscription be enabled or not? notification_channel_id str The id of the notification channel used to send on"},{"location":"v3/docs/CreateCustomNotificationSubscription/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_custom_notification_subscription import CreateCustomNotificationSubscription\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateCustomNotificationSubscription from a JSON string\ncreate_custom_notification_subscription_instance = CreateCustomNotificationSubscription.from_json(json)\n# print the JSON string representation of the object\nprint(CreateCustomNotificationSubscription.to_json())\n\n# convert the object into a dict\ncreate_custom_notification_subscription_dict = create_custom_notification_subscription_instance.to_dict()\n# create an instance of CreateCustomNotificationSubscription from a dict\ncreate_custom_notification_subscription_from_dict = CreateCustomNotificationSubscription.from_dict(create_custom_notification_subscription_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateCwlAnalysis/","title":"CreateCwlAnalysis","text":""},{"location":"v3/docs/CreateCwlAnalysis/#properties","title":"Properties","text":"Name Type Description Notes user_reference str The user-reference of the analysis. This should be something meaningful for the user. pipeline_id str The pipeline for which an analysis will be created. tags CreateAnalysisTag [optional] analysis_storage_id str The id of the storage to use for the analysis. [optional] output_parent_folder_id str The id or the urn of the folder in which the output folder should be created. [optional] analysis_output List[AnalysisOutputMapping] [optional] analysis_input CwlAnalysisInput activation_code_detail_id str Indicates under which activation code the pipeline is executed. [optional]"},{"location":"v3/docs/CreateCwlAnalysis/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_cwl_analysis import CreateCwlAnalysis\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateCwlAnalysis from a JSON string\ncreate_cwl_analysis_instance = CreateCwlAnalysis.from_json(json)\n# print the JSON string representation of the object\nprint(CreateCwlAnalysis.to_json())\n\n# convert the object into a dict\ncreate_cwl_analysis_dict = create_cwl_analysis_instance.to_dict()\n# create an instance of CreateCwlAnalysis from a dict\ncreate_cwl_analysis_from_dict = CreateCwlAnalysis.from_dict(create_cwl_analysis_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateCwlJsonAnalysis/","title":"CreateCwlJsonAnalysis","text":""},{"location":"v3/docs/CreateCwlJsonAnalysis/#properties","title":"Properties","text":"Name Type Description Notes user_reference str The user-reference of the analysis. This should be something meaningful for the user. pipeline_id str The pipeline for which an analysis will be created. tags CreateAnalysisTag [optional] analysis_storage_id str The id of the storage to use for the analysis. [optional] output_parent_folder_id str The id or the urn of the folder in which the output folder should be created. [optional] analysis_output List[AnalysisOutputMapping] [optional] input_form_values CwlJsonAnalysisInput"},{"location":"v3/docs/CreateCwlJsonAnalysis/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_cwl_json_analysis import CreateCwlJsonAnalysis\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateCwlJsonAnalysis from a JSON string\ncreate_cwl_json_analysis_instance = CreateCwlJsonAnalysis.from_json(json)\n# print the JSON string representation of the object\nprint(CreateCwlJsonAnalysis.to_json())\n\n# convert the object into a dict\ncreate_cwl_json_analysis_dict = create_cwl_json_analysis_instance.to_dict()\n# create an instance of CreateCwlJsonAnalysis from a dict\ncreate_cwl_json_analysis_from_dict = CreateCwlJsonAnalysis.from_dict(create_cwl_json_analysis_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateCwlWithJsonInputAnalysis/","title":"CreateCwlWithJsonInputAnalysis","text":""},{"location":"v3/docs/CreateCwlWithJsonInputAnalysis/#properties","title":"Properties","text":"Name Type Description Notes user_reference str The user-reference of the analysis. This should be something meaningful for the user. pipeline_id str The pipeline for which an analysis will be created. tags CreateAnalysisTag [optional] analysis_storage_id str The id of the storage to use for the analysis. [optional] output_parent_folder_id str The id or the urn of the folder in which the output folder should be created. [optional] analysis_output List[AnalysisOutputMapping] [optional] analysis_input CwlAnalysisWithJsonInput"},{"location":"v3/docs/CreateCwlWithJsonInputAnalysis/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_cwl_with_json_input_analysis import CreateCwlWithJsonInputAnalysis\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateCwlWithJsonInputAnalysis from a JSON string\ncreate_cwl_with_json_input_analysis_instance = CreateCwlWithJsonInputAnalysis.from_json(json)\n# print the JSON string representation of the object\nprint(CreateCwlWithJsonInputAnalysis.to_json())\n\n# convert the object into a dict\ncreate_cwl_with_json_input_analysis_dict = create_cwl_with_json_input_analysis_instance.to_dict()\n# create an instance of CreateCwlWithJsonInputAnalysis from a dict\ncreate_cwl_with_json_input_analysis_from_dict = CreateCwlWithJsonInputAnalysis.from_dict(create_cwl_with_json_input_analysis_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateCwlWithStructuredInputAnalysis/","title":"CreateCwlWithStructuredInputAnalysis","text":""},{"location":"v3/docs/CreateCwlWithStructuredInputAnalysis/#properties","title":"Properties","text":"Name Type Description Notes user_reference str The user-reference of the analysis. This should be something meaningful for the user. pipeline_id str The pipeline for which an analysis will be created. tags CreateAnalysisTag [optional] analysis_storage_id str The id of the storage to use for the analysis. [optional] output_parent_folder_id str The id or the urn of the folder in which the output folder should be created. [optional] analysis_output List[AnalysisOutputMapping] [optional] analysis_input CwlAnalysisWithStructuredInput"},{"location":"v3/docs/CreateCwlWithStructuredInputAnalysis/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_cwl_with_structured_input_analysis import CreateCwlWithStructuredInputAnalysis\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateCwlWithStructuredInputAnalysis from a JSON string\ncreate_cwl_with_structured_input_analysis_instance = CreateCwlWithStructuredInputAnalysis.from_json(json)\n# print the JSON string representation of the object\nprint(CreateCwlWithStructuredInputAnalysis.to_json())\n\n# convert the object into a dict\ncreate_cwl_with_structured_input_analysis_dict = create_cwl_with_structured_input_analysis_instance.to_dict()\n# create an instance of CreateCwlWithStructuredInputAnalysis from a dict\ncreate_cwl_with_structured_input_analysis_from_dict = CreateCwlWithStructuredInputAnalysis.from_dict(create_cwl_with_structured_input_analysis_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateData/","title":"CreateData","text":""},{"location":"v3/docs/CreateData/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the file/folder as how it will be created. folder_id str The id of the folder you want to create this new data in. Alternatively, the folderPath attribute could be used as well for this. [optional] folder_path str The absolute path of the folder you want to create this new data in which must end with '/'. Alternatively, the folderId attribute could be used as well for this. In case the folder path does not yet exist, it will be automatically created. [optional] format_code str The code of the format you would like to assign at creation time. This is only allowed for file data. If not specified, auto format assignment will be done. [optional] data_type str"},{"location":"v3/docs/CreateData/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_data import CreateData\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateData from a JSON string\ncreate_data_instance = CreateData.from_json(json)\n# print the JSON string representation of the object\nprint(CreateData.to_json())\n\n# convert the object into a dict\ncreate_data_dict = create_data_instance.to_dict()\n# create an instance of CreateData from a dict\ncreate_data_from_dict = CreateData.from_dict(create_data_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateDownloadRule/","title":"CreateDownloadRule","text":""},{"location":"v3/docs/CreateDownloadRule/#properties","title":"Properties","text":"Name Type Description Notes code str active bool [optional] description str [optional] sequence int Defines the order of the rule. format_code str Regular expression to filter which format this rule applies to. [optional] project_name str Regular expression to filter which project this rule applies to. [optional] target_local_folder str The local folder where to write the data. file_name_expression str Will allow the filename to be modified including a set of variables [optional]"},{"location":"v3/docs/CreateDownloadRule/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_download_rule import CreateDownloadRule\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateDownloadRule from a JSON string\ncreate_download_rule_instance = CreateDownloadRule.from_json(json)\n# print the JSON string representation of the object\nprint(CreateDownloadRule.to_json())\n\n# convert the object into a dict\ncreate_download_rule_dict = create_download_rule_instance.to_dict()\n# create an instance of CreateDownloadRule from a dict\ncreate_download_rule_from_dict = CreateDownloadRule.from_dict(create_download_rule_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateExternalDockerImage/","title":"CreateExternalDockerImage","text":""},{"location":"v3/docs/CreateExternalDockerImage/#properties","title":"Properties","text":"Name Type Description Notes url str name str version str description str [optional] type str"},{"location":"v3/docs/CreateExternalDockerImage/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_external_docker_image import CreateExternalDockerImage\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateExternalDockerImage from a JSON string\ncreate_external_docker_image_instance = CreateExternalDockerImage.from_json(json)\n# print the JSON string representation of the object\nprint(CreateExternalDockerImage.to_json())\n\n# convert the object into a dict\ncreate_external_docker_image_dict = create_external_docker_image_instance.to_dict()\n# create an instance of CreateExternalDockerImage from a dict\ncreate_external_docker_image_from_dict = CreateExternalDockerImage.from_dict(create_external_docker_image_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateFileAndTemporaryCredentials/","title":"CreateFileAndTemporaryCredentials","text":""},{"location":"v3/docs/CreateFileAndTemporaryCredentials/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the file as how it will be created. folder_id str The id of the folder you want to create this new file in. Alternatively, the folderPath attribute could be used as well for this. [optional] folder_path str The absolute path of the folder you want to create this new file in which must end with '/'. Alternatively, the folderId attribute could be used as well for this. In case the folder path does not yet exist, it will be automatically created. [optional] format_code str The code of the format you would like to assign at creation time. If not specified, auto format assignment will be done. [optional] temporary_credentials CreateTemporaryCredentials [optional]"},{"location":"v3/docs/CreateFileAndTemporaryCredentials/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_file_and_temporary_credentials import CreateFileAndTemporaryCredentials\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateFileAndTemporaryCredentials from a JSON string\ncreate_file_and_temporary_credentials_instance = CreateFileAndTemporaryCredentials.from_json(json)\n# print the JSON string representation of the object\nprint(CreateFileAndTemporaryCredentials.to_json())\n\n# convert the object into a dict\ncreate_file_and_temporary_credentials_dict = create_file_and_temporary_credentials_instance.to_dict()\n# create an instance of CreateFileAndTemporaryCredentials from a dict\ncreate_file_and_temporary_credentials_from_dict = CreateFileAndTemporaryCredentials.from_dict(create_file_and_temporary_credentials_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateFileAndUploadUrl/","title":"CreateFileAndUploadUrl","text":""},{"location":"v3/docs/CreateFileAndUploadUrl/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the file as how it will be created. folder_id str The id of the folder you want to create this new file in. Alternatively, the folderPath attribute could be used as well for this. [optional] folder_path str The absolute path of the folder you want to create this new file in which must end with '/'. Alternatively, the folderId attribute could be used as well for this. In case the folder path does not yet exist, it will be automatically created. [optional] format_code str The code of the format you would like to assign at creation time. If not specified, auto format assignment will be done. [optional] file_type str The expected content type for the upload, to include in the upload url. [optional] hash str The expected md5 hash for the upload content, to include in the upload url. [optional]"},{"location":"v3/docs/CreateFileAndUploadUrl/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_file_and_upload_url import CreateFileAndUploadUrl\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateFileAndUploadUrl from a JSON string\ncreate_file_and_upload_url_instance = CreateFileAndUploadUrl.from_json(json)\n# print the JSON string representation of the object\nprint(CreateFileAndUploadUrl.to_json())\n\n# convert the object into a dict\ncreate_file_and_upload_url_dict = create_file_and_upload_url_instance.to_dict()\n# create an instance of CreateFileAndUploadUrl from a dict\ncreate_file_and_upload_url_from_dict = CreateFileAndUploadUrl.from_dict(create_file_and_upload_url_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateFileData/","title":"CreateFileData","text":""},{"location":"v3/docs/CreateFileData/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the file as how it will be created. folder_id str The id of the folder you want to create this new file in. Alternatively, the folderPath attribute could be used as well for this. [optional] folder_path str The absolute path of the folder you want to create this new file in which must end with '/'. Alternatively, the folderId attribute could be used as well for this. In case the folder path does not yet exist, it will be automatically created. [optional] format_code str The code of the format you would like to assign at creation time. If not specified, auto format assignment will be done. [optional]"},{"location":"v3/docs/CreateFileData/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_file_data import CreateFileData\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateFileData from a JSON string\ncreate_file_data_instance = CreateFileData.from_json(json)\n# print the JSON string representation of the object\nprint(CreateFileData.to_json())\n\n# convert the object into a dict\ncreate_file_data_dict = create_file_data_instance.to_dict()\n# create an instance of CreateFileData from a dict\ncreate_file_data_from_dict = CreateFileData.from_dict(create_file_data_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateFolder/","title":"CreateFolder","text":""},{"location":"v3/docs/CreateFolder/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the folder as how it will be created. folder_id str The id of the folder you want to create this new folder in. Alternatively, the folderPath attribute could be used as well for this. [optional] folder_path str The absolute path of the folder you want to create this new folder in which must end with '/'. Alternatively, the folderId attribute could be used as well for this. In case the folder path does not yet exist, it will be automatically created. [optional]"},{"location":"v3/docs/CreateFolder/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_folder import CreateFolder\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateFolder from a JSON string\ncreate_folder_instance = CreateFolder.from_json(json)\n# print the JSON string representation of the object\nprint(CreateFolder.to_json())\n\n# convert the object into a dict\ncreate_folder_dict = create_folder_instance.to_dict()\n# create an instance of CreateFolder from a dict\ncreate_folder_from_dict = CreateFolder.from_dict(create_folder_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateFolderAndTemporaryCredentials/","title":"CreateFolderAndTemporaryCredentials","text":""},{"location":"v3/docs/CreateFolderAndTemporaryCredentials/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the folder as how it will be created. folder_id str The id of the folder you want to create this new folder in. Alternatively, the folderPath attribute could be used as well for this. [optional] folder_path str The absolute path of the folder you want to create this new folder in which must end with '/'. Alternatively, the folderId attribute could be used as well for this. In case the folder path does not yet exist, it will be automatically created. [optional] non_indexed bool If you want to create a non-indexed folder. Only possible as a top-level folder, which means the folderId and folderPath attributes are not allowed. [optional] [default to False] temporary_credentials CreateTemporaryCredentials [optional]"},{"location":"v3/docs/CreateFolderAndTemporaryCredentials/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_folder_and_temporary_credentials import CreateFolderAndTemporaryCredentials\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateFolderAndTemporaryCredentials from a JSON string\ncreate_folder_and_temporary_credentials_instance = CreateFolderAndTemporaryCredentials.from_json(json)\n# print the JSON string representation of the object\nprint(CreateFolderAndTemporaryCredentials.to_json())\n\n# convert the object into a dict\ncreate_folder_and_temporary_credentials_dict = create_folder_and_temporary_credentials_instance.to_dict()\n# create an instance of CreateFolderAndTemporaryCredentials from a dict\ncreate_folder_and_temporary_credentials_from_dict = CreateFolderAndTemporaryCredentials.from_dict(create_folder_and_temporary_credentials_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateInternalDockerImage/","title":"CreateInternalDockerImage","text":""},{"location":"v3/docs/CreateInternalDockerImage/#properties","title":"Properties","text":"Name Type Description Notes docker_data_id str The id of the data for which an Docker image will be created. docker_data_project_id str The id of the project where the Docker data resides. name str version str description str [optional] type str regions List[str] The UUID of the regions where the Docker image will be made available."},{"location":"v3/docs/CreateInternalDockerImage/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_internal_docker_image import CreateInternalDockerImage\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateInternalDockerImage from a JSON string\ncreate_internal_docker_image_instance = CreateInternalDockerImage.from_json(json)\n# print the JSON string representation of the object\nprint(CreateInternalDockerImage.to_json())\n\n# convert the object into a dict\ncreate_internal_docker_image_dict = create_internal_docker_image_instance.to_dict()\n# create an instance of CreateInternalDockerImage from a dict\ncreate_internal_docker_image_from_dict = CreateInternalDockerImage.from_dict(create_internal_docker_image_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateNextflowAnalysis/","title":"CreateNextflowAnalysis","text":""},{"location":"v3/docs/CreateNextflowAnalysis/#properties","title":"Properties","text":"Name Type Description Notes user_reference str The user-reference of the analysis. This should be something meaningful for the user. pipeline_id str The pipeline for which an analysis will be created. tags CreateAnalysisTag [optional] analysis_storage_id str The id of the storage to use for the analysis. [optional] output_parent_folder_id str The id or the urn of the folder in which the output folder should be created. [optional] analysis_output List[AnalysisOutputMapping] [optional] analysis_input NextflowAnalysisInput activation_code_detail_id str Indicates under which activation code the pipeline is executed. [optional]"},{"location":"v3/docs/CreateNextflowAnalysis/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_nextflow_analysis import CreateNextflowAnalysis\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateNextflowAnalysis from a JSON string\ncreate_nextflow_analysis_instance = CreateNextflowAnalysis.from_json(json)\n# print the JSON string representation of the object\nprint(CreateNextflowAnalysis.to_json())\n\n# convert the object into a dict\ncreate_nextflow_analysis_dict = create_nextflow_analysis_instance.to_dict()\n# create an instance of CreateNextflowAnalysis from a dict\ncreate_nextflow_analysis_from_dict = CreateNextflowAnalysis.from_dict(create_nextflow_analysis_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateNextflowJsonAnalysis/","title":"CreateNextflowJsonAnalysis","text":""},{"location":"v3/docs/CreateNextflowJsonAnalysis/#properties","title":"Properties","text":"Name Type Description Notes user_reference str The user-reference of the analysis. This should be something meaningful for the user. pipeline_id str The pipeline for which an analysis will be created. tags CreateAnalysisTag [optional] analysis_storage_id str The id of the storage to use for the analysis. [optional] output_parent_folder_id str The id or the urn of the folder in which the output folder should be created. [optional] analysis_output List[AnalysisOutputMapping] [optional] input_form_values NextflowJsonAnalysisInput"},{"location":"v3/docs/CreateNextflowJsonAnalysis/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_nextflow_json_analysis import CreateNextflowJsonAnalysis\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateNextflowJsonAnalysis from a JSON string\ncreate_nextflow_json_analysis_instance = CreateNextflowJsonAnalysis.from_json(json)\n# print the JSON string representation of the object\nprint(CreateNextflowJsonAnalysis.to_json())\n\n# convert the object into a dict\ncreate_nextflow_json_analysis_dict = create_nextflow_json_analysis_instance.to_dict()\n# create an instance of CreateNextflowJsonAnalysis from a dict\ncreate_nextflow_json_analysis_from_dict = CreateNextflowJsonAnalysis.from_dict(create_nextflow_json_analysis_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateNextflowWithCustomInputAnalysis/","title":"CreateNextflowWithCustomInputAnalysis","text":""},{"location":"v3/docs/CreateNextflowWithCustomInputAnalysis/#properties","title":"Properties","text":"Name Type Description Notes user_reference str The user-reference of the analysis. This should be something meaningful for the user. pipeline_id str The pipeline for which an analysis will be created. tags CreateAnalysisTag [optional] analysis_storage_id str The id of the storage to use for the analysis. [optional] output_parent_folder_id str The id or the urn of the folder in which the output folder should be created. [optional] analysis_output List[AnalysisOutputMapping] [optional] analysis_input NextflowAnalysisWithCustomInput"},{"location":"v3/docs/CreateNextflowWithCustomInputAnalysis/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_nextflow_with_custom_input_analysis import CreateNextflowWithCustomInputAnalysis\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateNextflowWithCustomInputAnalysis from a JSON string\ncreate_nextflow_with_custom_input_analysis_instance = CreateNextflowWithCustomInputAnalysis.from_json(json)\n# print the JSON string representation of the object\nprint(CreateNextflowWithCustomInputAnalysis.to_json())\n\n# convert the object into a dict\ncreate_nextflow_with_custom_input_analysis_dict = create_nextflow_with_custom_input_analysis_instance.to_dict()\n# create an instance of CreateNextflowWithCustomInputAnalysis from a dict\ncreate_nextflow_with_custom_input_analysis_from_dict = CreateNextflowWithCustomInputAnalysis.from_dict(create_nextflow_with_custom_input_analysis_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateNonIndexedFolder/","title":"CreateNonIndexedFolder","text":""},{"location":"v3/docs/CreateNonIndexedFolder/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the non indexed folder."},{"location":"v3/docs/CreateNonIndexedFolder/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_non_indexed_folder import CreateNonIndexedFolder\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateNonIndexedFolder from a JSON string\ncreate_non_indexed_folder_instance = CreateNonIndexedFolder.from_json(json)\n# print the JSON string representation of the object\nprint(CreateNonIndexedFolder.to_json())\n\n# convert the object into a dict\ncreate_non_indexed_folder_dict = create_non_indexed_folder_instance.to_dict()\n# create an instance of CreateNonIndexedFolder from a dict\ncreate_non_indexed_folder_from_dict = CreateNonIndexedFolder.from_dict(create_non_indexed_folder_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateNotificationChannel/","title":"CreateNotificationChannel","text":""},{"location":"v3/docs/CreateNotificationChannel/#properties","title":"Properties","text":"Name Type Description Notes enabled bool Should this channel be enabled or not? type str The type of delivery target (MAIL, SQS, SNS, HTTP, ...) address str The address where to send a notification to (email address, url, ...) aws_region str The AWS region of the SNS notification channel [optional]"},{"location":"v3/docs/CreateNotificationChannel/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_notification_channel import CreateNotificationChannel\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateNotificationChannel from a JSON string\ncreate_notification_channel_instance = CreateNotificationChannel.from_json(json)\n# print the JSON string representation of the object\nprint(CreateNotificationChannel.to_json())\n\n# convert the object into a dict\ncreate_notification_channel_dict = create_notification_channel_instance.to_dict()\n# create an instance of CreateNotificationChannel from a dict\ncreate_notification_channel_from_dict = CreateNotificationChannel.from_dict(create_notification_channel_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateNotificationSubscription/","title":"CreateNotificationSubscription","text":""},{"location":"v3/docs/CreateNotificationSubscription/#properties","title":"Properties","text":"Name Type Description Notes event_code str The event code to subscribe to payload_version str The version of the notification event payload in case multiple versions exist. For analysis events possible values are [V3,V4] [optional] filter_expression str To be used when a notification applies to specific conditions. [optional] enabled bool Should this subscription be enabled or not? notification_channel_id str The ID of the notification channel used to send on"},{"location":"v3/docs/CreateNotificationSubscription/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_notification_subscription import CreateNotificationSubscription\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateNotificationSubscription from a JSON string\ncreate_notification_subscription_instance = CreateNotificationSubscription.from_json(json)\n# print the JSON string representation of the object\nprint(CreateNotificationSubscription.to_json())\n\n# convert the object into a dict\ncreate_notification_subscription_dict = create_notification_subscription_instance.to_dict()\n# create an instance of CreateNotificationSubscription from a dict\ncreate_notification_subscription_from_dict = CreateNotificationSubscription.from_dict(create_notification_subscription_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateProject/","title":"CreateProject","text":""},{"location":"v3/docs/CreateProject/#properties","title":"Properties","text":"Name Type Description Notes name str short_description str [optional] information str Information about the project. Note that the value of this field can be arbitrary large. [optional] project_owner_id str Owner of the project. Defaults to the current user. [optional] region_id str The region of the project. All data and pipeline executions will reside in this region. billing_mode str The billing mode of the project. It determines who pays for the costs linked to the project. data_sharing_enabled bool Indicates whether the Data and Samples created in this Project can be linked to other Projects. tags ProjectTag [optional] storage_bundle_id str metadata_model_id str [optional] storage_configuration_id str An optional storage configuration id to have self managed storage. [optional] storage_configuration_subfolder str An optional subfolder that determines the object prefix of your self managed storage.  If not used, you will not be able to use this storage configuration for any future projects. [optional] analysis_priority str Indicates the priority given to a project and its analyses within a single tenant, where MEDIUM is the default value. [optional] [default to 'MEDIUM']"},{"location":"v3/docs/CreateProject/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_project import CreateProject\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateProject from a JSON string\ncreate_project_instance = CreateProject.from_json(json)\n# print the JSON string representation of the object\nprint(CreateProject.to_json())\n\n# convert the object into a dict\ncreate_project_dict = create_project_instance.to_dict()\n# create an instance of CreateProject from a dict\ncreate_project_from_dict = CreateProject.from_dict(create_project_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateProjectDataCopyBatch/","title":"CreateProjectDataCopyBatch","text":""},{"location":"v3/docs/CreateProjectDataCopyBatch/#properties","title":"Properties","text":"Name Type Description Notes items List[CreateProjectDataCopyBatchItem] destination_folder_id str [optional] copy_user_tags bool copy_technical_tags bool copy_instrument_info bool action_on_exist str only applicable on files, not on folders"},{"location":"v3/docs/CreateProjectDataCopyBatch/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_project_data_copy_batch import CreateProjectDataCopyBatch\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateProjectDataCopyBatch from a JSON string\ncreate_project_data_copy_batch_instance = CreateProjectDataCopyBatch.from_json(json)\n# print the JSON string representation of the object\nprint(CreateProjectDataCopyBatch.to_json())\n\n# convert the object into a dict\ncreate_project_data_copy_batch_dict = create_project_data_copy_batch_instance.to_dict()\n# create an instance of CreateProjectDataCopyBatch from a dict\ncreate_project_data_copy_batch_from_dict = CreateProjectDataCopyBatch.from_dict(create_project_data_copy_batch_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateProjectDataCopyBatchItem/","title":"CreateProjectDataCopyBatchItem","text":""},{"location":"v3/docs/CreateProjectDataCopyBatchItem/#properties","title":"Properties","text":"Name Type Description Notes data_id str"},{"location":"v3/docs/CreateProjectDataCopyBatchItem/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_project_data_copy_batch_item import CreateProjectDataCopyBatchItem\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateProjectDataCopyBatchItem from a JSON string\ncreate_project_data_copy_batch_item_instance = CreateProjectDataCopyBatchItem.from_json(json)\n# print the JSON string representation of the object\nprint(CreateProjectDataCopyBatchItem.to_json())\n\n# convert the object into a dict\ncreate_project_data_copy_batch_item_dict = create_project_data_copy_batch_item_instance.to_dict()\n# create an instance of CreateProjectDataCopyBatchItem from a dict\ncreate_project_data_copy_batch_item_from_dict = CreateProjectDataCopyBatchItem.from_dict(create_project_data_copy_batch_item_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateProjectDataLinkingBatch/","title":"CreateProjectDataLinkingBatch","text":""},{"location":"v3/docs/CreateProjectDataLinkingBatch/#properties","title":"Properties","text":"Name Type Description Notes items List[CreateProjectDataLinkingBatchItem]"},{"location":"v3/docs/CreateProjectDataLinkingBatch/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_project_data_linking_batch import CreateProjectDataLinkingBatch\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateProjectDataLinkingBatch from a JSON string\ncreate_project_data_linking_batch_instance = CreateProjectDataLinkingBatch.from_json(json)\n# print the JSON string representation of the object\nprint(CreateProjectDataLinkingBatch.to_json())\n\n# convert the object into a dict\ncreate_project_data_linking_batch_dict = create_project_data_linking_batch_instance.to_dict()\n# create an instance of CreateProjectDataLinkingBatch from a dict\ncreate_project_data_linking_batch_from_dict = CreateProjectDataLinkingBatch.from_dict(create_project_data_linking_batch_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateProjectDataLinkingBatchItem/","title":"CreateProjectDataLinkingBatchItem","text":""},{"location":"v3/docs/CreateProjectDataLinkingBatchItem/#properties","title":"Properties","text":"Name Type Description Notes data_id str"},{"location":"v3/docs/CreateProjectDataLinkingBatchItem/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_project_data_linking_batch_item import CreateProjectDataLinkingBatchItem\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateProjectDataLinkingBatchItem from a JSON string\ncreate_project_data_linking_batch_item_instance = CreateProjectDataLinkingBatchItem.from_json(json)\n# print the JSON string representation of the object\nprint(CreateProjectDataLinkingBatchItem.to_json())\n\n# convert the object into a dict\ncreate_project_data_linking_batch_item_dict = create_project_data_linking_batch_item_instance.to_dict()\n# create an instance of CreateProjectDataLinkingBatchItem from a dict\ncreate_project_data_linking_batch_item_from_dict = CreateProjectDataLinkingBatchItem.from_dict(create_project_data_linking_batch_item_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateProjectDataMoveBatch/","title":"CreateProjectDataMoveBatch","text":""},{"location":"v3/docs/CreateProjectDataMoveBatch/#properties","title":"Properties","text":"Name Type Description Notes items List[CreateProjectDataMoveBatchItem] destination_folder_id str [optional]"},{"location":"v3/docs/CreateProjectDataMoveBatch/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_project_data_move_batch import CreateProjectDataMoveBatch\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateProjectDataMoveBatch from a JSON string\ncreate_project_data_move_batch_instance = CreateProjectDataMoveBatch.from_json(json)\n# print the JSON string representation of the object\nprint(CreateProjectDataMoveBatch.to_json())\n\n# convert the object into a dict\ncreate_project_data_move_batch_dict = create_project_data_move_batch_instance.to_dict()\n# create an instance of CreateProjectDataMoveBatch from a dict\ncreate_project_data_move_batch_from_dict = CreateProjectDataMoveBatch.from_dict(create_project_data_move_batch_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateProjectDataMoveBatchItem/","title":"CreateProjectDataMoveBatchItem","text":""},{"location":"v3/docs/CreateProjectDataMoveBatchItem/#properties","title":"Properties","text":"Name Type Description Notes data_id str"},{"location":"v3/docs/CreateProjectDataMoveBatchItem/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_project_data_move_batch_item import CreateProjectDataMoveBatchItem\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateProjectDataMoveBatchItem from a JSON string\ncreate_project_data_move_batch_item_instance = CreateProjectDataMoveBatchItem.from_json(json)\n# print the JSON string representation of the object\nprint(CreateProjectDataMoveBatchItem.to_json())\n\n# convert the object into a dict\ncreate_project_data_move_batch_item_dict = create_project_data_move_batch_item_instance.to_dict()\n# create an instance of CreateProjectDataMoveBatchItem from a dict\ncreate_project_data_move_batch_item_from_dict = CreateProjectDataMoveBatchItem.from_dict(create_project_data_move_batch_item_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateProjectDataUnlinkingBatch/","title":"CreateProjectDataUnlinkingBatch","text":""},{"location":"v3/docs/CreateProjectDataUnlinkingBatch/#properties","title":"Properties","text":"Name Type Description Notes items List[CreateProjectDataUnlinkingBatchItem]"},{"location":"v3/docs/CreateProjectDataUnlinkingBatch/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_project_data_unlinking_batch import CreateProjectDataUnlinkingBatch\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateProjectDataUnlinkingBatch from a JSON string\ncreate_project_data_unlinking_batch_instance = CreateProjectDataUnlinkingBatch.from_json(json)\n# print the JSON string representation of the object\nprint(CreateProjectDataUnlinkingBatch.to_json())\n\n# convert the object into a dict\ncreate_project_data_unlinking_batch_dict = create_project_data_unlinking_batch_instance.to_dict()\n# create an instance of CreateProjectDataUnlinkingBatch from a dict\ncreate_project_data_unlinking_batch_from_dict = CreateProjectDataUnlinkingBatch.from_dict(create_project_data_unlinking_batch_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateProjectDataUnlinkingBatchItem/","title":"CreateProjectDataUnlinkingBatchItem","text":""},{"location":"v3/docs/CreateProjectDataUnlinkingBatchItem/#properties","title":"Properties","text":"Name Type Description Notes data_id str"},{"location":"v3/docs/CreateProjectDataUnlinkingBatchItem/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_project_data_unlinking_batch_item import CreateProjectDataUnlinkingBatchItem\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateProjectDataUnlinkingBatchItem from a JSON string\ncreate_project_data_unlinking_batch_item_instance = CreateProjectDataUnlinkingBatchItem.from_json(json)\n# print the JSON string representation of the object\nprint(CreateProjectDataUnlinkingBatchItem.to_json())\n\n# convert the object into a dict\ncreate_project_data_unlinking_batch_item_dict = create_project_data_unlinking_batch_item_instance.to_dict()\n# create an instance of CreateProjectDataUnlinkingBatchItem from a dict\ncreate_project_data_unlinking_batch_item_from_dict = CreateProjectDataUnlinkingBatchItem.from_dict(create_project_data_unlinking_batch_item_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateProjectDataUpdateBatch/","title":"CreateProjectDataUpdateBatch","text":""},{"location":"v3/docs/CreateProjectDataUpdateBatch/#properties","title":"Properties","text":"Name Type Description Notes data_update_groups List[DataUpdateGroup]"},{"location":"v3/docs/CreateProjectDataUpdateBatch/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_project_data_update_batch import CreateProjectDataUpdateBatch\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateProjectDataUpdateBatch from a JSON string\ncreate_project_data_update_batch_instance = CreateProjectDataUpdateBatch.from_json(json)\n# print the JSON string representation of the object\nprint(CreateProjectDataUpdateBatch.to_json())\n\n# convert the object into a dict\ncreate_project_data_update_batch_dict = create_project_data_update_batch_instance.to_dict()\n# create an instance of CreateProjectDataUpdateBatch from a dict\ncreate_project_data_update_batch_from_dict = CreateProjectDataUpdateBatch.from_dict(create_project_data_update_batch_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateProjectPermission/","title":"CreateProjectPermission","text":""},{"location":"v3/docs/CreateProjectPermission/#properties","title":"Properties","text":"Name Type Description Notes role_project str role_flow str role_base str role_bench str membership_type str How users are invited to the project user_id str the id of the user that should be given access, required when membershipType is USER [optional] email_address str The email to invite a user on, required when membershipType is EMAIL [optional] workgroup_id str the id of the workgroup to give access, required when membershipType is WORKGROUP [optional] upload_allowed bool Indicates if uploading data is allowed or not. download_allowed bool Indicates if downloading data is allowed or not."},{"location":"v3/docs/CreateProjectPermission/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_project_permission import CreateProjectPermission\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateProjectPermission from a JSON string\ncreate_project_permission_instance = CreateProjectPermission.from_json(json)\n# print the JSON string representation of the object\nprint(CreateProjectPermission.to_json())\n\n# convert the object into a dict\ncreate_project_permission_dict = create_project_permission_instance.to_dict()\n# create an instance of CreateProjectPermission from a dict\ncreate_project_permission_from_dict = CreateProjectPermission.from_dict(create_project_permission_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateProjectPermissionV4/","title":"CreateProjectPermissionV4","text":""},{"location":"v3/docs/CreateProjectPermissionV4/#properties","title":"Properties","text":"Name Type Description Notes role_project str role_flow str role_base str role_bench str membership_type str How users are invited to the project user_id str the id of the user that should be given access, required when membershipType is USER [optional] email_address str The email to invite a user on, required when membershipType is EMAIL [optional] workgroup_id str the id of the workgroup to give access, required when membershipType is WORKGROUP [optional] upload_allowed bool Indicates if uploading data is allowed or not. download_allowed bool Indicates if downloading data is allowed or not."},{"location":"v3/docs/CreateProjectPermissionV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_project_permission_v4 import CreateProjectPermissionV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateProjectPermissionV4 from a JSON string\ncreate_project_permission_v4_instance = CreateProjectPermissionV4.from_json(json)\n# print the JSON string representation of the object\nprint(CreateProjectPermissionV4.to_json())\n\n# convert the object into a dict\ncreate_project_permission_v4_dict = create_project_permission_v4_instance.to_dict()\n# create an instance of CreateProjectPermissionV4 from a dict\ncreate_project_permission_v4_from_dict = CreateProjectPermissionV4.from_dict(create_project_permission_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateSample/","title":"CreateSample","text":""},{"location":"v3/docs/CreateSample/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the sample. description str The description of the sample. [optional] tags OptionalSampleTags [optional]"},{"location":"v3/docs/CreateSample/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_sample import CreateSample\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateSample from a JSON string\ncreate_sample_instance = CreateSample.from_json(json)\n# print the JSON string representation of the object\nprint(CreateSample.to_json())\n\n# convert the object into a dict\ncreate_sample_dict = create_sample_instance.to_dict()\n# create an instance of CreateSample from a dict\ncreate_sample_from_dict = CreateSample.from_dict(create_sample_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateSampleCreationBatch/","title":"CreateSampleCreationBatch","text":""},{"location":"v3/docs/CreateSampleCreationBatch/#properties","title":"Properties","text":"Name Type Description Notes items List[CreateSampleCreationBatchSampleItem]"},{"location":"v3/docs/CreateSampleCreationBatch/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_sample_creation_batch import CreateSampleCreationBatch\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateSampleCreationBatch from a JSON string\ncreate_sample_creation_batch_instance = CreateSampleCreationBatch.from_json(json)\n# print the JSON string representation of the object\nprint(CreateSampleCreationBatch.to_json())\n\n# convert the object into a dict\ncreate_sample_creation_batch_dict = create_sample_creation_batch_instance.to_dict()\n# create an instance of CreateSampleCreationBatch from a dict\ncreate_sample_creation_batch_from_dict = CreateSampleCreationBatch.from_dict(create_sample_creation_batch_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateSampleCreationBatchDataItem/","title":"CreateSampleCreationBatchDataItem","text":"<p>The data to be linked to the new sample.</p>"},{"location":"v3/docs/CreateSampleCreationBatchDataItem/#properties","title":"Properties","text":"Name Type Description Notes data_id str"},{"location":"v3/docs/CreateSampleCreationBatchDataItem/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_sample_creation_batch_data_item import CreateSampleCreationBatchDataItem\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateSampleCreationBatchDataItem from a JSON string\ncreate_sample_creation_batch_data_item_instance = CreateSampleCreationBatchDataItem.from_json(json)\n# print the JSON string representation of the object\nprint(CreateSampleCreationBatchDataItem.to_json())\n\n# convert the object into a dict\ncreate_sample_creation_batch_data_item_dict = create_sample_creation_batch_data_item_instance.to_dict()\n# create an instance of CreateSampleCreationBatchDataItem from a dict\ncreate_sample_creation_batch_data_item_from_dict = CreateSampleCreationBatchDataItem.from_dict(create_sample_creation_batch_data_item_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateSampleCreationBatchSampleItem/","title":"CreateSampleCreationBatchSampleItem","text":""},{"location":"v3/docs/CreateSampleCreationBatchSampleItem/#properties","title":"Properties","text":"Name Type Description Notes sample_to_create CreateSample data_to_link List[CreateSampleCreationBatchDataItem] The data to be linked to the new sample. [optional] complete_sample bool Indicates whether the sample must be completed."},{"location":"v3/docs/CreateSampleCreationBatchSampleItem/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_sample_creation_batch_sample_item import CreateSampleCreationBatchSampleItem\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateSampleCreationBatchSampleItem from a JSON string\ncreate_sample_creation_batch_sample_item_instance = CreateSampleCreationBatchSampleItem.from_json(json)\n# print the JSON string representation of the object\nprint(CreateSampleCreationBatchSampleItem.to_json())\n\n# convert the object into a dict\ncreate_sample_creation_batch_sample_item_dict = create_sample_creation_batch_sample_item_instance.to_dict()\n# create an instance of CreateSampleCreationBatchSampleItem from a dict\ncreate_sample_creation_batch_sample_item_from_dict = CreateSampleCreationBatchSampleItem.from_dict(create_sample_creation_batch_sample_item_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateStorageConfiguration/","title":"CreateStorageConfiguration","text":""},{"location":"v3/docs/CreateStorageConfiguration/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the configuration description str An optional description [optional] storage_credential_id str The id of the storage credential type str The type of configuration aws_details AWSDetails [optional] region_id str The id of the region where the bucket will be located"},{"location":"v3/docs/CreateStorageConfiguration/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_storage_configuration import CreateStorageConfiguration\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateStorageConfiguration from a JSON string\ncreate_storage_configuration_instance = CreateStorageConfiguration.from_json(json)\n# print the JSON string representation of the object\nprint(CreateStorageConfiguration.to_json())\n\n# convert the object into a dict\ncreate_storage_configuration_dict = create_storage_configuration_instance.to_dict()\n# create an instance of CreateStorageConfiguration from a dict\ncreate_storage_configuration_from_dict = CreateStorageConfiguration.from_dict(create_storage_configuration_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateStorageCredential/","title":"CreateStorageCredential","text":""},{"location":"v3/docs/CreateStorageCredential/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the credentials type str The type of the credentials aws_credentials AwsCredentials [optional]"},{"location":"v3/docs/CreateStorageCredential/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_storage_credential import CreateStorageCredential\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateStorageCredential from a JSON string\ncreate_storage_credential_instance = CreateStorageCredential.from_json(json)\n# print the JSON string representation of the object\nprint(CreateStorageCredential.to_json())\n\n# convert the object into a dict\ncreate_storage_credential_dict = create_storage_credential_instance.to_dict()\n# create an instance of CreateStorageCredential from a dict\ncreate_storage_credential_from_dict = CreateStorageCredential.from_dict(create_storage_credential_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateTemporaryCredentials/","title":"CreateTemporaryCredentials","text":""},{"location":"v3/docs/CreateTemporaryCredentials/#properties","title":"Properties","text":"Name Type Description Notes credentials_format str The format in which temporary credentials have to be returned. If not provided, temporary credentials will be returned in a cloud specific format. [optional] read_only_credentials bool The temporary credentials will be read-only. [optional]"},{"location":"v3/docs/CreateTemporaryCredentials/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_temporary_credentials import CreateTemporaryCredentials\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateTemporaryCredentials from a JSON string\ncreate_temporary_credentials_instance = CreateTemporaryCredentials.from_json(json)\n# print the JSON string representation of the object\nprint(CreateTemporaryCredentials.to_json())\n\n# convert the object into a dict\ncreate_temporary_credentials_dict = create_temporary_credentials_instance.to_dict()\n# create an instance of CreateTemporaryCredentials from a dict\ncreate_temporary_credentials_from_dict = CreateTemporaryCredentials.from_dict(create_temporary_credentials_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateTermsOfUse/","title":"CreateTermsOfUse","text":""},{"location":"v3/docs/CreateTermsOfUse/#properties","title":"Properties","text":"Name Type Description Notes terms_of_use str Terms of Use for a bundle. Supports plain text or HTML. requires_user_acceptance bool Flag indicating whether the Terms of Use should be accepted before using/viewing the bundle. release_version str Version number of the Terms of Use. reset_acceptance_records bool Do you want to reset the acceptance records."},{"location":"v3/docs/CreateTermsOfUse/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_terms_of_use import CreateTermsOfUse\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateTermsOfUse from a JSON string\ncreate_terms_of_use_instance = CreateTermsOfUse.from_json(json)\n# print the JSON string representation of the object\nprint(CreateTermsOfUse.to_json())\n\n# convert the object into a dict\ncreate_terms_of_use_dict = create_terms_of_use_instance.to_dict()\n# create an instance of CreateTermsOfUse from a dict\ncreate_terms_of_use_from_dict = CreateTermsOfUse.from_dict(create_terms_of_use_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CreateUploadRule/","title":"CreateUploadRule","text":""},{"location":"v3/docs/CreateUploadRule/#properties","title":"Properties","text":"Name Type Description Notes code str active bool [optional] description str [optional] local_folder str The local folder to monitor. Files in this folder on your local environment will be uploaded to the specified project. Only files matching the filePattern will be uploaded. file_pattern str The regular expression to match a file name. eg: to match all files use '.*' data_format_id str The format which will be assigned to the uploaded data. If not specified, an auto-detection of the format will be done. [optional] project_id str The project to which the data will be uploaded."},{"location":"v3/docs/CreateUploadRule/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.create_upload_rule import CreateUploadRule\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CreateUploadRule from a JSON string\ncreate_upload_rule_instance = CreateUploadRule.from_json(json)\n# print the JSON string representation of the object\nprint(CreateUploadRule.to_json())\n\n# convert the object into a dict\ncreate_upload_rule_dict = create_upload_rule_instance.to_dict()\n# create an instance of CreateUploadRule from a dict\ncreate_upload_rule_from_dict = CreateUploadRule.from_dict(create_upload_rule_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CustomNotificationSubscription/","title":"CustomNotificationSubscription","text":""},{"location":"v3/docs/CustomNotificationSubscription/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] custom_event_code str The custom event code to subscribe to filter_expression str To be used when a notification applies to specific conditions. [optional] enabled bool Should this subscription be enabled or not? notification_channel NotificationChannel application ApplicationV4 [optional]"},{"location":"v3/docs/CustomNotificationSubscription/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.custom_notification_subscription import CustomNotificationSubscription\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CustomNotificationSubscription from a JSON string\ncustom_notification_subscription_instance = CustomNotificationSubscription.from_json(json)\n# print the JSON string representation of the object\nprint(CustomNotificationSubscription.to_json())\n\n# convert the object into a dict\ncustom_notification_subscription_dict = custom_notification_subscription_instance.to_dict()\n# create an instance of CustomNotificationSubscription from a dict\ncustom_notification_subscription_from_dict = CustomNotificationSubscription.from_dict(custom_notification_subscription_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CustomNotificationSubscriptionList/","title":"CustomNotificationSubscriptionList","text":""},{"location":"v3/docs/CustomNotificationSubscriptionList/#properties","title":"Properties","text":"Name Type Description Notes items List[CustomNotificationSubscription]"},{"location":"v3/docs/CustomNotificationSubscriptionList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.custom_notification_subscription_list import CustomNotificationSubscriptionList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CustomNotificationSubscriptionList from a JSON string\ncustom_notification_subscription_list_instance = CustomNotificationSubscriptionList.from_json(json)\n# print the JSON string representation of the object\nprint(CustomNotificationSubscriptionList.to_json())\n\n# convert the object into a dict\ncustom_notification_subscription_list_dict = custom_notification_subscription_list_instance.to_dict()\n# create an instance of CustomNotificationSubscriptionList from a dict\ncustom_notification_subscription_list_from_dict = CustomNotificationSubscriptionList.from_dict(custom_notification_subscription_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CwlAnalysisInput/","title":"CwlAnalysisInput","text":"<p>This object contains a \\\"oneOf\\\" construct. With the \\\"objectType\\\" attribute you can specify which object type you want to provide. Use \\\"STRUCTURED\\\" for type \\\"CreateAnalysisStructuredInput\\\" or use \\\"JSON\\\" for type \\\"CreateAnalysisJsonInput\\\".</p>"},{"location":"v3/docs/CwlAnalysisInput/#properties","title":"Properties","text":"Name Type Description Notes object_type str inputs List[AnalysisDataInput] parameters List[AnalysisParameterInput] [optional] reference_data_parameters List[AnalysisReferenceDataParameter] [optional] input_json str Contains the input JSON, as an escaped JSON String. data_ids List[str] [optional] mounts List[AnalysisInputDataMount] [optional] external_data List[AnalysisInputExternalData] [optional]"},{"location":"v3/docs/CwlAnalysisInput/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.cwl_analysis_input import CwlAnalysisInput\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CwlAnalysisInput from a JSON string\ncwl_analysis_input_instance = CwlAnalysisInput.from_json(json)\n# print the JSON string representation of the object\nprint(CwlAnalysisInput.to_json())\n\n# convert the object into a dict\ncwl_analysis_input_dict = cwl_analysis_input_instance.to_dict()\n# create an instance of CwlAnalysisInput from a dict\ncwl_analysis_input_from_dict = CwlAnalysisInput.from_dict(cwl_analysis_input_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CwlAnalysisInputJson/","title":"CwlAnalysisInputJson","text":""},{"location":"v3/docs/CwlAnalysisInputJson/#properties","title":"Properties","text":"Name Type Description Notes input_json str The input json of the CWL analysis."},{"location":"v3/docs/CwlAnalysisInputJson/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.cwl_analysis_input_json import CwlAnalysisInputJson\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CwlAnalysisInputJson from a JSON string\ncwl_analysis_input_json_instance = CwlAnalysisInputJson.from_json(json)\n# print the JSON string representation of the object\nprint(CwlAnalysisInputJson.to_json())\n\n# convert the object into a dict\ncwl_analysis_input_json_dict = cwl_analysis_input_json_instance.to_dict()\n# create an instance of CwlAnalysisInputJson from a dict\ncwl_analysis_input_json_from_dict = CwlAnalysisInputJson.from_dict(cwl_analysis_input_json_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CwlAnalysisJsonInput/","title":"CwlAnalysisJsonInput","text":""},{"location":"v3/docs/CwlAnalysisJsonInput/#properties","title":"Properties","text":"Name Type Description Notes object_type str input_json str Contains the input JSON, as an escaped JSON String. data_ids List[str] [optional] mounts List[AnalysisInputDataMount] [optional] external_data List[AnalysisInputExternalData] [optional]"},{"location":"v3/docs/CwlAnalysisJsonInput/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.cwl_analysis_json_input import CwlAnalysisJsonInput\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CwlAnalysisJsonInput from a JSON string\ncwl_analysis_json_input_instance = CwlAnalysisJsonInput.from_json(json)\n# print the JSON string representation of the object\nprint(CwlAnalysisJsonInput.to_json())\n\n# convert the object into a dict\ncwl_analysis_json_input_dict = cwl_analysis_json_input_instance.to_dict()\n# create an instance of CwlAnalysisJsonInput from a dict\ncwl_analysis_json_input_from_dict = CwlAnalysisJsonInput.from_dict(cwl_analysis_json_input_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CwlAnalysisOutputJson/","title":"CwlAnalysisOutputJson","text":""},{"location":"v3/docs/CwlAnalysisOutputJson/#properties","title":"Properties","text":"Name Type Description Notes output_json str The output json of the CWL analysis."},{"location":"v3/docs/CwlAnalysisOutputJson/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.cwl_analysis_output_json import CwlAnalysisOutputJson\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CwlAnalysisOutputJson from a JSON string\ncwl_analysis_output_json_instance = CwlAnalysisOutputJson.from_json(json)\n# print the JSON string representation of the object\nprint(CwlAnalysisOutputJson.to_json())\n\n# convert the object into a dict\ncwl_analysis_output_json_dict = cwl_analysis_output_json_instance.to_dict()\n# create an instance of CwlAnalysisOutputJson from a dict\ncwl_analysis_output_json_from_dict = CwlAnalysisOutputJson.from_dict(cwl_analysis_output_json_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CwlAnalysisStructuredInput/","title":"CwlAnalysisStructuredInput","text":""},{"location":"v3/docs/CwlAnalysisStructuredInput/#properties","title":"Properties","text":"Name Type Description Notes object_type str inputs List[AnalysisDataInput] parameters List[AnalysisParameterInput] [optional] reference_data_parameters List[AnalysisReferenceDataParameter] [optional]"},{"location":"v3/docs/CwlAnalysisStructuredInput/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.cwl_analysis_structured_input import CwlAnalysisStructuredInput\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CwlAnalysisStructuredInput from a JSON string\ncwl_analysis_structured_input_instance = CwlAnalysisStructuredInput.from_json(json)\n# print the JSON string representation of the object\nprint(CwlAnalysisStructuredInput.to_json())\n\n# convert the object into a dict\ncwl_analysis_structured_input_dict = cwl_analysis_structured_input_instance.to_dict()\n# create an instance of CwlAnalysisStructuredInput from a dict\ncwl_analysis_structured_input_from_dict = CwlAnalysisStructuredInput.from_dict(cwl_analysis_structured_input_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CwlAnalysisWithJsonInput/","title":"CwlAnalysisWithJsonInput","text":""},{"location":"v3/docs/CwlAnalysisWithJsonInput/#properties","title":"Properties","text":"Name Type Description Notes input_json str Contains the input JSON, as an escaped JSON String. data_ids List[str] [optional] mounts List[AnalysisInputDataMount] [optional] external_data List[AnalysisInputExternalData] [optional]"},{"location":"v3/docs/CwlAnalysisWithJsonInput/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.cwl_analysis_with_json_input import CwlAnalysisWithJsonInput\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CwlAnalysisWithJsonInput from a JSON string\ncwl_analysis_with_json_input_instance = CwlAnalysisWithJsonInput.from_json(json)\n# print the JSON string representation of the object\nprint(CwlAnalysisWithJsonInput.to_json())\n\n# convert the object into a dict\ncwl_analysis_with_json_input_dict = cwl_analysis_with_json_input_instance.to_dict()\n# create an instance of CwlAnalysisWithJsonInput from a dict\ncwl_analysis_with_json_input_from_dict = CwlAnalysisWithJsonInput.from_dict(cwl_analysis_with_json_input_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CwlAnalysisWithStructuredInput/","title":"CwlAnalysisWithStructuredInput","text":""},{"location":"v3/docs/CwlAnalysisWithStructuredInput/#properties","title":"Properties","text":"Name Type Description Notes inputs List[AnalysisDataInput] parameters List[AnalysisParameterInput] [optional] reference_data_parameters List[AnalysisReferenceDataParameter] [optional]"},{"location":"v3/docs/CwlAnalysisWithStructuredInput/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.cwl_analysis_with_structured_input import CwlAnalysisWithStructuredInput\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CwlAnalysisWithStructuredInput from a JSON string\ncwl_analysis_with_structured_input_instance = CwlAnalysisWithStructuredInput.from_json(json)\n# print the JSON string representation of the object\nprint(CwlAnalysisWithStructuredInput.to_json())\n\n# convert the object into a dict\ncwl_analysis_with_structured_input_dict = cwl_analysis_with_structured_input_instance.to_dict()\n# create an instance of CwlAnalysisWithStructuredInput from a dict\ncwl_analysis_with_structured_input_from_dict = CwlAnalysisWithStructuredInput.from_dict(cwl_analysis_with_structured_input_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CwlJsonAnalysisInput/","title":"CwlJsonAnalysisInput","text":""},{"location":"v3/docs/CwlJsonAnalysisInput/#properties","title":"Properties","text":"Name Type Description Notes fields List[InputFormFieldValues] [optional] groups List[InputFormGroup] [optional]"},{"location":"v3/docs/CwlJsonAnalysisInput/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.cwl_json_analysis_input import CwlJsonAnalysisInput\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CwlJsonAnalysisInput from a JSON string\ncwl_json_analysis_input_instance = CwlJsonAnalysisInput.from_json(json)\n# print the JSON string representation of the object\nprint(CwlJsonAnalysisInput.to_json())\n\n# convert the object into a dict\ncwl_json_analysis_input_dict = cwl_json_analysis_input_instance.to_dict()\n# create an instance of CwlJsonAnalysisInput from a dict\ncwl_json_analysis_input_from_dict = CwlJsonAnalysisInput.from_dict(cwl_json_analysis_input_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/CwlToolDefinitionList/","title":"CwlToolDefinitionList","text":""},{"location":"v3/docs/CwlToolDefinitionList/#properties","title":"Properties","text":"Name Type Description Notes items List[CWLToolDefinition]"},{"location":"v3/docs/CwlToolDefinitionList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.cwl_tool_definition_list import CwlToolDefinitionList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of CwlToolDefinitionList from a JSON string\ncwl_tool_definition_list_instance = CwlToolDefinitionList.from_json(json)\n# print the JSON string representation of the object\nprint(CwlToolDefinitionList.to_json())\n\n# convert the object into a dict\ncwl_tool_definition_list_dict = cwl_tool_definition_list_instance.to_dict()\n# create an instance of CwlToolDefinitionList from a dict\ncwl_tool_definition_list_from_dict = CwlToolDefinitionList.from_dict(cwl_tool_definition_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/Data/","title":"Data","text":""},{"location":"v3/docs/Data/#properties","title":"Properties","text":"Name Type Description Notes id str The id of the file/folder as it was uploaded. urn str The URN of this data. The format is urn:ilmn:ica:region:\\&lt;ID of the region\\&gt;:data:\\&lt;ID of the data\\&gt;#\\&lt;optional data path\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted. [optional] details DataDetails [optional] folder_details FolderDetails [optional]"},{"location":"v3/docs/Data/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.data import Data\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of Data from a JSON string\ndata_instance = Data.from_json(json)\n# print the JSON string representation of the object\nprint(Data.to_json())\n\n# convert the object into a dict\ndata_dict = data_instance.to_dict()\n# create an instance of Data from a dict\ndata_from_dict = Data.from_dict(data_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/DataApi/","title":"libica.openapi.v3.DataApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_download_url_for_data_without_project_context POST /api/data/{dataUrn}:createDownloadUrl Retrieve a download URL for this data. create_inline_view_url_for_data_without_project_context POST /api/data/{dataUrn}:createInlineViewUrl Retrieve an URL for this data to use for inline view in a browser. get_data GET /api/data/{dataUrn} Retrieve a data."},{"location":"v3/docs/DataApi/#create_download_url_for_data_without_project_context","title":"create_download_url_for_data_without_project_context","text":"<p>Download create_download_url_for_data_without_project_context(data_urn)</p> <p>Retrieve a download URL for this data.</p> <p>Can be used to download a file directly from the region where it is located, no connector is needed. Not applicable for Folder.</p>"},{"location":"v3/docs/DataApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.download import Download\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.DataApi(api_client)\n    data_urn = 'data_urn_example' # str | The format is urn:ilmn:ica:region:\\\\&lt;ID of the region\\\\&gt;:data:\\\\&lt;ID of the data\\\\&gt;#\\\\&lt;optional data path\\\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted.\n\n    try:\n        # Retrieve a download URL for this data.\n        api_response = api_instance.create_download_url_for_data_without_project_context(data_urn)\n        print(\"The response of DataApi-&gt;create_download_url_for_data_without_project_context:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling DataApi-&gt;create_download_url_for_data_without_project_context: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/DataApi/#parameters","title":"Parameters","text":"Name Type Description Notes data_urn str The format is urn:ilmn:ica:region:\\&lt;ID of the region\\&gt;:data:\\&lt;ID of the data\\&gt;#\\&lt;optional data path\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted."},{"location":"v3/docs/DataApi/#return-type","title":"Return type","text":"<p>Download</p>"},{"location":"v3/docs/DataApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/DataApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/DataApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The download URL is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/DataApi/#create_inline_view_url_for_data_without_project_context","title":"create_inline_view_url_for_data_without_project_context","text":"<p>InlineView create_inline_view_url_for_data_without_project_context(data_urn)</p> <p>Retrieve an URL for this data to use for inline view in a browser.</p> <p>Can be used to view a file directly from the region where it is located, no connector is needed.</p>"},{"location":"v3/docs/DataApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.inline_view import InlineView\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.DataApi(api_client)\n    data_urn = 'data_urn_example' # str | The format is urn:ilmn:ica:region:\\\\&lt;ID of the region\\\\&gt;:data:\\\\&lt;ID of the data\\\\&gt;#\\\\&lt;optional data path\\\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted.\n\n    try:\n        # Retrieve an URL for this data to use for inline view in a browser.\n        api_response = api_instance.create_inline_view_url_for_data_without_project_context(data_urn)\n        print(\"The response of DataApi-&gt;create_inline_view_url_for_data_without_project_context:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling DataApi-&gt;create_inline_view_url_for_data_without_project_context: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/DataApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes data_urn str The format is urn:ilmn:ica:region:\\&lt;ID of the region\\&gt;:data:\\&lt;ID of the data\\&gt;#\\&lt;optional data path\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted."},{"location":"v3/docs/DataApi/#return-type_1","title":"Return type","text":"<p>InlineView</p>"},{"location":"v3/docs/DataApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/DataApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/DataApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The inline view URL is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/DataApi/#get_data","title":"get_data","text":"<p>Data get_data(data_urn)</p> <p>Retrieve a data.</p>"},{"location":"v3/docs/DataApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.data import Data\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.DataApi(api_client)\n    data_urn = 'data_urn_example' # str | The format is urn:ilmn:ica:region:\\\\&lt;ID of the region\\\\&gt;:data:\\\\&lt;ID of the data\\\\&gt;#\\\\&lt;optional data path\\\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted.\n\n    try:\n        # Retrieve a data.\n        api_response = api_instance.get_data(data_urn)\n        print(\"The response of DataApi-&gt;get_data:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling DataApi-&gt;get_data: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/DataApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes data_urn str The format is urn:ilmn:ica:region:\\&lt;ID of the region\\&gt;:data:\\&lt;ID of the data\\&gt;#\\&lt;optional data path\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted."},{"location":"v3/docs/DataApi/#return-type_2","title":"Return type","text":"<p>Data</p>"},{"location":"v3/docs/DataApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/DataApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/DataApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The data is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/DataDetails/","title":"DataDetails","text":""},{"location":"v3/docs/DataDetails/#properties","title":"Properties","text":"Name Type Description Notes time_created datetime time_modified datetime creator_id str [optional] tenant_id str tenant_name str [optional] owning_project_id str owning_project_name str [optional] name str The name of the file/folder as it was uploaded. path str The user friendly path of the parent of this data. [optional] file_size_in_bytes int The size of the file in bytes. Folders do not have a size. [optional] status str tags DataTag format DataFormat [optional] data_type str object_e_tag str The file's ETag, as received from the cloud provider. Not to be confused with the ETag reponse header of this API. [optional] stored_for_the_first_time_at datetime Specifies when the data object was stored for the first time [optional] region Region [optional] application ApplicationV4 [optional] will_be_archived_at datetime Specifies when the data object will be archived. [optional] will_be_deleted_at datetime Specifies when the data object will be deleted. [optional] sequencing_run SequencingRun [optional]"},{"location":"v3/docs/DataDetails/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.data_details import DataDetails\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of DataDetails from a JSON string\ndata_details_instance = DataDetails.from_json(json)\n# print the JSON string representation of the object\nprint(DataDetails.to_json())\n\n# convert the object into a dict\ndata_details_dict = data_details_instance.to_dict()\n# create an instance of DataDetails from a dict\ndata_details_from_dict = DataDetails.from_dict(data_details_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/DataFormat/","title":"DataFormat","text":""},{"location":"v3/docs/DataFormat/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] code str The code of the format. For example: FASTQ, BAM, ... description str [optional] mime_type str [optional]"},{"location":"v3/docs/DataFormat/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.data_format import DataFormat\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of DataFormat from a JSON string\ndata_format_instance = DataFormat.from_json(json)\n# print the JSON string representation of the object\nprint(DataFormat.to_json())\n\n# convert the object into a dict\ndata_format_dict = data_format_instance.to_dict()\n# create an instance of DataFormat from a dict\ndata_format_from_dict = DataFormat.from_dict(data_format_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/DataFormatApi/","title":"libica.openapi.v3.DataFormatApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_data_formats GET /api/dataFormats Retrieve a list of data formats."},{"location":"v3/docs/DataFormatApi/#get_data_formats","title":"get_data_formats","text":"<p>DataFormatPagedList get_data_formats(page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)</p> <p>Retrieve a list of data formats.</p>"},{"location":"v3/docs/DataFormatApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.data_format_paged_list import DataFormatPagedList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.DataFormatApi(api_client)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - code (optional)\n\n    try:\n        # Retrieve a list of data formats.\n        api_response = api_instance.get_data_formats(page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        print(\"The response of DataFormatApi-&gt;get_data_formats:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling DataFormatApi-&gt;get_data_formats: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/DataFormatApi/#parameters","title":"Parameters","text":"Name Type Description Notes page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - code [optional]"},{"location":"v3/docs/DataFormatApi/#return-type","title":"Return type","text":"<p>DataFormatPagedList</p>"},{"location":"v3/docs/DataFormatApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/DataFormatApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/DataFormatApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of data formats is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/DataFormatPagedList/","title":"DataFormatPagedList","text":""},{"location":"v3/docs/DataFormatPagedList/#properties","title":"Properties","text":"Name Type Description Notes items List[DataFormat] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/DataFormatPagedList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.data_format_paged_list import DataFormatPagedList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of DataFormatPagedList from a JSON string\ndata_format_paged_list_instance = DataFormatPagedList.from_json(json)\n# print the JSON string representation of the object\nprint(DataFormatPagedList.to_json())\n\n# convert the object into a dict\ndata_format_paged_list_dict = data_format_paged_list_instance.to_dict()\n# create an instance of DataFormatPagedList from a dict\ndata_format_paged_list_from_dict = DataFormatPagedList.from_dict(data_format_paged_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/DataIdOrPathList/","title":"DataIdOrPathList","text":""},{"location":"v3/docs/DataIdOrPathList/#properties","title":"Properties","text":"Name Type Description Notes data_ids List[str] [optional] data_paths List[str] [optional]"},{"location":"v3/docs/DataIdOrPathList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.data_id_or_path_list import DataIdOrPathList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of DataIdOrPathList from a JSON string\ndata_id_or_path_list_instance = DataIdOrPathList.from_json(json)\n# print the JSON string representation of the object\nprint(DataIdOrPathList.to_json())\n\n# convert the object into a dict\ndata_id_or_path_list_dict = data_id_or_path_list_instance.to_dict()\n# create an instance of DataIdOrPathList from a dict\ndata_id_or_path_list_from_dict = DataIdOrPathList.from_dict(data_id_or_path_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/DataList/","title":"DataList","text":""},{"location":"v3/docs/DataList/#properties","title":"Properties","text":"Name Type Description Notes items List[Data]"},{"location":"v3/docs/DataList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.data_list import DataList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of DataList from a JSON string\ndata_list_instance = DataList.from_json(json)\n# print the JSON string representation of the object\nprint(DataList.to_json())\n\n# convert the object into a dict\ndata_list_dict = data_list_instance.to_dict()\n# create an instance of DataList from a dict\ndata_list_from_dict = DataList.from_dict(data_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/DataPagedList/","title":"DataPagedList","text":""},{"location":"v3/docs/DataPagedList/#properties","title":"Properties","text":"Name Type Description Notes items List[Data] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/DataPagedList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.data_paged_list import DataPagedList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of DataPagedList from a JSON string\ndata_paged_list_instance = DataPagedList.from_json(json)\n# print the JSON string representation of the object\nprint(DataPagedList.to_json())\n\n# convert the object into a dict\ndata_paged_list_dict = data_paged_list_instance.to_dict()\n# create an instance of DataPagedList from a dict\ndata_paged_list_from_dict = DataPagedList.from_dict(data_paged_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/DataTag/","title":"DataTag","text":""},{"location":"v3/docs/DataTag/#properties","title":"Properties","text":"Name Type Description Notes technical_tags List[Optional[str]] [optional] user_tags List[Optional[str]] [optional] connector_tags List[Optional[str]] [optional] run_in_tags List[Optional[str]] [optional] run_out_tags List[Optional[str]] [optional] reference_tags List[Optional[str]] [optional]"},{"location":"v3/docs/DataTag/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.data_tag import DataTag\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of DataTag from a JSON string\ndata_tag_instance = DataTag.from_json(json)\n# print the JSON string representation of the object\nprint(DataTag.to_json())\n\n# convert the object into a dict\ndata_tag_dict = data_tag_instance.to_dict()\n# create an instance of DataTag from a dict\ndata_tag_from_dict = DataTag.from_dict(data_tag_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/DataTransfer/","title":"DataTransfer","text":""},{"location":"v3/docs/DataTransfer/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] reference str direction str connector Connector [optional] protocol str [optional] data_transferred int The data transferred so far in bytes. status str status_message str A message explaining the reason why the transfer is in the current status. [optional] duration int The overall duration of of the transfer defined in seconds. [optional] project Project [optional] data Data"},{"location":"v3/docs/DataTransfer/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.data_transfer import DataTransfer\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of DataTransfer from a JSON string\ndata_transfer_instance = DataTransfer.from_json(json)\n# print the JSON string representation of the object\nprint(DataTransfer.to_json())\n\n# convert the object into a dict\ndata_transfer_dict = data_transfer_instance.to_dict()\n# create an instance of DataTransfer from a dict\ndata_transfer_from_dict = DataTransfer.from_dict(data_transfer_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/DataTransferPagedList/","title":"DataTransferPagedList","text":""},{"location":"v3/docs/DataTransferPagedList/#properties","title":"Properties","text":"Name Type Description Notes items List[DataTransfer] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/DataTransferPagedList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.data_transfer_paged_list import DataTransferPagedList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of DataTransferPagedList from a JSON string\ndata_transfer_paged_list_instance = DataTransferPagedList.from_json(json)\n# print the JSON string representation of the object\nprint(DataTransferPagedList.to_json())\n\n# convert the object into a dict\ndata_transfer_paged_list_dict = data_transfer_paged_list_instance.to_dict()\n# create an instance of DataTransferPagedList from a dict\ndata_transfer_paged_list_from_dict = DataTransferPagedList.from_dict(data_transfer_paged_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/DataUpdateGroup/","title":"DataUpdateGroup","text":"<p>Updates to apply.</p>"},{"location":"v3/docs/DataUpdateGroup/#properties","title":"Properties","text":"Name Type Description Notes data_ids List[str] user_tags TagUpdate [optional] technical_tags TagUpdate [optional] will_be_archived_at datetime The timestamp when the data should be archived. [optional] will_be_deleted_at datetime The timestamp when the data should be deleted. [optional]"},{"location":"v3/docs/DataUpdateGroup/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.data_update_group import DataUpdateGroup\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of DataUpdateGroup from a JSON string\ndata_update_group_instance = DataUpdateGroup.from_json(json)\n# print the JSON string representation of the object\nprint(DataUpdateGroup.to_json())\n\n# convert the object into a dict\ndata_update_group_dict = data_update_group_instance.to_dict()\n# create an instance of DataUpdateGroup from a dict\ndata_update_group_from_dict = DataUpdateGroup.from_dict(data_update_group_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/DataUrlWithPath/","title":"DataUrlWithPath","text":""},{"location":"v3/docs/DataUrlWithPath/#properties","title":"Properties","text":"Name Type Description Notes data_id str The id of the file/folder as it was uploaded. data_urn str The URN of this data. The format is urn:ilmn:ica:region:\\&lt;ID of the region\\&gt;:data:\\&lt;ID of the data\\&gt;#\\&lt;optional data path\\&gt;. The path can be omitted, in that case the hashtag (#) must also be omitted. data_path str url str"},{"location":"v3/docs/DataUrlWithPath/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.data_url_with_path import DataUrlWithPath\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of DataUrlWithPath from a JSON string\ndata_url_with_path_instance = DataUrlWithPath.from_json(json)\n# print the JSON string representation of the object\nprint(DataUrlWithPath.to_json())\n\n# convert the object into a dict\ndata_url_with_path_dict = data_url_with_path_instance.to_dict()\n# create an instance of DataUrlWithPath from a dict\ndata_url_with_path_from_dict = DataUrlWithPath.from_dict(data_url_with_path_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/DataUrlWithPathList/","title":"DataUrlWithPathList","text":""},{"location":"v3/docs/DataUrlWithPathList/#properties","title":"Properties","text":"Name Type Description Notes items List[DataUrlWithPath]"},{"location":"v3/docs/DataUrlWithPathList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.data_url_with_path_list import DataUrlWithPathList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of DataUrlWithPathList from a JSON string\ndata_url_with_path_list_instance = DataUrlWithPathList.from_json(json)\n# print the JSON string representation of the object\nprint(DataUrlWithPathList.to_json())\n\n# convert the object into a dict\ndata_url_with_path_list_dict = data_url_with_path_list_instance.to_dict()\n# create an instance of DataUrlWithPathList from a dict\ndata_url_with_path_list_from_dict = DataUrlWithPathList.from_dict(data_url_with_path_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/DockerImage/","title":"DockerImage","text":""},{"location":"v3/docs/DockerImage/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner UserIdentifier tenant TenantIdentifier name str version str [optional] description str [optional] status str type str internal_docker_image_settings InternalDockerImageSettings [optional] external_docker_image_settings ExternalDockerImageSettings [optional] bench_settings BenchSettings [optional]"},{"location":"v3/docs/DockerImage/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.docker_image import DockerImage\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of DockerImage from a JSON string\ndocker_image_instance = DockerImage.from_json(json)\n# print the JSON string representation of the object\nprint(DockerImage.to_json())\n\n# convert the object into a dict\ndocker_image_dict = docker_image_instance.to_dict()\n# create an instance of DockerImage from a dict\ndocker_image_from_dict = DockerImage.from_dict(docker_image_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/DockerImageAccess/","title":"DockerImageAccess","text":""},{"location":"v3/docs/DockerImageAccess/#properties","title":"Properties","text":"Name Type Description Notes web bool console bool"},{"location":"v3/docs/DockerImageAccess/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.docker_image_access import DockerImageAccess\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of DockerImageAccess from a JSON string\ndocker_image_access_instance = DockerImageAccess.from_json(json)\n# print the JSON string representation of the object\nprint(DockerImageAccess.to_json())\n\n# convert the object into a dict\ndocker_image_access_dict = docker_image_access_instance.to_dict()\n# create an instance of DockerImageAccess from a dict\ndocker_image_access_from_dict = DockerImageAccess.from_dict(docker_image_access_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/DockerImageApi/","title":"libica.openapi.v3.DockerImageApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description add_regions POST /api/dockerImages/{imageId}:addRegions Add regions to an existing Docker image. create_external_docker_image POST /api/dockerImages:createExternal Create an external Docker image. create_internal_docker_image POST /api/dockerImages:createInternal Create an internal Docker image. get_docker_image GET /api/dockerImages/{imageId} Retrieve a Docker image. Only the Docker image the user has access to can be retrieved. get_docker_images GET /api/dockerImages Retrieve a list of Docker images. Only the Docker images the user has access to are returned. remove_regions POST /api/dockerImages/{imageId}:removeRegions Remove regions to an existing Docker image."},{"location":"v3/docs/DockerImageApi/#add_regions","title":"add_regions","text":"<p>add_regions(image_id, docker_image_region_list)</p> <p>Add regions to an existing Docker image.</p>"},{"location":"v3/docs/DockerImageApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.docker_image_region_list import DockerImageRegionList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.DockerImageApi(api_client)\n    image_id = 'image_id_example' # str | \n    docker_image_region_list = libica.openapi.v3.DockerImageRegionList() # DockerImageRegionList | \n\n    try:\n        # Add regions to an existing Docker image.\n        api_instance.add_regions(image_id, docker_image_region_list)\n    except Exception as e:\n        print(\"Exception when calling DockerImageApi-&gt;add_regions: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/DockerImageApi/#parameters","title":"Parameters","text":"Name Type Description Notes image_id str docker_image_region_list DockerImageRegionList"},{"location":"v3/docs/DockerImageApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/DockerImageApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/DockerImageApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/DockerImageApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The regions are successfully added. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/DockerImageApi/#create_external_docker_image","title":"create_external_docker_image","text":"<p>DockerImage create_external_docker_image(create_external_docker_image)</p> <p>Create an external Docker image.</p>"},{"location":"v3/docs/DockerImageApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_external_docker_image import CreateExternalDockerImage\nfrom libica.openapi.v3.models.docker_image import DockerImage\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.DockerImageApi(api_client)\n    create_external_docker_image = libica.openapi.v3.CreateExternalDockerImage() # CreateExternalDockerImage | \n\n    try:\n        # Create an external Docker image.\n        api_response = api_instance.create_external_docker_image(create_external_docker_image)\n        print(\"The response of DockerImageApi-&gt;create_external_docker_image:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling DockerImageApi-&gt;create_external_docker_image: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/DockerImageApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes create_external_docker_image CreateExternalDockerImage"},{"location":"v3/docs/DockerImageApi/#return-type_1","title":"Return type","text":"<p>DockerImage</p>"},{"location":"v3/docs/DockerImageApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/DockerImageApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v3/docs/DockerImageApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 201 The Docker image is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/DockerImageApi/#create_internal_docker_image","title":"create_internal_docker_image","text":"<p>DockerImage create_internal_docker_image(create_internal_docker_image)</p> <p>Create an internal Docker image.</p>"},{"location":"v3/docs/DockerImageApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_internal_docker_image import CreateInternalDockerImage\nfrom libica.openapi.v3.models.docker_image import DockerImage\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.DockerImageApi(api_client)\n    create_internal_docker_image = libica.openapi.v3.CreateInternalDockerImage() # CreateInternalDockerImage | \n\n    try:\n        # Create an internal Docker image.\n        api_response = api_instance.create_internal_docker_image(create_internal_docker_image)\n        print(\"The response of DockerImageApi-&gt;create_internal_docker_image:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling DockerImageApi-&gt;create_internal_docker_image: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/DockerImageApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes create_internal_docker_image CreateInternalDockerImage"},{"location":"v3/docs/DockerImageApi/#return-type_2","title":"Return type","text":"<p>DockerImage</p>"},{"location":"v3/docs/DockerImageApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/DockerImageApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v3/docs/DockerImageApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 201 The Docker image is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/DockerImageApi/#get_docker_image","title":"get_docker_image","text":"<p>DockerImage get_docker_image(image_id)</p> <p>Retrieve a Docker image. Only the Docker image the user has access to can be retrieved.</p>"},{"location":"v3/docs/DockerImageApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.docker_image import DockerImage\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.DockerImageApi(api_client)\n    image_id = 'image_id_example' # str | \n\n    try:\n        # Retrieve a Docker image. Only the Docker image the user has access to can be retrieved.\n        api_response = api_instance.get_docker_image(image_id)\n        print(\"The response of DockerImageApi-&gt;get_docker_image:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling DockerImageApi-&gt;get_docker_image: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/DockerImageApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes image_id str"},{"location":"v3/docs/DockerImageApi/#return-type_3","title":"Return type","text":"<p>DockerImage</p>"},{"location":"v3/docs/DockerImageApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/DockerImageApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v3/docs/DockerImageApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The Docker image is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/DockerImageApi/#get_docker_images","title":"get_docker_images","text":"<p>DockerImageList get_docker_images()</p> <p>Retrieve a list of Docker images. Only the Docker images the user has access to are returned.</p>"},{"location":"v3/docs/DockerImageApi/#example_4","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.docker_image_list import DockerImageList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.DockerImageApi(api_client)\n\n    try:\n        # Retrieve a list of Docker images. Only the Docker images the user has access to are returned.\n        api_response = api_instance.get_docker_images()\n        print(\"The response of DockerImageApi-&gt;get_docker_images:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling DockerImageApi-&gt;get_docker_images: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/DockerImageApi/#parameters_4","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v3/docs/DockerImageApi/#return-type_4","title":"Return type","text":"<p>DockerImageList</p>"},{"location":"v3/docs/DockerImageApi/#authorization_4","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/DockerImageApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v3/docs/DockerImageApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The list of Docker images is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/DockerImageApi/#remove_regions","title":"remove_regions","text":"<p>remove_regions(image_id, docker_image_region_list)</p> <p>Remove regions to an existing Docker image.</p>"},{"location":"v3/docs/DockerImageApi/#example_5","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.docker_image_region_list import DockerImageRegionList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.DockerImageApi(api_client)\n    image_id = 'image_id_example' # str | \n    docker_image_region_list = libica.openapi.v3.DockerImageRegionList() # DockerImageRegionList | \n\n    try:\n        # Remove regions to an existing Docker image.\n        api_instance.remove_regions(image_id, docker_image_region_list)\n    except Exception as e:\n        print(\"Exception when calling DockerImageApi-&gt;remove_regions: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/DockerImageApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes image_id str docker_image_region_list DockerImageRegionList"},{"location":"v3/docs/DockerImageApi/#return-type_5","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/DockerImageApi/#authorization_5","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/DockerImageApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/DockerImageApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 204 The regions are successfully removed. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/DockerImageList/","title":"DockerImageList","text":""},{"location":"v3/docs/DockerImageList/#properties","title":"Properties","text":"Name Type Description Notes items List[DockerImage]"},{"location":"v3/docs/DockerImageList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.docker_image_list import DockerImageList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of DockerImageList from a JSON string\ndocker_image_list_instance = DockerImageList.from_json(json)\n# print the JSON string representation of the object\nprint(DockerImageList.to_json())\n\n# convert the object into a dict\ndocker_image_list_dict = docker_image_list_instance.to_dict()\n# create an instance of DockerImageList from a dict\ndocker_image_list_from_dict = DockerImageList.from_dict(docker_image_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/DockerImageRegion/","title":"DockerImageRegion","text":""},{"location":"v3/docs/DockerImageRegion/#properties","title":"Properties","text":"Name Type Description Notes region RegionV4 [optional] url str [optional]"},{"location":"v3/docs/DockerImageRegion/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.docker_image_region import DockerImageRegion\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of DockerImageRegion from a JSON string\ndocker_image_region_instance = DockerImageRegion.from_json(json)\n# print the JSON string representation of the object\nprint(DockerImageRegion.to_json())\n\n# convert the object into a dict\ndocker_image_region_dict = docker_image_region_instance.to_dict()\n# create an instance of DockerImageRegion from a dict\ndocker_image_region_from_dict = DockerImageRegion.from_dict(docker_image_region_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/DockerImageRegionList/","title":"DockerImageRegionList","text":""},{"location":"v3/docs/DockerImageRegionList/#properties","title":"Properties","text":"Name Type Description Notes region_ids List[str]"},{"location":"v3/docs/DockerImageRegionList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.docker_image_region_list import DockerImageRegionList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of DockerImageRegionList from a JSON string\ndocker_image_region_list_instance = DockerImageRegionList.from_json(json)\n# print the JSON string representation of the object\nprint(DockerImageRegionList.to_json())\n\n# convert the object into a dict\ndocker_image_region_list_dict = docker_image_region_list_instance.to_dict()\n# create an instance of DockerImageRegionList from a dict\ndocker_image_region_list_from_dict = DockerImageRegionList.from_dict(docker_image_region_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/Download/","title":"Download","text":""},{"location":"v3/docs/Download/#properties","title":"Properties","text":"Name Type Description Notes url str A pre-signed url which is temporarily available for downloading the data."},{"location":"v3/docs/Download/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.download import Download\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of Download from a JSON string\ndownload_instance = Download.from_json(json)\n# print the JSON string representation of the object\nprint(Download.to_json())\n\n# convert the object into a dict\ndownload_dict = download_instance.to_dict()\n# create an instance of Download from a dict\ndownload_from_dict = Download.from_dict(download_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/DownloadRule/","title":"DownloadRule","text":""},{"location":"v3/docs/DownloadRule/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] code str active bool [optional] description str [optional] sequence int Defines the order of the rule. format_code str Regular expression to select which format this rule applies to. [optional] project_name str Regular expression to select which project this rule applies to. [optional] target_local_folder str The local folder where to write the data. file_name_expression str Will allow the filename to be modified including a set of variables [optional]"},{"location":"v3/docs/DownloadRule/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.download_rule import DownloadRule\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of DownloadRule from a JSON string\ndownload_rule_instance = DownloadRule.from_json(json)\n# print the JSON string representation of the object\nprint(DownloadRule.to_json())\n\n# convert the object into a dict\ndownload_rule_dict = download_rule_instance.to_dict()\n# create an instance of DownloadRule from a dict\ndownload_rule_from_dict = DownloadRule.from_dict(download_rule_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/DownloadRuleList/","title":"DownloadRuleList","text":""},{"location":"v3/docs/DownloadRuleList/#properties","title":"Properties","text":"Name Type Description Notes items List[DownloadRule]"},{"location":"v3/docs/DownloadRuleList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.download_rule_list import DownloadRuleList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of DownloadRuleList from a JSON string\ndownload_rule_list_instance = DownloadRuleList.from_json(json)\n# print the JSON string representation of the object\nprint(DownloadRuleList.to_json())\n\n# convert the object into a dict\ndownload_rule_list_dict = download_rule_list_instance.to_dict()\n# create an instance of DownloadRuleList from a dict\ndownload_rule_list_from_dict = DownloadRuleList.from_dict(download_rule_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/EntitledBundleApi/","title":"libica.openapi.v3.EntitledBundleApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description accept_terms_of_use_entitled_bundle POST /api/entitledbundles/{entitledBundleId}/termsOfUse:accept Accept terms of use for an entitled bundle get_entitled_bundle GET /api/entitledbundles/{entitledBundleId} Retrieve an entitled bundle. get_entitled_bundle_terms_of_use GET /api/entitledbundles/{entitledBundleId}/termsOfUse Retrieve the last version of terms of use for an entitled bundle. get_entitled_bundle_terms_of_use_acceptance GET /api/entitledbundles/{entitledBundleId}/termsOfUse/userAcceptance/currentUser Retrieve the acceptance record for an entitled bundle for the current user. get_entitled_bundles GET /api/entitledbundles Retrieve a list of entitled bundles."},{"location":"v3/docs/EntitledBundleApi/#accept_terms_of_use_entitled_bundle","title":"accept_terms_of_use_entitled_bundle","text":"<p>accept_terms_of_use_entitled_bundle(entitled_bundle_id)</p> <p>Accept terms of use for an entitled bundle</p>"},{"location":"v3/docs/EntitledBundleApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.EntitledBundleApi(api_client)\n    entitled_bundle_id = 'entitled_bundle_id_example' # str | The ID of the entitled bundle where the terms of use are accepted of.\n\n    try:\n        # Accept terms of use for an entitled bundle\n        api_instance.accept_terms_of_use_entitled_bundle(entitled_bundle_id)\n    except Exception as e:\n        print(\"Exception when calling EntitledBundleApi-&gt;accept_terms_of_use_entitled_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/EntitledBundleApi/#parameters","title":"Parameters","text":"Name Type Description Notes entitled_bundle_id str The ID of the entitled bundle where the terms of use are accepted of."},{"location":"v3/docs/EntitledBundleApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/EntitledBundleApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/EntitledBundleApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/EntitledBundleApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The terms of use of the entitled bundle is accepted - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/EntitledBundleApi/#get_entitled_bundle","title":"get_entitled_bundle","text":"<p>Bundle get_entitled_bundle(entitled_bundle_id)</p> <p>Retrieve an entitled bundle.</p>"},{"location":"v3/docs/EntitledBundleApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.bundle import Bundle\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.EntitledBundleApi(api_client)\n    entitled_bundle_id = 'entitled_bundle_id_example' # str | The ID of the entitled bundle to retrieve\n\n    try:\n        # Retrieve an entitled bundle.\n        api_response = api_instance.get_entitled_bundle(entitled_bundle_id)\n        print(\"The response of EntitledBundleApi-&gt;get_entitled_bundle:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling EntitledBundleApi-&gt;get_entitled_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/EntitledBundleApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes entitled_bundle_id str The ID of the entitled bundle to retrieve"},{"location":"v3/docs/EntitledBundleApi/#return-type_1","title":"Return type","text":"<p>Bundle</p>"},{"location":"v3/docs/EntitledBundleApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/EntitledBundleApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/EntitledBundleApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The entitled bundle is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/EntitledBundleApi/#get_entitled_bundle_terms_of_use","title":"get_entitled_bundle_terms_of_use","text":"<p>TermsOfUse get_entitled_bundle_terms_of_use(entitled_bundle_id)</p> <p>Retrieve the last version of terms of use for an entitled bundle.</p>"},{"location":"v3/docs/EntitledBundleApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.terms_of_use import TermsOfUse\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.EntitledBundleApi(api_client)\n    entitled_bundle_id = 'entitled_bundle_id_example' # str | The ID of the entitled bundle of the terms of use to retrieve\n\n    try:\n        # Retrieve the last version of terms of use for an entitled bundle.\n        api_response = api_instance.get_entitled_bundle_terms_of_use(entitled_bundle_id)\n        print(\"The response of EntitledBundleApi-&gt;get_entitled_bundle_terms_of_use:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling EntitledBundleApi-&gt;get_entitled_bundle_terms_of_use: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/EntitledBundleApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes entitled_bundle_id str The ID of the entitled bundle of the terms of use to retrieve"},{"location":"v3/docs/EntitledBundleApi/#return-type_2","title":"Return type","text":"<p>TermsOfUse</p>"},{"location":"v3/docs/EntitledBundleApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/EntitledBundleApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/EntitledBundleApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 Terms of use are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/EntitledBundleApi/#get_entitled_bundle_terms_of_use_acceptance","title":"get_entitled_bundle_terms_of_use_acceptance","text":"<p>TermsOfUseAcceptance get_entitled_bundle_terms_of_use_acceptance(entitled_bundle_id)</p> <p>Retrieve the acceptance record for an entitled bundle for the current user.</p>"},{"location":"v3/docs/EntitledBundleApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.terms_of_use_acceptance import TermsOfUseAcceptance\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.EntitledBundleApi(api_client)\n    entitled_bundle_id = 'entitled_bundle_id_example' # str | The ID of the entitled bundle of the terms of use acceptance records.\n\n    try:\n        # Retrieve the acceptance record for an entitled bundle for the current user.\n        api_response = api_instance.get_entitled_bundle_terms_of_use_acceptance(entitled_bundle_id)\n        print(\"The response of EntitledBundleApi-&gt;get_entitled_bundle_terms_of_use_acceptance:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling EntitledBundleApi-&gt;get_entitled_bundle_terms_of_use_acceptance: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/EntitledBundleApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes entitled_bundle_id str The ID of the entitled bundle of the terms of use acceptance records."},{"location":"v3/docs/EntitledBundleApi/#return-type_3","title":"Return type","text":"<p>TermsOfUseAcceptance</p>"},{"location":"v3/docs/EntitledBundleApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/EntitledBundleApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/EntitledBundleApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 Terms of use acceptance is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/EntitledBundleApi/#get_entitled_bundles","title":"get_entitled_bundles","text":"<p>BundlePagedList get_entitled_bundles(search=search, user_tags=user_tags, technical_tags=technical_tags, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)</p> <p>Retrieve a list of entitled bundles.</p>"},{"location":"v3/docs/EntitledBundleApi/#example_4","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.bundle_paged_list import BundlePagedList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.EntitledBundleApi(api_client)\n    search = 'search_example' # str | Search (optional)\n    user_tags = 'user_tags_example' # str | User tags to filter on (optional)\n    technical_tags = 'technical_tags_example' # str | Technical tags to filter on (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - name - shortDescription (optional)\n\n    try:\n        # Retrieve a list of entitled bundles.\n        api_response = api_instance.get_entitled_bundles(search=search, user_tags=user_tags, technical_tags=technical_tags, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        print(\"The response of EntitledBundleApi-&gt;get_entitled_bundles:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling EntitledBundleApi-&gt;get_entitled_bundles: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/EntitledBundleApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes search str Search [optional] user_tags str User tags to filter on [optional] technical_tags str Technical tags to filter on [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - name - shortDescription [optional]"},{"location":"v3/docs/EntitledBundleApi/#return-type_4","title":"Return type","text":"<p>BundlePagedList</p>"},{"location":"v3/docs/EntitledBundleApi/#authorization_4","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/EntitledBundleApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/EntitledBundleApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The list of entitled bundles is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/EntitlementDetailApi/","title":"libica.openapi.v3.EntitlementDetailApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description find_all_matching_activation_codes_for_cwl POST /api/activationCodes:findAllMatchingForCwl Search all matching activation code details for a Cwl pipeline. find_all_matching_activation_codes_for_nextflow POST /api/activationCodes:findAllMatchingForNextflow Search all matching activation code details for a Nextflow pipeline. find_best_matching_activation_code_for_cwl POST /api/activationCodes:findBestMatchingForCwl Search the best matching activation code detail for Cwl pipeline. find_best_matching_activation_codes_for_nextflow POST /api/activationCodes:findBestMatchingForNextflow Search the best matching activation code details for Nextflow pipeline."},{"location":"v3/docs/EntitlementDetailApi/#find_all_matching_activation_codes_for_cwl","title":"find_all_matching_activation_codes_for_cwl","text":"<p>ActivationCodeDetailList find_all_matching_activation_codes_for_cwl(search_matching_activation_codes_for_cwl_analysis)</p> <p>Search all matching activation code details for a Cwl pipeline.</p> <p>Endpoint for searching all matching activation code details for a project and an analysis from a Cwl pipeline.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/EntitlementDetailApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.activation_code_detail_list import ActivationCodeDetailList\nfrom libica.openapi.v3.models.search_matching_activation_codes_for_cwl_analysis import SearchMatchingActivationCodesForCwlAnalysis\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.EntitlementDetailApi(api_client)\n    search_matching_activation_codes_for_cwl_analysis = libica.openapi.v3.SearchMatchingActivationCodesForCwlAnalysis() # SearchMatchingActivationCodesForCwlAnalysis | \n\n    try:\n        # Search all matching activation code details for a Cwl pipeline.\n        api_response = api_instance.find_all_matching_activation_codes_for_cwl(search_matching_activation_codes_for_cwl_analysis)\n        print(\"The response of EntitlementDetailApi-&gt;find_all_matching_activation_codes_for_cwl:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling EntitlementDetailApi-&gt;find_all_matching_activation_codes_for_cwl: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/EntitlementDetailApi/#parameters","title":"Parameters","text":"Name Type Description Notes search_matching_activation_codes_for_cwl_analysis SearchMatchingActivationCodesForCwlAnalysis"},{"location":"v3/docs/EntitlementDetailApi/#return-type","title":"Return type","text":"<p>ActivationCodeDetailList</p>"},{"location":"v3/docs/EntitlementDetailApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/EntitlementDetailApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/EntitlementDetailApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The matching activation code details are successfully searched. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/EntitlementDetailApi/#find_all_matching_activation_codes_for_nextflow","title":"find_all_matching_activation_codes_for_nextflow","text":"<p>ActivationCodeDetailList find_all_matching_activation_codes_for_nextflow(search_matching_activation_codes_for_nextflow_analysis)</p> <p>Search all matching activation code details for a Nextflow pipeline.</p> <p>Endpoint for searching all matching activation code details for a project and an analysis from a Nextflow pipeline.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/EntitlementDetailApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.activation_code_detail_list import ActivationCodeDetailList\nfrom libica.openapi.v3.models.search_matching_activation_codes_for_nextflow_analysis import SearchMatchingActivationCodesForNextflowAnalysis\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.EntitlementDetailApi(api_client)\n    search_matching_activation_codes_for_nextflow_analysis = libica.openapi.v3.SearchMatchingActivationCodesForNextflowAnalysis() # SearchMatchingActivationCodesForNextflowAnalysis | \n\n    try:\n        # Search all matching activation code details for a Nextflow pipeline.\n        api_response = api_instance.find_all_matching_activation_codes_for_nextflow(search_matching_activation_codes_for_nextflow_analysis)\n        print(\"The response of EntitlementDetailApi-&gt;find_all_matching_activation_codes_for_nextflow:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling EntitlementDetailApi-&gt;find_all_matching_activation_codes_for_nextflow: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/EntitlementDetailApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes search_matching_activation_codes_for_nextflow_analysis SearchMatchingActivationCodesForNextflowAnalysis"},{"location":"v3/docs/EntitlementDetailApi/#return-type_1","title":"Return type","text":"<p>ActivationCodeDetailList</p>"},{"location":"v3/docs/EntitlementDetailApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/EntitlementDetailApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/EntitlementDetailApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The matching activation code details are successfully searched. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/EntitlementDetailApi/#find_best_matching_activation_code_for_cwl","title":"find_best_matching_activation_code_for_cwl","text":"<p>ActivationCodeDetail find_best_matching_activation_code_for_cwl(search_matching_activation_codes_for_cwl_analysis)</p> <p>Search the best matching activation code detail for Cwl pipeline.</p> <p>Endpoint for searching the best activation code detail for a project and an analysis from a Cwl pipeline.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/EntitlementDetailApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.activation_code_detail import ActivationCodeDetail\nfrom libica.openapi.v3.models.search_matching_activation_codes_for_cwl_analysis import SearchMatchingActivationCodesForCwlAnalysis\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.EntitlementDetailApi(api_client)\n    search_matching_activation_codes_for_cwl_analysis = libica.openapi.v3.SearchMatchingActivationCodesForCwlAnalysis() # SearchMatchingActivationCodesForCwlAnalysis | \n\n    try:\n        # Search the best matching activation code detail for Cwl pipeline.\n        api_response = api_instance.find_best_matching_activation_code_for_cwl(search_matching_activation_codes_for_cwl_analysis)\n        print(\"The response of EntitlementDetailApi-&gt;find_best_matching_activation_code_for_cwl:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling EntitlementDetailApi-&gt;find_best_matching_activation_code_for_cwl: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/EntitlementDetailApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes search_matching_activation_codes_for_cwl_analysis SearchMatchingActivationCodesForCwlAnalysis"},{"location":"v3/docs/EntitlementDetailApi/#return-type_2","title":"Return type","text":"<p>ActivationCodeDetail</p>"},{"location":"v3/docs/EntitlementDetailApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/EntitlementDetailApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/EntitlementDetailApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The best matching activation code details are successfully searched. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/EntitlementDetailApi/#find_best_matching_activation_codes_for_nextflow","title":"find_best_matching_activation_codes_for_nextflow","text":"<p>ActivationCodeDetail find_best_matching_activation_codes_for_nextflow(search_matching_activation_codes_for_nextflow_analysis)</p> <p>Search the best matching activation code details for Nextflow pipeline.</p> <p>Endpoint for searching the best activation code details for a project and an analysis for a Nextflow pipeline.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/EntitlementDetailApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.activation_code_detail import ActivationCodeDetail\nfrom libica.openapi.v3.models.search_matching_activation_codes_for_nextflow_analysis import SearchMatchingActivationCodesForNextflowAnalysis\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.EntitlementDetailApi(api_client)\n    search_matching_activation_codes_for_nextflow_analysis = libica.openapi.v3.SearchMatchingActivationCodesForNextflowAnalysis() # SearchMatchingActivationCodesForNextflowAnalysis | \n\n    try:\n        # Search the best matching activation code details for Nextflow pipeline.\n        api_response = api_instance.find_best_matching_activation_codes_for_nextflow(search_matching_activation_codes_for_nextflow_analysis)\n        print(\"The response of EntitlementDetailApi-&gt;find_best_matching_activation_codes_for_nextflow:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling EntitlementDetailApi-&gt;find_best_matching_activation_codes_for_nextflow: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/EntitlementDetailApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes search_matching_activation_codes_for_nextflow_analysis SearchMatchingActivationCodesForNextflowAnalysis"},{"location":"v3/docs/EntitlementDetailApi/#return-type_3","title":"Return type","text":"<p>ActivationCodeDetail</p>"},{"location":"v3/docs/EntitlementDetailApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/EntitlementDetailApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/EntitlementDetailApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The best matching activation code details are successfully searched. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/EventCode/","title":"EventCode","text":""},{"location":"v3/docs/EventCode/#properties","title":"Properties","text":"Name Type Description Notes event_code str The event code that can be used for creating event subscriptions description str A short description about the event code"},{"location":"v3/docs/EventCode/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.event_code import EventCode\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of EventCode from a JSON string\nevent_code_instance = EventCode.from_json(json)\n# print the JSON string representation of the object\nprint(EventCode.to_json())\n\n# convert the object into a dict\nevent_code_dict = event_code_instance.to_dict()\n# create an instance of EventCode from a dict\nevent_code_from_dict = EventCode.from_dict(event_code_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/EventCodeApi/","title":"libica.openapi.v3.EventCodeApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_event_codes GET /api/eventCodes Retrieve event codes"},{"location":"v3/docs/EventCodeApi/#get_event_codes","title":"get_event_codes","text":"<p>EventCodeList get_event_codes()</p> <p>Retrieve event codes</p>"},{"location":"v3/docs/EventCodeApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.event_code_list import EventCodeList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.EventCodeApi(api_client)\n\n    try:\n        # Retrieve event codes\n        api_response = api_instance.get_event_codes()\n        print(\"The response of EventCodeApi-&gt;get_event_codes:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling EventCodeApi-&gt;get_event_codes: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/EventCodeApi/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v3/docs/EventCodeApi/#return-type","title":"Return type","text":"<p>EventCodeList</p>"},{"location":"v3/docs/EventCodeApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/EventCodeApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/EventCodeApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The event codes are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/EventCodeList/","title":"EventCodeList","text":""},{"location":"v3/docs/EventCodeList/#properties","title":"Properties","text":"Name Type Description Notes items List[EventCode]"},{"location":"v3/docs/EventCodeList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.event_code_list import EventCodeList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of EventCodeList from a JSON string\nevent_code_list_instance = EventCodeList.from_json(json)\n# print the JSON string representation of the object\nprint(EventCodeList.to_json())\n\n# convert the object into a dict\nevent_code_list_dict = event_code_list_instance.to_dict()\n# create an instance of EventCodeList from a dict\nevent_code_list_from_dict = EventCodeList.from_dict(event_code_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/EventLogApi/","title":"libica.openapi.v3.EventLogApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_event_logs GET /api/eventLog Retrieve a list of event logs. search_event_logs POST /api/eventLog:search Search event logs."},{"location":"v3/docs/EventLogApi/#get_event_logs","title":"get_event_logs","text":"<p>EventLogListV3 get_event_logs(code=code, code_filter_type=code_filter_type, category=category, date_from=date_from, date_until=date_until, rows=rows)</p> <p>Retrieve a list of event logs.</p>"},{"location":"v3/docs/EventLogApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.event_log_list_v3 import EventLogListV3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.EventLogApi(api_client)\n    code = 'code_example' # str | Code (optional)\n    code_filter_type = 'code_filter_type_example' # str | Code filter type (optional)\n    category = 'category_example' # str | Category (optional)\n    date_from = 'date_from_example' # str | Date from. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z (optional)\n    date_until = 'date_until_example' # str | Date until. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z (optional)\n    rows = 250 # int | Amount of rows to fetch (chronologically oldest first). Maximum 250. Defaults to 250 (optional) (default to 250)\n\n    try:\n        # Retrieve a list of event logs.\n        api_response = api_instance.get_event_logs(code=code, code_filter_type=code_filter_type, category=category, date_from=date_from, date_until=date_until, rows=rows)\n        print(\"The response of EventLogApi-&gt;get_event_logs:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling EventLogApi-&gt;get_event_logs: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/EventLogApi/#parameters","title":"Parameters","text":"Name Type Description Notes code str Code [optional] code_filter_type str Code filter type [optional] category str Category [optional] date_from str Date from. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z [optional] date_until str Date until. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z [optional] rows int Amount of rows to fetch (chronologically oldest first). Maximum 250. Defaults to 250 [optional] [default to 250]"},{"location":"v3/docs/EventLogApi/#return-type","title":"Return type","text":"<p>EventLogListV3</p>"},{"location":"v3/docs/EventLogApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/EventLogApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/EventLogApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of event logs is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/EventLogApi/#search_event_logs","title":"search_event_logs","text":"<p>EventLogPagedListV4 search_event_logs(page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort, event_log_query_parameters_v4=event_log_query_parameters_v4)</p> <p>Search event logs.</p>"},{"location":"v3/docs/EventLogApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.event_log_paged_list_v4 import EventLogPagedListV4\nfrom libica.openapi.v3.models.event_log_query_parameters_v4 import EventLogQueryParametersV4\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.EventLogApi(api_client)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated  (optional)\n    event_log_query_parameters_v4 = libica.openapi.v3.EventLogQueryParametersV4() # EventLogQueryParametersV4 |  (optional)\n\n    try:\n        # Search event logs.\n        api_response = api_instance.search_event_logs(page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort, event_log_query_parameters_v4=event_log_query_parameters_v4)\n        print(\"The response of EventLogApi-&gt;search_event_logs:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling EventLogApi-&gt;search_event_logs: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/EventLogApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated [optional] event_log_query_parameters_v4 EventLogQueryParametersV4 [optional]"},{"location":"v3/docs/EventLogApi/#return-type_1","title":"Return type","text":"<p>EventLogPagedListV4</p>"},{"location":"v3/docs/EventLogApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/EventLogApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v3/docs/EventLogApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The list of event logs is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/EventLogListV3/","title":"EventLogListV3","text":""},{"location":"v3/docs/EventLogListV3/#properties","title":"Properties","text":"Name Type Description Notes items List[EventLogV3]"},{"location":"v3/docs/EventLogListV3/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.event_log_list_v3 import EventLogListV3\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of EventLogListV3 from a JSON string\nevent_log_list_v3_instance = EventLogListV3.from_json(json)\n# print the JSON string representation of the object\nprint(EventLogListV3.to_json())\n\n# convert the object into a dict\nevent_log_list_v3_dict = event_log_list_v3_instance.to_dict()\n# create an instance of EventLogListV3 from a dict\nevent_log_list_v3_from_dict = EventLogListV3.from_dict(event_log_list_v3_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/EventLogPagedListV4/","title":"EventLogPagedListV4","text":""},{"location":"v3/docs/EventLogPagedListV4/#properties","title":"Properties","text":"Name Type Description Notes items List[EventLogV4] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/EventLogPagedListV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.event_log_paged_list_v4 import EventLogPagedListV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of EventLogPagedListV4 from a JSON string\nevent_log_paged_list_v4_instance = EventLogPagedListV4.from_json(json)\n# print the JSON string representation of the object\nprint(EventLogPagedListV4.to_json())\n\n# convert the object into a dict\nevent_log_paged_list_v4_dict = event_log_paged_list_v4_instance.to_dict()\n# create an instance of EventLogPagedListV4 from a dict\nevent_log_paged_list_v4_from_dict = EventLogPagedListV4.from_dict(event_log_paged_list_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/EventLogQueryParametersV4/","title":"EventLogQueryParametersV4","text":""},{"location":"v3/docs/EventLogQueryParametersV4/#properties","title":"Properties","text":"Name Type Description Notes code str The code to filter on. [optional] category str The category to filter on [optional] date_from datetime The date from to search in. [optional] date_until datetime The date until to search in. [optional]"},{"location":"v3/docs/EventLogQueryParametersV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.event_log_query_parameters_v4 import EventLogQueryParametersV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of EventLogQueryParametersV4 from a JSON string\nevent_log_query_parameters_v4_instance = EventLogQueryParametersV4.from_json(json)\n# print the JSON string representation of the object\nprint(EventLogQueryParametersV4.to_json())\n\n# convert the object into a dict\nevent_log_query_parameters_v4_dict = event_log_query_parameters_v4_instance.to_dict()\n# create an instance of EventLogQueryParametersV4 from a dict\nevent_log_query_parameters_v4_from_dict = EventLogQueryParametersV4.from_dict(event_log_query_parameters_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/EventLogV3/","title":"EventLogV3","text":""},{"location":"v3/docs/EventLogV3/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] code str The code of the event description str The details of the event event_type_category str The type of the event user_id str"},{"location":"v3/docs/EventLogV3/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.event_log_v3 import EventLogV3\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of EventLogV3 from a JSON string\nevent_log_v3_instance = EventLogV3.from_json(json)\n# print the JSON string representation of the object\nprint(EventLogV3.to_json())\n\n# convert the object into a dict\nevent_log_v3_dict = event_log_v3_instance.to_dict()\n# create an instance of EventLogV3 from a dict\nevent_log_v3_from_dict = EventLogV3.from_dict(event_log_v3_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/EventLogV4/","title":"EventLogV4","text":""},{"location":"v3/docs/EventLogV4/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime owner UserIdentifier tenant TenantIdentifier code str The code of the event description str The details of the event event_type_category str The type of the event"},{"location":"v3/docs/EventLogV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.event_log_v4 import EventLogV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of EventLogV4 from a JSON string\nevent_log_v4_instance = EventLogV4.from_json(json)\n# print the JSON string representation of the object\nprint(EventLogV4.to_json())\n\n# convert the object into a dict\nevent_log_v4_dict = event_log_v4_instance.to_dict()\n# create an instance of EventLogV4 from a dict\nevent_log_v4_from_dict = EventLogV4.from_dict(event_log_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ExecutionConfiguration/","title":"ExecutionConfiguration","text":""},{"location":"v3/docs/ExecutionConfiguration/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the configuration multi_value bool Whether the configuration has multiple values values List[str] The configuration values"},{"location":"v3/docs/ExecutionConfiguration/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.execution_configuration import ExecutionConfiguration\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ExecutionConfiguration from a JSON string\nexecution_configuration_instance = ExecutionConfiguration.from_json(json)\n# print the JSON string representation of the object\nprint(ExecutionConfiguration.to_json())\n\n# convert the object into a dict\nexecution_configuration_dict = execution_configuration_instance.to_dict()\n# create an instance of ExecutionConfiguration from a dict\nexecution_configuration_from_dict = ExecutionConfiguration.from_dict(execution_configuration_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ExecutionConfigurationList/","title":"ExecutionConfigurationList","text":""},{"location":"v3/docs/ExecutionConfigurationList/#properties","title":"Properties","text":"Name Type Description Notes items List[ExecutionConfiguration]"},{"location":"v3/docs/ExecutionConfigurationList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.execution_configuration_list import ExecutionConfigurationList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ExecutionConfigurationList from a JSON string\nexecution_configuration_list_instance = ExecutionConfigurationList.from_json(json)\n# print the JSON string representation of the object\nprint(ExecutionConfigurationList.to_json())\n\n# convert the object into a dict\nexecution_configuration_list_dict = execution_configuration_list_instance.to_dict()\n# create an instance of ExecutionConfigurationList from a dict\nexecution_configuration_list_from_dict = ExecutionConfigurationList.from_dict(execution_configuration_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ExternalDockerImageSettings/","title":"ExternalDockerImageSettings","text":""},{"location":"v3/docs/ExternalDockerImageSettings/#properties","title":"Properties","text":"Name Type Description Notes url str"},{"location":"v3/docs/ExternalDockerImageSettings/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.external_docker_image_settings import ExternalDockerImageSettings\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ExternalDockerImageSettings from a JSON string\nexternal_docker_image_settings_instance = ExternalDockerImageSettings.from_json(json)\n# print the JSON string representation of the object\nprint(ExternalDockerImageSettings.to_json())\n\n# convert the object into a dict\nexternal_docker_image_settings_dict = external_docker_image_settings_instance.to_dict()\n# create an instance of ExternalDockerImageSettings from a dict\nexternal_docker_image_settings_from_dict = ExternalDockerImageSettings.from_dict(external_docker_image_settings_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/FieldId/","title":"FieldId","text":""},{"location":"v3/docs/FieldId/#properties","title":"Properties","text":"Name Type Description Notes id str"},{"location":"v3/docs/FieldId/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.field_id import FieldId\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of FieldId from a JSON string\nfield_id_instance = FieldId.from_json(json)\n# print the JSON string representation of the object\nprint(FieldId.to_json())\n\n# convert the object into a dict\nfield_id_dict = field_id_instance.to_dict()\n# create an instance of FieldId from a dict\nfield_id_from_dict = FieldId.from_dict(field_id_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/FieldList/","title":"FieldList","text":""},{"location":"v3/docs/FieldList/#properties","title":"Properties","text":"Name Type Description Notes items List[ModelField]"},{"location":"v3/docs/FieldList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.field_list import FieldList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of FieldList from a JSON string\nfield_list_instance = FieldList.from_json(json)\n# print the JSON string representation of the object\nprint(FieldList.to_json())\n\n# convert the object into a dict\nfield_list_dict = field_list_instance.to_dict()\n# create an instance of FieldList from a dict\nfield_list_from_dict = FieldList.from_dict(field_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/FindProjectSamples/","title":"FindProjectSamples","text":""},{"location":"v3/docs/FindProjectSamples/#properties","title":"Properties","text":"Name Type Description Notes conditions List[FindSampleCondition] Adds a condition on a string field. date_conditions List[FindSampleDateCondition] Adds a condition on a date metadate field. If both the dateBefore and dateAfter parameter are null it will return any sample that has no value for the date field. number_conditions List[FindSampleNumberCondition] Adds a condition on a number metadata field. If both the lowerBoundary and upperBoundary parameter are null it will return any sample that has no value for the number field. boolean_conditions List[FindSampleBooleanCondition] Adds a condition on a boolean field. full_text_search_string str Adds a fuzzy matching condition for the text on all string fields of the sample i.e. on both the fixed fields (name, description) as any metadata text field. [optional] include_deleted bool Indicates whether deleted samples should be included. [optional] [default to False] user_tags List[Optional[str]] The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tags List[Optional[str]] The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] connector_tags List[Optional[str]] The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] tech_tags List[Optional[str]] The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] tech_tag_match_mode str How the technicalTags are filtered. [optional] instrument_run_ids List[Optional[str]] [optional]"},{"location":"v3/docs/FindProjectSamples/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.find_project_samples import FindProjectSamples\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of FindProjectSamples from a JSON string\nfind_project_samples_instance = FindProjectSamples.from_json(json)\n# print the JSON string representation of the object\nprint(FindProjectSamples.to_json())\n\n# convert the object into a dict\nfind_project_samples_dict = find_project_samples_instance.to_dict()\n# create an instance of FindProjectSamples from a dict\nfind_project_samples_from_dict = FindProjectSamples.from_dict(find_project_samples_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/FindSampleBooleanCondition/","title":"FindSampleBooleanCondition","text":"<p>Adds a condition on a boolean field.</p>"},{"location":"v3/docs/FindSampleBooleanCondition/#properties","title":"Properties","text":"Name Type Description Notes metadata_field ModelField [optional] var_field str [optional] value str [optional]"},{"location":"v3/docs/FindSampleBooleanCondition/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.find_sample_boolean_condition import FindSampleBooleanCondition\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of FindSampleBooleanCondition from a JSON string\nfind_sample_boolean_condition_instance = FindSampleBooleanCondition.from_json(json)\n# print the JSON string representation of the object\nprint(FindSampleBooleanCondition.to_json())\n\n# convert the object into a dict\nfind_sample_boolean_condition_dict = find_sample_boolean_condition_instance.to_dict()\n# create an instance of FindSampleBooleanCondition from a dict\nfind_sample_boolean_condition_from_dict = FindSampleBooleanCondition.from_dict(find_sample_boolean_condition_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/FindSampleCondition/","title":"FindSampleCondition","text":"<p>Adds a condition on a string field.</p>"},{"location":"v3/docs/FindSampleCondition/#properties","title":"Properties","text":"Name Type Description Notes metadata_field FieldId [optional] var_field str [optional] match_mode str Defines how the value will be matched. [optional] values List[str]"},{"location":"v3/docs/FindSampleCondition/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.find_sample_condition import FindSampleCondition\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of FindSampleCondition from a JSON string\nfind_sample_condition_instance = FindSampleCondition.from_json(json)\n# print the JSON string representation of the object\nprint(FindSampleCondition.to_json())\n\n# convert the object into a dict\nfind_sample_condition_dict = find_sample_condition_instance.to_dict()\n# create an instance of FindSampleCondition from a dict\nfind_sample_condition_from_dict = FindSampleCondition.from_dict(find_sample_condition_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/FindSampleDateCondition/","title":"FindSampleDateCondition","text":"<p>Adds a condition on a date metadate field. If both the dateBefore and dateAfter parameter are null it will return any sample that has no value for the date field.</p>"},{"location":"v3/docs/FindSampleDateCondition/#properties","title":"Properties","text":"Name Type Description Notes metadata_field FieldId [optional] var_field str [optional] before_date str Before date. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z [optional] after_date str After date. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z [optional]"},{"location":"v3/docs/FindSampleDateCondition/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.find_sample_date_condition import FindSampleDateCondition\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of FindSampleDateCondition from a JSON string\nfind_sample_date_condition_instance = FindSampleDateCondition.from_json(json)\n# print the JSON string representation of the object\nprint(FindSampleDateCondition.to_json())\n\n# convert the object into a dict\nfind_sample_date_condition_dict = find_sample_date_condition_instance.to_dict()\n# create an instance of FindSampleDateCondition from a dict\nfind_sample_date_condition_from_dict = FindSampleDateCondition.from_dict(find_sample_date_condition_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/FindSampleNumberCondition/","title":"FindSampleNumberCondition","text":"<p>Adds a condition on a number metadata field. If both the lowerBoundary and upperBoundary parameter are null it will return any sample that has no value for the number field.</p>"},{"location":"v3/docs/FindSampleNumberCondition/#properties","title":"Properties","text":"Name Type Description Notes metadata_field FieldId [optional] var_field str [optional] lower_bound str [optional] upper_bound str [optional]"},{"location":"v3/docs/FindSampleNumberCondition/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.find_sample_number_condition import FindSampleNumberCondition\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of FindSampleNumberCondition from a JSON string\nfind_sample_number_condition_instance = FindSampleNumberCondition.from_json(json)\n# print the JSON string representation of the object\nprint(FindSampleNumberCondition.to_json())\n\n# convert the object into a dict\nfind_sample_number_condition_dict = find_sample_number_condition_instance.to_dict()\n# create an instance of FindSampleNumberCondition from a dict\nfind_sample_number_condition_from_dict = FindSampleNumberCondition.from_dict(find_sample_number_condition_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/FolderDetails/","title":"FolderDetails","text":""},{"location":"v3/docs/FolderDetails/#properties","title":"Properties","text":"Name Type Description Notes non_indexed bool Indicates this is a non-indexed folder"},{"location":"v3/docs/FolderDetails/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.folder_details import FolderDetails\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of FolderDetails from a JSON string\nfolder_details_instance = FolderDetails.from_json(json)\n# print the JSON string representation of the object\nprint(FolderDetails.to_json())\n\n# convert the object into a dict\nfolder_details_dict = folder_details_instance.to_dict()\n# create an instance of FolderDetails from a dict\nfolder_details_from_dict = FolderDetails.from_dict(folder_details_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/FolderUploadSession/","title":"FolderUploadSession","text":""},{"location":"v3/docs/FolderUploadSession/#properties","title":"Properties","text":"Name Type Description Notes id str The id of the folder upload session. time_created datetime The time the folder upload session was created. status str The status of the folder upload session. time_session_expires datetime The time the folder upload session will expire as it is only temporarily valid. time_completed datetime The time the folder upload session completed. [optional] time_closed datetime The time the folder upload session was closed. [optional] temp_credentials TempCredentials [optional]"},{"location":"v3/docs/FolderUploadSession/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.folder_upload_session import FolderUploadSession\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of FolderUploadSession from a JSON string\nfolder_upload_session_instance = FolderUploadSession.from_json(json)\n# print the JSON string representation of the object\nprint(FolderUploadSession.to_json())\n\n# convert the object into a dict\nfolder_upload_session_dict = folder_upload_session_instance.to_dict()\n# create an instance of FolderUploadSession from a dict\nfolder_upload_session_from_dict = FolderUploadSession.from_dict(folder_upload_session_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/InlineView/","title":"InlineView","text":""},{"location":"v3/docs/InlineView/#properties","title":"Properties","text":"Name Type Description Notes url str A pre-signed url which is temporarily available for inline viewing the data."},{"location":"v3/docs/InlineView/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.inline_view import InlineView\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of InlineView from a JSON string\ninline_view_instance = InlineView.from_json(json)\n# print the JSON string representation of the object\nprint(InlineView.to_json())\n\n# convert the object into a dict\ninline_view_dict = inline_view_instance.to_dict()\n# create an instance of InlineView from a dict\ninline_view_from_dict = InlineView.from_dict(inline_view_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/InputFormBaseSpaceDataDetails/","title":"InputFormBaseSpaceDataDetails","text":""},{"location":"v3/docs/InputFormBaseSpaceDataDetails/#properties","title":"Properties","text":"Name Type Description Notes workgroup_id str [optional] extensions str [optional] path_prefix str [optional]"},{"location":"v3/docs/InputFormBaseSpaceDataDetails/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.input_form_base_space_data_details import InputFormBaseSpaceDataDetails\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of InputFormBaseSpaceDataDetails from a JSON string\ninput_form_base_space_data_details_instance = InputFormBaseSpaceDataDetails.from_json(json)\n# print the JSON string representation of the object\nprint(InputFormBaseSpaceDataDetails.to_json())\n\n# convert the object into a dict\ninput_form_base_space_data_details_dict = input_form_base_space_data_details_instance.to_dict()\n# create an instance of InputFormBaseSpaceDataDetails from a dict\ninput_form_base_space_data_details_from_dict = InputFormBaseSpaceDataDetails.from_dict(input_form_base_space_data_details_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/InputFormData/","title":"InputFormData","text":"<p>Use 'dataValues' for data fields.</p>"},{"location":"v3/docs/InputFormData/#properties","title":"Properties","text":"Name Type Description Notes data_id str mount_path str [optional]"},{"location":"v3/docs/InputFormData/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.input_form_data import InputFormData\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of InputFormData from a JSON string\ninput_form_data_instance = InputFormData.from_json(json)\n# print the JSON string representation of the object\nprint(InputFormData.to_json())\n\n# convert the object into a dict\ninput_form_data_dict = input_form_data_instance.to_dict()\n# create an instance of InputFormData from a dict\ninput_form_data_from_dict = InputFormData.from_dict(input_form_data_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/InputFormExternalData/","title":"InputFormExternalData","text":""},{"location":"v3/docs/InputFormExternalData/#properties","title":"Properties","text":"Name Type Description Notes url str type str s3_details InputFormS3DataDetails [optional] basespace_details InputFormBaseSpaceDataDetails [optional]"},{"location":"v3/docs/InputFormExternalData/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.input_form_external_data import InputFormExternalData\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of InputFormExternalData from a JSON string\ninput_form_external_data_instance = InputFormExternalData.from_json(json)\n# print the JSON string representation of the object\nprint(InputFormExternalData.to_json())\n\n# convert the object into a dict\ninput_form_external_data_dict = input_form_external_data_instance.to_dict()\n# create an instance of InputFormExternalData from a dict\ninput_form_external_data_from_dict = InputFormExternalData.from_dict(input_form_external_data_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/InputFormField/","title":"InputFormField","text":""},{"location":"v3/docs/InputFormField/#properties","title":"Properties","text":"Name Type Description Notes id str [optional] type str [optional] label str [optional] min_values int [optional] max_values int [optional] min_max_values_message str [optional] help_text str [optional] place_holder_text str [optional] values List[str] [optional] data_values List[InputFormWithExternalData] [optional] group_values List[InputFormGroupFieldValues] [optional] min_length int [optional] max_length int [optional] min float [optional] max float [optional] choices List[InputFormFieldChoice] [optional] fields List[InputFormGroupField] [optional] data_filter InputFormFieldDataFilter [optional] regex str [optional] regex_error_message str [optional] hidden bool [optional] disabled bool [optional] empty_values_allowed bool [optional] update_render_on_change bool [optional] sensitive bool [optional]"},{"location":"v3/docs/InputFormField/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.input_form_field import InputFormField\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of InputFormField from a JSON string\ninput_form_field_instance = InputFormField.from_json(json)\n# print the JSON string representation of the object\nprint(InputFormField.to_json())\n\n# convert the object into a dict\ninput_form_field_dict = input_form_field_instance.to_dict()\n# create an instance of InputFormField from a dict\ninput_form_field_from_dict = InputFormField.from_dict(input_form_field_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/InputFormFieldChoice/","title":"InputFormFieldChoice","text":""},{"location":"v3/docs/InputFormFieldChoice/#properties","title":"Properties","text":"Name Type Description Notes value str [optional] text str [optional] selected bool [optional] disabled bool [optional]"},{"location":"v3/docs/InputFormFieldChoice/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.input_form_field_choice import InputFormFieldChoice\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of InputFormFieldChoice from a JSON string\ninput_form_field_choice_instance = InputFormFieldChoice.from_json(json)\n# print the JSON string representation of the object\nprint(InputFormFieldChoice.to_json())\n\n# convert the object into a dict\ninput_form_field_choice_dict = input_form_field_choice_instance.to_dict()\n# create an instance of InputFormFieldChoice from a dict\ninput_form_field_choice_from_dict = InputFormFieldChoice.from_dict(input_form_field_choice_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/InputFormFieldDataFilter/","title":"InputFormFieldDataFilter","text":""},{"location":"v3/docs/InputFormFieldDataFilter/#properties","title":"Properties","text":"Name Type Description Notes name_filter str [optional] data_format List[str] [optional] data_type str [optional]"},{"location":"v3/docs/InputFormFieldDataFilter/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.input_form_field_data_filter import InputFormFieldDataFilter\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of InputFormFieldDataFilter from a JSON string\ninput_form_field_data_filter_instance = InputFormFieldDataFilter.from_json(json)\n# print the JSON string representation of the object\nprint(InputFormFieldDataFilter.to_json())\n\n# convert the object into a dict\ninput_form_field_data_filter_dict = input_form_field_data_filter_instance.to_dict()\n# create an instance of InputFormFieldDataFilter from a dict\ninput_form_field_data_filter_from_dict = InputFormFieldDataFilter.from_dict(input_form_field_data_filter_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/InputFormFieldList/","title":"InputFormFieldList","text":""},{"location":"v3/docs/InputFormFieldList/#properties","title":"Properties","text":"Name Type Description Notes items List[InputFormField]"},{"location":"v3/docs/InputFormFieldList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.input_form_field_list import InputFormFieldList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of InputFormFieldList from a JSON string\ninput_form_field_list_instance = InputFormFieldList.from_json(json)\n# print the JSON string representation of the object\nprint(InputFormFieldList.to_json())\n\n# convert the object into a dict\ninput_form_field_list_dict = input_form_field_list_instance.to_dict()\n# create an instance of InputFormFieldList from a dict\ninput_form_field_list_from_dict = InputFormFieldList.from_dict(input_form_field_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/InputFormFieldValues/","title":"InputFormFieldValues","text":""},{"location":"v3/docs/InputFormFieldValues/#properties","title":"Properties","text":"Name Type Description Notes id str values List[Optional[str]] Use 'values' for all fields except data fields. Use string values to avoid rounding of numbers with a high precision. [optional] data_values List[InputFormData] Use 'dataValues' for data fields. [optional] external_data_values List[AnalysisInputExternalData] Use 'externalDataValues' for external data [optional]"},{"location":"v3/docs/InputFormFieldValues/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.input_form_field_values import InputFormFieldValues\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of InputFormFieldValues from a JSON string\ninput_form_field_values_instance = InputFormFieldValues.from_json(json)\n# print the JSON string representation of the object\nprint(InputFormFieldValues.to_json())\n\n# convert the object into a dict\ninput_form_field_values_dict = input_form_field_values_instance.to_dict()\n# create an instance of InputFormFieldValues from a dict\ninput_form_field_values_from_dict = InputFormFieldValues.from_dict(input_form_field_values_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/InputFormGroup/","title":"InputFormGroup","text":""},{"location":"v3/docs/InputFormGroup/#properties","title":"Properties","text":"Name Type Description Notes id str values List[InputFormGroupFieldValues] [optional]"},{"location":"v3/docs/InputFormGroup/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.input_form_group import InputFormGroup\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of InputFormGroup from a JSON string\ninput_form_group_instance = InputFormGroup.from_json(json)\n# print the JSON string representation of the object\nprint(InputFormGroup.to_json())\n\n# convert the object into a dict\ninput_form_group_dict = input_form_group_instance.to_dict()\n# create an instance of InputFormGroup from a dict\ninput_form_group_from_dict = InputFormGroup.from_dict(input_form_group_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/InputFormGroupField/","title":"InputFormGroupField","text":""},{"location":"v3/docs/InputFormGroupField/#properties","title":"Properties","text":"Name Type Description Notes id str [optional] type str [optional] label str [optional] min_values int [optional] max_values int [optional] min_max_values_message str [optional] help_text str [optional] place_holder_text str [optional] values List[str] [optional] data_values List[InputFormWithExternalData] [optional] min_length int [optional] max_length int [optional] min float [optional] max float [optional] choices List[InputFormFieldChoice] [optional] data_filter InputFormFieldDataFilter [optional] regex str [optional] regex_error_message str [optional] hidden bool [optional] disabled bool [optional] empty_values_allowed bool [optional] update_render_on_change bool [optional]"},{"location":"v3/docs/InputFormGroupField/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.input_form_group_field import InputFormGroupField\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of InputFormGroupField from a JSON string\ninput_form_group_field_instance = InputFormGroupField.from_json(json)\n# print the JSON string representation of the object\nprint(InputFormGroupField.to_json())\n\n# convert the object into a dict\ninput_form_group_field_dict = input_form_group_field_instance.to_dict()\n# create an instance of InputFormGroupField from a dict\ninput_form_group_field_from_dict = InputFormGroupField.from_dict(input_form_group_field_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/InputFormGroupFieldValues/","title":"InputFormGroupFieldValues","text":""},{"location":"v3/docs/InputFormGroupFieldValues/#properties","title":"Properties","text":"Name Type Description Notes values List[InputFormFieldValues] [optional]"},{"location":"v3/docs/InputFormGroupFieldValues/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.input_form_group_field_values import InputFormGroupFieldValues\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of InputFormGroupFieldValues from a JSON string\ninput_form_group_field_values_instance = InputFormGroupFieldValues.from_json(json)\n# print the JSON string representation of the object\nprint(InputFormGroupFieldValues.to_json())\n\n# convert the object into a dict\ninput_form_group_field_values_dict = input_form_group_field_values_instance.to_dict()\n# create an instance of InputFormGroupFieldValues from a dict\ninput_form_group_field_values_from_dict = InputFormGroupFieldValues.from_dict(input_form_group_field_values_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/InputFormS3DataDetails/","title":"InputFormS3DataDetails","text":""},{"location":"v3/docs/InputFormS3DataDetails/#properties","title":"Properties","text":"Name Type Description Notes storage_credentials_id str The storage credentials with the S3 access key. [optional]"},{"location":"v3/docs/InputFormS3DataDetails/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.input_form_s3_data_details import InputFormS3DataDetails\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of InputFormS3DataDetails from a JSON string\ninput_form_s3_data_details_instance = InputFormS3DataDetails.from_json(json)\n# print the JSON string representation of the object\nprint(InputFormS3DataDetails.to_json())\n\n# convert the object into a dict\ninput_form_s3_data_details_dict = input_form_s3_data_details_instance.to_dict()\n# create an instance of InputFormS3DataDetails from a dict\ninput_form_s3_data_details_from_dict = InputFormS3DataDetails.from_dict(input_form_s3_data_details_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/InputFormWithExternalData/","title":"InputFormWithExternalData","text":""},{"location":"v3/docs/InputFormWithExternalData/#properties","title":"Properties","text":"Name Type Description Notes data_id str [optional] external_data InputFormExternalData [optional] mount_path str [optional]"},{"location":"v3/docs/InputFormWithExternalData/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.input_form_with_external_data import InputFormWithExternalData\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of InputFormWithExternalData from a JSON string\ninput_form_with_external_data_instance = InputFormWithExternalData.from_json(json)\n# print the JSON string representation of the object\nprint(InputFormWithExternalData.to_json())\n\n# convert the object into a dict\ninput_form_with_external_data_dict = input_form_with_external_data_instance.to_dict()\n# create an instance of InputFormWithExternalData from a dict\ninput_form_with_external_data_from_dict = InputFormWithExternalData.from_dict(input_form_with_external_data_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/InputParameter/","title":"InputParameter","text":""},{"location":"v3/docs/InputParameter/#properties","title":"Properties","text":"Name Type Description Notes id str The ID of the parameter code str The code of the parameter required bool Indicates whether this parameter is required multi_value bool Indicates whether multiple values are allowed for this parameter"},{"location":"v3/docs/InputParameter/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.input_parameter import InputParameter\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of InputParameter from a JSON string\ninput_parameter_instance = InputParameter.from_json(json)\n# print the JSON string representation of the object\nprint(InputParameter.to_json())\n\n# convert the object into a dict\ninput_parameter_dict = input_parameter_instance.to_dict()\n# create an instance of InputParameter from a dict\ninput_parameter_from_dict = InputParameter.from_dict(input_parameter_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/InputParameterList/","title":"InputParameterList","text":""},{"location":"v3/docs/InputParameterList/#properties","title":"Properties","text":"Name Type Description Notes items List[InputParameter]"},{"location":"v3/docs/InputParameterList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.input_parameter_list import InputParameterList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of InputParameterList from a JSON string\ninput_parameter_list_instance = InputParameterList.from_json(json)\n# print the JSON string representation of the object\nprint(InputParameterList.to_json())\n\n# convert the object into a dict\ninput_parameter_list_dict = input_parameter_list_instance.to_dict()\n# create an instance of InputParameterList from a dict\ninput_parameter_list_from_dict = InputParameterList.from_dict(input_parameter_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/InputPart/","title":"InputPart","text":""},{"location":"v3/docs/InputPart/#properties","title":"Properties","text":"Name Type Description Notes content_type_from_message bool [optional] body_as_string str [optional] media_type InputPartMediaType [optional] headers Dict[str, List[str]] [optional]"},{"location":"v3/docs/InputPart/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.input_part import InputPart\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of InputPart from a JSON string\ninput_part_instance = InputPart.from_json(json)\n# print the JSON string representation of the object\nprint(InputPart.to_json())\n\n# convert the object into a dict\ninput_part_dict = input_part_instance.to_dict()\n# create an instance of InputPart from a dict\ninput_part_from_dict = InputPart.from_dict(input_part_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/InputPartMediaType/","title":"InputPartMediaType","text":""},{"location":"v3/docs/InputPartMediaType/#properties","title":"Properties","text":"Name Type Description Notes type str [optional] subtype str [optional] parameters Dict[str, str] [optional] wildcard_type bool [optional] wildcard_subtype bool [optional]"},{"location":"v3/docs/InputPartMediaType/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.input_part_media_type import InputPartMediaType\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of InputPartMediaType from a JSON string\ninput_part_media_type_instance = InputPartMediaType.from_json(json)\n# print the JSON string representation of the object\nprint(InputPartMediaType.to_json())\n\n# convert the object into a dict\ninput_part_media_type_dict = input_part_media_type_instance.to_dict()\n# create an instance of InputPartMediaType from a dict\ninput_part_media_type_from_dict = InputPartMediaType.from_dict(input_part_media_type_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/IntegerSettings/","title":"IntegerSettings","text":""},{"location":"v3/docs/IntegerSettings/#properties","title":"Properties","text":"Name Type Description Notes default_values List[int] [optional]"},{"location":"v3/docs/IntegerSettings/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.integer_settings import IntegerSettings\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of IntegerSettings from a JSON string\ninteger_settings_instance = IntegerSettings.from_json(json)\n# print the JSON string representation of the object\nprint(IntegerSettings.to_json())\n\n# convert the object into a dict\ninteger_settings_dict = integer_settings_instance.to_dict()\n# create an instance of IntegerSettings from a dict\ninteger_settings_from_dict = IntegerSettings.from_dict(integer_settings_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/InternalDockerImageSettings/","title":"InternalDockerImageSettings","text":""},{"location":"v3/docs/InternalDockerImageSettings/#properties","title":"Properties","text":"Name Type Description Notes regions List[DockerImageRegion] [optional]"},{"location":"v3/docs/InternalDockerImageSettings/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.internal_docker_image_settings import InternalDockerImageSettings\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of InternalDockerImageSettings from a JSON string\ninternal_docker_image_settings_instance = InternalDockerImageSettings.from_json(json)\n# print the JSON string representation of the object\nprint(InternalDockerImageSettings.to_json())\n\n# convert the object into a dict\ninternal_docker_image_settings_dict = internal_docker_image_settings_instance.to_dict()\n# create an instance of InternalDockerImageSettings from a dict\ninternal_docker_image_settings_from_dict = InternalDockerImageSettings.from_dict(internal_docker_image_settings_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/Job/","title":"Job","text":""},{"location":"v3/docs/Job/#properties","title":"Properties","text":"Name Type Description Notes id str status str additional_status_information str Additional information regarding the status of this job. [optional] subject_type str The type of the subject for which this job provides execution. subject_id str The id of the subject for which this job provides execution. time_created datetime time_started datetime [optional] time_finished datetime [optional] owner User project Project [optional] bundle Bundle [optional]"},{"location":"v3/docs/Job/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.job import Job\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of Job from a JSON string\njob_instance = Job.from_json(json)\n# print the JSON string representation of the object\nprint(Job.to_json())\n\n# convert the object into a dict\njob_dict = job_instance.to_dict()\n# create an instance of Job from a dict\njob_from_dict = Job.from_dict(job_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/JobApi/","title":"libica.openapi.v3.JobApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_job GET /api/jobs/{jobId} Retrieve a job. get_jobs GET /api/jobs Retrieve a list of jobs."},{"location":"v3/docs/JobApi/#get_job","title":"get_job","text":"<p>Job get_job(job_id)</p> <p>Retrieve a job.</p>"},{"location":"v3/docs/JobApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.job import Job\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.JobApi(api_client)\n    job_id = 'job_id_example' # str | The ID of the job.\n\n    try:\n        # Retrieve a job.\n        api_response = api_instance.get_job(job_id)\n        print(\"The response of JobApi-&gt;get_job:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling JobApi-&gt;get_job: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/JobApi/#parameters","title":"Parameters","text":"Name Type Description Notes job_id str The ID of the job."},{"location":"v3/docs/JobApi/#return-type","title":"Return type","text":"<p>Job</p>"},{"location":"v3/docs/JobApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/JobApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/JobApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The job is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/JobApi/#get_jobs","title":"get_jobs","text":"<p>JobPagedList get_jobs(status=status, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)</p> <p>Retrieve a list of jobs.</p>"},{"location":"v3/docs/JobApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.job_paged_list import JobPagedList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.JobApi(api_client)\n    status = ['status_example'] # List[str] | The statuses to filter on. (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeStarted - timeFinished (optional)\n\n    try:\n        # Retrieve a list of jobs.\n        api_response = api_instance.get_jobs(status=status, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        print(\"The response of JobApi-&gt;get_jobs:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling JobApi-&gt;get_jobs: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/JobApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes status List[str] The statuses to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeStarted - timeFinished [optional]"},{"location":"v3/docs/JobApi/#return-type_1","title":"Return type","text":"<p>JobPagedList</p>"},{"location":"v3/docs/JobApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/JobApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/JobApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The list of jobs is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/JobPagedList/","title":"JobPagedList","text":""},{"location":"v3/docs/JobPagedList/#properties","title":"Properties","text":"Name Type Description Notes items List[Job] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/JobPagedList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.job_paged_list import JobPagedList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of JobPagedList from a JSON string\njob_paged_list_instance = JobPagedList.from_json(json)\n# print the JSON string representation of the object\nprint(JobPagedList.to_json())\n\n# convert the object into a dict\njob_paged_list_dict = job_paged_list_instance.to_dict()\n# create an instance of JobPagedList from a dict\njob_paged_list_from_dict = JobPagedList.from_dict(job_paged_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/Link/","title":"Link","text":""},{"location":"v3/docs/Link/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the link url str The url of the link"},{"location":"v3/docs/Link/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.link import Link\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of Link from a JSON string\nlink_instance = Link.from_json(json)\n# print the JSON string representation of the object\nprint(Link.to_json())\n\n# convert the object into a dict\nlink_dict = link_instance.to_dict()\n# create an instance of Link from a dict\nlink_from_dict = Link.from_dict(link_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/Links/","title":"Links","text":""},{"location":"v3/docs/Links/#properties","title":"Properties","text":"Name Type Description Notes links List[Link] [optional] licenses List[Link] [optional] homepages List[Link] [optional] publications List[Link] [optional]"},{"location":"v3/docs/Links/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.links import Links\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of Links from a JSON string\nlinks_instance = Links.from_json(json)\n# print the JSON string representation of the object\nprint(Links.to_json())\n\n# convert the object into a dict\nlinks_dict = links_instance.to_dict()\n# create an instance of Links from a dict\nlinks_from_dict = Links.from_dict(links_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/LoadDataInBaseRequest/","title":"LoadDataInBaseRequest","text":""},{"location":"v3/docs/LoadDataInBaseRequest/#properties","title":"Properties","text":"Name Type Description Notes allow_quoted_newlines bool Enable to include newlines contained in quoted data sections in the cell\u2019s value. When disabled, newlines will signal a new row [optional] [default to False] data_id str ID of the data to load into the table delimiter str field delimiter [optional] [default to ','] encoding str Encoding [optional] [default to 'UTF8'] force_load bool When false (default): the data will not be loaded if it was already previously loaded to table ; when true, the data will be loaded even if already loaded in the past [optional] [default to False] header_rows_to_skip int number of rows to skip (usually for headers) [optional] [default to 1] ignore_unknown_values bool When enabled, rows with extra column values that do not match the schema will be ignored and will not be loaded into the table, rows with too few values will receive default value null [optional] [default to False] include_references bool Include references [optional] [default to True] include_data_reference bool Include Data Reference [optional] [default to True] include_sample_reference bool Include Sample Reference [optional] [default to True] include_pipeline_reference bool Include Pipeline Reference [optional] [default to True] include_pipeline_execution_reference bool Include Pipeline Execution Reference [optional] [default to True] include_tenant_reference bool Include Tenant Reference [optional] [default to True] null_marker str Specifies a string that represents a null value in a CSV/TSV file. [optional] number_of_errors_allowed int The maximum number of bad records that Base can ignore when running the job [optional] [default to 0] quote str The value that is used to quote data sections in a CSV/TSV file [optional] write_preference str specifies how to write data in the table. [optional] [default to 'APPENDTOTABLE']"},{"location":"v3/docs/LoadDataInBaseRequest/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.load_data_in_base_request import LoadDataInBaseRequest\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of LoadDataInBaseRequest from a JSON string\nload_data_in_base_request_instance = LoadDataInBaseRequest.from_json(json)\n# print the JSON string representation of the object\nprint(LoadDataInBaseRequest.to_json())\n\n# convert the object into a dict\nload_data_in_base_request_dict = load_data_in_base_request_instance.to_dict()\n# create an instance of LoadDataInBaseRequest from a dict\nload_data_in_base_request_from_dict = LoadDataInBaseRequest.from_dict(load_data_in_base_request_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/MetadataField/","title":"MetadataField","text":"<p>The metadata of the sample</p>"},{"location":"v3/docs/MetadataField/#properties","title":"Properties","text":"Name Type Description Notes id str index int [optional] name str [optional] field_type str [optional] values List[str] [optional] group_values List[MetadataField] [optional]"},{"location":"v3/docs/MetadataField/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.metadata_field import MetadataField\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of MetadataField from a JSON string\nmetadata_field_instance = MetadataField.from_json(json)\n# print the JSON string representation of the object\nprint(MetadataField.to_json())\n\n# convert the object into a dict\nmetadata_field_dict = metadata_field_instance.to_dict()\n# create an instance of MetadataField from a dict\nmetadata_field_from_dict = MetadataField.from_dict(metadata_field_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/MetadataModel/","title":"MetadataModel","text":""},{"location":"v3/docs/MetadataModel/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] name str description str [optional] state str parent_model_id str [optional]"},{"location":"v3/docs/MetadataModel/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.metadata_model import MetadataModel\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of MetadataModel from a JSON string\nmetadata_model_instance = MetadataModel.from_json(json)\n# print the JSON string representation of the object\nprint(MetadataModel.to_json())\n\n# convert the object into a dict\nmetadata_model_dict = metadata_model_instance.to_dict()\n# create an instance of MetadataModel from a dict\nmetadata_model_from_dict = MetadataModel.from_dict(metadata_model_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/MetadataModelApi/","title":"libica.openapi.v3.MetadataModelApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_metadata_model GET /api/metadataModels/{metadataModelId} Retrieve a metadata model. Only metadata models that the user has access to can be retrieved. get_metadata_model_fields GET /api/metadataModels/{metadataModelId}/fields Retrieve the fields of a metadata model. Only metadata models that the user has access to can be retrieved. get_metadata_models GET /api/metadataModels Retrieve the metadata models for the tenant associated to the security context. get_tenant_model GET /api/metadataModels/tenantModel Retrieve the tenant model for the tenant associated to the security context."},{"location":"v3/docs/MetadataModelApi/#get_metadata_model","title":"get_metadata_model","text":"<p>MetadataModel get_metadata_model(metadata_model_id)</p> <p>Retrieve a metadata model. Only metadata models that the user has access to can be retrieved.</p>"},{"location":"v3/docs/MetadataModelApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.metadata_model import MetadataModel\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.MetadataModelApi(api_client)\n    metadata_model_id = 'metadata_model_id_example' # str | \n\n    try:\n        # Retrieve a metadata model. Only metadata models that the user has access to can be retrieved.\n        api_response = api_instance.get_metadata_model(metadata_model_id)\n        print(\"The response of MetadataModelApi-&gt;get_metadata_model:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling MetadataModelApi-&gt;get_metadata_model: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/MetadataModelApi/#parameters","title":"Parameters","text":"Name Type Description Notes metadata_model_id str"},{"location":"v3/docs/MetadataModelApi/#return-type","title":"Return type","text":"<p>MetadataModel</p>"},{"location":"v3/docs/MetadataModelApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/MetadataModelApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/MetadataModelApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The metadata model is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/MetadataModelApi/#get_metadata_model_fields","title":"get_metadata_model_fields","text":"<p>FieldList get_metadata_model_fields(metadata_model_id)</p> <p>Retrieve the fields of a metadata model. Only metadata models that the user has access to can be retrieved.</p>"},{"location":"v3/docs/MetadataModelApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.field_list import FieldList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.MetadataModelApi(api_client)\n    metadata_model_id = 'metadata_model_id_example' # str | \n\n    try:\n        # Retrieve the fields of a metadata model. Only metadata models that the user has access to can be retrieved.\n        api_response = api_instance.get_metadata_model_fields(metadata_model_id)\n        print(\"The response of MetadataModelApi-&gt;get_metadata_model_fields:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling MetadataModelApi-&gt;get_metadata_model_fields: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/MetadataModelApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes metadata_model_id str"},{"location":"v3/docs/MetadataModelApi/#return-type_1","title":"Return type","text":"<p>FieldList</p>"},{"location":"v3/docs/MetadataModelApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/MetadataModelApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/MetadataModelApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The metadata model fields are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/MetadataModelApi/#get_metadata_models","title":"get_metadata_models","text":"<p>MetadataModelList get_metadata_models()</p> <p>Retrieve the metadata models for the tenant associated to the security context.</p> <p>Retrieve the metadata models for the tenant associated to the security context. This call returns a list of metadata models for the tenant in a non-hierarchical way. Instead of a model having a list of child models all models except the root model have a parent model identifier. This can be used to reconstruct the hierarchy.</p>"},{"location":"v3/docs/MetadataModelApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.metadata_model_list import MetadataModelList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.MetadataModelApi(api_client)\n\n    try:\n        # Retrieve the metadata models for the tenant associated to the security context.\n        api_response = api_instance.get_metadata_models()\n        print(\"The response of MetadataModelApi-&gt;get_metadata_models:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling MetadataModelApi-&gt;get_metadata_models: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/MetadataModelApi/#parameters_2","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v3/docs/MetadataModelApi/#return-type_2","title":"Return type","text":"<p>MetadataModelList</p>"},{"location":"v3/docs/MetadataModelApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/MetadataModelApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/MetadataModelApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The metadata models are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/MetadataModelApi/#get_tenant_model","title":"get_tenant_model","text":"<p>Model get_tenant_model()</p> <p>Retrieve the tenant model for the tenant associated to the security context.</p> <p>Retrieve the tenant model for the tenant associated to the security context. The tenant model is a hierarchical structure where the top level tenant holds a list of child models (which in turn can hold child models).</p>"},{"location":"v3/docs/MetadataModelApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.model import Model\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.MetadataModelApi(api_client)\n\n    try:\n        # Retrieve the tenant model for the tenant associated to the security context.\n        api_response = api_instance.get_tenant_model()\n        print(\"The response of MetadataModelApi-&gt;get_tenant_model:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling MetadataModelApi-&gt;get_tenant_model: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/MetadataModelApi/#parameters_3","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v3/docs/MetadataModelApi/#return-type_3","title":"Return type","text":"<p>Model</p>"},{"location":"v3/docs/MetadataModelApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/MetadataModelApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/MetadataModelApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The tenant model is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/MetadataModelList/","title":"MetadataModelList","text":""},{"location":"v3/docs/MetadataModelList/#properties","title":"Properties","text":"Name Type Description Notes items List[MetadataModel]"},{"location":"v3/docs/MetadataModelList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.metadata_model_list import MetadataModelList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of MetadataModelList from a JSON string\nmetadata_model_list_instance = MetadataModelList.from_json(json)\n# print the JSON string representation of the object\nprint(MetadataModelList.to_json())\n\n# convert the object into a dict\nmetadata_model_list_dict = metadata_model_list_instance.to_dict()\n# create an instance of MetadataModelList from a dict\nmetadata_model_list_from_dict = MetadataModelList.from_dict(metadata_model_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/Model/","title":"Model","text":""},{"location":"v3/docs/Model/#properties","title":"Properties","text":"Name Type Description Notes id str name str [optional] description str [optional] state str [optional] models List[Model] [optional] fields List[ModelField] [optional]"},{"location":"v3/docs/Model/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.model import Model\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of Model from a JSON string\nmodel_instance = Model.from_json(json)\n# print the JSON string representation of the object\nprint(Model.to_json())\n\n# convert the object into a dict\nmodel_dict = model_instance.to_dict()\n# create an instance of Model from a dict\nmodel_from_dict = Model.from_dict(model_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ModelField/","title":"ModelField","text":""},{"location":"v3/docs/ModelField/#properties","title":"Properties","text":"Name Type Description Notes id str name str [optional] description str [optional] field_type str [optional] required bool [optional] multivalued bool [optional] filled_by_pipeline bool [optional] fields List[ModelField] [optional] enumeration_values List[str] [optional]"},{"location":"v3/docs/ModelField/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.model_field import ModelField\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ModelField from a JSON string\nmodel_field_instance = ModelField.from_json(json)\n# print the JSON string representation of the object\nprint(ModelField.to_json())\n\n# convert the object into a dict\nmodel_field_dict = model_field_instance.to_dict()\n# create an instance of ModelField from a dict\nmodel_field_from_dict = ModelField.from_dict(model_field_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/MultipartFormDataInput/","title":"MultipartFormDataInput","text":""},{"location":"v3/docs/MultipartFormDataInput/#properties","title":"Properties","text":"Name Type Description Notes form_data Dict[str, InputPart] [optional] form_data_map Dict[str, List[InputPart]] [optional] preamble str [optional] parts List[InputPart] [optional]"},{"location":"v3/docs/MultipartFormDataInput/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.multipart_form_data_input import MultipartFormDataInput\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of MultipartFormDataInput from a JSON string\nmultipart_form_data_input_instance = MultipartFormDataInput.from_json(json)\n# print the JSON string representation of the object\nprint(MultipartFormDataInput.to_json())\n\n# convert the object into a dict\nmultipart_form_data_input_dict = multipart_form_data_input_instance.to_dict()\n# create an instance of MultipartFormDataInput from a dict\nmultipart_form_data_input_from_dict = MultipartFormDataInput.from_dict(multipart_form_data_input_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/NextflowAnalysisInput/","title":"NextflowAnalysisInput","text":""},{"location":"v3/docs/NextflowAnalysisInput/#properties","title":"Properties","text":"Name Type Description Notes inputs List[AnalysisDataInput] parameters List[AnalysisParameterInput] [optional] reference_data_parameters List[AnalysisReferenceDataParameter] [optional]"},{"location":"v3/docs/NextflowAnalysisInput/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.nextflow_analysis_input import NextflowAnalysisInput\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of NextflowAnalysisInput from a JSON string\nnextflow_analysis_input_instance = NextflowAnalysisInput.from_json(json)\n# print the JSON string representation of the object\nprint(NextflowAnalysisInput.to_json())\n\n# convert the object into a dict\nnextflow_analysis_input_dict = nextflow_analysis_input_instance.to_dict()\n# create an instance of NextflowAnalysisInput from a dict\nnextflow_analysis_input_from_dict = NextflowAnalysisInput.from_dict(nextflow_analysis_input_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/NextflowAnalysisWithCustomInput/","title":"NextflowAnalysisWithCustomInput","text":""},{"location":"v3/docs/NextflowAnalysisWithCustomInput/#properties","title":"Properties","text":"Name Type Description Notes custom_input str Contains the custom input, in YAML format or as an escaped JSON string. data_ids List[str] [optional] mounts List[AnalysisInputDataMount] [optional] external_data List[AnalysisInputExternalData] [optional]"},{"location":"v3/docs/NextflowAnalysisWithCustomInput/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.nextflow_analysis_with_custom_input import NextflowAnalysisWithCustomInput\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of NextflowAnalysisWithCustomInput from a JSON string\nnextflow_analysis_with_custom_input_instance = NextflowAnalysisWithCustomInput.from_json(json)\n# print the JSON string representation of the object\nprint(NextflowAnalysisWithCustomInput.to_json())\n\n# convert the object into a dict\nnextflow_analysis_with_custom_input_dict = nextflow_analysis_with_custom_input_instance.to_dict()\n# create an instance of NextflowAnalysisWithCustomInput from a dict\nnextflow_analysis_with_custom_input_from_dict = NextflowAnalysisWithCustomInput.from_dict(nextflow_analysis_with_custom_input_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/NextflowJsonAnalysisInput/","title":"NextflowJsonAnalysisInput","text":""},{"location":"v3/docs/NextflowJsonAnalysisInput/#properties","title":"Properties","text":"Name Type Description Notes fields List[InputFormFieldValues] [optional] groups List[InputFormGroup] [optional]"},{"location":"v3/docs/NextflowJsonAnalysisInput/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.nextflow_json_analysis_input import NextflowJsonAnalysisInput\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of NextflowJsonAnalysisInput from a JSON string\nnextflow_json_analysis_input_instance = NextflowJsonAnalysisInput.from_json(json)\n# print the JSON string representation of the object\nprint(NextflowJsonAnalysisInput.to_json())\n\n# convert the object into a dict\nnextflow_json_analysis_input_dict = nextflow_json_analysis_input_instance.to_dict()\n# create an instance of NextflowJsonAnalysisInput from a dict\nnextflow_json_analysis_input_from_dict = NextflowJsonAnalysisInput.from_dict(nextflow_json_analysis_input_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/NotificationChannel/","title":"NotificationChannel","text":""},{"location":"v3/docs/NotificationChannel/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] enabled bool Should this channel be enabled or not? type str The type of delivery target (MAIL, SQS, SNS, HTTP, ...) address str The address where to send a notification to (email address, url, ...) aws_region str The AWS region of the SNS notification channel [optional] application ApplicationV4 [optional]"},{"location":"v3/docs/NotificationChannel/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.notification_channel import NotificationChannel\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of NotificationChannel from a JSON string\nnotification_channel_instance = NotificationChannel.from_json(json)\n# print the JSON string representation of the object\nprint(NotificationChannel.to_json())\n\n# convert the object into a dict\nnotification_channel_dict = notification_channel_instance.to_dict()\n# create an instance of NotificationChannel from a dict\nnotification_channel_from_dict = NotificationChannel.from_dict(notification_channel_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/NotificationChannelApi/","title":"libica.openapi.v3.NotificationChannelApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_notification_channel POST /api/notificationChannels Create a notification channel delete_notification_channel DELETE /api/notificationChannels/{channelId} Delete a notification channel get_notification_channel GET /api/notificationChannels/{channelId} Retrieve a notification channel get_notification_channels GET /api/notificationChannels Retrieve notification channels update_notification_channel PUT /api/notificationChannels/{channelId} Update a notification channel"},{"location":"v3/docs/NotificationChannelApi/#create_notification_channel","title":"create_notification_channel","text":"<p>NotificationChannel create_notification_channel(create_notification_channel)</p> <p>Create a notification channel</p>"},{"location":"v3/docs/NotificationChannelApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_notification_channel import CreateNotificationChannel\nfrom libica.openapi.v3.models.notification_channel import NotificationChannel\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.NotificationChannelApi(api_client)\n    create_notification_channel = libica.openapi.v3.CreateNotificationChannel() # CreateNotificationChannel | The new channel\n\n    try:\n        # Create a notification channel\n        api_response = api_instance.create_notification_channel(create_notification_channel)\n        print(\"The response of NotificationChannelApi-&gt;create_notification_channel:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling NotificationChannelApi-&gt;create_notification_channel: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/NotificationChannelApi/#parameters","title":"Parameters","text":"Name Type Description Notes create_notification_channel CreateNotificationChannel The new channel"},{"location":"v3/docs/NotificationChannelApi/#return-type","title":"Return type","text":"<p>NotificationChannel</p>"},{"location":"v3/docs/NotificationChannelApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/NotificationChannelApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/NotificationChannelApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The notification channel is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/NotificationChannelApi/#delete_notification_channel","title":"delete_notification_channel","text":"<p>delete_notification_channel(channel_id)</p> <p>Delete a notification channel</p>"},{"location":"v3/docs/NotificationChannelApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.NotificationChannelApi(api_client)\n    channel_id = 'channel_id_example' # str | The ID of the notification channel to delete\n\n    try:\n        # Delete a notification channel\n        api_instance.delete_notification_channel(channel_id)\n    except Exception as e:\n        print(\"Exception when calling NotificationChannelApi-&gt;delete_notification_channel: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/NotificationChannelApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes channel_id str The ID of the notification channel to delete"},{"location":"v3/docs/NotificationChannelApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/NotificationChannelApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/NotificationChannelApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/NotificationChannelApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The notification channel is successfully deleted - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/NotificationChannelApi/#get_notification_channel","title":"get_notification_channel","text":"<p>NotificationChannel get_notification_channel(channel_id)</p> <p>Retrieve a notification channel</p>"},{"location":"v3/docs/NotificationChannelApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.notification_channel import NotificationChannel\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.NotificationChannelApi(api_client)\n    channel_id = 'channel_id_example' # str | The ID of the notification channel to retrieve\n\n    try:\n        # Retrieve a notification channel\n        api_response = api_instance.get_notification_channel(channel_id)\n        print(\"The response of NotificationChannelApi-&gt;get_notification_channel:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling NotificationChannelApi-&gt;get_notification_channel: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/NotificationChannelApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes channel_id str The ID of the notification channel to retrieve"},{"location":"v3/docs/NotificationChannelApi/#return-type_2","title":"Return type","text":"<p>NotificationChannel</p>"},{"location":"v3/docs/NotificationChannelApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/NotificationChannelApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/NotificationChannelApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The notification channel is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/NotificationChannelApi/#get_notification_channels","title":"get_notification_channels","text":"<p>NotificationChannelList get_notification_channels()</p> <p>Retrieve notification channels</p>"},{"location":"v3/docs/NotificationChannelApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.notification_channel_list import NotificationChannelList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.NotificationChannelApi(api_client)\n\n    try:\n        # Retrieve notification channels\n        api_response = api_instance.get_notification_channels()\n        print(\"The response of NotificationChannelApi-&gt;get_notification_channels:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling NotificationChannelApi-&gt;get_notification_channels: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/NotificationChannelApi/#parameters_3","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v3/docs/NotificationChannelApi/#return-type_3","title":"Return type","text":"<p>NotificationChannelList</p>"},{"location":"v3/docs/NotificationChannelApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/NotificationChannelApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/NotificationChannelApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The notification channels are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/NotificationChannelApi/#update_notification_channel","title":"update_notification_channel","text":"<p>NotificationChannel update_notification_channel(channel_id, notification_channel, if_match=if_match)</p> <p>Update a notification channel</p> <p>This will affect all subscriptions which use this address!Fields which can be updated:  - enabled  - address  - awsRegion</p>"},{"location":"v3/docs/NotificationChannelApi/#example_4","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.notification_channel import NotificationChannel\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.NotificationChannelApi(api_client)\n    channel_id = 'channel_id_example' # str | The ID of the notification channel to update\n    notification_channel = libica.openapi.v3.NotificationChannel() # NotificationChannel | The updated channel\n    if_match = 'if_match_example' # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n\n    try:\n        # Update a notification channel\n        api_response = api_instance.update_notification_channel(channel_id, notification_channel, if_match=if_match)\n        print(\"The response of NotificationChannelApi-&gt;update_notification_channel:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling NotificationChannelApi-&gt;update_notification_channel: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/NotificationChannelApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes channel_id str The ID of the notification channel to update notification_channel NotificationChannel The updated channel if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional]"},{"location":"v3/docs/NotificationChannelApi/#return-type_4","title":"Return type","text":"<p>NotificationChannel</p>"},{"location":"v3/docs/NotificationChannelApi/#authorization_4","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/NotificationChannelApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/NotificationChannelApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The notification channel is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/NotificationChannelList/","title":"NotificationChannelList","text":""},{"location":"v3/docs/NotificationChannelList/#properties","title":"Properties","text":"Name Type Description Notes items List[NotificationChannel]"},{"location":"v3/docs/NotificationChannelList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.notification_channel_list import NotificationChannelList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of NotificationChannelList from a JSON string\nnotification_channel_list_instance = NotificationChannelList.from_json(json)\n# print the JSON string representation of the object\nprint(NotificationChannelList.to_json())\n\n# convert the object into a dict\nnotification_channel_list_dict = notification_channel_list_instance.to_dict()\n# create an instance of NotificationChannelList from a dict\nnotification_channel_list_from_dict = NotificationChannelList.from_dict(notification_channel_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/NotificationSubscription/","title":"NotificationSubscription","text":""},{"location":"v3/docs/NotificationSubscription/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] event_code str The event code to subscribe to payload_version str The version of the notification event payload in case multiple versions exist. For analysis events possible values are [V3,V4] [optional] filter_expression str To be used when a notification applies to specific conditions. [optional] enabled bool Should this subscription be enabled or not? notification_channel NotificationChannel application ApplicationV4 [optional]"},{"location":"v3/docs/NotificationSubscription/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.notification_subscription import NotificationSubscription\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of NotificationSubscription from a JSON string\nnotification_subscription_instance = NotificationSubscription.from_json(json)\n# print the JSON string representation of the object\nprint(NotificationSubscription.to_json())\n\n# convert the object into a dict\nnotification_subscription_dict = notification_subscription_instance.to_dict()\n# create an instance of NotificationSubscription from a dict\nnotification_subscription_from_dict = NotificationSubscription.from_dict(notification_subscription_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/NotificationSubscriptionList/","title":"NotificationSubscriptionList","text":""},{"location":"v3/docs/NotificationSubscriptionList/#properties","title":"Properties","text":"Name Type Description Notes items List[NotificationSubscription]"},{"location":"v3/docs/NotificationSubscriptionList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.notification_subscription_list import NotificationSubscriptionList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of NotificationSubscriptionList from a JSON string\nnotification_subscription_list_instance = NotificationSubscriptionList.from_json(json)\n# print the JSON string representation of the object\nprint(NotificationSubscriptionList.to_json())\n\n# convert the object into a dict\nnotification_subscription_list_dict = notification_subscription_list_instance.to_dict()\n# create an instance of NotificationSubscriptionList from a dict\nnotification_subscription_list_from_dict = NotificationSubscriptionList.from_dict(notification_subscription_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/OptionSettings/","title":"OptionSettings","text":""},{"location":"v3/docs/OptionSettings/#properties","title":"Properties","text":"Name Type Description Notes options List[str] [optional] default_values List[str] [optional]"},{"location":"v3/docs/OptionSettings/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.option_settings import OptionSettings\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of OptionSettings from a JSON string\noption_settings_instance = OptionSettings.from_json(json)\n# print the JSON string representation of the object\nprint(OptionSettings.to_json())\n\n# convert the object into a dict\noption_settings_dict = option_settings_instance.to_dict()\n# create an instance of OptionSettings from a dict\noption_settings_from_dict = OptionSettings.from_dict(option_settings_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/OptionalSampleTags/","title":"OptionalSampleTags","text":""},{"location":"v3/docs/OptionalSampleTags/#properties","title":"Properties","text":"Name Type Description Notes technical_tags List[Optional[str]] [optional] user_tags List[Optional[str]] [optional] connector_tags List[Optional[str]] [optional] run_in_tags List[Optional[str]] [optional]"},{"location":"v3/docs/OptionalSampleTags/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.optional_sample_tags import OptionalSampleTags\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of OptionalSampleTags from a JSON string\noptional_sample_tags_instance = OptionalSampleTags.from_json(json)\n# print the JSON string representation of the object\nprint(OptionalSampleTags.to_json())\n\n# convert the object into a dict\noptional_sample_tags_dict = optional_sample_tags_instance.to_dict()\n# create an instance of OptionalSampleTags from a dict\noptional_sample_tags_from_dict = OptionalSampleTags.from_dict(optional_sample_tags_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/PipelineApi/","title":"libica.openapi.v3.PipelineApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description download_pipeline_file_content GET /api/pipelines/{pipelineId}/files/{fileId}/content Download the contents of a pipeline file. get_pipeline GET /api/pipelines/{pipelineId} Retrieve a pipeline. get_pipeline_configuration_parameters GET /api/pipelines/{pipelineId}/configurationParameters Retrieve configuration parameters for a pipeline. get_pipeline_files GET /api/pipelines/{pipelineId}/files Retrieve files for a pipeline. get_pipeline_html_documentation GET /api/pipelines/{pipelineId}/documentation/HTML Retrieve HTML documentation for a project pipeline. get_pipeline_input_parameters GET /api/pipelines/{pipelineId}/inputParameters Retrieve input parameters for a pipeline. get_pipeline_reference_sets GET /api/pipelines/{pipelineId}/referenceSets Retrieve the reference sets of a pipeline. get_pipelines GET /api/pipelines Retrieve a list of pipelines."},{"location":"v3/docs/PipelineApi/#download_pipeline_file_content","title":"download_pipeline_file_content","text":"<p>bytearray download_pipeline_file_content(pipeline_id, file_id)</p> <p>Download the contents of a pipeline file.</p>"},{"location":"v3/docs/PipelineApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.PipelineApi(api_client)\n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to retrieve files for\n    file_id = 'file_id_example' # str | The ID of the pipeline file\n\n    try:\n        # Download the contents of a pipeline file.\n        api_response = api_instance.download_pipeline_file_content(pipeline_id, file_id)\n        print(\"The response of PipelineApi-&gt;download_pipeline_file_content:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling PipelineApi-&gt;download_pipeline_file_content: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/PipelineApi/#parameters","title":"Parameters","text":"Name Type Description Notes pipeline_id str The ID of the project pipeline to retrieve files for file_id str The ID of the pipeline file"},{"location":"v3/docs/PipelineApi/#return-type","title":"Return type","text":"<p>bytearray</p>"},{"location":"v3/docs/PipelineApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/PipelineApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/octet-stream</li> </ul>"},{"location":"v3/docs/PipelineApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The pipeline file is successfully downloaded. * Content-Disposition - Contains name of the additional file to be downloaded.  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/PipelineApi/#get_pipeline","title":"get_pipeline","text":"<p>PipelineV4 get_pipeline(pipeline_id)</p> <p>Retrieve a pipeline.</p>"},{"location":"v3/docs/PipelineApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.pipeline_v4 import PipelineV4\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.PipelineApi(api_client)\n    pipeline_id = 'pipeline_id_example' # str | The ID of the pipeline to retrieve\n\n    try:\n        # Retrieve a pipeline.\n        api_response = api_instance.get_pipeline(pipeline_id)\n        print(\"The response of PipelineApi-&gt;get_pipeline:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling PipelineApi-&gt;get_pipeline: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/PipelineApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes pipeline_id str The ID of the pipeline to retrieve"},{"location":"v3/docs/PipelineApi/#return-type_1","title":"Return type","text":"<p>PipelineV4</p>"},{"location":"v3/docs/PipelineApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/PipelineApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/PipelineApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The pipeline is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/PipelineApi/#get_pipeline_configuration_parameters","title":"get_pipeline_configuration_parameters","text":"<p>PipelineConfigurationParameterList get_pipeline_configuration_parameters(pipeline_id)</p> <p>Retrieve configuration parameters for a pipeline.</p>"},{"location":"v3/docs/PipelineApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.pipeline_configuration_parameter_list import PipelineConfigurationParameterList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.PipelineApi(api_client)\n    pipeline_id = 'pipeline_id_example' # str | \n\n    try:\n        # Retrieve configuration parameters for a pipeline.\n        api_response = api_instance.get_pipeline_configuration_parameters(pipeline_id)\n        print(\"The response of PipelineApi-&gt;get_pipeline_configuration_parameters:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling PipelineApi-&gt;get_pipeline_configuration_parameters: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/PipelineApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes pipeline_id str"},{"location":"v3/docs/PipelineApi/#return-type_2","title":"Return type","text":"<p>PipelineConfigurationParameterList</p>"},{"location":"v3/docs/PipelineApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/PipelineApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/PipelineApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The configuration parameters are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/PipelineApi/#get_pipeline_files","title":"get_pipeline_files","text":"<p>PipelineFileList get_pipeline_files(pipeline_id)</p> <p>Retrieve files for a pipeline.</p>"},{"location":"v3/docs/PipelineApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.pipeline_file_list import PipelineFileList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.PipelineApi(api_client)\n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to retrieve files for\n\n    try:\n        # Retrieve files for a pipeline.\n        api_response = api_instance.get_pipeline_files(pipeline_id)\n        print(\"The response of PipelineApi-&gt;get_pipeline_files:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling PipelineApi-&gt;get_pipeline_files: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/PipelineApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes pipeline_id str The ID of the project pipeline to retrieve files for"},{"location":"v3/docs/PipelineApi/#return-type_3","title":"Return type","text":"<p>PipelineFileList</p>"},{"location":"v3/docs/PipelineApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/PipelineApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/PipelineApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The files are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/PipelineApi/#get_pipeline_html_documentation","title":"get_pipeline_html_documentation","text":"<p>PipelineHtmlDocumentation get_pipeline_html_documentation(pipeline_id)</p> <p>Retrieve HTML documentation for a project pipeline.</p> <p>Retrieve HTML documentation for a project pipeline. This can be a pipeline from a linked bundle.</p>"},{"location":"v3/docs/PipelineApi/#example_4","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.pipeline_html_documentation import PipelineHtmlDocumentation\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.PipelineApi(api_client)\n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to retrieve HTML documentation from\n\n    try:\n        # Retrieve HTML documentation for a project pipeline.\n        api_response = api_instance.get_pipeline_html_documentation(pipeline_id)\n        print(\"The response of PipelineApi-&gt;get_pipeline_html_documentation:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling PipelineApi-&gt;get_pipeline_html_documentation: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/PipelineApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes pipeline_id str The ID of the project pipeline to retrieve HTML documentation from"},{"location":"v3/docs/PipelineApi/#return-type_4","title":"Return type","text":"<p>PipelineHtmlDocumentation</p>"},{"location":"v3/docs/PipelineApi/#authorization_4","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/PipelineApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/PipelineApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The HTML documentation is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/PipelineApi/#get_pipeline_input_parameters","title":"get_pipeline_input_parameters","text":"<p>InputParameterList get_pipeline_input_parameters(pipeline_id)</p> <p>Retrieve input parameters for a pipeline.</p>"},{"location":"v3/docs/PipelineApi/#example_5","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.input_parameter_list import InputParameterList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.PipelineApi(api_client)\n    pipeline_id = 'pipeline_id_example' # str | The ID of the pipeline to retrieve input parameters for\n\n    try:\n        # Retrieve input parameters for a pipeline.\n        api_response = api_instance.get_pipeline_input_parameters(pipeline_id)\n        print(\"The response of PipelineApi-&gt;get_pipeline_input_parameters:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling PipelineApi-&gt;get_pipeline_input_parameters: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/PipelineApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes pipeline_id str The ID of the pipeline to retrieve input parameters for"},{"location":"v3/docs/PipelineApi/#return-type_5","title":"Return type","text":"<p>InputParameterList</p>"},{"location":"v3/docs/PipelineApi/#authorization_5","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/PipelineApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/PipelineApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 200 The input parameters is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/PipelineApi/#get_pipeline_reference_sets","title":"get_pipeline_reference_sets","text":"<p>ReferenceSetList get_pipeline_reference_sets(pipeline_id)</p> <p>Retrieve the reference sets of a pipeline.</p>"},{"location":"v3/docs/PipelineApi/#example_6","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.reference_set_list import ReferenceSetList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.PipelineApi(api_client)\n    pipeline_id = 'pipeline_id_example' # str | The ID of the pipeline to retrieve reference sets for\n\n    try:\n        # Retrieve the reference sets of a pipeline.\n        api_response = api_instance.get_pipeline_reference_sets(pipeline_id)\n        print(\"The response of PipelineApi-&gt;get_pipeline_reference_sets:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling PipelineApi-&gt;get_pipeline_reference_sets: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/PipelineApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes pipeline_id str The ID of the pipeline to retrieve reference sets for"},{"location":"v3/docs/PipelineApi/#return-type_6","title":"Return type","text":"<p>ReferenceSetList</p>"},{"location":"v3/docs/PipelineApi/#authorization_6","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/PipelineApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/PipelineApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 200 The list of reference sets is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/PipelineApi/#get_pipelines","title":"get_pipelines","text":"<p>PipelineList get_pipelines()</p> <p>Retrieve a list of pipelines.</p> <p>Only lists pipelines that are owned by the user/tenant (not those to which a user is entitled).</p>"},{"location":"v3/docs/PipelineApi/#example_7","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.pipeline_list import PipelineList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.PipelineApi(api_client)\n\n    try:\n        # Retrieve a list of pipelines.\n        api_response = api_instance.get_pipelines()\n        print(\"The response of PipelineApi-&gt;get_pipelines:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling PipelineApi-&gt;get_pipelines: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/PipelineApi/#parameters_7","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v3/docs/PipelineApi/#return-type_7","title":"Return type","text":"<p>PipelineList</p>"},{"location":"v3/docs/PipelineApi/#authorization_7","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/PipelineApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/PipelineApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 200 The list of pipelines is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/PipelineBundle/","title":"PipelineBundle","text":""},{"location":"v3/docs/PipelineBundle/#properties","title":"Properties","text":"Name Type Description Notes id str name str max_number_of_allowed_slots int active_pipelines List[PipelineV3] canceled_pipelines List[PipelineV3] retired_pipelines List[PipelineV3] regions List[Region] analysis_storages List[AnalysisStorageV3]"},{"location":"v3/docs/PipelineBundle/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.pipeline_bundle import PipelineBundle\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of PipelineBundle from a JSON string\npipeline_bundle_instance = PipelineBundle.from_json(json)\n# print the JSON string representation of the object\nprint(PipelineBundle.to_json())\n\n# convert the object into a dict\npipeline_bundle_dict = pipeline_bundle_instance.to_dict()\n# create an instance of PipelineBundle from a dict\npipeline_bundle_from_dict = PipelineBundle.from_dict(pipeline_bundle_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/PipelineConfigurationParameter/","title":"PipelineConfigurationParameter","text":""},{"location":"v3/docs/PipelineConfigurationParameter/#properties","title":"Properties","text":"Name Type Description Notes code str The code of the parameter required bool Indicates whether this parameter is required multi_value bool Indicates whether multiple values are allowed for this parameter type str The type for each parameter settings Settings [optional]"},{"location":"v3/docs/PipelineConfigurationParameter/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.pipeline_configuration_parameter import PipelineConfigurationParameter\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of PipelineConfigurationParameter from a JSON string\npipeline_configuration_parameter_instance = PipelineConfigurationParameter.from_json(json)\n# print the JSON string representation of the object\nprint(PipelineConfigurationParameter.to_json())\n\n# convert the object into a dict\npipeline_configuration_parameter_dict = pipeline_configuration_parameter_instance.to_dict()\n# create an instance of PipelineConfigurationParameter from a dict\npipeline_configuration_parameter_from_dict = PipelineConfigurationParameter.from_dict(pipeline_configuration_parameter_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/PipelineConfigurationParameterList/","title":"PipelineConfigurationParameterList","text":""},{"location":"v3/docs/PipelineConfigurationParameterList/#properties","title":"Properties","text":"Name Type Description Notes items List[PipelineConfigurationParameter]"},{"location":"v3/docs/PipelineConfigurationParameterList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.pipeline_configuration_parameter_list import PipelineConfigurationParameterList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of PipelineConfigurationParameterList from a JSON string\npipeline_configuration_parameter_list_instance = PipelineConfigurationParameterList.from_json(json)\n# print the JSON string representation of the object\nprint(PipelineConfigurationParameterList.to_json())\n\n# convert the object into a dict\npipeline_configuration_parameter_list_dict = pipeline_configuration_parameter_list_instance.to_dict()\n# create an instance of PipelineConfigurationParameterList from a dict\npipeline_configuration_parameter_list_from_dict = PipelineConfigurationParameterList.from_dict(pipeline_configuration_parameter_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/PipelineFile/","title":"PipelineFile","text":""},{"location":"v3/docs/PipelineFile/#properties","title":"Properties","text":"Name Type Description Notes id str name str"},{"location":"v3/docs/PipelineFile/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.pipeline_file import PipelineFile\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of PipelineFile from a JSON string\npipeline_file_instance = PipelineFile.from_json(json)\n# print the JSON string representation of the object\nprint(PipelineFile.to_json())\n\n# convert the object into a dict\npipeline_file_dict = pipeline_file_instance.to_dict()\n# create an instance of PipelineFile from a dict\npipeline_file_from_dict = PipelineFile.from_dict(pipeline_file_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/PipelineFileList/","title":"PipelineFileList","text":""},{"location":"v3/docs/PipelineFileList/#properties","title":"Properties","text":"Name Type Description Notes items List[PipelineFile]"},{"location":"v3/docs/PipelineFileList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.pipeline_file_list import PipelineFileList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of PipelineFileList from a JSON string\npipeline_file_list_instance = PipelineFileList.from_json(json)\n# print the JSON string representation of the object\nprint(PipelineFileList.to_json())\n\n# convert the object into a dict\npipeline_file_list_dict = pipeline_file_list_instance.to_dict()\n# create an instance of PipelineFileList from a dict\npipeline_file_list_from_dict = PipelineFileList.from_dict(pipeline_file_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/PipelineHtmlDocumentation/","title":"PipelineHtmlDocumentation","text":""},{"location":"v3/docs/PipelineHtmlDocumentation/#properties","title":"Properties","text":"Name Type Description Notes content str The content of the HTML documentation"},{"location":"v3/docs/PipelineHtmlDocumentation/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.pipeline_html_documentation import PipelineHtmlDocumentation\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of PipelineHtmlDocumentation from a JSON string\npipeline_html_documentation_instance = PipelineHtmlDocumentation.from_json(json)\n# print the JSON string representation of the object\nprint(PipelineHtmlDocumentation.to_json())\n\n# convert the object into a dict\npipeline_html_documentation_dict = pipeline_html_documentation_instance.to_dict()\n# create an instance of PipelineHtmlDocumentation from a dict\npipeline_html_documentation_from_dict = PipelineHtmlDocumentation.from_dict(pipeline_html_documentation_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/PipelineLanguageApi/","title":"libica.openapi.v3.PipelineLanguageApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_nextflow_versions GET /api/pipelineLanguages/nextflow/versions Retrieve a list of nextflow versions."},{"location":"v3/docs/PipelineLanguageApi/#get_nextflow_versions","title":"get_nextflow_versions","text":"<p>PipelineLanguageVersionList get_nextflow_versions()</p> <p>Retrieve a list of nextflow versions.</p>"},{"location":"v3/docs/PipelineLanguageApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.pipeline_language_version_list import PipelineLanguageVersionList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.PipelineLanguageApi(api_client)\n\n    try:\n        # Retrieve a list of nextflow versions.\n        api_response = api_instance.get_nextflow_versions()\n        print(\"The response of PipelineLanguageApi-&gt;get_nextflow_versions:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling PipelineLanguageApi-&gt;get_nextflow_versions: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/PipelineLanguageApi/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v3/docs/PipelineLanguageApi/#return-type","title":"Return type","text":"<p>PipelineLanguageVersionList</p>"},{"location":"v3/docs/PipelineLanguageApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/PipelineLanguageApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/PipelineLanguageApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of nextflow versions is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/PipelineLanguageVersion/","title":"PipelineLanguageVersion","text":""},{"location":"v3/docs/PipelineLanguageVersion/#properties","title":"Properties","text":"Name Type Description Notes id str name str The name of the version language str The language of the version"},{"location":"v3/docs/PipelineLanguageVersion/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.pipeline_language_version import PipelineLanguageVersion\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of PipelineLanguageVersion from a JSON string\npipeline_language_version_instance = PipelineLanguageVersion.from_json(json)\n# print the JSON string representation of the object\nprint(PipelineLanguageVersion.to_json())\n\n# convert the object into a dict\npipeline_language_version_dict = pipeline_language_version_instance.to_dict()\n# create an instance of PipelineLanguageVersion from a dict\npipeline_language_version_from_dict = PipelineLanguageVersion.from_dict(pipeline_language_version_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/PipelineLanguageVersionList/","title":"PipelineLanguageVersionList","text":""},{"location":"v3/docs/PipelineLanguageVersionList/#properties","title":"Properties","text":"Name Type Description Notes items List[PipelineLanguageVersion]"},{"location":"v3/docs/PipelineLanguageVersionList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.pipeline_language_version_list import PipelineLanguageVersionList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of PipelineLanguageVersionList from a JSON string\npipeline_language_version_list_instance = PipelineLanguageVersionList.from_json(json)\n# print the JSON string representation of the object\nprint(PipelineLanguageVersionList.to_json())\n\n# convert the object into a dict\npipeline_language_version_list_dict = pipeline_language_version_list_instance.to_dict()\n# create an instance of PipelineLanguageVersionList from a dict\npipeline_language_version_list_from_dict = PipelineLanguageVersionList.from_dict(pipeline_language_version_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/PipelineList/","title":"PipelineList","text":""},{"location":"v3/docs/PipelineList/#properties","title":"Properties","text":"Name Type Description Notes items List[PipelineV3]"},{"location":"v3/docs/PipelineList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.pipeline_list import PipelineList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of PipelineList from a JSON string\npipeline_list_instance = PipelineList.from_json(json)\n# print the JSON string representation of the object\nprint(PipelineList.to_json())\n\n# convert the object into a dict\npipeline_list_dict = pipeline_list_instance.to_dict()\n# create an instance of PipelineList from a dict\npipeline_list_from_dict = PipelineList.from_dict(pipeline_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/PipelineReportConfig/","title":"PipelineReportConfig","text":""},{"location":"v3/docs/PipelineReportConfig/#properties","title":"Properties","text":"Name Type Description Notes configs List[Config] [optional]"},{"location":"v3/docs/PipelineReportConfig/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.pipeline_report_config import PipelineReportConfig\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of PipelineReportConfig from a JSON string\npipeline_report_config_instance = PipelineReportConfig.from_json(json)\n# print the JSON string representation of the object\nprint(PipelineReportConfig.to_json())\n\n# convert the object into a dict\npipeline_report_config_dict = pipeline_report_config_instance.to_dict()\n# create an instance of PipelineReportConfig from a dict\npipeline_report_config_from_dict = PipelineReportConfig.from_dict(pipeline_report_config_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/PipelineTag/","title":"PipelineTag","text":""},{"location":"v3/docs/PipelineTag/#properties","title":"Properties","text":"Name Type Description Notes technical_tags List[str] Technical tags"},{"location":"v3/docs/PipelineTag/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.pipeline_tag import PipelineTag\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of PipelineTag from a JSON string\npipeline_tag_instance = PipelineTag.from_json(json)\n# print the JSON string representation of the object\nprint(PipelineTag.to_json())\n\n# convert the object into a dict\npipeline_tag_dict = pipeline_tag_instance.to_dict()\n# create an instance of PipelineTag from a dict\npipeline_tag_from_dict = PipelineTag.from_dict(pipeline_tag_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/PipelineUpdate/","title":"PipelineUpdate","text":""},{"location":"v3/docs/PipelineUpdate/#properties","title":"Properties","text":"Name Type Description Notes code str The code of the pipeline [optional] description str The description of the pipeline [optional] language_version str Version of the pipeline language [optional] proprietary bool A boolean which indicates if the code of this pipeline is proprietary [optional]"},{"location":"v3/docs/PipelineUpdate/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.pipeline_update import PipelineUpdate\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of PipelineUpdate from a JSON string\npipeline_update_instance = PipelineUpdate.from_json(json)\n# print the JSON string representation of the object\nprint(PipelineUpdate.to_json())\n\n# convert the object into a dict\npipeline_update_dict = pipeline_update_instance.to_dict()\n# create an instance of PipelineUpdate from a dict\npipeline_update_from_dict = PipelineUpdate.from_dict(pipeline_update_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/PipelineV3/","title":"PipelineV3","text":""},{"location":"v3/docs/PipelineV3/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] code str The code of the pipeline urn str The URN of the pipeline. The format is urn:ilmn:ica:\\&lt;type of the object\\&gt;:\\&lt;ID of the object\\&gt;#\\&lt;optional human readable hint representing the object\\&gt;. The hint can be omitted, in that case the hashtag (#) must also be omitted. [optional] description str The description of the pipeline status str The status of the pipeline [optional] language str The language that is used by the pipeline language_version PipelineLanguageVersion [optional] pipeline_tags PipelineTag analysis_storage AnalysisStorageV3 proprietary bool A boolean which indicates if the code of this pipeline is proprietary [optional] [default to False] input_form_type str The type of the inputform used. [optional]"},{"location":"v3/docs/PipelineV3/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.pipeline_v3 import PipelineV3\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of PipelineV3 from a JSON string\npipeline_v3_instance = PipelineV3.from_json(json)\n# print the JSON string representation of the object\nprint(PipelineV3.to_json())\n\n# convert the object into a dict\npipeline_v3_dict = pipeline_v3_instance.to_dict()\n# create an instance of PipelineV3 from a dict\npipeline_v3_from_dict = PipelineV3.from_dict(pipeline_v3_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/PipelineV4/","title":"PipelineV4","text":""},{"location":"v3/docs/PipelineV4/#properties","title":"Properties","text":"Name Type Description Notes id str urn str The URN of the pipeline. The format is urn:ilmn:ica:\\&lt;type of the object\\&gt;:\\&lt;ID of the object\\&gt;#\\&lt;optional human readable hint representing the object\\&gt;. The hint can be omitted, in that case the hashtag (#) must also be omitted. [optional] time_created datetime time_modified datetime owner UserIdentifier tenant TenantIdentifier code str The code of the pipeline description str The description of the pipeline status str The status of the pipeline [optional] language str The language that is used by the pipeline language_version PipelineLanguageVersion [optional] pipeline_tags PipelineTag analysis_storage AnalysisStorageV4 proprietary bool A boolean which indicates if the code of this pipeline is proprietary [optional] [default to False] input_form_type str The type of the inputform used. [optional] report_configs PipelineReportConfig [optional]"},{"location":"v3/docs/PipelineV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.pipeline_v4 import PipelineV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of PipelineV4 from a JSON string\npipeline_v4_instance = PipelineV4.from_json(json)\n# print the JSON string representation of the object\nprint(PipelineV4.to_json())\n\n# convert the object into a dict\npipeline_v4_dict = pipeline_v4_instance.to_dict()\n# create an instance of PipelineV4 from a dict\npipeline_v4_from_dict = PipelineV4.from_dict(pipeline_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/Problem/","title":"Problem","text":"<p>RFC 7807 Problem object (https://tools.ietf.org/html/rfc7807)</p>"},{"location":"v3/docs/Problem/#properties","title":"Properties","text":"Name Type Description Notes id str [optional] type str A URI reference that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be \\\"about:blank\\\". title str A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; status int The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem. detail str A human-readable explanation specific to this occurrence of the problem. [optional] instance str A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced. [optional] parameters Dict[str, str] Problem parameters for e.g. request body attribute validation. This attribute is not in scope of RFC 7807. timestamp datetime"},{"location":"v3/docs/Problem/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.problem import Problem\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of Problem from a JSON string\nproblem_instance = Problem.from_json(json)\n# print the JSON string representation of the object\nprint(Problem.to_json())\n\n# convert the object into a dict\nproblem_dict = problem_instance.to_dict()\n# create an instance of Problem from a dict\nproblem_from_dict = Problem.from_dict(problem_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/Project/","title":"Project","text":""},{"location":"v3/docs/Project/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] urn str The URN of the project. The format is urn:ilmn:ica:\\&lt;type of the object\\&gt;:\\&lt;ID of the object\\&gt;#\\&lt;optional human readable hint representing the object\\&gt;. The hint can be omitted, in that case the hashtag (#) must also be omitted. [optional] name str active bool Indicates whether the project is active or hidden. base_enabled bool Indicates whether the project is base enabled. [optional] short_description str [optional] information str Information about the project. Note that the value of this field can be arbitrary large. [optional] region Region billing_mode str The billing mode of the project. It determines who pays for the costs linked to the project. data_sharing_enabled bool Indicates whether the Data and Samples created in this Project can be linked to other Projects. [optional] tags ProjectTag storage_bundle StorageBundle [optional] self_managed_storage_configuration StorageConfiguration [optional] analysis_priority str Indicates the priority given to a project and its analyses within a single tenant. Note that for a PUT call, when not providing a value for this attribute (null value or absent attribute), the persisted value will not change. [optional] metadata_model MetadataModel [optional] application Application [optional] project_owner str projectOwner is the current project owner, ownerId is the original project creator. These can be different because you can transfer ownership of a project. [optional]"},{"location":"v3/docs/Project/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project import Project\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of Project from a JSON string\nproject_instance = Project.from_json(json)\n# print the JSON string representation of the object\nprint(Project.to_json())\n\n# convert the object into a dict\nproject_dict = project_instance.to_dict()\n# create an instance of Project from a dict\nproject_from_dict = Project.from_dict(project_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/","title":"libica.openapi.v3.ProjectAnalysisApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description abort_analysis POST /api/projects/{projectId}/analyses/{analysisId}:abort Abort an analysis. create_cwl_analysis POST /api/projects/{projectId}/analysis:cwl Create and start an analysis for a CWL pipeline. create_cwl_analysis_with_json_input POST /api/projects/{projectId}/analysis:cwlWithJsonInput Create and start an analysis for a CWL pipeline with an input.json. create_cwl_analysis_with_structured_input POST /api/projects/{projectId}/analysis:cwlWithStructuredInput Create and start an analysis for a CWL pipeline with a structured input. create_cwl_json_analysis POST /api/projects/{projectId}/analysis:cwlJson Create and start an analysis for a JSON based CWL pipeline. create_nextflow_analysis POST /api/projects/{projectId}/analysis:nextflow Create and start an analysis for a Nextflow pipeline. create_nextflow_analysis_with_custom_input POST /api/projects/{projectId}/analysis:nextflowWithCustomInput Create and initiate an analysis for a Nextflow pipeline using a custom input, provided in either YAML format or an escaped JSON string. create_nextflow_json_analysis POST /api/projects/{projectId}/analysis:nextflowJson Create and start an analysis for a JSON based Nextflow pipeline. get_analyses GET /api/projects/{projectId}/analyses Retrieve the list of analyses. get_analysis GET /api/projects/{projectId}/analyses/{analysisId} Retrieve an analysis. get_analysis_configurations GET /api/projects/{projectId}/analyses/{analysisId}/configurations Retrieve the configurations of an analysis. get_analysis_inputs GET /api/projects/{projectId}/analyses/{analysisId}/inputs Retrieve the inputs of an analysis. get_analysis_outputs GET /api/projects/{projectId}/analyses/{analysisId}/outputs Retrieve the outputs of an analysis (limited to the first 200.000 files per output folder). When trying to retrieve the listed data with an endpoint such as GET /api/data/{dataUrn}, data which has already been deleted will be skipped. get_analysis_reports GET /api/projects/{projectId}/analyses/{analysisId}/reports Retrieve the report configs and associated reports. get_analysis_steps GET /api/projects/{projectId}/analyses/{analysisId}/steps Retrieve the individual steps of an analysis. get_analysis_usage_details GET /api/projects/{projectId}/analyses/{analysisId}/usage Retrieve the analysis usage details. get_cwl_input_json GET /api/projects/{projectId}/analyses/{analysisId}/cwl/inputJson Retrieve the input json of a CWL analysis. get_cwl_output_json GET /api/projects/{projectId}/analyses/{analysisId}/cwl/outputJson Retrieve the output json of a CWL analysis. get_project_analysis_input_form_values GET /api/projects/{projectId}/analyses/{analysisId}/inputFormValues Retrieve the values from an input form. get_raw_analysis_output GET /api/projects/{projectId}/analyses/{analysisId}/rawOutput Retrieve the raw output of an analysis. search_analyses POST /api/projects/{projectId}/analysis:search Search analyses. update_analysis PUT /api/projects/{projectId}/analyses/{analysisId} Update an analysis."},{"location":"v3/docs/ProjectAnalysisApi/#abort_analysis","title":"abort_analysis","text":"<p>abort_analysis(project_id, analysis_id)</p> <p>Abort an analysis.</p> <p>Endpoint for aborting an analysis. The status of the analysis is not updated immediately, only when the abortion of the analysis has actually started.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    analysis_id = 'analysis_id_example' # str | The ID of the analysis to abort\n\n    try:\n        # Abort an analysis.\n        api_instance.abort_analysis(project_id, analysis_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;abort_analysis: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to abort"},{"location":"v3/docs/ProjectAnalysisApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The analysis is successfully aborted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/#create_cwl_analysis","title":"create_cwl_analysis","text":"<p>AnalysisV4 create_cwl_analysis(project_id, create_cwl_analysis, idempotency_key=idempotency_key)</p> <p>Create and start an analysis for a CWL pipeline.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#changelog","title":"Changelog","text":"<p>For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#v3","title":"[V3]","text":"<ul> <li>Initial version</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#v4","title":"[V4]","text":"<ul> <li>Field type 'status' changed from enum to String. New statuses have been added: ['QUEUED', 'INITIALIZING', 'PREPARING_INPUTS', 'GENERATING_OUTPUTS', 'ABORTING'].</li> <li>Field analysisPriority changed from enum to String.</li> <li>The owner and tenant are now represented by Identifier objects.</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_v4 import AnalysisV4\nfrom libica.openapi.v3.models.create_cwl_analysis import CreateCwlAnalysis\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_cwl_analysis = libica.openapi.v3.CreateCwlAnalysis() # CreateCwlAnalysis | The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt;\n    idempotency_key = 'idempotency_key_example' # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    try:\n        # Create and start an analysis for a CWL pipeline.\n        api_response = api_instance.create_cwl_analysis(project_id, create_cwl_analysis, idempotency_key=idempotency_key)\n        print(\"The response of ProjectAnalysisApi-&gt;create_cwl_analysis:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_cwl_analysis: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str create_cwl_analysis CreateCwlAnalysis The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt; idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v3/docs/ProjectAnalysisApi/#return-type_1","title":"Return type","text":"<p>AnalysisV4</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json, application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 201 The analysis is successfully created and scheduled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/#create_cwl_analysis_with_json_input","title":"create_cwl_analysis_with_json_input","text":"<p>AnalysisV4 create_cwl_analysis_with_json_input(project_id, create_cwl_with_json_input_analysis, idempotency_key=idempotency_key)</p> <p>Create and start an analysis for a CWL pipeline with an input.json.</p> <p>This endpoint is intended to be used with an input.json and will bypass the input form. The combination of using this endpoint with an input.json for a json-form based pipeline with sensitive fields defined is not possible.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_v4 import AnalysisV4\nfrom libica.openapi.v3.models.create_cwl_with_json_input_analysis import CreateCwlWithJsonInputAnalysis\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_cwl_with_json_input_analysis = libica.openapi.v3.CreateCwlWithJsonInputAnalysis() # CreateCwlWithJsonInputAnalysis | The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt;\n    idempotency_key = 'idempotency_key_example' # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    try:\n        # Create and start an analysis for a CWL pipeline with an input.json.\n        api_response = api_instance.create_cwl_analysis_with_json_input(project_id, create_cwl_with_json_input_analysis, idempotency_key=idempotency_key)\n        print(\"The response of ProjectAnalysisApi-&gt;create_cwl_analysis_with_json_input:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_cwl_analysis_with_json_input: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str create_cwl_with_json_input_analysis CreateCwlWithJsonInputAnalysis The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt; idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v3/docs/ProjectAnalysisApi/#return-type_2","title":"Return type","text":"<p>AnalysisV4</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 201 The analysis is successfully created and scheduled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/#create_cwl_analysis_with_structured_input","title":"create_cwl_analysis_with_structured_input","text":"<p>AnalysisV4 create_cwl_analysis_with_structured_input(project_id, create_cwl_with_structured_input_analysis, idempotency_key=idempotency_key)</p> <p>Create and start an analysis for a CWL pipeline with a structured input.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_v4 import AnalysisV4\nfrom libica.openapi.v3.models.create_cwl_with_structured_input_analysis import CreateCwlWithStructuredInputAnalysis\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_cwl_with_structured_input_analysis = libica.openapi.v3.CreateCwlWithStructuredInputAnalysis() # CreateCwlWithStructuredInputAnalysis | The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt;\n    idempotency_key = 'idempotency_key_example' # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    try:\n        # Create and start an analysis for a CWL pipeline with a structured input.\n        api_response = api_instance.create_cwl_analysis_with_structured_input(project_id, create_cwl_with_structured_input_analysis, idempotency_key=idempotency_key)\n        print(\"The response of ProjectAnalysisApi-&gt;create_cwl_analysis_with_structured_input:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_cwl_analysis_with_structured_input: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str create_cwl_with_structured_input_analysis CreateCwlWithStructuredInputAnalysis The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt; idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v3/docs/ProjectAnalysisApi/#return-type_3","title":"Return type","text":"<p>AnalysisV4</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 201 The analysis is successfully created and scheduled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/#create_cwl_json_analysis","title":"create_cwl_json_analysis","text":"<p>AnalysisV4 create_cwl_json_analysis(project_id, create_cwl_json_analysis, idempotency_key=idempotency_key)</p> <p>Create and start an analysis for a JSON based CWL pipeline.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#example_4","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_v4 import AnalysisV4\nfrom libica.openapi.v3.models.create_cwl_json_analysis import CreateCwlJsonAnalysis\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_cwl_json_analysis = libica.openapi.v3.CreateCwlJsonAnalysis() # CreateCwlJsonAnalysis | The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt;\n    idempotency_key = 'idempotency_key_example' # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    try:\n        # Create and start an analysis for a JSON based CWL pipeline.\n        api_response = api_instance.create_cwl_json_analysis(project_id, create_cwl_json_analysis, idempotency_key=idempotency_key)\n        print(\"The response of ProjectAnalysisApi-&gt;create_cwl_json_analysis:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_cwl_json_analysis: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str create_cwl_json_analysis CreateCwlJsonAnalysis The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt; idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v3/docs/ProjectAnalysisApi/#return-type_4","title":"Return type","text":"<p>AnalysisV4</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization_4","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 201 The analysis is successfully created and scheduled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/#create_nextflow_analysis","title":"create_nextflow_analysis","text":"<p>AnalysisV4 create_nextflow_analysis(project_id, create_nextflow_analysis, idempotency_key=idempotency_key)</p> <p>Create and start an analysis for a Nextflow pipeline.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#changelog_1","title":"Changelog","text":"<p>For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#v3_1","title":"[V3]","text":"<ul> <li>Initial version</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#v4_1","title":"[V4]","text":"<ul> <li>Field type 'status' changed from enum to String. New statuses have been added: ['QUEUED', 'INITIALIZING', 'PREPARING_INPUTS', 'GENERATING_OUTPUTS', 'ABORTING'].</li> <li>Field analysisPriority changed from enum to String.</li> <li>The owner and tenant are now represented by Identifier objects.</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#example_5","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_v4 import AnalysisV4\nfrom libica.openapi.v3.models.create_nextflow_analysis import CreateNextflowAnalysis\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_nextflow_analysis = libica.openapi.v3.CreateNextflowAnalysis() # CreateNextflowAnalysis | The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt;\n    idempotency_key = 'idempotency_key_example' # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    try:\n        # Create and start an analysis for a Nextflow pipeline.\n        api_response = api_instance.create_nextflow_analysis(project_id, create_nextflow_analysis, idempotency_key=idempotency_key)\n        print(\"The response of ProjectAnalysisApi-&gt;create_nextflow_analysis:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_nextflow_analysis: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes project_id str create_nextflow_analysis CreateNextflowAnalysis The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt; idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v3/docs/ProjectAnalysisApi/#return-type_5","title":"Return type","text":"<p>AnalysisV4</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization_5","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 201 The analysis is successfully created and scheduled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/#create_nextflow_analysis_with_custom_input","title":"create_nextflow_analysis_with_custom_input","text":"<p>AnalysisV4 create_nextflow_analysis_with_custom_input(project_id, create_nextflow_with_custom_input_analysis, idempotency_key=idempotency_key)</p> <p>Create and initiate an analysis for a Nextflow pipeline using a custom input, provided in either YAML format or an escaped JSON string.</p> <p>This endpoint is intended to be used with a custom input and will bypass the input form. The combination of using this endpoint with a custom input for a json-form based pipeline with sensitive fields defined is not possible.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#example_6","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_v4 import AnalysisV4\nfrom libica.openapi.v3.models.create_nextflow_with_custom_input_analysis import CreateNextflowWithCustomInputAnalysis\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_nextflow_with_custom_input_analysis = libica.openapi.v3.CreateNextflowWithCustomInputAnalysis() # CreateNextflowWithCustomInputAnalysis | The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt;\n    idempotency_key = 'idempotency_key_example' # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    try:\n        # Create and initiate an analysis for a Nextflow pipeline using a custom input, provided in either YAML format or an escaped JSON string.\n        api_response = api_instance.create_nextflow_analysis_with_custom_input(project_id, create_nextflow_with_custom_input_analysis, idempotency_key=idempotency_key)\n        print(\"The response of ProjectAnalysisApi-&gt;create_nextflow_analysis_with_custom_input:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_nextflow_analysis_with_custom_input: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes project_id str create_nextflow_with_custom_input_analysis CreateNextflowWithCustomInputAnalysis The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt; idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v3/docs/ProjectAnalysisApi/#return-type_6","title":"Return type","text":"<p>AnalysisV4</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization_6","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 201 The analysis is successfully created and scheduled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/#create_nextflow_json_analysis","title":"create_nextflow_json_analysis","text":"<p>AnalysisV4 create_nextflow_json_analysis(project_id, create_nextflow_json_analysis, idempotency_key=idempotency_key)</p> <p>Create and start an analysis for a JSON based Nextflow pipeline.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#example_7","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_v4 import AnalysisV4\nfrom libica.openapi.v3.models.create_nextflow_json_analysis import CreateNextflowJsonAnalysis\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_nextflow_json_analysis = libica.openapi.v3.CreateNextflowJsonAnalysis() # CreateNextflowJsonAnalysis | The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt;\n    idempotency_key = 'idempotency_key_example' # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    try:\n        # Create and start an analysis for a JSON based Nextflow pipeline.\n        api_response = api_instance.create_nextflow_json_analysis(project_id, create_nextflow_json_analysis, idempotency_key=idempotency_key)\n        print(\"The response of ProjectAnalysisApi-&gt;create_nextflow_json_analysis:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;create_nextflow_json_analysis: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes project_id str create_nextflow_json_analysis CreateNextflowJsonAnalysis The following options can be used for actionOnExist:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Overwrite (default): If a file with that name already exists, it is overwritten.&lt;/li&gt;&lt;li&gt;Rename: If a file with that name already exists, an incremental counter is appended to the file name.&lt;/li&gt;&lt;li&gt;Skip: If a file with that name already exists, the new file is not saved and the data is discarded.&lt;/li&gt;&lt;/ul&gt; idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v3/docs/ProjectAnalysisApi/#return-type_7","title":"Return type","text":"<p>AnalysisV4</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization_7","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 201 The analysis is successfully created and scheduled. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/#get_analyses","title":"get_analyses","text":"<p>AnalysisPagedListV3 get_analyses(project_id, reference=reference, userreference=userreference, status=status, usertag=usertag, technicaltag=technicaltag, referencetag=referencetag, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)</p> <p>Retrieve the list of analyses.</p> <p>This endpoint only returns V3 items. Use the search endpoint to get V4 items.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#example_8","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_paged_list_v3 import AnalysisPagedListV3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    reference = 'reference_example' # str | The reference to filter on. (optional)\n    userreference = 'userreference_example' # str | The user-reference to filter on. (optional)\n    status = 'status_example' # str | The status to filter on. (optional)\n    usertag = 'usertag_example' # str | The user-tags to filter on. (optional)\n    technicaltag = 'technicaltag_example' # str | The technical-tags to filter on. (optional)\n    referencetag = 'referencetag_example' # str | The reference-data-tags to filter on. (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary  (optional)\n\n    try:\n        # Retrieve the list of analyses.\n        api_response = api_instance.get_analyses(project_id, reference=reference, userreference=userreference, status=status, usertag=usertag, technicaltag=technicaltag, referencetag=referencetag, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        print(\"The response of ProjectAnalysisApi-&gt;get_analyses:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analyses: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes project_id str reference str The reference to filter on. [optional] userreference str The user-reference to filter on. [optional] status str The status to filter on. [optional] usertag str The user-tags to filter on. [optional] technicaltag str The technical-tags to filter on. [optional] referencetag str The reference-data-tags to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary [optional]"},{"location":"v3/docs/ProjectAnalysisApi/#return-type_8","title":"Return type","text":"<p>AnalysisPagedListV3</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization_8","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project analyses is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/#get_analysis","title":"get_analysis","text":"<p>AnalysisV4 get_analysis(project_id, analysis_id)</p> <p>Retrieve an analysis.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#changelog_2","title":"Changelog","text":"<p>For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#v3_2","title":"[V3]","text":"<ul> <li>Initial version</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#v4_2","title":"[V4]","text":"<ul> <li>Field type 'status' changed from enum to String. New statuses have been added: ['QUEUED', 'INITIALIZING', 'PREPARING_INPUTS', 'GENERATING_OUTPUTS', 'ABORTING'].</li> <li>Field analysisPriority changed from enum to String.</li> <li>The owner and tenant are now represented by Identifier objects.</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#example_9","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_v4 import AnalysisV4\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    analysis_id = 'analysis_id_example' # str | The ID of the analysis to retrieve\n\n    try:\n        # Retrieve an analysis.\n        api_response = api_instance.get_analysis(project_id, analysis_id)\n        print(\"The response of ProjectAnalysisApi-&gt;get_analysis:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analysis: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters_9","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve"},{"location":"v3/docs/ProjectAnalysisApi/#return-type_9","title":"Return type","text":"<p>AnalysisV4</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization_9","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers_9","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details_9","title":"HTTP response details","text":"Status code Description Response headers 200 The analysis is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/#get_analysis_configurations","title":"get_analysis_configurations","text":"<p>ExecutionConfigurationList get_analysis_configurations(project_id, analysis_id)</p> <p>Retrieve the configurations of an analysis.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#example_10","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.execution_configuration_list import ExecutionConfigurationList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    analysis_id = 'analysis_id_example' # str | The ID of the analysis to retrieve the configuration for\n\n    try:\n        # Retrieve the configurations of an analysis.\n        api_response = api_instance.get_analysis_configurations(project_id, analysis_id)\n        print(\"The response of ProjectAnalysisApi-&gt;get_analysis_configurations:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analysis_configurations: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters_10","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the configuration for"},{"location":"v3/docs/ProjectAnalysisApi/#return-type_10","title":"Return type","text":"<p>ExecutionConfigurationList</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization_10","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers_10","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details_10","title":"HTTP response details","text":"Status code Description Response headers 200 The configurations of the analysis are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/#get_analysis_inputs","title":"get_analysis_inputs","text":"<p>AnalysisInputList get_analysis_inputs(project_id, analysis_id)</p> <p>Retrieve the inputs of an analysis.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#example_11","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_input_list import AnalysisInputList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    analysis_id = 'analysis_id_example' # str | The ID of the analysis to retrieve the inputs for\n\n    try:\n        # Retrieve the inputs of an analysis.\n        api_response = api_instance.get_analysis_inputs(project_id, analysis_id)\n        print(\"The response of ProjectAnalysisApi-&gt;get_analysis_inputs:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analysis_inputs: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters_11","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the inputs for"},{"location":"v3/docs/ProjectAnalysisApi/#return-type_11","title":"Return type","text":"<p>AnalysisInputList</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization_11","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers_11","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details_11","title":"HTTP response details","text":"Status code Description Response headers 200 The inputs of the analysis are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/#get_analysis_outputs","title":"get_analysis_outputs","text":"<p>AnalysisOutputList get_analysis_outputs(project_id, analysis_id)</p> <p>Retrieve the outputs of an analysis (limited to the first 200.000 files per output folder). When trying to retrieve the listed data with an endpoint such as GET /api/data/{dataUrn}, data which has already been deleted will be skipped.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#example_12","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_output_list import AnalysisOutputList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    analysis_id = 'analysis_id_example' # str | The ID of the analysis to retrieve the outputs for\n\n    try:\n        # Retrieve the outputs of an analysis (limited to the first 200.000 files per output folder). When trying to retrieve the listed data with an endpoint such as GET /api/data/{dataUrn}, data which has already been deleted will be skipped.\n        api_response = api_instance.get_analysis_outputs(project_id, analysis_id)\n        print(\"The response of ProjectAnalysisApi-&gt;get_analysis_outputs:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analysis_outputs: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters_12","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the outputs for"},{"location":"v3/docs/ProjectAnalysisApi/#return-type_12","title":"Return type","text":"<p>AnalysisOutputList</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization_12","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers_12","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details_12","title":"HTTP response details","text":"Status code Description Response headers 200 The outputs of the analysis are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/#get_analysis_reports","title":"get_analysis_reports","text":"<p>AnalysisReportEntryList get_analysis_reports(project_id, analysis_id)</p> <p>Retrieve the report configs and associated reports.</p> <p>Retrieves the reports which match the report config defined in a pipeline.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#example_13","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_report_entry_list import AnalysisReportEntryList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    analysis_id = 'analysis_id_example' # str | The ID of the analysis to retrieve the reports for\n\n    try:\n        # Retrieve the report configs and associated reports.\n        api_response = api_instance.get_analysis_reports(project_id, analysis_id)\n        print(\"The response of ProjectAnalysisApi-&gt;get_analysis_reports:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analysis_reports: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters_13","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the reports for"},{"location":"v3/docs/ProjectAnalysisApi/#return-type_13","title":"Return type","text":"<p>AnalysisReportEntryList</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization_13","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers_13","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details_13","title":"HTTP response details","text":"Status code Description Response headers 200 The reports are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/#get_analysis_steps","title":"get_analysis_steps","text":"<p>AnalysisStepList get_analysis_steps(project_id, analysis_id)</p> <p>Retrieve the individual steps of an analysis.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#example_14","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_step_list import AnalysisStepList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    analysis_id = 'analysis_id_example' # str | The ID of the analysis to retrieve the individual steps for\n\n    try:\n        # Retrieve the individual steps of an analysis.\n        api_response = api_instance.get_analysis_steps(project_id, analysis_id)\n        print(\"The response of ProjectAnalysisApi-&gt;get_analysis_steps:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analysis_steps: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters_14","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the individual steps for"},{"location":"v3/docs/ProjectAnalysisApi/#return-type_14","title":"Return type","text":"<p>AnalysisStepList</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization_14","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers_14","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details_14","title":"HTTP response details","text":"Status code Description Response headers 200 The individual steps of the analysis are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/#get_analysis_usage_details","title":"get_analysis_usage_details","text":"<p>AnalysisUsageDetails get_analysis_usage_details(project_id, analysis_id)</p> <p>Retrieve the analysis usage details.</p> <p>The usage details can be retrieved once the analysis has completed with status SUCCEEDED or FAILED. It may take several minutes for the information to become available. A 404 status indicates that the system is busy processing the information.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#example_15","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_usage_details import AnalysisUsageDetails\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    analysis_id = 'analysis_id_example' # str | The ID of the analysis to retrieve the usage details for\n\n    try:\n        # Retrieve the analysis usage details.\n        api_response = api_instance.get_analysis_usage_details(project_id, analysis_id)\n        print(\"The response of ProjectAnalysisApi-&gt;get_analysis_usage_details:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_analysis_usage_details: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters_15","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the usage details for"},{"location":"v3/docs/ProjectAnalysisApi/#return-type_15","title":"Return type","text":"<p>AnalysisUsageDetails</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization_15","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers_15","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details_15","title":"HTTP response details","text":"Status code Description Response headers 200 The analysis usage details are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/#get_cwl_input_json","title":"get_cwl_input_json","text":"<p>CwlAnalysisInputJson get_cwl_input_json(project_id, analysis_id)</p> <p>Retrieve the input json of a CWL analysis.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#example_16","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.cwl_analysis_input_json import CwlAnalysisInputJson\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    analysis_id = 'analysis_id_example' # str | The ID of the CWL analysis for which to retrieve the input json\n\n    try:\n        # Retrieve the input json of a CWL analysis.\n        api_response = api_instance.get_cwl_input_json(project_id, analysis_id)\n        print(\"The response of ProjectAnalysisApi-&gt;get_cwl_input_json:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_cwl_input_json: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters_16","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the CWL analysis for which to retrieve the input json"},{"location":"v3/docs/ProjectAnalysisApi/#return-type_16","title":"Return type","text":"<p>CwlAnalysisInputJson</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization_16","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers_16","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details_16","title":"HTTP response details","text":"Status code Description Response headers 200 The input json of the CWL analysis is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/#get_cwl_output_json","title":"get_cwl_output_json","text":"<p>CwlAnalysisOutputJson get_cwl_output_json(project_id, analysis_id)</p> <p>Retrieve the output json of a CWL analysis.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#example_17","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.cwl_analysis_output_json import CwlAnalysisOutputJson\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    analysis_id = 'analysis_id_example' # str | The ID of the CWL analysis for which to retrieve the output json\n\n    try:\n        # Retrieve the output json of a CWL analysis.\n        api_response = api_instance.get_cwl_output_json(project_id, analysis_id)\n        print(\"The response of ProjectAnalysisApi-&gt;get_cwl_output_json:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_cwl_output_json: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters_17","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the CWL analysis for which to retrieve the output json"},{"location":"v3/docs/ProjectAnalysisApi/#return-type_17","title":"Return type","text":"<p>CwlAnalysisOutputJson</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization_17","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers_17","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details_17","title":"HTTP response details","text":"Status code Description Response headers 200 The output json of the CWL analysis is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/#get_project_analysis_input_form_values","title":"get_project_analysis_input_form_values","text":"<p>InputFormFieldList get_project_analysis_input_form_values(project_id, analysis_id)</p> <p>Retrieve the values from an input form.</p> <p>Retrieve the values from an input form of a JSON based pipeline used to start an analysis.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#example_18","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.input_form_field_list import InputFormFieldList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    analysis_id = 'analysis_id_example' # str | The ID of the analysis to retrieve the input form values from\n\n    try:\n        # Retrieve the values from an input form.\n        api_response = api_instance.get_project_analysis_input_form_values(project_id, analysis_id)\n        print(\"The response of ProjectAnalysisApi-&gt;get_project_analysis_input_form_values:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_project_analysis_input_form_values: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters_18","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis to retrieve the input form values from"},{"location":"v3/docs/ProjectAnalysisApi/#return-type_18","title":"Return type","text":"<p>InputFormFieldList</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization_18","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers_18","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details_18","title":"HTTP response details","text":"Status code Description Response headers 200 The input form values are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/#get_raw_analysis_output","title":"get_raw_analysis_output","text":"<p>AnalysisRawOutput get_raw_analysis_output(project_id, analysis_id)</p> <p>Retrieve the raw output of an analysis.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#example_19","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_raw_output import AnalysisRawOutput\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    analysis_id = 'analysis_id_example' # str | The ID of the analysis for which to retrieve the raw output\n\n    try:\n        # Retrieve the raw output of an analysis.\n        api_response = api_instance.get_raw_analysis_output(project_id, analysis_id)\n        print(\"The response of ProjectAnalysisApi-&gt;get_raw_analysis_output:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;get_raw_analysis_output: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters_19","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str The ID of the analysis for which to retrieve the raw output"},{"location":"v3/docs/ProjectAnalysisApi/#return-type_19","title":"Return type","text":"<p>AnalysisRawOutput</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization_19","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers_19","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details_19","title":"HTTP response details","text":"Status code Description Response headers 200 The raw output of the analysis is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/#search_analyses","title":"search_analyses","text":"<p>AnalysisPagedListV4 search_analyses(project_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort, analysis_query_parameters=analysis_query_parameters)</p> <p>Search analyses.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#example_20","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_paged_list_v4 import AnalysisPagedListV4\nfrom libica.openapi.v3.models.analysis_query_parameters import AnalysisQueryParameters\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary  (optional)\n    analysis_query_parameters = libica.openapi.v3.AnalysisQueryParameters() # AnalysisQueryParameters |  (optional)\n\n    try:\n        # Search analyses.\n        api_response = api_instance.search_analyses(project_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort, analysis_query_parameters=analysis_query_parameters)\n        print(\"The response of ProjectAnalysisApi-&gt;search_analyses:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;search_analyses: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters_20","title":"Parameters","text":"Name Type Description Notes project_id str page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary [optional] analysis_query_parameters AnalysisQueryParameters [optional]"},{"location":"v3/docs/ProjectAnalysisApi/#return-type_20","title":"Return type","text":"<p>AnalysisPagedListV4</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization_20","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers_20","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details_20","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project analyses is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisApi/#update_analysis","title":"update_analysis","text":"<p>AnalysisV4 update_analysis(project_id, analysis_id, analysis_v4, if_match=if_match)</p> <p>Update an analysis.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#attributes-which-can-be-updated","title":"Attributes which can be updated:","text":"<ul> <li>tags</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#changelog_3","title":"Changelog","text":"<p>For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.</p>"},{"location":"v3/docs/ProjectAnalysisApi/#v3_3","title":"[V3]","text":"<ul> <li>Initial version</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#v4_3","title":"[V4]","text":"<ul> <li>Field type 'status' changed from enum to String. New statuses have been added: ['QUEUED', 'INITIALIZING', 'PREPARING_INPUTS', 'GENERATING_OUTPUTS', 'ABORTING'].</li> <li>Field analysisPriority changed from enum to String.</li> <li>The owner and tenant are now represented by Identifier objects.</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#example_21","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_v4 import AnalysisV4\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisApi(api_client)\n    project_id = 'project_id_example' # str | \n    analysis_id = 'analysis_id_example' # str | \n    analysis_v4 = libica.openapi.v3.AnalysisV4() # AnalysisV4 | \n    if_match = 'if_match_example' # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n\n    try:\n        # Update an analysis.\n        api_response = api_instance.update_analysis(project_id, analysis_id, analysis_v4, if_match=if_match)\n        print(\"The response of ProjectAnalysisApi-&gt;update_analysis:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisApi-&gt;update_analysis: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisApi/#parameters_21","title":"Parameters","text":"Name Type Description Notes project_id str analysis_id str analysis_v4 AnalysisV4 if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional]"},{"location":"v3/docs/ProjectAnalysisApi/#return-type_21","title":"Return type","text":"<p>AnalysisV4</p>"},{"location":"v3/docs/ProjectAnalysisApi/#authorization_21","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisApi/#http-request-headers_21","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json, application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisApi/#http-response-details_21","title":"HTTP response details","text":"Status code Description Response headers 200 The analysis is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/","title":"libica.openapi.v3.ProjectAnalysisCreationBatchApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_analysis_creation_batch POST /api/projects/{projectId}/analysisCreationBatch Create and start multiple analyses in batch. get_analysis_creation_batch GET /api/projects/{projectId}/analysisCreationBatch/{batchId} Retrieve a analysis creation batch. get_analysis_creation_batch_item GET /api/projects/{projectId}/analysisCreationBatch/{batchId}/items/{itemId} Retrieve a analysis creation batch item. get_analysis_creation_batch_items GET /api/projects/{projectId}/analysisCreationBatch/{batchId}/items Retrieve a list of analysis creation batch items."},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#create_analysis_creation_batch","title":"create_analysis_creation_batch","text":"<p>AnalysisCreationBatch create_analysis_creation_batch(project_id, create_analysis_creation_batch, idempotency_key=idempotency_key)</p> <p>Create and start multiple analyses in batch.</p>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_creation_batch import AnalysisCreationBatch\nfrom libica.openapi.v3.models.create_analysis_creation_batch import CreateAnalysisCreationBatch\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisCreationBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_analysis_creation_batch = libica.openapi.v3.CreateAnalysisCreationBatch() # CreateAnalysisCreationBatch | \n    idempotency_key = 'idempotency_key_example' # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    try:\n        # Create and start multiple analyses in batch.\n        api_response = api_instance.create_analysis_creation_batch(project_id, create_analysis_creation_batch, idempotency_key=idempotency_key)\n        print(\"The response of ProjectAnalysisCreationBatchApi-&gt;create_analysis_creation_batch:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisCreationBatchApi-&gt;create_analysis_creation_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str create_analysis_creation_batch CreateAnalysisCreationBatch idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#return-type","title":"Return type","text":"<p>AnalysisCreationBatch</p>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The analyses are scheduled for creation. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#get_analysis_creation_batch","title":"get_analysis_creation_batch","text":"<p>AnalysisCreationBatch get_analysis_creation_batch(project_id, batch_id)</p> <p>Retrieve a analysis creation batch.</p>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_creation_batch import AnalysisCreationBatch\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisCreationBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    batch_id = 'batch_id_example' # str | The ID of the analysis creation batch\n\n    try:\n        # Retrieve a analysis creation batch.\n        api_response = api_instance.get_analysis_creation_batch(project_id, batch_id)\n        print(\"The response of ProjectAnalysisCreationBatchApi-&gt;get_analysis_creation_batch:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisCreationBatchApi-&gt;get_analysis_creation_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str The ID of the analysis creation batch"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#return-type_1","title":"Return type","text":"<p>AnalysisCreationBatch</p>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The analysis creation batch is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#get_analysis_creation_batch_item","title":"get_analysis_creation_batch_item","text":"<p>AnalysisCreationBatchItemV4 get_analysis_creation_batch_item(project_id, batch_id, item_id)</p> <p>Retrieve a analysis creation batch item.</p>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#changelog","title":"Changelog","text":"<p>For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.</p>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#v3","title":"[V3]","text":"<p>Initial version</p>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#v4","title":"[V4]","text":"<p>Field 'createdAnalysis' changes:  * Field type 'status' changed from enum to String. New statuses have been added: ['QUEUED', 'INITIALIZING', 'PREPARING_INPUTS', 'GENERATING_OUTPUTS', 'ABORTING'].  * Field analysisPriority changed from enum to String.  * The owner and tenant are now represented by Identifier objects.</p>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_creation_batch_item_v4 import AnalysisCreationBatchItemV4\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisCreationBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    batch_id = 'batch_id_example' # str | The ID of the analysis creation batch\n    item_id = 'item_id_example' # str | The ID of the analysis creation batch item\n\n    try:\n        # Retrieve a analysis creation batch item.\n        api_response = api_instance.get_analysis_creation_batch_item(project_id, batch_id, item_id)\n        print(\"The response of ProjectAnalysisCreationBatchApi-&gt;get_analysis_creation_batch_item:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisCreationBatchApi-&gt;get_analysis_creation_batch_item: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str The ID of the analysis creation batch item_id str The ID of the analysis creation batch item"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#return-type_2","title":"Return type","text":"<p>AnalysisCreationBatchItemV4</p>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The analysis creation batch item is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#get_analysis_creation_batch_items","title":"get_analysis_creation_batch_items","text":"<p>AnalysisCreationBatchItemPagedListV4 get_analysis_creation_batch_items(project_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size)</p> <p>Retrieve a list of analysis creation batch items.</p>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#changelog_1","title":"Changelog","text":"<p>For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.</p>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#v3_1","title":"[V3]","text":"<ul> <li>Initial version</li> </ul>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#v4_1","title":"[V4]","text":""},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#item-field-createdanalysis-changes","title":"Item field 'createdAnalysis' changes:","text":"<ul> <li>Field type 'status' changed from enum to String. New statuses have been added: ['QUEUED', 'INITIALIZING', 'PREPARING_INPUTS', 'GENERATING_OUTPUTS', 'ABORTING'].</li> <li>Field analysisPriority changed from enum to String.</li> <li>The owner and tenant are now represented by Identifier objects.</li> </ul>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_creation_batch_item_paged_list_v4 import AnalysisCreationBatchItemPagedListV4\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisCreationBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    batch_id = 'batch_id_example' # str | The ID of the analysis creation batch\n    status = ['status_example'] # List[str] | The statuses to filter on. (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n\n    try:\n        # Retrieve a list of analysis creation batch items.\n        api_response = api_instance.get_analysis_creation_batch_items(project_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size)\n        print(\"The response of ProjectAnalysisCreationBatchApi-&gt;get_analysis_creation_batch_items:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisCreationBatchApi-&gt;get_analysis_creation_batch_items: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str The ID of the analysis creation batch status List[str] The statuses to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional]"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#return-type_3","title":"Return type","text":"<p>AnalysisCreationBatchItemPagedListV4</p>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisCreationBatchApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of analysis creation batch items is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectAnalysisStorageApi/","title":"libica.openapi.v3.ProjectAnalysisStorageApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_project_analysis_storage_options GET /api/projects/{projectId}/analysisStorages Retrieve the list of project analysis storage options."},{"location":"v3/docs/ProjectAnalysisStorageApi/#get_project_analysis_storage_options","title":"get_project_analysis_storage_options","text":"<p>AnalysisStorageListV4 get_project_analysis_storage_options(project_id)</p> <p>Retrieve the list of project analysis storage options.</p>"},{"location":"v3/docs/ProjectAnalysisStorageApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_storage_list_v4 import AnalysisStorageListV4\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectAnalysisStorageApi(api_client)\n    project_id = 'project_id_example' # str | \n\n    try:\n        # Retrieve the list of project analysis storage options.\n        api_response = api_instance.get_project_analysis_storage_options(project_id)\n        print(\"The response of ProjectAnalysisStorageApi-&gt;get_project_analysis_storage_options:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectAnalysisStorageApi-&gt;get_project_analysis_storage_options: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectAnalysisStorageApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v3/docs/ProjectAnalysisStorageApi/#return-type","title":"Return type","text":"<p>AnalysisStorageListV4</p>"},{"location":"v3/docs/ProjectAnalysisStorageApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectAnalysisStorageApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v3/docs/ProjectAnalysisStorageApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project analysis storage options is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectApi/","title":"libica.openapi.v3.ProjectApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description change_project_owner POST /api/projects/{projectId}:changeOwner Change the project owner. create_project POST /api/projects Create a new project. get_project GET /api/projects/{projectId} Retrieve a project. get_project_bundle GET /api/projects/{projectId}/bundles/{bundleId} Retrieve a project bundle. get_project_bundles GET /api/projects/{projectId}/bundles Retrieve project bundles. get_projects GET /api/projects Retrieve a list of projects. hide_project POST /api/projects/{projectId}:hide Hide a project. link_project_bundle POST /api/projects/{projectId}/bundles/{bundleId} Link a bundle to a project. unlink_project_bundle DELETE /api/projects/{projectId}/bundles/{bundleId} Unlink a bundle from a project. update_project PUT /api/projects/{projectId} Update a project."},{"location":"v3/docs/ProjectApi/#change_project_owner","title":"change_project_owner","text":"<p>change_project_owner(project_id, change_project_owner)</p> <p>Change the project owner.</p>"},{"location":"v3/docs/ProjectApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.change_project_owner import ChangeProjectOwner\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectApi(api_client)\n    project_id = 'project_id_example' # str | \n    change_project_owner = libica.openapi.v3.ChangeProjectOwner() # ChangeProjectOwner | \n\n    try:\n        # Change the project owner.\n        api_instance.change_project_owner(project_id, change_project_owner)\n    except Exception as e:\n        print(\"Exception when calling ProjectApi-&gt;change_project_owner: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str change_project_owner ChangeProjectOwner"},{"location":"v3/docs/ProjectApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The project owner is changed. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectApi/#create_project","title":"create_project","text":"<p>Project create_project(create_project)</p> <p>Create a new project.</p>"},{"location":"v3/docs/ProjectApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_project import CreateProject\nfrom libica.openapi.v3.models.project import Project\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectApi(api_client)\n    create_project = libica.openapi.v3.CreateProject() # CreateProject | \n\n    try:\n        # Create a new project.\n        api_response = api_instance.create_project(create_project)\n        print(\"The response of ProjectApi-&gt;create_project:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectApi-&gt;create_project: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes create_project CreateProject"},{"location":"v3/docs/ProjectApi/#return-type_1","title":"Return type","text":"<p>Project</p>"},{"location":"v3/docs/ProjectApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 201 The project is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectApi/#get_project","title":"get_project","text":"<p>Project get_project(project_id)</p> <p>Retrieve a project.</p>"},{"location":"v3/docs/ProjectApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project import Project\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectApi(api_client)\n    project_id = 'project_id_example' # str | \n\n    try:\n        # Retrieve a project.\n        api_response = api_instance.get_project(project_id)\n        print(\"The response of ProjectApi-&gt;get_project:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectApi-&gt;get_project: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v3/docs/ProjectApi/#return-type_2","title":"Return type","text":"<p>Project</p>"},{"location":"v3/docs/ProjectApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The project is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectApi/#get_project_bundle","title":"get_project_bundle","text":"<p>ProjectBundle get_project_bundle(project_id, bundle_id)</p> <p>Retrieve a project bundle.</p>"},{"location":"v3/docs/ProjectApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_bundle import ProjectBundle\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectApi(api_client)\n    project_id = 'project_id_example' # str | \n    bundle_id = 'bundle_id_example' # str | \n\n    try:\n        # Retrieve a project bundle.\n        api_response = api_instance.get_project_bundle(project_id, bundle_id)\n        print(\"The response of ProjectApi-&gt;get_project_bundle:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectApi-&gt;get_project_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str bundle_id str"},{"location":"v3/docs/ProjectApi/#return-type_3","title":"Return type","text":"<p>ProjectBundle</p>"},{"location":"v3/docs/ProjectApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The project bundle is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectApi/#get_project_bundles","title":"get_project_bundles","text":"<p>ProjectBundleList get_project_bundles(project_id)</p> <p>Retrieve project bundles.</p>"},{"location":"v3/docs/ProjectApi/#example_4","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_bundle_list import ProjectBundleList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectApi(api_client)\n    project_id = 'project_id_example' # str | \n\n    try:\n        # Retrieve project bundles.\n        api_response = api_instance.get_project_bundles(project_id)\n        print(\"The response of ProjectApi-&gt;get_project_bundles:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectApi-&gt;get_project_bundles: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v3/docs/ProjectApi/#return-type_4","title":"Return type","text":"<p>ProjectBundleList</p>"},{"location":"v3/docs/ProjectApi/#authorization_4","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The project bundles are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectApi/#get_projects","title":"get_projects","text":"<p>ProjectPagedList get_projects(search=search, user_tags=user_tags, technical_tags=technical_tags, include_hidden_projects=include_hidden_projects, region=region, workgroups=workgroups, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)</p> <p>Retrieve a list of projects.</p>"},{"location":"v3/docs/ProjectApi/#example_5","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_paged_list import ProjectPagedList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectApi(api_client)\n    search = 'search_example' # str | Search (optional)\n    user_tags = ['user_tags_example'] # List[str] | User tags to filter on (optional)\n    technical_tags = ['technical_tags_example'] # List[str] | Technical tags to filter on (optional)\n    include_hidden_projects = False # bool | Include hidden projects. (optional) (default to False)\n    region = 'region_example' # str | The ID of the region to filter on. (optional)\n    workgroups = ['workgroups_example'] # List[str] | Workgroup IDs to filter on (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - name - shortDescription - information (optional)\n\n    try:\n        # Retrieve a list of projects.\n        api_response = api_instance.get_projects(search=search, user_tags=user_tags, technical_tags=technical_tags, include_hidden_projects=include_hidden_projects, region=region, workgroups=workgroups, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        print(\"The response of ProjectApi-&gt;get_projects:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectApi-&gt;get_projects: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes search str Search [optional] user_tags List[str] User tags to filter on [optional] technical_tags List[str] Technical tags to filter on [optional] include_hidden_projects bool Include hidden projects. [optional] [default to False] region str The ID of the region to filter on. [optional] workgroups List[str] Workgroup IDs to filter on [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - name - shortDescription - information [optional]"},{"location":"v3/docs/ProjectApi/#return-type_5","title":"Return type","text":"<p>ProjectPagedList</p>"},{"location":"v3/docs/ProjectApi/#authorization_5","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 200 The list of projects is successfully retrieved - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectApi/#hide_project","title":"hide_project","text":"<p>hide_project(project_id)</p> <p>Hide a project.</p>"},{"location":"v3/docs/ProjectApi/#example_6","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectApi(api_client)\n    project_id = 'project_id_example' # str | \n\n    try:\n        # Hide a project.\n        api_instance.hide_project(project_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectApi-&gt;hide_project: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v3/docs/ProjectApi/#return-type_6","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectApi/#authorization_6","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 204 The project is hidden. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectApi/#link_project_bundle","title":"link_project_bundle","text":"<p>ProjectBundle link_project_bundle(project_id, bundle_id)</p> <p>Link a bundle to a project.</p>"},{"location":"v3/docs/ProjectApi/#example_7","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_bundle import ProjectBundle\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectApi(api_client)\n    project_id = 'project_id_example' # str | \n    bundle_id = 'bundle_id_example' # str | \n\n    try:\n        # Link a bundle to a project.\n        api_response = api_instance.link_project_bundle(project_id, bundle_id)\n        print(\"The response of ProjectApi-&gt;link_project_bundle:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectApi-&gt;link_project_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes project_id str bundle_id str"},{"location":"v3/docs/ProjectApi/#return-type_7","title":"Return type","text":"<p>ProjectBundle</p>"},{"location":"v3/docs/ProjectApi/#authorization_7","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 200 The bundle is successfully linked to the project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectApi/#unlink_project_bundle","title":"unlink_project_bundle","text":"<p>unlink_project_bundle(project_id, bundle_id)</p> <p>Unlink a bundle from a project.</p>"},{"location":"v3/docs/ProjectApi/#example_8","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectApi(api_client)\n    project_id = 'project_id_example' # str | \n    bundle_id = 'bundle_id_example' # str | \n\n    try:\n        # Unlink a bundle from a project.\n        api_instance.unlink_project_bundle(project_id, bundle_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectApi-&gt;unlink_project_bundle: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes project_id str bundle_id str"},{"location":"v3/docs/ProjectApi/#return-type_8","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectApi/#authorization_8","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 200 The bundle is successfully unlinked from the project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectApi/#update_project","title":"update_project","text":"<p>Project update_project(project_id, project, if_match=if_match)</p> <p>Update a project.</p> <p>Fields which can be updated: - shortDescription - projectInformation - billingMode - dataSharingEnabled - tags - storageBundle - metaDataModel - analysisPriority</p>"},{"location":"v3/docs/ProjectApi/#example_9","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project import Project\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectApi(api_client)\n    project_id = 'project_id_example' # str | \n    project = libica.openapi.v3.Project() # Project | \n    if_match = 'if_match_example' # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n\n    try:\n        # Update a project.\n        api_response = api_instance.update_project(project_id, project, if_match=if_match)\n        print(\"The response of ProjectApi-&gt;update_project:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectApi-&gt;update_project: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectApi/#parameters_9","title":"Parameters","text":"Name Type Description Notes project_id str project Project if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional]"},{"location":"v3/docs/ProjectApi/#return-type_9","title":"Return type","text":"<p>Project</p>"},{"location":"v3/docs/ProjectApi/#authorization_9","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectApi/#http-request-headers_9","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectApi/#http-response-details_9","title":"HTTP response details","text":"Status code Description Response headers 200 The project is successfully update. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectBaseApi/","title":"libica.openapi.v3.ProjectBaseApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_base_connection_details POST /api/projects/{projectId}/base:connectionDetails Creates the connection details to snowflake instance. get_base_job GET /api/projects/{projectId}/base/jobs/{baseJobId} Retrieve a base job. get_base_jobs GET /api/projects/{projectId}/base/jobs Retrieve a list of base jobs get_base_tables GET /api/projects/{projectId}/base/tables Retrieve a list of base tables. load_data POST /api/projects/{projectId}/base/tables/{tableId}:loadData Load data in a base table."},{"location":"v3/docs/ProjectBaseApi/#create_base_connection_details","title":"create_base_connection_details","text":"<p>BaseConnection create_base_connection_details(project_id)</p> <p>Creates the connection details to snowflake instance.</p>"},{"location":"v3/docs/ProjectBaseApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.base_connection import BaseConnection\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectBaseApi(api_client)\n    project_id = 'project_id_example' # str | \n\n    try:\n        # Creates the connection details to snowflake instance.\n        api_response = api_instance.create_base_connection_details(project_id)\n        print(\"The response of ProjectBaseApi-&gt;create_base_connection_details:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectBaseApi-&gt;create_base_connection_details: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectBaseApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v3/docs/ProjectBaseApi/#return-type","title":"Return type","text":"<p>BaseConnection</p>"},{"location":"v3/docs/ProjectBaseApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectBaseApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectBaseApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The base connection details are created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectBaseApi/#get_base_job","title":"get_base_job","text":"<p>BaseJob get_base_job(project_id, base_job_id)</p> <p>Retrieve a base job.</p>"},{"location":"v3/docs/ProjectBaseApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.base_job import BaseJob\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectBaseApi(api_client)\n    project_id = 'project_id_example' # str | \n    base_job_id = 'base_job_id_example' # str | \n\n    try:\n        # Retrieve a base job.\n        api_response = api_instance.get_base_job(project_id, base_job_id)\n        print(\"The response of ProjectBaseApi-&gt;get_base_job:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectBaseApi-&gt;get_base_job: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectBaseApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str base_job_id str"},{"location":"v3/docs/ProjectBaseApi/#return-type_1","title":"Return type","text":"<p>BaseJob</p>"},{"location":"v3/docs/ProjectBaseApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectBaseApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectBaseApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The base job is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectBaseApi/#get_base_jobs","title":"get_base_jobs","text":"<p>BaseJobList get_base_jobs(project_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)</p> <p>Retrieve a list of base jobs</p>"},{"location":"v3/docs/ProjectBaseApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.base_job_list import BaseJobList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectBaseApi(api_client)\n    project_id = 'project_id_example' # str | \n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - description - type (optional)\n\n    try:\n        # Retrieve a list of base jobs\n        api_response = api_instance.get_base_jobs(project_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        print(\"The response of ProjectBaseApi-&gt;get_base_jobs:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectBaseApi-&gt;get_base_jobs: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectBaseApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - description - type [optional]"},{"location":"v3/docs/ProjectBaseApi/#return-type_2","title":"Return type","text":"<p>BaseJobList</p>"},{"location":"v3/docs/ProjectBaseApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectBaseApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectBaseApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The list of base jobs is successfully retrieved - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectBaseApi/#get_base_tables","title":"get_base_tables","text":"<p>ProjectBaseTableList get_base_tables(project_id)</p> <p>Retrieve a list of base tables.</p>"},{"location":"v3/docs/ProjectBaseApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_base_table_list import ProjectBaseTableList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectBaseApi(api_client)\n    project_id = 'project_id_example' # str | \n\n    try:\n        # Retrieve a list of base tables.\n        api_response = api_instance.get_base_tables(project_id)\n        print(\"The response of ProjectBaseApi-&gt;get_base_tables:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectBaseApi-&gt;get_base_tables: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectBaseApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v3/docs/ProjectBaseApi/#return-type_3","title":"Return type","text":"<p>ProjectBaseTableList</p>"},{"location":"v3/docs/ProjectBaseApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectBaseApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectBaseApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of base tables is successfully retrieved - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectBaseApi/#load_data","title":"load_data","text":"<p>BaseJob load_data(project_id, table_id, load_data_in_base_request)</p> <p>Load data in a base table.</p> <p>Load data in the specified table</p>"},{"location":"v3/docs/ProjectBaseApi/#example_4","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.base_job import BaseJob\nfrom libica.openapi.v3.models.load_data_in_base_request import LoadDataInBaseRequest\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectBaseApi(api_client)\n    project_id = 'project_id_example' # str | \n    table_id = 'table_id_example' # str | \n    load_data_in_base_request = libica.openapi.v3.LoadDataInBaseRequest() # LoadDataInBaseRequest | Load data request\n\n    try:\n        # Load data in a base table.\n        api_response = api_instance.load_data(project_id, table_id, load_data_in_base_request)\n        print(\"The response of ProjectBaseApi-&gt;load_data:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectBaseApi-&gt;load_data: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectBaseApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str table_id str load_data_in_base_request LoadDataInBaseRequest Load data request"},{"location":"v3/docs/ProjectBaseApi/#return-type_4","title":"Return type","text":"<p>BaseJob</p>"},{"location":"v3/docs/ProjectBaseApi/#authorization_4","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectBaseApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectBaseApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 201 Base job to load data is created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectBaseTable/","title":"ProjectBaseTable","text":""},{"location":"v3/docs/ProjectBaseTable/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] name str The name of the table which should be used in writing queries description str The description of the table [optional] type str The type of the table status str The status of the table number_of_records int The number of record in the table [optional] data_size int The amount of Data contained in this table in bytes [optional]"},{"location":"v3/docs/ProjectBaseTable/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_base_table import ProjectBaseTable\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectBaseTable from a JSON string\nproject_base_table_instance = ProjectBaseTable.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectBaseTable.to_json())\n\n# convert the object into a dict\nproject_base_table_dict = project_base_table_instance.to_dict()\n# create an instance of ProjectBaseTable from a dict\nproject_base_table_from_dict = ProjectBaseTable.from_dict(project_base_table_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectBaseTableList/","title":"ProjectBaseTableList","text":""},{"location":"v3/docs/ProjectBaseTableList/#properties","title":"Properties","text":"Name Type Description Notes items List[ProjectBaseTable]"},{"location":"v3/docs/ProjectBaseTableList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_base_table_list import ProjectBaseTableList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectBaseTableList from a JSON string\nproject_base_table_list_instance = ProjectBaseTableList.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectBaseTableList.to_json())\n\n# convert the object into a dict\nproject_base_table_list_dict = project_base_table_list_instance.to_dict()\n# create an instance of ProjectBaseTableList from a dict\nproject_base_table_list_from_dict = ProjectBaseTableList.from_dict(project_base_table_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectBundle/","title":"ProjectBundle","text":""},{"location":"v3/docs/ProjectBundle/#properties","title":"Properties","text":"Name Type Description Notes bundle Bundle project_id str application ApplicationV4 [optional]"},{"location":"v3/docs/ProjectBundle/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_bundle import ProjectBundle\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectBundle from a JSON string\nproject_bundle_instance = ProjectBundle.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectBundle.to_json())\n\n# convert the object into a dict\nproject_bundle_dict = project_bundle_instance.to_dict()\n# create an instance of ProjectBundle from a dict\nproject_bundle_from_dict = ProjectBundle.from_dict(project_bundle_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectBundleList/","title":"ProjectBundleList","text":""},{"location":"v3/docs/ProjectBundleList/#properties","title":"Properties","text":"Name Type Description Notes items List[ProjectBundle]"},{"location":"v3/docs/ProjectBundleList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_bundle_list import ProjectBundleList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectBundleList from a JSON string\nproject_bundle_list_instance = ProjectBundleList.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectBundleList.to_json())\n\n# convert the object into a dict\nproject_bundle_list_dict = project_bundle_list_instance.to_dict()\n# create an instance of ProjectBundleList from a dict\nproject_bundle_list_from_dict = ProjectBundleList.from_dict(project_bundle_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectCustomEventsApi/","title":"libica.openapi.v3.ProjectCustomEventsApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_custom_event POST /api/projects/{projectId}/customEvents Create a new custom event."},{"location":"v3/docs/ProjectCustomEventsApi/#create_custom_event","title":"create_custom_event","text":"<p>create_custom_event(project_id, create_custom_event)</p> <p>Create a new custom event.</p> <p>Warning: this endpoint allows to create custom events with a code larger than 20 characters (max 50), but the endpoint for creating a custom notification subscription (POST /api/projects/{projectId}/customNotificationSubscriptions) only accepts event codes up to 20 characters.</p>"},{"location":"v3/docs/ProjectCustomEventsApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_custom_event import CreateCustomEvent\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectCustomEventsApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_custom_event = libica.openapi.v3.CreateCustomEvent() # CreateCustomEvent | \n\n    try:\n        # Create a new custom event.\n        api_instance.create_custom_event(project_id, create_custom_event)\n    except Exception as e:\n        print(\"Exception when calling ProjectCustomEventsApi-&gt;create_custom_event: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectCustomEventsApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str create_custom_event CreateCustomEvent"},{"location":"v3/docs/ProjectCustomEventsApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectCustomEventsApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectCustomEventsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectCustomEventsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The event is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/","title":"libica.openapi.v3.ProjectCustomNotificationSubscriptionsApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_custom_notification_subscription POST /api/projects/{projectId}/customNotificationSubscriptions Create a custom notification subscription delete_custom_notification_subscription DELETE /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Delete a custom notification subscription get_custom_notification_subscription GET /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Retrieve a notification subscription get_custom_notification_subscriptions GET /api/projects/{projectId}/customNotificationSubscriptions Retrieve notification subscriptions update_custom_notification_subscription PUT /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId} Update a notification subscription"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#create_custom_notification_subscription","title":"create_custom_notification_subscription","text":"<p>CustomNotificationSubscription create_custom_notification_subscription(project_id, create_custom_notification_subscription)</p> <p>Create a custom notification subscription</p>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_custom_notification_subscription import CreateCustomNotificationSubscription\nfrom libica.openapi.v3.models.custom_notification_subscription import CustomNotificationSubscription\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectCustomNotificationSubscriptionsApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_custom_notification_subscription = libica.openapi.v3.CreateCustomNotificationSubscription() # CreateCustomNotificationSubscription | The new subscription\n\n    try:\n        # Create a custom notification subscription\n        api_response = api_instance.create_custom_notification_subscription(project_id, create_custom_notification_subscription)\n        print(\"The response of ProjectCustomNotificationSubscriptionsApi-&gt;create_custom_notification_subscription:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectCustomNotificationSubscriptionsApi-&gt;create_custom_notification_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str create_custom_notification_subscription CreateCustomNotificationSubscription The new subscription"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#return-type","title":"Return type","text":"<p>CustomNotificationSubscription</p>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The custom notification subscription is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#delete_custom_notification_subscription","title":"delete_custom_notification_subscription","text":"<p>delete_custom_notification_subscription(project_id, subscription_id)</p> <p>Delete a custom notification subscription</p>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectCustomNotificationSubscriptionsApi(api_client)\n    project_id = 'project_id_example' # str | \n    subscription_id = 'subscription_id_example' # str | The ID of the custom notification subscription to delete\n\n    try:\n        # Delete a custom notification subscription\n        api_instance.delete_custom_notification_subscription(project_id, subscription_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectCustomNotificationSubscriptionsApi-&gt;delete_custom_notification_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str subscription_id str The ID of the custom notification subscription to delete"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The custom notification subscription is successfully deleted - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#get_custom_notification_subscription","title":"get_custom_notification_subscription","text":"<p>CustomNotificationSubscription get_custom_notification_subscription(project_id, subscription_id)</p> <p>Retrieve a notification subscription</p>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.custom_notification_subscription import CustomNotificationSubscription\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectCustomNotificationSubscriptionsApi(api_client)\n    project_id = 'project_id_example' # str | The ID of the project\n    subscription_id = 'subscription_id_example' # str | The ID of the notification subscription\n\n    try:\n        # Retrieve a notification subscription\n        api_response = api_instance.get_custom_notification_subscription(project_id, subscription_id)\n        print(\"The response of ProjectCustomNotificationSubscriptionsApi-&gt;get_custom_notification_subscription:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectCustomNotificationSubscriptionsApi-&gt;get_custom_notification_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the notification subscription"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#return-type_2","title":"Return type","text":"<p>CustomNotificationSubscription</p>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The notification subscription is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#get_custom_notification_subscriptions","title":"get_custom_notification_subscriptions","text":"<p>CustomNotificationSubscriptionList get_custom_notification_subscriptions(project_id)</p> <p>Retrieve notification subscriptions</p>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.custom_notification_subscription_list import CustomNotificationSubscriptionList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectCustomNotificationSubscriptionsApi(api_client)\n    project_id = 'project_id_example' # str | The ID of the project\n\n    try:\n        # Retrieve notification subscriptions\n        api_response = api_instance.get_custom_notification_subscriptions(project_id)\n        print(\"The response of ProjectCustomNotificationSubscriptionsApi-&gt;get_custom_notification_subscriptions:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectCustomNotificationSubscriptionsApi-&gt;get_custom_notification_subscriptions: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#return-type_3","title":"Return type","text":"<p>CustomNotificationSubscriptionList</p>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The notification subscriptions are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#update_custom_notification_subscription","title":"update_custom_notification_subscription","text":"<p>CustomNotificationSubscription update_custom_notification_subscription(project_id, subscription_id, custom_notification_subscription, if_match=if_match)</p> <p>Update a notification subscription</p> <p>Fields which can be updated:  - enabled  - eventCode  - filterExpression  - notificationChannel</p>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#example_4","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.custom_notification_subscription import CustomNotificationSubscription\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectCustomNotificationSubscriptionsApi(api_client)\n    project_id = 'project_id_example' # str | The ID of the project\n    subscription_id = 'subscription_id_example' # str | The ID of the custom notification subscription to update\n    custom_notification_subscription = libica.openapi.v3.CustomNotificationSubscription() # CustomNotificationSubscription | The updated subscription\n    if_match = 'if_match_example' # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n\n    try:\n        # Update a notification subscription\n        api_response = api_instance.update_custom_notification_subscription(project_id, subscription_id, custom_notification_subscription, if_match=if_match)\n        print(\"The response of ProjectCustomNotificationSubscriptionsApi-&gt;update_custom_notification_subscription:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectCustomNotificationSubscriptionsApi-&gt;update_custom_notification_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the custom notification subscription to update custom_notification_subscription CustomNotificationSubscription The updated subscription if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional]"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#return-type_4","title":"Return type","text":"<p>CustomNotificationSubscription</p>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#authorization_4","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectCustomNotificationSubscriptionsApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The notification subscription is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectData/","title":"ProjectData","text":""},{"location":"v3/docs/ProjectData/#properties","title":"Properties","text":"Name Type Description Notes data Data project_id str"},{"location":"v3/docs/ProjectData/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data import ProjectData\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectData from a JSON string\nproject_data_instance = ProjectData.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectData.to_json())\n\n# convert the object into a dict\nproject_data_dict = project_data_instance.to_dict()\n# create an instance of ProjectData from a dict\nproject_data_from_dict = ProjectData.from_dict(project_data_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataAndTemporaryCredentials/","title":"ProjectDataAndTemporaryCredentials","text":""},{"location":"v3/docs/ProjectDataAndTemporaryCredentials/#properties","title":"Properties","text":"Name Type Description Notes data Data project_id str temp_credentials TempCredentials"},{"location":"v3/docs/ProjectDataAndTemporaryCredentials/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_and_temporary_credentials import ProjectDataAndTemporaryCredentials\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataAndTemporaryCredentials from a JSON string\nproject_data_and_temporary_credentials_instance = ProjectDataAndTemporaryCredentials.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataAndTemporaryCredentials.to_json())\n\n# convert the object into a dict\nproject_data_and_temporary_credentials_dict = project_data_and_temporary_credentials_instance.to_dict()\n# create an instance of ProjectDataAndTemporaryCredentials from a dict\nproject_data_and_temporary_credentials_from_dict = ProjectDataAndTemporaryCredentials.from_dict(project_data_and_temporary_credentials_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/","title":"libica.openapi.v3.ProjectDataApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description add_secondary_data POST /api/projects/{projectId}/data/{dataId}/secondaryData/{secondaryDataId} Add secondary data to data. archive_data POST /api/projects/{projectId}/data/{dataId}:archive Schedule this data for archival. complete_folder_upload_session POST /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId}:complete Complete a trackable folder upload session. create_data_in_project POST /api/projects/{projectId}/data Create data in this project. create_download_url_for_data POST /api/projects/{projectId}/data/{dataId}:createDownloadUrl Retrieve a download URL for this data. create_download_urls_for_data POST /api/projects/{projectId}/data:createDownloadUrls Retrieve download URLs for the data. create_file POST /api/projects/{projectId}/data:createFile Create a file in this project. create_file_with_temporary_credentials POST /api/projects/{projectId}/data:createFileWithTemporaryCredentials Create a file in this project, and retrieve temporary credentials for it. create_file_with_upload_url POST /api/projects/{projectId}/data:createFileWithUploadUrl Create a file in this project, and retrieve an upload url for it. create_folder POST /api/projects/{projectId}/data:createFolder Create a folder in this project. create_folder_upload_session POST /api/projects/{projectId}/data/{dataId}/folderUploadSessions Create a trackable folder upload session. create_folder_with_temporary_credentials POST /api/projects/{projectId}/data:createFolderWithTemporaryCredentials Create a folder in this project, and and retrieve temporary credentials for it. create_folder_with_upload_session POST /api/projects/{projectId}/data:createFolderWithUploadSession Create a folder in this project, and create a trackable folder upload session. create_inline_view_url_for_data POST /api/projects/{projectId}/data/{dataId}:createInlineViewUrl Retrieve an URL for this data to use for inline view in a browser. create_non_indexed_folder POST /api/projects/{projectId}/data:createNonIndexedFolder Create a non indexed folder in this project. The folder will be created as a top-level folder. create_temporary_credentials_for_data POST /api/projects/{projectId}/data/{dataId}:createTemporaryCredentials Retrieve temporary credentials for this data. create_upload_url_for_data POST /api/projects/{projectId}/data/{dataId}:createUploadUrl Retrieve an upload URL for this data. delete_data POST /api/projects/{projectId}/data/{dataId}:delete Schedule this data for deletion. get_data_eligible_for_linking GET /api/projects/{projectId}/data/eligibleForLinking Retrieve a list of data eligible for linking to the current project. get_folder_upload_session GET /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId} Retrieve folder upload session details. get_non_sample_project_data GET /api/projects/{projectId}/data/nonSampleData Retrieve a list of project data not linked to a sample. get_project_data GET /api/projects/{projectId}/data/{dataId} Retrieve a project data. get_project_data_children GET /api/projects/{projectId}/data/{dataId}/children Retrieve the children of this data. get_project_data_list GET /api/projects/{projectId}/data Retrieve the list of project data. get_projects_linked_to_data GET /api/projects/{projectId}/data/{dataId}/linkedProjects Retrieve a list of projects to which this data is linked. get_secondary_data GET /api/projects/{projectId}/data/{dataId}/secondaryData Retrieve a list of secondary data for data. link_data_to_project POST /api/projects/{projectId}/data/{dataId} Link data to this project. remove_secondary_data DELETE /api/projects/{projectId}/data/{dataId}/secondaryData/{secondaryDataId} Remove secondary data from data. schedule_download_for_data POST /api/projects/{projectId}/data/{dataId}:scheduleDownload Schedule a download. unarchive_data POST /api/projects/{projectId}/data/{dataId}:unarchive Schedule this data for unarchival. unlink_data_from_project POST /api/projects/{projectId}/data/{dataId}:unlink Unlink data from this project. update_project_data PUT /api/projects/{projectId}/data/{dataId} Update this project data."},{"location":"v3/docs/ProjectDataApi/#add_secondary_data","title":"add_secondary_data","text":"<p>add_secondary_data(project_id, data_id, secondary_data_id)</p> <p>Add secondary data to data.</p>"},{"location":"v3/docs/ProjectDataApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_id = 'data_id_example' # str | \n    secondary_data_id = 'secondary_data_id_example' # str | \n\n    try:\n        # Add secondary data to data.\n        api_instance.add_secondary_data(project_id, data_id, secondary_data_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;add_secondary_data: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str data_id str secondary_data_id str"},{"location":"v3/docs/ProjectDataApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectDataApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The secondary data is successfully added. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#archive_data","title":"archive_data","text":"<p>archive_data(project_id, data_id)</p> <p>Schedule this data for archival.</p> <p>Endpoint for scheduling this data for archival. This will also archive all files and directories below that data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/ProjectDataApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_id = 'data_id_example' # str | \n\n    try:\n        # Schedule this data for archival.\n        api_instance.archive_data(project_id, data_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;archive_data: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v3/docs/ProjectDataApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully scheduled for archival. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#complete_folder_upload_session","title":"complete_folder_upload_session","text":"<p>FolderUploadSession complete_folder_upload_session(project_id, data_id, folder_upload_session_id, complete_folder_upload_session)</p> <p>Complete a trackable folder upload session.</p> <p>Complete a trackable folder upload session. By completing the folder upload session, and specifying how many files you have uploaded, ICA can ensure that all uploaded files are accounted for.</p>"},{"location":"v3/docs/ProjectDataApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.complete_folder_upload_session import CompleteFolderUploadSession\nfrom libica.openapi.v3.models.folder_upload_session import FolderUploadSession\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_id = 'data_id_example' # str | \n    folder_upload_session_id = 'folder_upload_session_id_example' # str | \n    complete_folder_upload_session = libica.openapi.v3.CompleteFolderUploadSession() # CompleteFolderUploadSession | The info required to complete the folder upload session.\n\n    try:\n        # Complete a trackable folder upload session.\n        api_response = api_instance.complete_folder_upload_session(project_id, data_id, folder_upload_session_id, complete_folder_upload_session)\n        print(\"The response of ProjectDataApi-&gt;complete_folder_upload_session:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;complete_folder_upload_session: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str data_id str folder_upload_session_id str complete_folder_upload_session CompleteFolderUploadSession The info required to complete the folder upload session."},{"location":"v3/docs/ProjectDataApi/#return-type_2","title":"Return type","text":"<p>FolderUploadSession</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The folder upload session is successfully completed. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#create_data_in_project","title":"create_data_in_project","text":"<p>ProjectData create_data_in_project(project_id, create_data, idempotency_key=idempotency_key)</p> <p>Create data in this project.</p>"},{"location":"v3/docs/ProjectDataApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_data import CreateData\nfrom libica.openapi.v3.models.project_data import ProjectData\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_data = libica.openapi.v3.CreateData() # CreateData | The data to create.\n    idempotency_key = 'idempotency_key_example' # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    try:\n        # Create data in this project.\n        api_response = api_instance.create_data_in_project(project_id, create_data, idempotency_key=idempotency_key)\n        print(\"The response of ProjectDataApi-&gt;create_data_in_project:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_data_in_project: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str create_data CreateData The data to create. idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v3/docs/ProjectDataApi/#return-type_3","title":"Return type","text":"<p>ProjectData</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 201 The data is successfully created in this project. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#create_download_url_for_data","title":"create_download_url_for_data","text":"<p>Download create_download_url_for_data(project_id, data_id)</p> <p>Retrieve a download URL for this data.</p> <p>Can be used to download a file directly from the region where it is located, no connector is needed. Not applicable for Folder.</p>"},{"location":"v3/docs/ProjectDataApi/#example_4","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.download import Download\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_id = 'data_id_example' # str | \n\n    try:\n        # Retrieve a download URL for this data.\n        api_response = api_instance.create_download_url_for_data(project_id, data_id)\n        print(\"The response of ProjectDataApi-&gt;create_download_url_for_data:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_download_url_for_data: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v3/docs/ProjectDataApi/#return-type_4","title":"Return type","text":"<p>Download</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_4","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The download URL is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#create_download_urls_for_data","title":"create_download_urls_for_data","text":"<p>DataUrlWithPathList create_download_urls_for_data(project_id, data_id_or_path_list)</p> <p>Retrieve download URLs for the data.</p> <p>Can be used to download files directly from the region where it is located, no connector is needed. Not applicable for Folders.</p>"},{"location":"v3/docs/ProjectDataApi/#example_5","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.data_id_or_path_list import DataIdOrPathList\nfrom libica.openapi.v3.models.data_url_with_path_list import DataUrlWithPathList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_id_or_path_list = libica.openapi.v3.DataIdOrPathList() # DataIdOrPathList | \n\n    try:\n        # Retrieve download URLs for the data.\n        api_response = api_instance.create_download_urls_for_data(project_id, data_id_or_path_list)\n        print(\"The response of ProjectDataApi-&gt;create_download_urls_for_data:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_download_urls_for_data: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes project_id str data_id_or_path_list DataIdOrPathList"},{"location":"v3/docs/ProjectDataApi/#return-type_5","title":"Return type","text":"<p>DataUrlWithPathList</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_5","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 200 The download URLs are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#create_file","title":"create_file","text":"<p>ProjectData create_file(project_id, create_file_data, idempotency_key=idempotency_key)</p> <p>Create a file in this project.</p>"},{"location":"v3/docs/ProjectDataApi/#example_6","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_file_data import CreateFileData\nfrom libica.openapi.v3.models.project_data import ProjectData\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_file_data = libica.openapi.v3.CreateFileData() # CreateFileData | The file to create.\n    idempotency_key = 'idempotency_key_example' # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    try:\n        # Create a file in this project.\n        api_response = api_instance.create_file(project_id, create_file_data, idempotency_key=idempotency_key)\n        print(\"The response of ProjectDataApi-&gt;create_file:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_file: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes project_id str create_file_data CreateFileData The file to create. idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v3/docs/ProjectDataApi/#return-type_6","title":"Return type","text":"<p>ProjectData</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_6","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 201 The file is successfully created in this project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#create_file_with_temporary_credentials","title":"create_file_with_temporary_credentials","text":"<p>ProjectDataAndTemporaryCredentials create_file_with_temporary_credentials(project_id, create_file_and_temporary_credentials, idempotency_key=idempotency_key)</p> <p>Create a file in this project, and retrieve temporary credentials for it.</p>"},{"location":"v3/docs/ProjectDataApi/#example_7","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_file_and_temporary_credentials import CreateFileAndTemporaryCredentials\nfrom libica.openapi.v3.models.project_data_and_temporary_credentials import ProjectDataAndTemporaryCredentials\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_file_and_temporary_credentials = libica.openapi.v3.CreateFileAndTemporaryCredentials() # CreateFileAndTemporaryCredentials | The data to create.\n    idempotency_key = 'idempotency_key_example' # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    try:\n        # Create a file in this project, and retrieve temporary credentials for it.\n        api_response = api_instance.create_file_with_temporary_credentials(project_id, create_file_and_temporary_credentials, idempotency_key=idempotency_key)\n        print(\"The response of ProjectDataApi-&gt;create_file_with_temporary_credentials:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_file_with_temporary_credentials: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes project_id str create_file_and_temporary_credentials CreateFileAndTemporaryCredentials The data to create. idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v3/docs/ProjectDataApi/#return-type_7","title":"Return type","text":"<p>ProjectDataAndTemporaryCredentials</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_7","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 201 The data is successfully created in this project, and the temporary credentials are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#create_file_with_upload_url","title":"create_file_with_upload_url","text":"<p>ProjectFileAndUploadUrl create_file_with_upload_url(project_id, create_file_and_upload_url, idempotency_key=idempotency_key)</p> <p>Create a file in this project, and retrieve an upload url for it.</p>"},{"location":"v3/docs/ProjectDataApi/#example_8","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_file_and_upload_url import CreateFileAndUploadUrl\nfrom libica.openapi.v3.models.project_file_and_upload_url import ProjectFileAndUploadUrl\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_file_and_upload_url = libica.openapi.v3.CreateFileAndUploadUrl() # CreateFileAndUploadUrl | The data to create.\n    idempotency_key = 'idempotency_key_example' # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    try:\n        # Create a file in this project, and retrieve an upload url for it.\n        api_response = api_instance.create_file_with_upload_url(project_id, create_file_and_upload_url, idempotency_key=idempotency_key)\n        print(\"The response of ProjectDataApi-&gt;create_file_with_upload_url:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_file_with_upload_url: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes project_id str create_file_and_upload_url CreateFileAndUploadUrl The data to create. idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v3/docs/ProjectDataApi/#return-type_8","title":"Return type","text":"<p>ProjectFileAndUploadUrl</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_8","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 201 The data is successfully created in this project, and the upload URL is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#create_folder","title":"create_folder","text":"<p>ProjectData create_folder(project_id, create_folder, idempotency_key=idempotency_key)</p> <p>Create a folder in this project.</p>"},{"location":"v3/docs/ProjectDataApi/#example_9","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_folder import CreateFolder\nfrom libica.openapi.v3.models.project_data import ProjectData\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_folder = libica.openapi.v3.CreateFolder() # CreateFolder | The folder to create.\n    idempotency_key = 'idempotency_key_example' # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    try:\n        # Create a folder in this project.\n        api_response = api_instance.create_folder(project_id, create_folder, idempotency_key=idempotency_key)\n        print(\"The response of ProjectDataApi-&gt;create_folder:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_folder: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_9","title":"Parameters","text":"Name Type Description Notes project_id str create_folder CreateFolder The folder to create. idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v3/docs/ProjectDataApi/#return-type_9","title":"Return type","text":"<p>ProjectData</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_9","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_9","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_9","title":"HTTP response details","text":"Status code Description Response headers 201 The folder is successfully created in this project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#create_folder_upload_session","title":"create_folder_upload_session","text":"<p>FolderUploadSession create_folder_upload_session(project_id, data_id, create_temporary_credentials=create_temporary_credentials)</p> <p>Create a trackable folder upload session.</p> <p>This endpoint can be used to ensure that all uploaded files within the requested session are accounted for. This call has to be used together with the :complete endpoint once upload is done.</p>"},{"location":"v3/docs/ProjectDataApi/#example_10","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_temporary_credentials import CreateTemporaryCredentials\nfrom libica.openapi.v3.models.folder_upload_session import FolderUploadSession\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_id = 'data_id_example' # str | \n    create_temporary_credentials = libica.openapi.v3.CreateTemporaryCredentials() # CreateTemporaryCredentials | Temporary credentials request options. (optional)\n\n    try:\n        # Create a trackable folder upload session.\n        api_response = api_instance.create_folder_upload_session(project_id, data_id, create_temporary_credentials=create_temporary_credentials)\n        print(\"The response of ProjectDataApi-&gt;create_folder_upload_session:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_folder_upload_session: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_10","title":"Parameters","text":"Name Type Description Notes project_id str data_id str create_temporary_credentials CreateTemporaryCredentials Temporary credentials request options. [optional]"},{"location":"v3/docs/ProjectDataApi/#return-type_10","title":"Return type","text":"<p>FolderUploadSession</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_10","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_10","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_10","title":"HTTP response details","text":"Status code Description Response headers 201 The folder upload session is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#create_folder_with_temporary_credentials","title":"create_folder_with_temporary_credentials","text":"<p>ProjectDataAndTemporaryCredentials create_folder_with_temporary_credentials(project_id, create_folder_and_temporary_credentials, idempotency_key=idempotency_key)</p> <p>Create a folder in this project, and and retrieve temporary credentials for it.</p>"},{"location":"v3/docs/ProjectDataApi/#example_11","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_folder_and_temporary_credentials import CreateFolderAndTemporaryCredentials\nfrom libica.openapi.v3.models.project_data_and_temporary_credentials import ProjectDataAndTemporaryCredentials\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_folder_and_temporary_credentials = libica.openapi.v3.CreateFolderAndTemporaryCredentials() # CreateFolderAndTemporaryCredentials | The data to create.\n    idempotency_key = 'idempotency_key_example' # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    try:\n        # Create a folder in this project, and and retrieve temporary credentials for it.\n        api_response = api_instance.create_folder_with_temporary_credentials(project_id, create_folder_and_temporary_credentials, idempotency_key=idempotency_key)\n        print(\"The response of ProjectDataApi-&gt;create_folder_with_temporary_credentials:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_folder_with_temporary_credentials: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_11","title":"Parameters","text":"Name Type Description Notes project_id str create_folder_and_temporary_credentials CreateFolderAndTemporaryCredentials The data to create. idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v3/docs/ProjectDataApi/#return-type_11","title":"Return type","text":"<p>ProjectDataAndTemporaryCredentials</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_11","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_11","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_11","title":"HTTP response details","text":"Status code Description Response headers 201 The data is successfully created in this project, and the temporary credentials are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#create_folder_with_upload_session","title":"create_folder_with_upload_session","text":"<p>ProjectFolderAndUploadSession create_folder_with_upload_session(project_id, create_folder_and_temporary_credentials, idempotency_key=idempotency_key)</p> <p>Create a folder in this project, and create a trackable folder upload session.</p>"},{"location":"v3/docs/ProjectDataApi/#example_12","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_folder_and_temporary_credentials import CreateFolderAndTemporaryCredentials\nfrom libica.openapi.v3.models.project_folder_and_upload_session import ProjectFolderAndUploadSession\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_folder_and_temporary_credentials = libica.openapi.v3.CreateFolderAndTemporaryCredentials() # CreateFolderAndTemporaryCredentials | The data to create.\n    idempotency_key = 'idempotency_key_example' # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    try:\n        # Create a folder in this project, and create a trackable folder upload session.\n        api_response = api_instance.create_folder_with_upload_session(project_id, create_folder_and_temporary_credentials, idempotency_key=idempotency_key)\n        print(\"The response of ProjectDataApi-&gt;create_folder_with_upload_session:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_folder_with_upload_session: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_12","title":"Parameters","text":"Name Type Description Notes project_id str create_folder_and_temporary_credentials CreateFolderAndTemporaryCredentials The data to create. idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v3/docs/ProjectDataApi/#return-type_12","title":"Return type","text":"<p>ProjectFolderAndUploadSession</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_12","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_12","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_12","title":"HTTP response details","text":"Status code Description Response headers 201 The data is successfully created in this project, and the folder upload session is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#create_inline_view_url_for_data","title":"create_inline_view_url_for_data","text":"<p>InlineView create_inline_view_url_for_data(project_id, data_id)</p> <p>Retrieve an URL for this data to use for inline view in a browser.</p> <p>Can be used to view a file directly from the region where it is located, no connector is needed.</p>"},{"location":"v3/docs/ProjectDataApi/#example_13","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.inline_view import InlineView\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_id = 'data_id_example' # str | \n\n    try:\n        # Retrieve an URL for this data to use for inline view in a browser.\n        api_response = api_instance.create_inline_view_url_for_data(project_id, data_id)\n        print(\"The response of ProjectDataApi-&gt;create_inline_view_url_for_data:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_inline_view_url_for_data: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_13","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v3/docs/ProjectDataApi/#return-type_13","title":"Return type","text":"<p>InlineView</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_13","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_13","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_13","title":"HTTP response details","text":"Status code Description Response headers 200 The inline view URL is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#create_non_indexed_folder","title":"create_non_indexed_folder","text":"<p>ProjectData create_non_indexed_folder(project_id, create_non_indexed_folder, idempotency_key=idempotency_key)</p> <p>Create a non indexed folder in this project. The folder will be created as a top-level folder.</p>"},{"location":"v3/docs/ProjectDataApi/#example_14","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_non_indexed_folder import CreateNonIndexedFolder\nfrom libica.openapi.v3.models.project_data import ProjectData\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_non_indexed_folder = libica.openapi.v3.CreateNonIndexedFolder() # CreateNonIndexedFolder | The non indexed folder to create.\n    idempotency_key = 'idempotency_key_example' # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    try:\n        # Create a non indexed folder in this project. The folder will be created as a top-level folder.\n        api_response = api_instance.create_non_indexed_folder(project_id, create_non_indexed_folder, idempotency_key=idempotency_key)\n        print(\"The response of ProjectDataApi-&gt;create_non_indexed_folder:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_non_indexed_folder: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_14","title":"Parameters","text":"Name Type Description Notes project_id str create_non_indexed_folder CreateNonIndexedFolder The non indexed folder to create. idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v3/docs/ProjectDataApi/#return-type_14","title":"Return type","text":"<p>ProjectData</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_14","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_14","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_14","title":"HTTP response details","text":"Status code Description Response headers 201 The non indexed folder is successfully created in this project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#create_temporary_credentials_for_data","title":"create_temporary_credentials_for_data","text":"<p>TempCredentials create_temporary_credentials_for_data(project_id, data_id, create_temporary_credentials=create_temporary_credentials)</p> <p>Retrieve temporary credentials for this data.</p> <p>Can be used to upload or download a file directly from the region where it is located, no connector is needed. The returned credentials expire after 36 hours.</p>"},{"location":"v3/docs/ProjectDataApi/#example_15","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_temporary_credentials import CreateTemporaryCredentials\nfrom libica.openapi.v3.models.temp_credentials import TempCredentials\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_id = 'data_id_example' # str | \n    create_temporary_credentials = libica.openapi.v3.CreateTemporaryCredentials() # CreateTemporaryCredentials | Temporary credentials request options. (optional)\n\n    try:\n        # Retrieve temporary credentials for this data.\n        api_response = api_instance.create_temporary_credentials_for_data(project_id, data_id, create_temporary_credentials=create_temporary_credentials)\n        print(\"The response of ProjectDataApi-&gt;create_temporary_credentials_for_data:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_temporary_credentials_for_data: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_15","title":"Parameters","text":"Name Type Description Notes project_id str data_id str create_temporary_credentials CreateTemporaryCredentials Temporary credentials request options. [optional]"},{"location":"v3/docs/ProjectDataApi/#return-type_15","title":"Return type","text":"<p>TempCredentials</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_15","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_15","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_15","title":"HTTP response details","text":"Status code Description Response headers 200 The temporary credentials are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#create_upload_url_for_data","title":"create_upload_url_for_data","text":"<p>Upload create_upload_url_for_data(project_id, data_id, file_type=file_type, hash=hash)</p> <p>Retrieve an upload URL for this data.</p> <p>Can be used to upload a file directly from the region where it is located, no connector is needed. The project identifier must match the project which owns the data. You can create both new files and overwrite files in status 'partial'.</p>"},{"location":"v3/docs/ProjectDataApi/#example_16","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.upload import Upload\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_id = 'data_id_example' # str | \n    file_type = 'file_type_example' # str |  (optional)\n    hash = 'hash_example' # str |  (optional)\n\n    try:\n        # Retrieve an upload URL for this data.\n        api_response = api_instance.create_upload_url_for_data(project_id, data_id, file_type=file_type, hash=hash)\n        print(\"The response of ProjectDataApi-&gt;create_upload_url_for_data:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;create_upload_url_for_data: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_16","title":"Parameters","text":"Name Type Description Notes project_id str data_id str file_type str [optional] hash str [optional]"},{"location":"v3/docs/ProjectDataApi/#return-type_16","title":"Return type","text":"<p>Upload</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_16","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_16","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_16","title":"HTTP response details","text":"Status code Description Response headers 200 The upload URL is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#delete_data","title":"delete_data","text":"<p>delete_data(project_id, data_id)</p> <p>Schedule this data for deletion.</p> <p>Endpoint for scheduling this data for deletion. This will also delete all files and directories below that data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/ProjectDataApi/#example_17","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_id = 'data_id_example' # str | \n\n    try:\n        # Schedule this data for deletion.\n        api_instance.delete_data(project_id, data_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;delete_data: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_17","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v3/docs/ProjectDataApi/#return-type_17","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_17","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_17","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_17","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully scheduled for deletion. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#get_data_eligible_for_linking","title":"get_data_eligible_for_linking","text":"<p>DataPagedList get_data_eligible_for_linking(project_id, full_text=full_text, id=id, filename=filename, filename_match_mode=filename_match_mode, file_path=file_path, file_path_match_mode=file_path_match_mode, status=status, format_id=format_id, format_code=format_code, type=type, parent_folder_id=parent_folder_id, parent_folder_path=parent_folder_path, creation_date_after=creation_date_after, creation_date_before=creation_date_before, status_date_after=status_date_after, status_date_before=status_date_before, user_tag=user_tag, user_tag_match_mode=user_tag_match_mode, run_input_tag=run_input_tag, run_input_tag_match_mode=run_input_tag_match_mode, run_output_tag=run_output_tag, run_output_tag_match_mode=run_output_tag_match_mode, connector_tag=connector_tag, connector_tag_match_mode=connector_tag_match_mode, technical_tag=technical_tag, technical_tag_match_mode=technical_tag_match_mode, not_in_run=not_in_run, not_linked_to_sample=not_linked_to_sample, instrument_run_id=instrument_run_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)</p> <p>Retrieve a list of data eligible for linking to the current project.</p>"},{"location":"v3/docs/ProjectDataApi/#example_18","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.data_paged_list import DataPagedList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    full_text = 'full_text_example' # str | To search through multiple fields of data. (optional)\n    id = ['id_example'] # List[str] | The ids to filter on. This will always match exact. (optional)\n    filename = ['filename_example'] # List[str] | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional)\n    filename_match_mode = 'filename_match_mode_example' # str | How the filenames are filtered.  (optional)\n    file_path = ['file_path_example'] # List[str] | The paths of the files to filter on. (optional)\n    file_path_match_mode = STARTS_WITH_CASE_INSENSITIVE # str | How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). (optional) (default to STARTS_WITH_CASE_INSENSITIVE)\n    status = ['status_example'] # List[str] | The statuses to filter on. (optional)\n    format_id = ['format_id_example'] # List[str] | The IDs of the formats to filter on. (optional)\n    format_code = ['format_code_example'] # List[str] | The codes of the formats to filter on. (optional)\n    type = 'type_example' # str | The type to filter on. (optional)\n    parent_folder_id = ['parent_folder_id_example'] # List[str] | The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. (optional)\n    parent_folder_path = 'parent_folder_path_example' # str | The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files. (optional)\n    creation_date_after = '2013-10-20T19:20:30+01:00' # datetime | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    creation_date_before = '2013-10-20T19:20:30+01:00' # datetime | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_after = '2013-10-20T19:20:30+01:00' # datetime | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_before = '2013-10-20T19:20:30+01:00' # datetime | The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    user_tag = ['user_tag_example'] # List[str] | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional)\n    user_tag_match_mode = 'user_tag_match_mode_example' # str | How the usertags are filtered.  (optional)\n    run_input_tag = ['run_input_tag_example'] # List[str] | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_input_tag_match_mode = 'run_input_tag_match_mode_example' # str | How the runInputTags are filtered.  (optional)\n    run_output_tag = ['run_output_tag_example'] # List[str] | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_output_tag_match_mode = 'run_output_tag_match_mode_example' # str | How the runOutputTags are filtered.  (optional)\n    connector_tag = ['connector_tag_example'] # List[str] | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional)\n    connector_tag_match_mode = 'connector_tag_match_mode_example' # str | How the connectorTags are filtered.  (optional)\n    technical_tag = ['technical_tag_example'] # List[str] | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional)\n    technical_tag_match_mode = 'technical_tag_match_mode_example' # str | How the technicalTags are filtered.  (optional)\n    not_in_run = True # bool | When set to true, the data will be filtered on data which is not used in a run. (optional)\n    not_linked_to_sample = True # bool | When set to true only data that is unlinked to a sample will be returned. This filter implies a filter of type File. (optional)\n    instrument_run_id = ['instrument_run_id_example'] # List[str] | The instrument run IDs of the sequencing runs to filter on. (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt (optional)\n\n    try:\n        # Retrieve a list of data eligible for linking to the current project.\n        api_response = api_instance.get_data_eligible_for_linking(project_id, full_text=full_text, id=id, filename=filename, filename_match_mode=filename_match_mode, file_path=file_path, file_path_match_mode=file_path_match_mode, status=status, format_id=format_id, format_code=format_code, type=type, parent_folder_id=parent_folder_id, parent_folder_path=parent_folder_path, creation_date_after=creation_date_after, creation_date_before=creation_date_before, status_date_after=status_date_after, status_date_before=status_date_before, user_tag=user_tag, user_tag_match_mode=user_tag_match_mode, run_input_tag=run_input_tag, run_input_tag_match_mode=run_input_tag_match_mode, run_output_tag=run_output_tag, run_output_tag_match_mode=run_output_tag_match_mode, connector_tag=connector_tag, connector_tag_match_mode=connector_tag_match_mode, technical_tag=technical_tag, technical_tag_match_mode=technical_tag_match_mode, not_in_run=not_in_run, not_linked_to_sample=not_linked_to_sample, instrument_run_id=instrument_run_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        print(\"The response of ProjectDataApi-&gt;get_data_eligible_for_linking:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_data_eligible_for_linking: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_18","title":"Parameters","text":"Name Type Description Notes project_id str full_text str To search through multiple fields of data. [optional] id List[str] The ids to filter on. This will always match exact. [optional] filename List[str] The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] file_path List[str] The paths of the files to filter on. [optional] file_path_match_mode str How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). [optional] [default to STARTS_WITH_CASE_INSENSITIVE] status List[str] The statuses to filter on. [optional] format_id List[str] The IDs of the formats to filter on. [optional] format_code List[str] The codes of the formats to filter on. [optional] type str The type to filter on. [optional] parent_folder_id List[str] The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. [optional] parent_folder_path str The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files. [optional] creation_date_after datetime The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before datetime The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after datetime The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before datetime The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag List[str] The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag List[str] The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag List[str] The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag List[str] The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag List[str] The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run bool When set to true, the data will be filtered on data which is not used in a run. [optional] not_linked_to_sample bool When set to true only data that is unlinked to a sample will be returned. This filter implies a filter of type File. [optional] instrument_run_id List[str] The instrument run IDs of the sequencing runs to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt [optional]"},{"location":"v3/docs/ProjectDataApi/#return-type_18","title":"Return type","text":"<p>DataPagedList</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_18","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_18","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_18","title":"HTTP response details","text":"Status code Description Response headers 200 The list of data is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#get_folder_upload_session","title":"get_folder_upload_session","text":"<p>FolderUploadSession get_folder_upload_session(project_id, data_id, folder_upload_session_id)</p> <p>Retrieve folder upload session details.</p> <p>Retrieve folder upload session details, including the current status of your upload session.</p>"},{"location":"v3/docs/ProjectDataApi/#example_19","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.folder_upload_session import FolderUploadSession\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_id = 'data_id_example' # str | \n    folder_upload_session_id = 'folder_upload_session_id_example' # str | \n\n    try:\n        # Retrieve folder upload session details.\n        api_response = api_instance.get_folder_upload_session(project_id, data_id, folder_upload_session_id)\n        print(\"The response of ProjectDataApi-&gt;get_folder_upload_session:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_folder_upload_session: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_19","title":"Parameters","text":"Name Type Description Notes project_id str data_id str folder_upload_session_id str"},{"location":"v3/docs/ProjectDataApi/#return-type_19","title":"Return type","text":"<p>FolderUploadSession</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_19","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_19","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_19","title":"HTTP response details","text":"Status code Description Response headers 200 The folder upload session details are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#get_non_sample_project_data","title":"get_non_sample_project_data","text":"<p>ProjectDataPagedList get_non_sample_project_data(project_id, page_offset=page_offset, page_token=page_token, page_size=page_size)</p> <p>Retrieve a list of project data not linked to a sample.</p>"},{"location":"v3/docs/ProjectDataApi/#example_20","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_data_paged_list import ProjectDataPagedList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n\n    try:\n        # Retrieve a list of project data not linked to a sample.\n        api_response = api_instance.get_non_sample_project_data(project_id, page_offset=page_offset, page_token=page_token, page_size=page_size)\n        print(\"The response of ProjectDataApi-&gt;get_non_sample_project_data:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_non_sample_project_data: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_20","title":"Parameters","text":"Name Type Description Notes project_id str page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional]"},{"location":"v3/docs/ProjectDataApi/#return-type_20","title":"Return type","text":"<p>ProjectDataPagedList</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_20","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_20","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_20","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project data is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#get_project_data","title":"get_project_data","text":"<p>ProjectData get_project_data(project_id, data_id)</p> <p>Retrieve a project data.</p>"},{"location":"v3/docs/ProjectDataApi/#example_21","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_data import ProjectData\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_id = 'data_id_example' # str | \n\n    try:\n        # Retrieve a project data.\n        api_response = api_instance.get_project_data(project_id, data_id)\n        print(\"The response of ProjectDataApi-&gt;get_project_data:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_project_data: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_21","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v3/docs/ProjectDataApi/#return-type_21","title":"Return type","text":"<p>ProjectData</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_21","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_21","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_21","title":"HTTP response details","text":"Status code Description Response headers 200 The project data is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#get_project_data_children","title":"get_project_data_children","text":"<p>ProjectDataPagedList get_project_data_children(project_id, data_id, full_text=full_text, id=id, filename=filename, filename_match_mode=filename_match_mode, status=status, format_id=format_id, format_code=format_code, type=type, creation_date_after=creation_date_after, creation_date_before=creation_date_before, status_date_after=status_date_after, status_date_before=status_date_before, user_tag=user_tag, user_tag_match_mode=user_tag_match_mode, run_input_tag=run_input_tag, run_input_tag_match_mode=run_input_tag_match_mode, run_output_tag=run_output_tag, run_output_tag_match_mode=run_output_tag_match_mode, connector_tag=connector_tag, connector_tag_match_mode=connector_tag_match_mode, technical_tag=technical_tag, technical_tag_match_mode=technical_tag_match_mode, not_in_run=not_in_run, not_linked_to_sample=not_linked_to_sample, instrument_run_id=instrument_run_id, page_offset=page_offset, page_token=page_token, page_size=page_size)</p> <p>Retrieve the children of this data.</p>"},{"location":"v3/docs/ProjectDataApi/#changelog","title":"Changelog","text":"<p>For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.</p>"},{"location":"v3/docs/ProjectDataApi/#v3","title":"[V3]","text":"<p>Initial version</p>"},{"location":"v3/docs/ProjectDataApi/#v4","title":"[V4]","text":"<p>Added pagination</p>"},{"location":"v3/docs/ProjectDataApi/#example_22","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_data_paged_list import ProjectDataPagedList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_id = 'data_id_example' # str | \n    full_text = 'full_text_example' # str | To search through multiple fields of data. (optional)\n    id = ['id_example'] # List[str] | The ids to filter on. This will always match exact. (optional)\n    filename = ['filename_example'] # List[str] | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional)\n    filename_match_mode = 'filename_match_mode_example' # str | How the filenames are filtered.  (optional)\n    status = ['status_example'] # List[str] | The statuses to filter on. (optional)\n    format_id = ['format_id_example'] # List[str] | The IDs of the formats to filter on. (optional)\n    format_code = ['format_code_example'] # List[str] | The codes of the formats to filter on. (optional)\n    type = 'type_example' # str | The type to filter on. (optional)\n    creation_date_after = '2013-10-20T19:20:30+01:00' # datetime | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    creation_date_before = '2013-10-20T19:20:30+01:00' # datetime | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_after = '2013-10-20T19:20:30+01:00' # datetime | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_before = '2013-10-20T19:20:30+01:00' # datetime | The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    user_tag = ['user_tag_example'] # List[str] | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional)\n    user_tag_match_mode = 'user_tag_match_mode_example' # str | How the usertags are filtered.  (optional)\n    run_input_tag = ['run_input_tag_example'] # List[str] | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_input_tag_match_mode = 'run_input_tag_match_mode_example' # str | How the runInputTags are filtered.  (optional)\n    run_output_tag = ['run_output_tag_example'] # List[str] | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_output_tag_match_mode = 'run_output_tag_match_mode_example' # str | How the runOutputTags are filtered.  (optional)\n    connector_tag = ['connector_tag_example'] # List[str] | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional)\n    connector_tag_match_mode = 'connector_tag_match_mode_example' # str | How the connectorTags are filtered.  (optional)\n    technical_tag = ['technical_tag_example'] # List[str] | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional)\n    technical_tag_match_mode = 'technical_tag_match_mode_example' # str | How the technicalTags are filtered.  (optional)\n    not_in_run = True # bool | When set to true, the data will be filtered on data which is not used in a run. (optional)\n    not_linked_to_sample = True # bool | When set to true only data that is unlinked to a sample will be returned.  This filter implies a filter of type File. (optional)\n    instrument_run_id = ['instrument_run_id_example'] # List[str] | The instrument run IDs of the sequencing runs to filter on. (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n\n    try:\n        # Retrieve the children of this data.\n        api_response = api_instance.get_project_data_children(project_id, data_id, full_text=full_text, id=id, filename=filename, filename_match_mode=filename_match_mode, status=status, format_id=format_id, format_code=format_code, type=type, creation_date_after=creation_date_after, creation_date_before=creation_date_before, status_date_after=status_date_after, status_date_before=status_date_before, user_tag=user_tag, user_tag_match_mode=user_tag_match_mode, run_input_tag=run_input_tag, run_input_tag_match_mode=run_input_tag_match_mode, run_output_tag=run_output_tag, run_output_tag_match_mode=run_output_tag_match_mode, connector_tag=connector_tag, connector_tag_match_mode=connector_tag_match_mode, technical_tag=technical_tag, technical_tag_match_mode=technical_tag_match_mode, not_in_run=not_in_run, not_linked_to_sample=not_linked_to_sample, instrument_run_id=instrument_run_id, page_offset=page_offset, page_token=page_token, page_size=page_size)\n        print(\"The response of ProjectDataApi-&gt;get_project_data_children:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_project_data_children: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_22","title":"Parameters","text":"Name Type Description Notes project_id str data_id str full_text str To search through multiple fields of data. [optional] id List[str] The ids to filter on. This will always match exact. [optional] filename List[str] The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] status List[str] The statuses to filter on. [optional] format_id List[str] The IDs of the formats to filter on. [optional] format_code List[str] The codes of the formats to filter on. [optional] type str The type to filter on. [optional] creation_date_after datetime The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before datetime The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after datetime The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before datetime The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag List[str] The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag List[str] The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag List[str] The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag List[str] The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag List[str] The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run bool When set to true, the data will be filtered on data which is not used in a run. [optional] not_linked_to_sample bool When set to true only data that is unlinked to a sample will be returned.  This filter implies a filter of type File. [optional] instrument_run_id List[str] The instrument run IDs of the sequencing runs to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional]"},{"location":"v3/docs/ProjectDataApi/#return-type_22","title":"Return type","text":"<p>ProjectDataPagedList</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_22","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_22","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_22","title":"HTTP response details","text":"Status code Description Response headers 200 The list of data children is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#get_project_data_list","title":"get_project_data_list","text":"<p>ProjectDataPagedList get_project_data_list(project_id, full_text=full_text, id=id, filename=filename, filename_match_mode=filename_match_mode, file_path=file_path, file_path_match_mode=file_path_match_mode, status=status, format_id=format_id, format_code=format_code, type=type, non_indexed_folders=non_indexed_folders, parent_folder_id=parent_folder_id, parent_folder_path=parent_folder_path, creation_date_after=creation_date_after, creation_date_before=creation_date_before, status_date_after=status_date_after, status_date_before=status_date_before, user_tag=user_tag, user_tag_match_mode=user_tag_match_mode, run_input_tag=run_input_tag, run_input_tag_match_mode=run_input_tag_match_mode, run_output_tag=run_output_tag, run_output_tag_match_mode=run_output_tag_match_mode, connector_tag=connector_tag, connector_tag_match_mode=connector_tag_match_mode, technical_tag=technical_tag, technical_tag_match_mode=technical_tag_match_mode, not_in_run=not_in_run, not_linked_to_sample=not_linked_to_sample, instrument_run_id=instrument_run_id, owning_project_id=owning_project_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)</p> <p>Retrieve the list of project data.</p>"},{"location":"v3/docs/ProjectDataApi/#example_23","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_data_paged_list import ProjectDataPagedList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    full_text = 'full_text_example' # str | To search through multiple fields of data. (optional)\n    id = ['id_example'] # List[str] | The ids to filter on. This will always match exact. (optional)\n    filename = ['filename_example'] # List[str] | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional)\n    filename_match_mode = 'filename_match_mode_example' # str | How the filenames are filtered.  (optional)\n    file_path = ['file_path_example'] # List[str] | The paths of the files to filter on. (optional)\n    file_path_match_mode = STARTS_WITH_CASE_INSENSITIVE # str | How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). (optional) (default to STARTS_WITH_CASE_INSENSITIVE)\n    status = ['status_example'] # List[str] | The statuses to filter on. (optional)\n    format_id = ['format_id_example'] # List[str] | The IDs of the formats to filter on. (optional)\n    format_code = ['format_code_example'] # List[str] | The codes of the formats to filter on. (optional)\n    type = 'type_example' # str | The type to filter on. (optional)\n    non_indexed_folders = True # bool | To filter on non-indexed folders. (optional)\n    parent_folder_id = ['parent_folder_id_example'] # List[str] | The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. (optional)\n    parent_folder_path = 'parent_folder_path_example' # str | The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files. (optional)\n    creation_date_after = '2013-10-20T19:20:30+01:00' # datetime | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    creation_date_before = '2013-10-20T19:20:30+01:00' # datetime | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_after = '2013-10-20T19:20:30+01:00' # datetime | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_before = '2013-10-20T19:20:30+01:00' # datetime | The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    user_tag = ['user_tag_example'] # List[str] | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional)\n    user_tag_match_mode = 'user_tag_match_mode_example' # str | How the usertags are filtered.  (optional)\n    run_input_tag = ['run_input_tag_example'] # List[str] | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_input_tag_match_mode = 'run_input_tag_match_mode_example' # str | How the runInputTags are filtered.  (optional)\n    run_output_tag = ['run_output_tag_example'] # List[str] | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_output_tag_match_mode = 'run_output_tag_match_mode_example' # str | How the runOutputTags are filtered.  (optional)\n    connector_tag = ['connector_tag_example'] # List[str] | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional)\n    connector_tag_match_mode = 'connector_tag_match_mode_example' # str | How the connectorTags are filtered.  (optional)\n    technical_tag = ['technical_tag_example'] # List[str] | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional)\n    technical_tag_match_mode = 'technical_tag_match_mode_example' # str | How the technicalTags are filtered.  (optional)\n    not_in_run = True # bool | When set to true, the data will be filtered on data which is not used in a run. (optional)\n    not_linked_to_sample = True # bool | When set to true only data that is unlinked to a sample will be returned.  This filter implies a filter of type File. (optional)\n    instrument_run_id = ['instrument_run_id_example'] # List[str] | The instrument run IDs of the sequencing runs to filter on. (optional)\n    owning_project_id = ['owning_project_id_example'] # List[str] | The owning project ID to filter on. (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt (optional)\n\n    try:\n        # Retrieve the list of project data.\n        api_response = api_instance.get_project_data_list(project_id, full_text=full_text, id=id, filename=filename, filename_match_mode=filename_match_mode, file_path=file_path, file_path_match_mode=file_path_match_mode, status=status, format_id=format_id, format_code=format_code, type=type, non_indexed_folders=non_indexed_folders, parent_folder_id=parent_folder_id, parent_folder_path=parent_folder_path, creation_date_after=creation_date_after, creation_date_before=creation_date_before, status_date_after=status_date_after, status_date_before=status_date_before, user_tag=user_tag, user_tag_match_mode=user_tag_match_mode, run_input_tag=run_input_tag, run_input_tag_match_mode=run_input_tag_match_mode, run_output_tag=run_output_tag, run_output_tag_match_mode=run_output_tag_match_mode, connector_tag=connector_tag, connector_tag_match_mode=connector_tag_match_mode, technical_tag=technical_tag, technical_tag_match_mode=technical_tag_match_mode, not_in_run=not_in_run, not_linked_to_sample=not_linked_to_sample, instrument_run_id=instrument_run_id, owning_project_id=owning_project_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        print(\"The response of ProjectDataApi-&gt;get_project_data_list:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_project_data_list: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_23","title":"Parameters","text":"Name Type Description Notes project_id str full_text str To search through multiple fields of data. [optional] id List[str] The ids to filter on. This will always match exact. [optional] filename List[str] The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] file_path List[str] The paths of the files to filter on. [optional] file_path_match_mode str How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). [optional] [default to STARTS_WITH_CASE_INSENSITIVE] status List[str] The statuses to filter on. [optional] format_id List[str] The IDs of the formats to filter on. [optional] format_code List[str] The codes of the formats to filter on. [optional] type str The type to filter on. [optional] non_indexed_folders bool To filter on non-indexed folders. [optional] parent_folder_id List[str] The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. [optional] parent_folder_path str The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files. [optional] creation_date_after datetime The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before datetime The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after datetime The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before datetime The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag List[str] The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag List[str] The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag List[str] The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag List[str] The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag List[str] The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run bool When set to true, the data will be filtered on data which is not used in a run. [optional] not_linked_to_sample bool When set to true only data that is unlinked to a sample will be returned.  This filter implies a filter of type File. [optional] instrument_run_id List[str] The instrument run IDs of the sequencing runs to filter on. [optional] owning_project_id List[str] The owning project ID to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt [optional]"},{"location":"v3/docs/ProjectDataApi/#return-type_23","title":"Return type","text":"<p>ProjectDataPagedList</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_23","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_23","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_23","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project data is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#get_projects_linked_to_data","title":"get_projects_linked_to_data","text":"<p>ProjectList get_projects_linked_to_data(project_id, data_id)</p> <p>Retrieve a list of projects to which this data is linked.</p>"},{"location":"v3/docs/ProjectDataApi/#example_24","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_list import ProjectList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_id = 'data_id_example' # str | \n\n    try:\n        # Retrieve a list of projects to which this data is linked.\n        api_response = api_instance.get_projects_linked_to_data(project_id, data_id)\n        print(\"The response of ProjectDataApi-&gt;get_projects_linked_to_data:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_projects_linked_to_data: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_24","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v3/docs/ProjectDataApi/#return-type_24","title":"Return type","text":"<p>ProjectList</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_24","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_24","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_24","title":"HTTP response details","text":"Status code Description Response headers 200 The list of projects is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#get_secondary_data","title":"get_secondary_data","text":"<p>DataList get_secondary_data(project_id, data_id)</p> <p>Retrieve a list of secondary data for data.</p>"},{"location":"v3/docs/ProjectDataApi/#example_25","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.data_list import DataList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_id = 'data_id_example' # str | \n\n    try:\n        # Retrieve a list of secondary data for data.\n        api_response = api_instance.get_secondary_data(project_id, data_id)\n        print(\"The response of ProjectDataApi-&gt;get_secondary_data:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;get_secondary_data: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_25","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v3/docs/ProjectDataApi/#return-type_25","title":"Return type","text":"<p>DataList</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_25","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_25","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_25","title":"HTTP response details","text":"Status code Description Response headers 200 The list of secondary data is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#link_data_to_project","title":"link_data_to_project","text":"<p>ProjectData link_data_to_project(project_id, data_id)</p> <p>Link data to this project.</p>"},{"location":"v3/docs/ProjectDataApi/#example_26","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_data import ProjectData\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_id = 'data_id_example' # str | \n\n    try:\n        # Link data to this project.\n        api_response = api_instance.link_data_to_project(project_id, data_id)\n        print(\"The response of ProjectDataApi-&gt;link_data_to_project:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;link_data_to_project: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_26","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v3/docs/ProjectDataApi/#return-type_26","title":"Return type","text":"<p>ProjectData</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_26","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_26","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_26","title":"HTTP response details","text":"Status code Description Response headers 201 The data is successfully linked to the project. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#remove_secondary_data","title":"remove_secondary_data","text":"<p>remove_secondary_data(project_id, data_id, secondary_data_id)</p> <p>Remove secondary data from data.</p>"},{"location":"v3/docs/ProjectDataApi/#example_27","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_id = 'data_id_example' # str | \n    secondary_data_id = 'secondary_data_id_example' # str | \n\n    try:\n        # Remove secondary data from data.\n        api_instance.remove_secondary_data(project_id, data_id, secondary_data_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;remove_secondary_data: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_27","title":"Parameters","text":"Name Type Description Notes project_id str data_id str secondary_data_id str"},{"location":"v3/docs/ProjectDataApi/#return-type_27","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_27","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_27","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_27","title":"HTTP response details","text":"Status code Description Response headers 204 The secondary data is successfully removed. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#schedule_download_for_data","title":"schedule_download_for_data","text":"<p>DataTransfer schedule_download_for_data(project_id, data_id, schedule_download)</p> <p>Schedule a download.</p> <p>Endpoint for scheduling a download for the data specified by the ID to a connector. This download will only start when the connector is running. Data transfers for folder contents are created asynchronously, meaning that they will not be immediately visible in the project data transfers end point. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/ProjectDataApi/#example_28","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.data_transfer import DataTransfer\nfrom libica.openapi.v3.models.schedule_download import ScheduleDownload\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_id = 'data_id_example' # str | \n    schedule_download = libica.openapi.v3.ScheduleDownload() # ScheduleDownload | \n\n    try:\n        # Schedule a download.\n        api_response = api_instance.schedule_download_for_data(project_id, data_id, schedule_download)\n        print(\"The response of ProjectDataApi-&gt;schedule_download_for_data:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;schedule_download_for_data: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_28","title":"Parameters","text":"Name Type Description Notes project_id str data_id str schedule_download ScheduleDownload"},{"location":"v3/docs/ProjectDataApi/#return-type_28","title":"Return type","text":"<p>DataTransfer</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_28","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_28","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_28","title":"HTTP response details","text":"Status code Description Response headers 0 The datatransfer which is scheduled. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#unarchive_data","title":"unarchive_data","text":"<p>unarchive_data(project_id, data_id)</p> <p>Schedule this data for unarchival.</p> <p>Endpoint for scheduling this data for unarchival. This will also unarchive all files and directories below that data. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/ProjectDataApi/#example_29","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_id = 'data_id_example' # str | \n\n    try:\n        # Schedule this data for unarchival.\n        api_instance.unarchive_data(project_id, data_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;unarchive_data: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_29","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v3/docs/ProjectDataApi/#return-type_29","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_29","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_29","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_29","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully scheduled for unarchival. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#unlink_data_from_project","title":"unlink_data_from_project","text":"<p>unlink_data_from_project(project_id, data_id)</p> <p>Unlink data from this project.</p> <p>Note that for folders, this only unlinks the folder itself, not the folder contents!  Use 'Project Data Unlinking Batch' for recursive unlinking.</p>"},{"location":"v3/docs/ProjectDataApi/#example_30","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_id = 'data_id_example' # str | \n\n    try:\n        # Unlink data from this project.\n        api_instance.unlink_data_from_project(project_id, data_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;unlink_data_from_project: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_30","title":"Parameters","text":"Name Type Description Notes project_id str data_id str"},{"location":"v3/docs/ProjectDataApi/#return-type_30","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_30","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_30","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_30","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully unlinked from this project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataApi/#update_project_data","title":"update_project_data","text":"<p>ProjectData update_project_data(project_id, data_id, project_data)</p> <p>Update this project data.</p> <p>Fields which can be updated for files:  - data.willBeArchivedAt  - data.willBeDeletedAt  - data.format  - data.tags</p> <p>Fields which can be updated for folders:  - data.tags</p>"},{"location":"v3/docs/ProjectDataApi/#example_31","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_data import ProjectData\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_id = 'data_id_example' # str | \n    project_data = libica.openapi.v3.ProjectData() # ProjectData | The updated project data.\n\n    try:\n        # Update this project data.\n        api_response = api_instance.update_project_data(project_id, data_id, project_data)\n        print(\"The response of ProjectDataApi-&gt;update_project_data:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataApi-&gt;update_project_data: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataApi/#parameters_31","title":"Parameters","text":"Name Type Description Notes project_id str data_id str project_data ProjectData The updated project data."},{"location":"v3/docs/ProjectDataApi/#return-type_31","title":"Return type","text":"<p>ProjectData</p>"},{"location":"v3/docs/ProjectDataApi/#authorization_31","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataApi/#http-request-headers_31","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataApi/#http-response-details_31","title":"HTTP response details","text":"Status code Description Response headers 200 The project data is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataCopyBatch/","title":"ProjectDataCopyBatch","text":""},{"location":"v3/docs/ProjectDataCopyBatch/#properties","title":"Properties","text":"Name Type Description Notes id str job Job destination_folder_id str [optional] copy_user_tags bool copy_technical_tags bool copy_instrument_info bool action_on_exist str"},{"location":"v3/docs/ProjectDataCopyBatch/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_copy_batch import ProjectDataCopyBatch\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataCopyBatch from a JSON string\nproject_data_copy_batch_instance = ProjectDataCopyBatch.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataCopyBatch.to_json())\n\n# convert the object into a dict\nproject_data_copy_batch_dict = project_data_copy_batch_instance.to_dict()\n# create an instance of ProjectDataCopyBatch from a dict\nproject_data_copy_batch_from_dict = ProjectDataCopyBatch.from_dict(project_data_copy_batch_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataCopyBatchApi/","title":"libica.openapi.v3.ProjectDataCopyBatchApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_project_data_copy_batch POST /api/projects/{projectId}/dataCopyBatch Create a project data copy batch. get_project_data_copy_batch GET /api/projects/{projectId}/dataCopyBatch/{batchId} Retrieve a project data copy batch. get_project_data_copy_batch_item GET /api/projects/{projectId}/dataCopyBatch/{batchId}/items/{itemId} Retrieve a project data copy batch item. get_project_data_copy_batch_items GET /api/projects/{projectId}/dataCopyBatch/{batchId}/items Retrieve a list of project data copy batch items."},{"location":"v3/docs/ProjectDataCopyBatchApi/#create_project_data_copy_batch","title":"create_project_data_copy_batch","text":"<p>ProjectDataCopyBatch create_project_data_copy_batch(project_id, create_project_data_copy_batch)</p> <p>Create a project data copy batch.</p>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_project_data_copy_batch import CreateProjectDataCopyBatch\nfrom libica.openapi.v3.models.project_data_copy_batch import ProjectDataCopyBatch\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataCopyBatchApi(api_client)\n    project_id = 'project_id_example' # str | The ID of the project to which the data will be copied\n    create_project_data_copy_batch = libica.openapi.v3.CreateProjectDataCopyBatch() # CreateProjectDataCopyBatch | \n\n    try:\n        # Create a project data copy batch.\n        api_response = api_instance.create_project_data_copy_batch(project_id, create_project_data_copy_batch)\n        print(\"The response of ProjectDataCopyBatchApi-&gt;create_project_data_copy_batch:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataCopyBatchApi-&gt;create_project_data_copy_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project to which the data will be copied create_project_data_copy_batch CreateProjectDataCopyBatch"},{"location":"v3/docs/ProjectDataCopyBatchApi/#return-type","title":"Return type","text":"<p>ProjectDataCopyBatch</p>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The project data copy batch is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#get_project_data_copy_batch","title":"get_project_data_copy_batch","text":"<p>ProjectDataCopyBatch get_project_data_copy_batch(project_id, batch_id)</p> <p>Retrieve a project data copy batch.</p>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_data_copy_batch import ProjectDataCopyBatch\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataCopyBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    batch_id = 'batch_id_example' # str | \n\n    try:\n        # Retrieve a project data copy batch.\n        api_response = api_instance.get_project_data_copy_batch(project_id, batch_id)\n        print(\"The response of ProjectDataCopyBatchApi-&gt;get_project_data_copy_batch:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataCopyBatchApi-&gt;get_project_data_copy_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str"},{"location":"v3/docs/ProjectDataCopyBatchApi/#return-type_1","title":"Return type","text":"<p>ProjectDataCopyBatch</p>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The project data copy batch is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#get_project_data_copy_batch_item","title":"get_project_data_copy_batch_item","text":"<p>ProjectDataCopyBatchItem get_project_data_copy_batch_item(project_id, batch_id, item_id)</p> <p>Retrieve a project data copy batch item.</p>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_data_copy_batch_item import ProjectDataCopyBatchItem\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataCopyBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    batch_id = 'batch_id_example' # str | \n    item_id = 'item_id_example' # str | \n\n    try:\n        # Retrieve a project data copy batch item.\n        api_response = api_instance.get_project_data_copy_batch_item(project_id, batch_id, item_id)\n        print(\"The response of ProjectDataCopyBatchApi-&gt;get_project_data_copy_batch_item:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataCopyBatchApi-&gt;get_project_data_copy_batch_item: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str item_id str"},{"location":"v3/docs/ProjectDataCopyBatchApi/#return-type_2","title":"Return type","text":"<p>ProjectDataCopyBatchItem</p>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The project data copy batch item is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#get_project_data_copy_batch_items","title":"get_project_data_copy_batch_items","text":"<p>ProjectDataCopyBatchItemPagedList get_project_data_copy_batch_items(project_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size)</p> <p>Retrieve a list of project data copy batch items.</p>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_data_copy_batch_item_paged_list import ProjectDataCopyBatchItemPagedList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataCopyBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    batch_id = 'batch_id_example' # str | \n    status = ['status_example'] # List[str] | The statuses to filter on. (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n\n    try:\n        # Retrieve a list of project data copy batch items.\n        api_response = api_instance.get_project_data_copy_batch_items(project_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size)\n        print(\"The response of ProjectDataCopyBatchApi-&gt;get_project_data_copy_batch_items:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataCopyBatchApi-&gt;get_project_data_copy_batch_items: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str status List[str] The statuses to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional]"},{"location":"v3/docs/ProjectDataCopyBatchApi/#return-type_3","title":"Return type","text":"<p>ProjectDataCopyBatchItemPagedList</p>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataCopyBatchApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project data copy batch items is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataCopyBatchItem/","title":"ProjectDataCopyBatchItem","text":""},{"location":"v3/docs/ProjectDataCopyBatchItem/#properties","title":"Properties","text":"Name Type Description Notes id str request ProjectDataCopyBatchItemRequest processing ProjectDataCopyBatchItemProcessing created_project_data ProjectData [optional]"},{"location":"v3/docs/ProjectDataCopyBatchItem/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_copy_batch_item import ProjectDataCopyBatchItem\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataCopyBatchItem from a JSON string\nproject_data_copy_batch_item_instance = ProjectDataCopyBatchItem.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataCopyBatchItem.to_json())\n\n# convert the object into a dict\nproject_data_copy_batch_item_dict = project_data_copy_batch_item_instance.to_dict()\n# create an instance of ProjectDataCopyBatchItem from a dict\nproject_data_copy_batch_item_from_dict = ProjectDataCopyBatchItem.from_dict(project_data_copy_batch_item_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataCopyBatchItemPagedList/","title":"ProjectDataCopyBatchItemPagedList","text":""},{"location":"v3/docs/ProjectDataCopyBatchItemPagedList/#properties","title":"Properties","text":"Name Type Description Notes items List[ProjectDataCopyBatchItem] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/ProjectDataCopyBatchItemPagedList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_copy_batch_item_paged_list import ProjectDataCopyBatchItemPagedList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataCopyBatchItemPagedList from a JSON string\nproject_data_copy_batch_item_paged_list_instance = ProjectDataCopyBatchItemPagedList.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataCopyBatchItemPagedList.to_json())\n\n# convert the object into a dict\nproject_data_copy_batch_item_paged_list_dict = project_data_copy_batch_item_paged_list_instance.to_dict()\n# create an instance of ProjectDataCopyBatchItemPagedList from a dict\nproject_data_copy_batch_item_paged_list_from_dict = ProjectDataCopyBatchItemPagedList.from_dict(project_data_copy_batch_item_paged_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataCopyBatchItemProcessing/","title":"ProjectDataCopyBatchItemProcessing","text":""},{"location":"v3/docs/ProjectDataCopyBatchItemProcessing/#properties","title":"Properties","text":"Name Type Description Notes status str additional_status_information str Additional information regarding the status of this batch item. [optional]"},{"location":"v3/docs/ProjectDataCopyBatchItemProcessing/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_copy_batch_item_processing import ProjectDataCopyBatchItemProcessing\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataCopyBatchItemProcessing from a JSON string\nproject_data_copy_batch_item_processing_instance = ProjectDataCopyBatchItemProcessing.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataCopyBatchItemProcessing.to_json())\n\n# convert the object into a dict\nproject_data_copy_batch_item_processing_dict = project_data_copy_batch_item_processing_instance.to_dict()\n# create an instance of ProjectDataCopyBatchItemProcessing from a dict\nproject_data_copy_batch_item_processing_from_dict = ProjectDataCopyBatchItemProcessing.from_dict(project_data_copy_batch_item_processing_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataCopyBatchItemRequest/","title":"ProjectDataCopyBatchItemRequest","text":""},{"location":"v3/docs/ProjectDataCopyBatchItemRequest/#properties","title":"Properties","text":"Name Type Description Notes data_id str"},{"location":"v3/docs/ProjectDataCopyBatchItemRequest/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_copy_batch_item_request import ProjectDataCopyBatchItemRequest\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataCopyBatchItemRequest from a JSON string\nproject_data_copy_batch_item_request_instance = ProjectDataCopyBatchItemRequest.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataCopyBatchItemRequest.to_json())\n\n# convert the object into a dict\nproject_data_copy_batch_item_request_dict = project_data_copy_batch_item_request_instance.to_dict()\n# create an instance of ProjectDataCopyBatchItemRequest from a dict\nproject_data_copy_batch_item_request_from_dict = ProjectDataCopyBatchItemRequest.from_dict(project_data_copy_batch_item_request_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataLinkingBatch/","title":"ProjectDataLinkingBatch","text":""},{"location":"v3/docs/ProjectDataLinkingBatch/#properties","title":"Properties","text":"Name Type Description Notes id str job Job"},{"location":"v3/docs/ProjectDataLinkingBatch/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_linking_batch import ProjectDataLinkingBatch\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataLinkingBatch from a JSON string\nproject_data_linking_batch_instance = ProjectDataLinkingBatch.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataLinkingBatch.to_json())\n\n# convert the object into a dict\nproject_data_linking_batch_dict = project_data_linking_batch_instance.to_dict()\n# create an instance of ProjectDataLinkingBatch from a dict\nproject_data_linking_batch_from_dict = ProjectDataLinkingBatch.from_dict(project_data_linking_batch_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/","title":"libica.openapi.v3.ProjectDataLinkingBatchApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_project_data_linking_batch POST /api/projects/{projectId}/dataLinkingBatch Create a project data linking batch. get_project_data_linking_batch GET /api/projects/{projectId}/dataLinkingBatch/{batchId} Retrieve a project data linking batch. get_project_data_linking_batch_item GET /api/projects/{projectId}/dataLinkingBatch/{batchId}/items/{itemId} Retrieve a project data linking batch item. get_project_data_linking_batch_items GET /api/projects/{projectId}/dataLinkingBatch/{batchId}/items Retrieve a list of project data linking batch items."},{"location":"v3/docs/ProjectDataLinkingBatchApi/#create_project_data_linking_batch","title":"create_project_data_linking_batch","text":"<p>ProjectDataLinkingBatch create_project_data_linking_batch(project_id, create_project_data_linking_batch)</p> <p>Create a project data linking batch.</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#changelog","title":"Changelog","text":"<p>For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#v3","title":"[V3]","text":"<p>Initial version deprecated.  It's recommended to limit the amount of links per batch to 25.000. Recommended to use V4 for performance efficiency.</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#v4","title":"[V4]","text":"<p>More efficient, handles folder contents via the folder item, instead of creating separate items for all contents.</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_project_data_linking_batch import CreateProjectDataLinkingBatch\nfrom libica.openapi.v3.models.project_data_linking_batch import ProjectDataLinkingBatch\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataLinkingBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_project_data_linking_batch = libica.openapi.v3.CreateProjectDataLinkingBatch() # CreateProjectDataLinkingBatch | \n\n    try:\n        # Create a project data linking batch.\n        api_response = api_instance.create_project_data_linking_batch(project_id, create_project_data_linking_batch)\n        print(\"The response of ProjectDataLinkingBatchApi-&gt;create_project_data_linking_batch:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataLinkingBatchApi-&gt;create_project_data_linking_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str create_project_data_linking_batch CreateProjectDataLinkingBatch"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#return-type","title":"Return type","text":"<p>ProjectDataLinkingBatch</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json, application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The project data linking batch is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#get_project_data_linking_batch","title":"get_project_data_linking_batch","text":"<p>ProjectDataLinkingBatch get_project_data_linking_batch(project_id, batch_id)</p> <p>Retrieve a project data linking batch.</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_data_linking_batch import ProjectDataLinkingBatch\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataLinkingBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    batch_id = 'batch_id_example' # str | \n\n    try:\n        # Retrieve a project data linking batch.\n        api_response = api_instance.get_project_data_linking_batch(project_id, batch_id)\n        print(\"The response of ProjectDataLinkingBatchApi-&gt;get_project_data_linking_batch:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataLinkingBatchApi-&gt;get_project_data_linking_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#return-type_1","title":"Return type","text":"<p>ProjectDataLinkingBatch</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The project data linking batch is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#get_project_data_linking_batch_item","title":"get_project_data_linking_batch_item","text":"<p>ProjectDataLinkingBatchItemV4 get_project_data_linking_batch_item(project_id, batch_id, item_id)</p> <p>Retrieve a project data linking batch item.</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#changelog_1","title":"Changelog","text":"<p>For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#v3_1","title":"[V3]","text":"<p>Initial version, deprecated, returns PARTIALLY_LINKED item processing status as FAILED.</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#v4_1","title":"[V4]","text":"<p>Supports PARTIALLY_LINKED item processing status.</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_data_linking_batch_item_v4 import ProjectDataLinkingBatchItemV4\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataLinkingBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    batch_id = 'batch_id_example' # str | \n    item_id = 'item_id_example' # str | \n\n    try:\n        # Retrieve a project data linking batch item.\n        api_response = api_instance.get_project_data_linking_batch_item(project_id, batch_id, item_id)\n        print(\"The response of ProjectDataLinkingBatchApi-&gt;get_project_data_linking_batch_item:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataLinkingBatchApi-&gt;get_project_data_linking_batch_item: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str item_id str"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#return-type_2","title":"Return type","text":"<p>ProjectDataLinkingBatchItemV4</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The project data linking batch item is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#get_project_data_linking_batch_items","title":"get_project_data_linking_batch_items","text":"<p>ProjectDataLinkingBatchItemPagedListV4 get_project_data_linking_batch_items(project_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size)</p> <p>Retrieve a list of project data linking batch items.</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#changelog_2","title":"Changelog","text":"<p>For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#v3_2","title":"[V3]","text":"<p>Initial version, deprecated, returns PARTIALLY_LINKED item processing status as FAILED.</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#v4_2","title":"[V4]","text":"<p>Supports PARTIALLY_LINKED item processing status.</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_data_linking_batch_item_paged_list_v4 import ProjectDataLinkingBatchItemPagedListV4\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataLinkingBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    batch_id = 'batch_id_example' # str | \n    status = ['status_example'] # List[str] | The statuses to filter on. (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n\n    try:\n        # Retrieve a list of project data linking batch items.\n        api_response = api_instance.get_project_data_linking_batch_items(project_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size)\n        print(\"The response of ProjectDataLinkingBatchApi-&gt;get_project_data_linking_batch_items:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataLinkingBatchApi-&gt;get_project_data_linking_batch_items: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str status List[str] The statuses to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional]"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#return-type_3","title":"Return type","text":"<p>ProjectDataLinkingBatchItemPagedListV4</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataLinkingBatchApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project data linking batch items is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataLinkingBatchItem/","title":"ProjectDataLinkingBatchItem","text":""},{"location":"v3/docs/ProjectDataLinkingBatchItem/#properties","title":"Properties","text":"Name Type Description Notes id str request ProjectDataLinkingBatchItemRequest processing ProjectDataLinkingBatchItemProcessing created_project_data ProjectData [optional]"},{"location":"v3/docs/ProjectDataLinkingBatchItem/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_linking_batch_item import ProjectDataLinkingBatchItem\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataLinkingBatchItem from a JSON string\nproject_data_linking_batch_item_instance = ProjectDataLinkingBatchItem.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataLinkingBatchItem.to_json())\n\n# convert the object into a dict\nproject_data_linking_batch_item_dict = project_data_linking_batch_item_instance.to_dict()\n# create an instance of ProjectDataLinkingBatchItem from a dict\nproject_data_linking_batch_item_from_dict = ProjectDataLinkingBatchItem.from_dict(project_data_linking_batch_item_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataLinkingBatchItemPagedList/","title":"ProjectDataLinkingBatchItemPagedList","text":""},{"location":"v3/docs/ProjectDataLinkingBatchItemPagedList/#properties","title":"Properties","text":"Name Type Description Notes items List[ProjectDataLinkingBatchItem] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/ProjectDataLinkingBatchItemPagedList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_linking_batch_item_paged_list import ProjectDataLinkingBatchItemPagedList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataLinkingBatchItemPagedList from a JSON string\nproject_data_linking_batch_item_paged_list_instance = ProjectDataLinkingBatchItemPagedList.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataLinkingBatchItemPagedList.to_json())\n\n# convert the object into a dict\nproject_data_linking_batch_item_paged_list_dict = project_data_linking_batch_item_paged_list_instance.to_dict()\n# create an instance of ProjectDataLinkingBatchItemPagedList from a dict\nproject_data_linking_batch_item_paged_list_from_dict = ProjectDataLinkingBatchItemPagedList.from_dict(project_data_linking_batch_item_paged_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataLinkingBatchItemPagedListV4/","title":"ProjectDataLinkingBatchItemPagedListV4","text":""},{"location":"v3/docs/ProjectDataLinkingBatchItemPagedListV4/#properties","title":"Properties","text":"Name Type Description Notes items List[ProjectDataLinkingBatchItemV4] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/ProjectDataLinkingBatchItemPagedListV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_linking_batch_item_paged_list_v4 import ProjectDataLinkingBatchItemPagedListV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataLinkingBatchItemPagedListV4 from a JSON string\nproject_data_linking_batch_item_paged_list_v4_instance = ProjectDataLinkingBatchItemPagedListV4.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataLinkingBatchItemPagedListV4.to_json())\n\n# convert the object into a dict\nproject_data_linking_batch_item_paged_list_v4_dict = project_data_linking_batch_item_paged_list_v4_instance.to_dict()\n# create an instance of ProjectDataLinkingBatchItemPagedListV4 from a dict\nproject_data_linking_batch_item_paged_list_v4_from_dict = ProjectDataLinkingBatchItemPagedListV4.from_dict(project_data_linking_batch_item_paged_list_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataLinkingBatchItemProcessing/","title":"ProjectDataLinkingBatchItemProcessing","text":""},{"location":"v3/docs/ProjectDataLinkingBatchItemProcessing/#properties","title":"Properties","text":"Name Type Description Notes status str additional_status_information str Additional information regarding the status of this batch item. [optional]"},{"location":"v3/docs/ProjectDataLinkingBatchItemProcessing/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_linking_batch_item_processing import ProjectDataLinkingBatchItemProcessing\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataLinkingBatchItemProcessing from a JSON string\nproject_data_linking_batch_item_processing_instance = ProjectDataLinkingBatchItemProcessing.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataLinkingBatchItemProcessing.to_json())\n\n# convert the object into a dict\nproject_data_linking_batch_item_processing_dict = project_data_linking_batch_item_processing_instance.to_dict()\n# create an instance of ProjectDataLinkingBatchItemProcessing from a dict\nproject_data_linking_batch_item_processing_from_dict = ProjectDataLinkingBatchItemProcessing.from_dict(project_data_linking_batch_item_processing_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataLinkingBatchItemProcessingV4/","title":"ProjectDataLinkingBatchItemProcessingV4","text":""},{"location":"v3/docs/ProjectDataLinkingBatchItemProcessingV4/#properties","title":"Properties","text":"Name Type Description Notes status str Possible values are: INITIALISED, WAITING_RESOURCES, RUNNING, LINKED, ALREADY_LINKED, FAILED, PARTIALLY_LINKED. More types could be added in a future release. additional_status_information str Additional information regarding the status of this batch item. [optional]"},{"location":"v3/docs/ProjectDataLinkingBatchItemProcessingV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_linking_batch_item_processing_v4 import ProjectDataLinkingBatchItemProcessingV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataLinkingBatchItemProcessingV4 from a JSON string\nproject_data_linking_batch_item_processing_v4_instance = ProjectDataLinkingBatchItemProcessingV4.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataLinkingBatchItemProcessingV4.to_json())\n\n# convert the object into a dict\nproject_data_linking_batch_item_processing_v4_dict = project_data_linking_batch_item_processing_v4_instance.to_dict()\n# create an instance of ProjectDataLinkingBatchItemProcessingV4 from a dict\nproject_data_linking_batch_item_processing_v4_from_dict = ProjectDataLinkingBatchItemProcessingV4.from_dict(project_data_linking_batch_item_processing_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataLinkingBatchItemRequest/","title":"ProjectDataLinkingBatchItemRequest","text":""},{"location":"v3/docs/ProjectDataLinkingBatchItemRequest/#properties","title":"Properties","text":"Name Type Description Notes data_id str"},{"location":"v3/docs/ProjectDataLinkingBatchItemRequest/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_linking_batch_item_request import ProjectDataLinkingBatchItemRequest\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataLinkingBatchItemRequest from a JSON string\nproject_data_linking_batch_item_request_instance = ProjectDataLinkingBatchItemRequest.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataLinkingBatchItemRequest.to_json())\n\n# convert the object into a dict\nproject_data_linking_batch_item_request_dict = project_data_linking_batch_item_request_instance.to_dict()\n# create an instance of ProjectDataLinkingBatchItemRequest from a dict\nproject_data_linking_batch_item_request_from_dict = ProjectDataLinkingBatchItemRequest.from_dict(project_data_linking_batch_item_request_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataLinkingBatchItemV4/","title":"ProjectDataLinkingBatchItemV4","text":""},{"location":"v3/docs/ProjectDataLinkingBatchItemV4/#properties","title":"Properties","text":"Name Type Description Notes id str request ProjectDataLinkingBatchItemRequest processing ProjectDataLinkingBatchItemProcessingV4 created_project_data ProjectData [optional]"},{"location":"v3/docs/ProjectDataLinkingBatchItemV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_linking_batch_item_v4 import ProjectDataLinkingBatchItemV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataLinkingBatchItemV4 from a JSON string\nproject_data_linking_batch_item_v4_instance = ProjectDataLinkingBatchItemV4.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataLinkingBatchItemV4.to_json())\n\n# convert the object into a dict\nproject_data_linking_batch_item_v4_dict = project_data_linking_batch_item_v4_instance.to_dict()\n# create an instance of ProjectDataLinkingBatchItemV4 from a dict\nproject_data_linking_batch_item_v4_from_dict = ProjectDataLinkingBatchItemV4.from_dict(project_data_linking_batch_item_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataMoveBatch/","title":"ProjectDataMoveBatch","text":""},{"location":"v3/docs/ProjectDataMoveBatch/#properties","title":"Properties","text":"Name Type Description Notes id str job Job destination_folder_id str [optional]"},{"location":"v3/docs/ProjectDataMoveBatch/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_move_batch import ProjectDataMoveBatch\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataMoveBatch from a JSON string\nproject_data_move_batch_instance = ProjectDataMoveBatch.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataMoveBatch.to_json())\n\n# convert the object into a dict\nproject_data_move_batch_dict = project_data_move_batch_instance.to_dict()\n# create an instance of ProjectDataMoveBatch from a dict\nproject_data_move_batch_from_dict = ProjectDataMoveBatch.from_dict(project_data_move_batch_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataMoveBatchApi/","title":"libica.openapi.v3.ProjectDataMoveBatchApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_project_data_move_batch POST /api/projects/{projectId}/dataMoveBatch Create a project data move batch. get_project_data_move_batch GET /api/projects/{projectId}/dataMoveBatch/{batchId} Retrieve a project data move batch. get_project_data_move_batch_item GET /api/projects/{projectId}/dataMoveBatch/{batchId}/items/{itemId} Retrieve a project data move batch item. get_project_data_move_batch_items POST /api/projects/{projectId}/dataMoveBatch/{batchId}/items:search Retrieve a list of project data move batch items."},{"location":"v3/docs/ProjectDataMoveBatchApi/#create_project_data_move_batch","title":"create_project_data_move_batch","text":"<p>ProjectDataMoveBatch create_project_data_move_batch(project_id, create_project_data_move_batch)</p> <p>Create a project data move batch.</p>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_project_data_move_batch import CreateProjectDataMoveBatch\nfrom libica.openapi.v3.models.project_data_move_batch import ProjectDataMoveBatch\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataMoveBatchApi(api_client)\n    project_id = 'project_id_example' # str | The ID of the project to which the data will be moved\n    create_project_data_move_batch = libica.openapi.v3.CreateProjectDataMoveBatch() # CreateProjectDataMoveBatch | \n\n    try:\n        # Create a project data move batch.\n        api_response = api_instance.create_project_data_move_batch(project_id, create_project_data_move_batch)\n        print(\"The response of ProjectDataMoveBatchApi-&gt;create_project_data_move_batch:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataMoveBatchApi-&gt;create_project_data_move_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project to which the data will be moved create_project_data_move_batch CreateProjectDataMoveBatch"},{"location":"v3/docs/ProjectDataMoveBatchApi/#return-type","title":"Return type","text":"<p>ProjectDataMoveBatch</p>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The project data move batch is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#get_project_data_move_batch","title":"get_project_data_move_batch","text":"<p>ProjectDataMoveBatch get_project_data_move_batch(project_id, batch_id)</p> <p>Retrieve a project data move batch.</p>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_data_move_batch import ProjectDataMoveBatch\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataMoveBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    batch_id = 'batch_id_example' # str | \n\n    try:\n        # Retrieve a project data move batch.\n        api_response = api_instance.get_project_data_move_batch(project_id, batch_id)\n        print(\"The response of ProjectDataMoveBatchApi-&gt;get_project_data_move_batch:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataMoveBatchApi-&gt;get_project_data_move_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str"},{"location":"v3/docs/ProjectDataMoveBatchApi/#return-type_1","title":"Return type","text":"<p>ProjectDataMoveBatch</p>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The project data move batch is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#get_project_data_move_batch_item","title":"get_project_data_move_batch_item","text":"<p>ProjectDataMoveBatchItem get_project_data_move_batch_item(project_id, batch_id, item_id)</p> <p>Retrieve a project data move batch item.</p>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_data_move_batch_item import ProjectDataMoveBatchItem\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataMoveBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    batch_id = 'batch_id_example' # str | \n    item_id = 'item_id_example' # str | \n\n    try:\n        # Retrieve a project data move batch item.\n        api_response = api_instance.get_project_data_move_batch_item(project_id, batch_id, item_id)\n        print(\"The response of ProjectDataMoveBatchApi-&gt;get_project_data_move_batch_item:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataMoveBatchApi-&gt;get_project_data_move_batch_item: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str item_id str"},{"location":"v3/docs/ProjectDataMoveBatchApi/#return-type_2","title":"Return type","text":"<p>ProjectDataMoveBatchItem</p>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The project data move batch item is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#get_project_data_move_batch_items","title":"get_project_data_move_batch_items","text":"<p>ProjectDataMoveBatchItemPagedList get_project_data_move_batch_items(project_id, batch_id, page_offset=page_offset, page_token=page_token, page_size=page_size, project_data_move_batch_item_query_parameters=project_data_move_batch_item_query_parameters)</p> <p>Retrieve a list of project data move batch items.</p>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_data_move_batch_item_paged_list import ProjectDataMoveBatchItemPagedList\nfrom libica.openapi.v3.models.project_data_move_batch_item_query_parameters import ProjectDataMoveBatchItemQueryParameters\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataMoveBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    batch_id = 'batch_id_example' # str | \n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    project_data_move_batch_item_query_parameters = libica.openapi.v3.ProjectDataMoveBatchItemQueryParameters() # ProjectDataMoveBatchItemQueryParameters |  (optional)\n\n    try:\n        # Retrieve a list of project data move batch items.\n        api_response = api_instance.get_project_data_move_batch_items(project_id, batch_id, page_offset=page_offset, page_token=page_token, page_size=page_size, project_data_move_batch_item_query_parameters=project_data_move_batch_item_query_parameters)\n        print(\"The response of ProjectDataMoveBatchApi-&gt;get_project_data_move_batch_items:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataMoveBatchApi-&gt;get_project_data_move_batch_items: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] project_data_move_batch_item_query_parameters ProjectDataMoveBatchItemQueryParameters [optional]"},{"location":"v3/docs/ProjectDataMoveBatchApi/#return-type_3","title":"Return type","text":"<p>ProjectDataMoveBatchItemPagedList</p>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataMoveBatchApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project data move batch items is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataMoveBatchItem/","title":"ProjectDataMoveBatchItem","text":""},{"location":"v3/docs/ProjectDataMoveBatchItem/#properties","title":"Properties","text":"Name Type Description Notes id str request ProjectDataMoveBatchItemRequest processing ProjectDataMoveBatchItemProcessing created_project_data ProjectData [optional]"},{"location":"v3/docs/ProjectDataMoveBatchItem/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_move_batch_item import ProjectDataMoveBatchItem\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataMoveBatchItem from a JSON string\nproject_data_move_batch_item_instance = ProjectDataMoveBatchItem.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataMoveBatchItem.to_json())\n\n# convert the object into a dict\nproject_data_move_batch_item_dict = project_data_move_batch_item_instance.to_dict()\n# create an instance of ProjectDataMoveBatchItem from a dict\nproject_data_move_batch_item_from_dict = ProjectDataMoveBatchItem.from_dict(project_data_move_batch_item_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataMoveBatchItemPagedList/","title":"ProjectDataMoveBatchItemPagedList","text":""},{"location":"v3/docs/ProjectDataMoveBatchItemPagedList/#properties","title":"Properties","text":"Name Type Description Notes items List[ProjectDataMoveBatchItem] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/ProjectDataMoveBatchItemPagedList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_move_batch_item_paged_list import ProjectDataMoveBatchItemPagedList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataMoveBatchItemPagedList from a JSON string\nproject_data_move_batch_item_paged_list_instance = ProjectDataMoveBatchItemPagedList.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataMoveBatchItemPagedList.to_json())\n\n# convert the object into a dict\nproject_data_move_batch_item_paged_list_dict = project_data_move_batch_item_paged_list_instance.to_dict()\n# create an instance of ProjectDataMoveBatchItemPagedList from a dict\nproject_data_move_batch_item_paged_list_from_dict = ProjectDataMoveBatchItemPagedList.from_dict(project_data_move_batch_item_paged_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataMoveBatchItemProcessing/","title":"ProjectDataMoveBatchItemProcessing","text":""},{"location":"v3/docs/ProjectDataMoveBatchItemProcessing/#properties","title":"Properties","text":"Name Type Description Notes status str The status of the batch item. Possible values are: QUEUED, MOVING, MOVED, PARTIALLY_MOVED, FAILED. More statuses could be added in a future release. additional_status_information str Additional information regarding the status of this batch item. [optional]"},{"location":"v3/docs/ProjectDataMoveBatchItemProcessing/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_move_batch_item_processing import ProjectDataMoveBatchItemProcessing\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataMoveBatchItemProcessing from a JSON string\nproject_data_move_batch_item_processing_instance = ProjectDataMoveBatchItemProcessing.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataMoveBatchItemProcessing.to_json())\n\n# convert the object into a dict\nproject_data_move_batch_item_processing_dict = project_data_move_batch_item_processing_instance.to_dict()\n# create an instance of ProjectDataMoveBatchItemProcessing from a dict\nproject_data_move_batch_item_processing_from_dict = ProjectDataMoveBatchItemProcessing.from_dict(project_data_move_batch_item_processing_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataMoveBatchItemQueryParameters/","title":"ProjectDataMoveBatchItemQueryParameters","text":""},{"location":"v3/docs/ProjectDataMoveBatchItemQueryParameters/#properties","title":"Properties","text":"Name Type Description Notes status List[Optional[str]] [optional]"},{"location":"v3/docs/ProjectDataMoveBatchItemQueryParameters/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_move_batch_item_query_parameters import ProjectDataMoveBatchItemQueryParameters\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataMoveBatchItemQueryParameters from a JSON string\nproject_data_move_batch_item_query_parameters_instance = ProjectDataMoveBatchItemQueryParameters.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataMoveBatchItemQueryParameters.to_json())\n\n# convert the object into a dict\nproject_data_move_batch_item_query_parameters_dict = project_data_move_batch_item_query_parameters_instance.to_dict()\n# create an instance of ProjectDataMoveBatchItemQueryParameters from a dict\nproject_data_move_batch_item_query_parameters_from_dict = ProjectDataMoveBatchItemQueryParameters.from_dict(project_data_move_batch_item_query_parameters_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataMoveBatchItemRequest/","title":"ProjectDataMoveBatchItemRequest","text":""},{"location":"v3/docs/ProjectDataMoveBatchItemRequest/#properties","title":"Properties","text":"Name Type Description Notes data_id str"},{"location":"v3/docs/ProjectDataMoveBatchItemRequest/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_move_batch_item_request import ProjectDataMoveBatchItemRequest\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataMoveBatchItemRequest from a JSON string\nproject_data_move_batch_item_request_instance = ProjectDataMoveBatchItemRequest.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataMoveBatchItemRequest.to_json())\n\n# convert the object into a dict\nproject_data_move_batch_item_request_dict = project_data_move_batch_item_request_instance.to_dict()\n# create an instance of ProjectDataMoveBatchItemRequest from a dict\nproject_data_move_batch_item_request_from_dict = ProjectDataMoveBatchItemRequest.from_dict(project_data_move_batch_item_request_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataPagedList/","title":"ProjectDataPagedList","text":""},{"location":"v3/docs/ProjectDataPagedList/#properties","title":"Properties","text":"Name Type Description Notes items List[ProjectData] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/ProjectDataPagedList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_paged_list import ProjectDataPagedList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataPagedList from a JSON string\nproject_data_paged_list_instance = ProjectDataPagedList.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataPagedList.to_json())\n\n# convert the object into a dict\nproject_data_paged_list_dict = project_data_paged_list_instance.to_dict()\n# create an instance of ProjectDataPagedList from a dict\nproject_data_paged_list_from_dict = ProjectDataPagedList.from_dict(project_data_paged_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataTransferApi/","title":"libica.openapi.v3.ProjectDataTransferApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description abort_data_transfer POST /api/projects/{projectId}/dataTransfers/{dataTransferId}:abort Abort a data transfer. get_data_transfer GET /api/projects/{projectId}/dataTransfers/{dataTransferId} Retrieve a data transfer. get_data_transfers GET /api/projects/{projectId}/dataTransfers Retrieve a list of data transfers."},{"location":"v3/docs/ProjectDataTransferApi/#abort_data_transfer","title":"abort_data_transfer","text":"<p>abort_data_transfer(project_id, data_transfer_id)</p> <p>Abort a data transfer.</p> <p>Endpoint for aborting a data transfer.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/ProjectDataTransferApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataTransferApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_transfer_id = 'data_transfer_id_example' # str | \n\n    try:\n        # Abort a data transfer.\n        api_instance.abort_data_transfer(project_id, data_transfer_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataTransferApi-&gt;abort_data_transfer: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataTransferApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str data_transfer_id str"},{"location":"v3/docs/ProjectDataTransferApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectDataTransferApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataTransferApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectDataTransferApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The data transfer is successfully aborted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataTransferApi/#get_data_transfer","title":"get_data_transfer","text":"<p>DataTransfer get_data_transfer(project_id, data_transfer_id)</p> <p>Retrieve a data transfer.</p>"},{"location":"v3/docs/ProjectDataTransferApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.data_transfer import DataTransfer\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataTransferApi(api_client)\n    project_id = 'project_id_example' # str | \n    data_transfer_id = 'data_transfer_id_example' # str | \n\n    try:\n        # Retrieve a data transfer.\n        api_response = api_instance.get_data_transfer(project_id, data_transfer_id)\n        print(\"The response of ProjectDataTransferApi-&gt;get_data_transfer:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataTransferApi-&gt;get_data_transfer: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataTransferApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str data_transfer_id str"},{"location":"v3/docs/ProjectDataTransferApi/#return-type_1","title":"Return type","text":"<p>DataTransfer</p>"},{"location":"v3/docs/ProjectDataTransferApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataTransferApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataTransferApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The data transfer is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataTransferApi/#get_data_transfers","title":"get_data_transfers","text":"<p>DataTransferPagedList get_data_transfers(project_id, connector=connector, direction=direction, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)</p> <p>Retrieve a list of data transfers.</p> <p>Retrieve a list of data transfers for the current app (session), excluding web browser transfers.</p>"},{"location":"v3/docs/ProjectDataTransferApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.data_transfer_paged_list import DataTransferPagedList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataTransferApi(api_client)\n    project_id = 'project_id_example' # str | \n    connector = 'connector_example' # str | The ID of the connector to filter on. (optional)\n    direction = 'direction_example' # str | The direction to filter on. (optional)\n    status = 'status_example' # str | The status to filter on. (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - direction - connector - protocol - dataTransferred - status - statusMessage - duration  (optional)\n\n    try:\n        # Retrieve a list of data transfers.\n        api_response = api_instance.get_data_transfers(project_id, connector=connector, direction=direction, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        print(\"The response of ProjectDataTransferApi-&gt;get_data_transfers:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataTransferApi-&gt;get_data_transfers: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataTransferApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str connector str The ID of the connector to filter on. [optional] direction str The direction to filter on. [optional] status str The status to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - direction - connector - protocol - dataTransferred - status - statusMessage - duration [optional]"},{"location":"v3/docs/ProjectDataTransferApi/#return-type_2","title":"Return type","text":"<p>DataTransferPagedList</p>"},{"location":"v3/docs/ProjectDataTransferApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataTransferApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataTransferApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The list of data transfers is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataUnlinkingBatch/","title":"ProjectDataUnlinkingBatch","text":""},{"location":"v3/docs/ProjectDataUnlinkingBatch/#properties","title":"Properties","text":"Name Type Description Notes id str job Job"},{"location":"v3/docs/ProjectDataUnlinkingBatch/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_unlinking_batch import ProjectDataUnlinkingBatch\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataUnlinkingBatch from a JSON string\nproject_data_unlinking_batch_instance = ProjectDataUnlinkingBatch.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataUnlinkingBatch.to_json())\n\n# convert the object into a dict\nproject_data_unlinking_batch_dict = project_data_unlinking_batch_instance.to_dict()\n# create an instance of ProjectDataUnlinkingBatch from a dict\nproject_data_unlinking_batch_from_dict = ProjectDataUnlinkingBatch.from_dict(project_data_unlinking_batch_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/","title":"libica.openapi.v3.ProjectDataUnlinkingBatchApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_project_data_unlinking_batch POST /api/projects/{projectId}/dataUnlinkingBatch Create a project data unlinking batch. get_project_data_unlinking_batch GET /api/projects/{projectId}/dataUnlinkingBatch/{batchId} Retrieve a project data unlinking batch. get_project_data_unlinking_batch_item GET /api/projects/{projectId}/dataUnlinkingBatch/{batchId}/items/{itemId} Retrieve a project data unlinking batch item. get_project_data_unlinking_batch_items GET /api/projects/{projectId}/dataUnlinkingBatch/{batchId}/items Retrieve a list of project data unlinking batch items."},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#create_project_data_unlinking_batch","title":"create_project_data_unlinking_batch","text":"<p>ProjectDataUnlinkingBatch create_project_data_unlinking_batch(project_id, create_project_data_unlinking_batch)</p> <p>Create a project data unlinking batch.</p>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_project_data_unlinking_batch import CreateProjectDataUnlinkingBatch\nfrom libica.openapi.v3.models.project_data_unlinking_batch import ProjectDataUnlinkingBatch\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataUnlinkingBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_project_data_unlinking_batch = libica.openapi.v3.CreateProjectDataUnlinkingBatch() # CreateProjectDataUnlinkingBatch | \n\n    try:\n        # Create a project data unlinking batch.\n        api_response = api_instance.create_project_data_unlinking_batch(project_id, create_project_data_unlinking_batch)\n        print(\"The response of ProjectDataUnlinkingBatchApi-&gt;create_project_data_unlinking_batch:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataUnlinkingBatchApi-&gt;create_project_data_unlinking_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str create_project_data_unlinking_batch CreateProjectDataUnlinkingBatch"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#return-type","title":"Return type","text":"<p>ProjectDataUnlinkingBatch</p>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The project data unlinking batch is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#get_project_data_unlinking_batch","title":"get_project_data_unlinking_batch","text":"<p>ProjectDataUnlinkingBatch get_project_data_unlinking_batch(project_id, batch_id)</p> <p>Retrieve a project data unlinking batch.</p>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_data_unlinking_batch import ProjectDataUnlinkingBatch\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataUnlinkingBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    batch_id = 'batch_id_example' # str | \n\n    try:\n        # Retrieve a project data unlinking batch.\n        api_response = api_instance.get_project_data_unlinking_batch(project_id, batch_id)\n        print(\"The response of ProjectDataUnlinkingBatchApi-&gt;get_project_data_unlinking_batch:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataUnlinkingBatchApi-&gt;get_project_data_unlinking_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#return-type_1","title":"Return type","text":"<p>ProjectDataUnlinkingBatch</p>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The project data unlinking batch is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#get_project_data_unlinking_batch_item","title":"get_project_data_unlinking_batch_item","text":"<p>ProjectDataUnlinkingBatchItem get_project_data_unlinking_batch_item(project_id, batch_id, item_id)</p> <p>Retrieve a project data unlinking batch item.</p>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_data_unlinking_batch_item import ProjectDataUnlinkingBatchItem\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataUnlinkingBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    batch_id = 'batch_id_example' # str | \n    item_id = 'item_id_example' # str | \n\n    try:\n        # Retrieve a project data unlinking batch item.\n        api_response = api_instance.get_project_data_unlinking_batch_item(project_id, batch_id, item_id)\n        print(\"The response of ProjectDataUnlinkingBatchApi-&gt;get_project_data_unlinking_batch_item:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataUnlinkingBatchApi-&gt;get_project_data_unlinking_batch_item: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str item_id str"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#return-type_2","title":"Return type","text":"<p>ProjectDataUnlinkingBatchItem</p>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The project data unlinking batch item is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#get_project_data_unlinking_batch_items","title":"get_project_data_unlinking_batch_items","text":"<p>ProjectDataUnlinkingBatchItemPagedList get_project_data_unlinking_batch_items(project_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size)</p> <p>Retrieve a list of project data unlinking batch items.</p>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_data_unlinking_batch_item_paged_list import ProjectDataUnlinkingBatchItemPagedList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataUnlinkingBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    batch_id = 'batch_id_example' # str | \n    status = ['status_example'] # List[str] | The statuses to filter on. (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n\n    try:\n        # Retrieve a list of project data unlinking batch items.\n        api_response = api_instance.get_project_data_unlinking_batch_items(project_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size)\n        print(\"The response of ProjectDataUnlinkingBatchApi-&gt;get_project_data_unlinking_batch_items:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataUnlinkingBatchApi-&gt;get_project_data_unlinking_batch_items: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str status List[str] The statuses to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional]"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#return-type_3","title":"Return type","text":"<p>ProjectDataUnlinkingBatchItemPagedList</p>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataUnlinkingBatchApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project data unlinking batch items is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataUnlinkingBatchItem/","title":"ProjectDataUnlinkingBatchItem","text":""},{"location":"v3/docs/ProjectDataUnlinkingBatchItem/#properties","title":"Properties","text":"Name Type Description Notes id str request ProjectDataUnlinkingBatchItemRequest processing ProjectDataUnlinkingBatchItemProcessing"},{"location":"v3/docs/ProjectDataUnlinkingBatchItem/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_unlinking_batch_item import ProjectDataUnlinkingBatchItem\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataUnlinkingBatchItem from a JSON string\nproject_data_unlinking_batch_item_instance = ProjectDataUnlinkingBatchItem.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataUnlinkingBatchItem.to_json())\n\n# convert the object into a dict\nproject_data_unlinking_batch_item_dict = project_data_unlinking_batch_item_instance.to_dict()\n# create an instance of ProjectDataUnlinkingBatchItem from a dict\nproject_data_unlinking_batch_item_from_dict = ProjectDataUnlinkingBatchItem.from_dict(project_data_unlinking_batch_item_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataUnlinkingBatchItemPagedList/","title":"ProjectDataUnlinkingBatchItemPagedList","text":""},{"location":"v3/docs/ProjectDataUnlinkingBatchItemPagedList/#properties","title":"Properties","text":"Name Type Description Notes items List[ProjectDataUnlinkingBatchItem] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/ProjectDataUnlinkingBatchItemPagedList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_unlinking_batch_item_paged_list import ProjectDataUnlinkingBatchItemPagedList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataUnlinkingBatchItemPagedList from a JSON string\nproject_data_unlinking_batch_item_paged_list_instance = ProjectDataUnlinkingBatchItemPagedList.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataUnlinkingBatchItemPagedList.to_json())\n\n# convert the object into a dict\nproject_data_unlinking_batch_item_paged_list_dict = project_data_unlinking_batch_item_paged_list_instance.to_dict()\n# create an instance of ProjectDataUnlinkingBatchItemPagedList from a dict\nproject_data_unlinking_batch_item_paged_list_from_dict = ProjectDataUnlinkingBatchItemPagedList.from_dict(project_data_unlinking_batch_item_paged_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataUnlinkingBatchItemProcessing/","title":"ProjectDataUnlinkingBatchItemProcessing","text":""},{"location":"v3/docs/ProjectDataUnlinkingBatchItemProcessing/#properties","title":"Properties","text":"Name Type Description Notes status str Possible values are: INITIALISED, WAITING_RESOURCES, RUNNING, UNLINKED, ALREADY_UNLINKED, FAILED, PARTIALLY_UNLINKED. More types could be added in a future release. additional_status_information str Additional information regarding the status of this batch item. [optional]"},{"location":"v3/docs/ProjectDataUnlinkingBatchItemProcessing/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_unlinking_batch_item_processing import ProjectDataUnlinkingBatchItemProcessing\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataUnlinkingBatchItemProcessing from a JSON string\nproject_data_unlinking_batch_item_processing_instance = ProjectDataUnlinkingBatchItemProcessing.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataUnlinkingBatchItemProcessing.to_json())\n\n# convert the object into a dict\nproject_data_unlinking_batch_item_processing_dict = project_data_unlinking_batch_item_processing_instance.to_dict()\n# create an instance of ProjectDataUnlinkingBatchItemProcessing from a dict\nproject_data_unlinking_batch_item_processing_from_dict = ProjectDataUnlinkingBatchItemProcessing.from_dict(project_data_unlinking_batch_item_processing_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataUnlinkingBatchItemRequest/","title":"ProjectDataUnlinkingBatchItemRequest","text":""},{"location":"v3/docs/ProjectDataUnlinkingBatchItemRequest/#properties","title":"Properties","text":"Name Type Description Notes data_id str"},{"location":"v3/docs/ProjectDataUnlinkingBatchItemRequest/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_unlinking_batch_item_request import ProjectDataUnlinkingBatchItemRequest\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataUnlinkingBatchItemRequest from a JSON string\nproject_data_unlinking_batch_item_request_instance = ProjectDataUnlinkingBatchItemRequest.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataUnlinkingBatchItemRequest.to_json())\n\n# convert the object into a dict\nproject_data_unlinking_batch_item_request_dict = project_data_unlinking_batch_item_request_instance.to_dict()\n# create an instance of ProjectDataUnlinkingBatchItemRequest from a dict\nproject_data_unlinking_batch_item_request_from_dict = ProjectDataUnlinkingBatchItemRequest.from_dict(project_data_unlinking_batch_item_request_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataUpdateBatch/","title":"ProjectDataUpdateBatch","text":""},{"location":"v3/docs/ProjectDataUpdateBatch/#properties","title":"Properties","text":"Name Type Description Notes id str job Job"},{"location":"v3/docs/ProjectDataUpdateBatch/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_update_batch import ProjectDataUpdateBatch\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataUpdateBatch from a JSON string\nproject_data_update_batch_instance = ProjectDataUpdateBatch.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataUpdateBatch.to_json())\n\n# convert the object into a dict\nproject_data_update_batch_dict = project_data_update_batch_instance.to_dict()\n# create an instance of ProjectDataUpdateBatch from a dict\nproject_data_update_batch_from_dict = ProjectDataUpdateBatch.from_dict(project_data_update_batch_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/","title":"libica.openapi.v3.ProjectDataUpdateBatchApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_project_data_update_batch POST /api/projects/{projectId}/dataUpdateBatch Create a project data update batch.  Folder contents will be updated recursively.  Time archive/delete cannot be defined for folders. get_project_data_update_batch GET /api/projects/{projectId}/dataUpdateBatch/{batchId} Retrieve a project data update batch. get_project_data_update_batch_item GET /api/projects/{projectId}/dataUpdateBatch/{batchId}/items/{itemId} Retrieve a project data update batch item. get_project_data_update_batch_items GET /api/projects/{projectId}/dataUpdateBatch/{batchId}/items Retrieve a list of project data update batch items."},{"location":"v3/docs/ProjectDataUpdateBatchApi/#create_project_data_update_batch","title":"create_project_data_update_batch","text":"<p>ProjectDataUpdateBatch create_project_data_update_batch(project_id, create_project_data_update_batch)</p> <p>Create a project data update batch.  Folder contents will be updated recursively.  Time archive/delete cannot be defined for folders.</p> <p>Avoid specifying more than 5000 total dataIds per call if possible (specifying more than 100000 is not allowed).</p>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_project_data_update_batch import CreateProjectDataUpdateBatch\nfrom libica.openapi.v3.models.project_data_update_batch import ProjectDataUpdateBatch\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataUpdateBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_project_data_update_batch = libica.openapi.v3.CreateProjectDataUpdateBatch() # CreateProjectDataUpdateBatch | \n\n    try:\n        # Create a project data update batch.  Folder contents will be updated recursively.  Time archive/delete cannot be defined for folders.\n        api_response = api_instance.create_project_data_update_batch(project_id, create_project_data_update_batch)\n        print(\"The response of ProjectDataUpdateBatchApi-&gt;create_project_data_update_batch:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataUpdateBatchApi-&gt;create_project_data_update_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str create_project_data_update_batch CreateProjectDataUpdateBatch"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#return-type","title":"Return type","text":"<p>ProjectDataUpdateBatch</p>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The project data update batch is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#get_project_data_update_batch","title":"get_project_data_update_batch","text":"<p>ProjectDataUpdateBatch get_project_data_update_batch(project_id, batch_id)</p> <p>Retrieve a project data update batch.</p>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_data_update_batch import ProjectDataUpdateBatch\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataUpdateBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    batch_id = 'batch_id_example' # str | \n\n    try:\n        # Retrieve a project data update batch.\n        api_response = api_instance.get_project_data_update_batch(project_id, batch_id)\n        print(\"The response of ProjectDataUpdateBatchApi-&gt;get_project_data_update_batch:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataUpdateBatchApi-&gt;get_project_data_update_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#return-type_1","title":"Return type","text":"<p>ProjectDataUpdateBatch</p>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The project data update batch is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#get_project_data_update_batch_item","title":"get_project_data_update_batch_item","text":"<p>ProjectDataUpdateBatchItem get_project_data_update_batch_item(project_id, batch_id, item_id)</p> <p>Retrieve a project data update batch item.</p>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_data_update_batch_item import ProjectDataUpdateBatchItem\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataUpdateBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    batch_id = 'batch_id_example' # str | \n    item_id = 'item_id_example' # str | \n\n    try:\n        # Retrieve a project data update batch item.\n        api_response = api_instance.get_project_data_update_batch_item(project_id, batch_id, item_id)\n        print(\"The response of ProjectDataUpdateBatchApi-&gt;get_project_data_update_batch_item:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataUpdateBatchApi-&gt;get_project_data_update_batch_item: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str item_id str"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#return-type_2","title":"Return type","text":"<p>ProjectDataUpdateBatchItem</p>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The project data update batch item is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#get_project_data_update_batch_items","title":"get_project_data_update_batch_items","text":"<p>ProjectDataUpdateBatchItemPagedList get_project_data_update_batch_items(project_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size)</p> <p>Retrieve a list of project data update batch items.</p>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_data_update_batch_item_paged_list import ProjectDataUpdateBatchItemPagedList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectDataUpdateBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    batch_id = 'batch_id_example' # str | \n    status = ['status_example'] # List[str] | The statuses to filter on. (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n\n    try:\n        # Retrieve a list of project data update batch items.\n        api_response = api_instance.get_project_data_update_batch_items(project_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size)\n        print(\"The response of ProjectDataUpdateBatchApi-&gt;get_project_data_update_batch_items:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectDataUpdateBatchApi-&gt;get_project_data_update_batch_items: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str status List[str] The statuses to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional]"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#return-type_3","title":"Return type","text":"<p>ProjectDataUpdateBatchItemPagedList</p>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectDataUpdateBatchApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project data update batch items is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataUpdateBatchItem/","title":"ProjectDataUpdateBatchItem","text":""},{"location":"v3/docs/ProjectDataUpdateBatchItem/#properties","title":"Properties","text":"Name Type Description Notes id str request ProjectDataUpdateBatchItemRequest processing ProjectDataUpdateBatchItemProcessing"},{"location":"v3/docs/ProjectDataUpdateBatchItem/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_update_batch_item import ProjectDataUpdateBatchItem\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataUpdateBatchItem from a JSON string\nproject_data_update_batch_item_instance = ProjectDataUpdateBatchItem.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataUpdateBatchItem.to_json())\n\n# convert the object into a dict\nproject_data_update_batch_item_dict = project_data_update_batch_item_instance.to_dict()\n# create an instance of ProjectDataUpdateBatchItem from a dict\nproject_data_update_batch_item_from_dict = ProjectDataUpdateBatchItem.from_dict(project_data_update_batch_item_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataUpdateBatchItemPagedList/","title":"ProjectDataUpdateBatchItemPagedList","text":""},{"location":"v3/docs/ProjectDataUpdateBatchItemPagedList/#properties","title":"Properties","text":"Name Type Description Notes items List[ProjectDataUpdateBatchItem] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/ProjectDataUpdateBatchItemPagedList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_update_batch_item_paged_list import ProjectDataUpdateBatchItemPagedList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataUpdateBatchItemPagedList from a JSON string\nproject_data_update_batch_item_paged_list_instance = ProjectDataUpdateBatchItemPagedList.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataUpdateBatchItemPagedList.to_json())\n\n# convert the object into a dict\nproject_data_update_batch_item_paged_list_dict = project_data_update_batch_item_paged_list_instance.to_dict()\n# create an instance of ProjectDataUpdateBatchItemPagedList from a dict\nproject_data_update_batch_item_paged_list_from_dict = ProjectDataUpdateBatchItemPagedList.from_dict(project_data_update_batch_item_paged_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataUpdateBatchItemProcessing/","title":"ProjectDataUpdateBatchItemProcessing","text":""},{"location":"v3/docs/ProjectDataUpdateBatchItemProcessing/#properties","title":"Properties","text":"Name Type Description Notes status str additional_status_information str Additional information regarding the status of this batch item. [optional]"},{"location":"v3/docs/ProjectDataUpdateBatchItemProcessing/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_update_batch_item_processing import ProjectDataUpdateBatchItemProcessing\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataUpdateBatchItemProcessing from a JSON string\nproject_data_update_batch_item_processing_instance = ProjectDataUpdateBatchItemProcessing.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataUpdateBatchItemProcessing.to_json())\n\n# convert the object into a dict\nproject_data_update_batch_item_processing_dict = project_data_update_batch_item_processing_instance.to_dict()\n# create an instance of ProjectDataUpdateBatchItemProcessing from a dict\nproject_data_update_batch_item_processing_from_dict = ProjectDataUpdateBatchItemProcessing.from_dict(project_data_update_batch_item_processing_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectDataUpdateBatchItemRequest/","title":"ProjectDataUpdateBatchItemRequest","text":""},{"location":"v3/docs/ProjectDataUpdateBatchItemRequest/#properties","title":"Properties","text":"Name Type Description Notes data_id str Data to apply the update to (recursively, if it's a folder). user_tags TagUpdate [optional] technical_tags TagUpdate [optional] will_be_archived_at datetime The timestamp when the data should be archived. [optional] will_be_deleted_at datetime The timestamp when the data should be deleted. [optional]"},{"location":"v3/docs/ProjectDataUpdateBatchItemRequest/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_data_update_batch_item_request import ProjectDataUpdateBatchItemRequest\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectDataUpdateBatchItemRequest from a JSON string\nproject_data_update_batch_item_request_instance = ProjectDataUpdateBatchItemRequest.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectDataUpdateBatchItemRequest.to_json())\n\n# convert the object into a dict\nproject_data_update_batch_item_request_dict = project_data_update_batch_item_request_instance.to_dict()\n# create an instance of ProjectDataUpdateBatchItemRequest from a dict\nproject_data_update_batch_item_request_from_dict = ProjectDataUpdateBatchItemRequest.from_dict(project_data_update_batch_item_request_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectFileAndUploadUrl/","title":"ProjectFileAndUploadUrl","text":""},{"location":"v3/docs/ProjectFileAndUploadUrl/#properties","title":"Properties","text":"Name Type Description Notes data Data project_id str upload_url str A pre-signed url which is temporarily available for uploading the data."},{"location":"v3/docs/ProjectFileAndUploadUrl/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_file_and_upload_url import ProjectFileAndUploadUrl\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectFileAndUploadUrl from a JSON string\nproject_file_and_upload_url_instance = ProjectFileAndUploadUrl.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectFileAndUploadUrl.to_json())\n\n# convert the object into a dict\nproject_file_and_upload_url_dict = project_file_and_upload_url_instance.to_dict()\n# create an instance of ProjectFileAndUploadUrl from a dict\nproject_file_and_upload_url_from_dict = ProjectFileAndUploadUrl.from_dict(project_file_and_upload_url_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectFolderAndUploadSession/","title":"ProjectFolderAndUploadSession","text":""},{"location":"v3/docs/ProjectFolderAndUploadSession/#properties","title":"Properties","text":"Name Type Description Notes data Data project_id str upload_session FolderUploadSession"},{"location":"v3/docs/ProjectFolderAndUploadSession/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_folder_and_upload_session import ProjectFolderAndUploadSession\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectFolderAndUploadSession from a JSON string\nproject_folder_and_upload_session_instance = ProjectFolderAndUploadSession.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectFolderAndUploadSession.to_json())\n\n# convert the object into a dict\nproject_folder_and_upload_session_dict = project_folder_and_upload_session_instance.to_dict()\n# create an instance of ProjectFolderAndUploadSession from a dict\nproject_folder_and_upload_session_from_dict = ProjectFolderAndUploadSession.from_dict(project_folder_and_upload_session_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectList/","title":"ProjectList","text":""},{"location":"v3/docs/ProjectList/#properties","title":"Properties","text":"Name Type Description Notes items List[Project]"},{"location":"v3/docs/ProjectList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_list import ProjectList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectList from a JSON string\nproject_list_instance = ProjectList.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectList.to_json())\n\n# convert the object into a dict\nproject_list_dict = project_list_instance.to_dict()\n# create an instance of ProjectList from a dict\nproject_list_from_dict = ProjectList.from_dict(project_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/","title":"libica.openapi.v3.ProjectNotificationSubscriptionsApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_notification_subscription POST /api/projects/{projectId}/notificationSubscriptions Create a notification subscription delete_notification_subscription DELETE /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Delete a notification subscription get_notification_subscription GET /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Retrieve a notification subscription get_notification_subscriptions GET /api/projects/{projectId}/notificationSubscriptions Retrieve notification subscriptions update_notification_subscription PUT /api/projects/{projectId}/notificationSubscriptions/{subscriptionId} Update a notification subscription"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#create_notification_subscription","title":"create_notification_subscription","text":"<p>NotificationSubscription create_notification_subscription(project_id, create_notification_subscription)</p> <p>Create a notification subscription</p>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_notification_subscription import CreateNotificationSubscription\nfrom libica.openapi.v3.models.notification_subscription import NotificationSubscription\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectNotificationSubscriptionsApi(api_client)\n    project_id = 'project_id_example' # str | The ID of the project\n    create_notification_subscription = libica.openapi.v3.CreateNotificationSubscription() # CreateNotificationSubscription | The new subscription\n\n    try:\n        # Create a notification subscription\n        api_response = api_instance.create_notification_subscription(project_id, create_notification_subscription)\n        print(\"The response of ProjectNotificationSubscriptionsApi-&gt;create_notification_subscription:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectNotificationSubscriptionsApi-&gt;create_notification_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project create_notification_subscription CreateNotificationSubscription The new subscription"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#return-type","title":"Return type","text":"<p>NotificationSubscription</p>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The notification subscription is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#delete_notification_subscription","title":"delete_notification_subscription","text":"<p>delete_notification_subscription(project_id, subscription_id)</p> <p>Delete a notification subscription</p>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectNotificationSubscriptionsApi(api_client)\n    project_id = 'project_id_example' # str | The ID of the project\n    subscription_id = 'subscription_id_example' # str | The ID of the notification subscription to delete\n\n    try:\n        # Delete a notification subscription\n        api_instance.delete_notification_subscription(project_id, subscription_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectNotificationSubscriptionsApi-&gt;delete_notification_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the notification subscription to delete"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The notification subscription is successfully deleted - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#get_notification_subscription","title":"get_notification_subscription","text":"<p>NotificationSubscription get_notification_subscription(project_id, subscription_id)</p> <p>Retrieve a notification subscription</p>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.notification_subscription import NotificationSubscription\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectNotificationSubscriptionsApi(api_client)\n    project_id = 'project_id_example' # str | The ID of the project\n    subscription_id = 'subscription_id_example' # str | The ID of the notification subscription\n\n    try:\n        # Retrieve a notification subscription\n        api_response = api_instance.get_notification_subscription(project_id, subscription_id)\n        print(\"The response of ProjectNotificationSubscriptionsApi-&gt;get_notification_subscription:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectNotificationSubscriptionsApi-&gt;get_notification_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the notification subscription"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#return-type_2","title":"Return type","text":"<p>NotificationSubscription</p>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The notification subscription is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#get_notification_subscriptions","title":"get_notification_subscriptions","text":"<p>NotificationSubscriptionList get_notification_subscriptions(project_id)</p> <p>Retrieve notification subscriptions</p>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.notification_subscription_list import NotificationSubscriptionList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectNotificationSubscriptionsApi(api_client)\n    project_id = 'project_id_example' # str | The ID of the project\n\n    try:\n        # Retrieve notification subscriptions\n        api_response = api_instance.get_notification_subscriptions(project_id)\n        print(\"The response of ProjectNotificationSubscriptionsApi-&gt;get_notification_subscriptions:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectNotificationSubscriptionsApi-&gt;get_notification_subscriptions: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#return-type_3","title":"Return type","text":"<p>NotificationSubscriptionList</p>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The notification subscriptions are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#update_notification_subscription","title":"update_notification_subscription","text":"<p>NotificationSubscription update_notification_subscription(project_id, subscription_id, notification_subscription, if_match=if_match)</p> <p>Update a notification subscription</p> <p>Fields which can be updated:  - enabled  - eventCode  - filterExpression  - notificationChannel</p>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#example_4","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.notification_subscription import NotificationSubscription\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectNotificationSubscriptionsApi(api_client)\n    project_id = 'project_id_example' # str | The ID of the project\n    subscription_id = 'subscription_id_example' # str | The ID of the notification subscription to update\n    notification_subscription = libica.openapi.v3.NotificationSubscription() # NotificationSubscription | The updated subscription\n    if_match = 'if_match_example' # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n\n    try:\n        # Update a notification subscription\n        api_response = api_instance.update_notification_subscription(project_id, subscription_id, notification_subscription, if_match=if_match)\n        print(\"The response of ProjectNotificationSubscriptionsApi-&gt;update_notification_subscription:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectNotificationSubscriptionsApi-&gt;update_notification_subscription: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project subscription_id str The ID of the notification subscription to update notification_subscription NotificationSubscription The updated subscription if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional]"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#return-type_4","title":"Return type","text":"<p>NotificationSubscription</p>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#authorization_4","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectNotificationSubscriptionsApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The notification subscription is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPagedList/","title":"ProjectPagedList","text":""},{"location":"v3/docs/ProjectPagedList/#properties","title":"Properties","text":"Name Type Description Notes items List[Project] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/ProjectPagedList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_paged_list import ProjectPagedList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectPagedList from a JSON string\nproject_paged_list_instance = ProjectPagedList.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectPagedList.to_json())\n\n# convert the object into a dict\nproject_paged_list_dict = project_paged_list_instance.to_dict()\n# create an instance of ProjectPagedList from a dict\nproject_paged_list_from_dict = ProjectPagedList.from_dict(project_paged_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectPermission/","title":"ProjectPermission","text":""},{"location":"v3/docs/ProjectPermission/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] role_project str role_flow str role_base str role_bench str membership_type str user User [optional] email_address str Only present when membershipType is EMAIL [optional] workgroup Workgroup [optional] invitation_accepted bool Only present when membershipType is EMAIL [optional] invitation_rejected bool Only present when user is invited by EMAIL [optional] upload_allowed bool download_allowed bool application ApplicationV4 [optional]"},{"location":"v3/docs/ProjectPermission/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_permission import ProjectPermission\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectPermission from a JSON string\nproject_permission_instance = ProjectPermission.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectPermission.to_json())\n\n# convert the object into a dict\nproject_permission_dict = project_permission_instance.to_dict()\n# create an instance of ProjectPermission from a dict\nproject_permission_from_dict = ProjectPermission.from_dict(project_permission_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectPermissionApi/","title":"libica.openapi.v3.ProjectPermissionApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_project_permission POST /api/projects/{projectId}/permissions Create a project permission. get_project_permission GET /api/projects/{projectId}/permissions/{permissionId} Retrieve a project permission. get_project_permissions GET /api/projects/{projectId}/permissions Retrieve a list of project permissions. update_project_permission PUT /api/projects/{projectId}/permissions/{permissionId} Update a project permission."},{"location":"v3/docs/ProjectPermissionApi/#create_project_permission","title":"create_project_permission","text":"<p>ProjectPermissionV4 create_project_permission(project_id, create_project_permission_v4)</p> <p>Create a project permission.</p>"},{"location":"v3/docs/ProjectPermissionApi/#changelog","title":"Changelog","text":"<p>For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.</p>"},{"location":"v3/docs/ProjectPermissionApi/#v3","title":"[V3]","text":"<p>Initial version</p>"},{"location":"v3/docs/ProjectPermissionApi/#v4","title":"[V4]","text":"<p>Added 'Administrator' role for Bench. The role attributes are strings instead of enums to support future additions in a backward compatible manner.</p>"},{"location":"v3/docs/ProjectPermissionApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_project_permission_v4 import CreateProjectPermissionV4\nfrom libica.openapi.v3.models.project_permission_v4 import ProjectPermissionV4\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPermissionApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_project_permission_v4 = libica.openapi.v3.CreateProjectPermissionV4() # CreateProjectPermissionV4 | \n\n    try:\n        # Create a project permission.\n        api_response = api_instance.create_project_permission(project_id, create_project_permission_v4)\n        print(\"The response of ProjectPermissionApi-&gt;create_project_permission:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPermissionApi-&gt;create_project_permission: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPermissionApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str create_project_permission_v4 CreateProjectPermissionV4"},{"location":"v3/docs/ProjectPermissionApi/#return-type","title":"Return type","text":"<p>ProjectPermissionV4</p>"},{"location":"v3/docs/ProjectPermissionApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPermissionApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json, application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectPermissionApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The project permission is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPermissionApi/#get_project_permission","title":"get_project_permission","text":"<p>ProjectPermissionV4 get_project_permission(project_id, permission_id)</p> <p>Retrieve a project permission.</p>"},{"location":"v3/docs/ProjectPermissionApi/#changelog_1","title":"Changelog","text":"<p>For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.</p>"},{"location":"v3/docs/ProjectPermissionApi/#v3_1","title":"[V3]","text":"<p>Initial version</p>"},{"location":"v3/docs/ProjectPermissionApi/#v4_1","title":"[V4]","text":"<p>Added 'Administrator' role for Bench. The role attributes are strings instead of enums to support future additions in a backward compatible manner.</p>"},{"location":"v3/docs/ProjectPermissionApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_permission_v4 import ProjectPermissionV4\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPermissionApi(api_client)\n    project_id = 'project_id_example' # str | \n    permission_id = 'permission_id_example' # str | \n\n    try:\n        # Retrieve a project permission.\n        api_response = api_instance.get_project_permission(project_id, permission_id)\n        print(\"The response of ProjectPermissionApi-&gt;get_project_permission:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPermissionApi-&gt;get_project_permission: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPermissionApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str permission_id str"},{"location":"v3/docs/ProjectPermissionApi/#return-type_1","title":"Return type","text":"<p>ProjectPermissionV4</p>"},{"location":"v3/docs/ProjectPermissionApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPermissionApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectPermissionApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The project permission is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPermissionApi/#get_project_permissions","title":"get_project_permissions","text":"<p>ProjectPermissionListV4 get_project_permissions(project_id)</p> <p>Retrieve a list of project permissions.</p>"},{"location":"v3/docs/ProjectPermissionApi/#changelog_2","title":"Changelog","text":"<p>For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.</p>"},{"location":"v3/docs/ProjectPermissionApi/#v3_2","title":"[V3]","text":"<p>Initial version</p>"},{"location":"v3/docs/ProjectPermissionApi/#v4_2","title":"[V4]","text":"<p>Added 'Administrator' role for Bench. The role attributes are strings instead of enums to support future additions in a backward compatible manner.</p>"},{"location":"v3/docs/ProjectPermissionApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_permission_list_v4 import ProjectPermissionListV4\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPermissionApi(api_client)\n    project_id = 'project_id_example' # str | \n\n    try:\n        # Retrieve a list of project permissions.\n        api_response = api_instance.get_project_permissions(project_id)\n        print(\"The response of ProjectPermissionApi-&gt;get_project_permissions:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPermissionApi-&gt;get_project_permissions: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPermissionApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str"},{"location":"v3/docs/ProjectPermissionApi/#return-type_2","title":"Return type","text":"<p>ProjectPermissionListV4</p>"},{"location":"v3/docs/ProjectPermissionApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPermissionApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectPermissionApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project permissions is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPermissionApi/#update_project_permission","title":"update_project_permission","text":"<p>ProjectPermissionV4 update_project_permission(project_id, permission_id, project_permission_v4, if_match=if_match)</p> <p>Update a project permission.</p>"},{"location":"v3/docs/ProjectPermissionApi/#changelog_3","title":"Changelog","text":"<p>For this endpoint multiple versions exist. Note that the values for request headers 'Content-Type' and 'Accept' must contain a matching version.</p>"},{"location":"v3/docs/ProjectPermissionApi/#v3_3","title":"[V3]","text":"<p>Initial version</p>"},{"location":"v3/docs/ProjectPermissionApi/#v4_3","title":"[V4]","text":"<p>Added 'Administrator' role for Bench. The role attributes are strings instead of enums to support future additions in a backward compatible manner. Fields which can be updated: - uploadAllowed - downloadAllowed - roleProject - roleFlow - roleBase - roleBench</p>"},{"location":"v3/docs/ProjectPermissionApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_permission_v4 import ProjectPermissionV4\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPermissionApi(api_client)\n    project_id = 'project_id_example' # str | \n    permission_id = 'permission_id_example' # str | \n    project_permission_v4 = libica.openapi.v3.ProjectPermissionV4() # ProjectPermissionV4 | \n    if_match = 'if_match_example' # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n\n    try:\n        # Update a project permission.\n        api_response = api_instance.update_project_permission(project_id, permission_id, project_permission_v4, if_match=if_match)\n        print(\"The response of ProjectPermissionApi-&gt;update_project_permission:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPermissionApi-&gt;update_project_permission: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPermissionApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str permission_id str project_permission_v4 ProjectPermissionV4 if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional]"},{"location":"v3/docs/ProjectPermissionApi/#return-type_3","title":"Return type","text":"<p>ProjectPermissionV4</p>"},{"location":"v3/docs/ProjectPermissionApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPermissionApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json, application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectPermissionApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The project permission is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPermissionList/","title":"ProjectPermissionList","text":""},{"location":"v3/docs/ProjectPermissionList/#properties","title":"Properties","text":"Name Type Description Notes items List[ProjectPermission]"},{"location":"v3/docs/ProjectPermissionList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_permission_list import ProjectPermissionList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectPermissionList from a JSON string\nproject_permission_list_instance = ProjectPermissionList.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectPermissionList.to_json())\n\n# convert the object into a dict\nproject_permission_list_dict = project_permission_list_instance.to_dict()\n# create an instance of ProjectPermissionList from a dict\nproject_permission_list_from_dict = ProjectPermissionList.from_dict(project_permission_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectPermissionListV4/","title":"ProjectPermissionListV4","text":""},{"location":"v3/docs/ProjectPermissionListV4/#properties","title":"Properties","text":"Name Type Description Notes items List[ProjectPermissionV4]"},{"location":"v3/docs/ProjectPermissionListV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_permission_list_v4 import ProjectPermissionListV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectPermissionListV4 from a JSON string\nproject_permission_list_v4_instance = ProjectPermissionListV4.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectPermissionListV4.to_json())\n\n# convert the object into a dict\nproject_permission_list_v4_dict = project_permission_list_v4_instance.to_dict()\n# create an instance of ProjectPermissionListV4 from a dict\nproject_permission_list_v4_from_dict = ProjectPermissionListV4.from_dict(project_permission_list_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectPermissionV4/","title":"ProjectPermissionV4","text":""},{"location":"v3/docs/ProjectPermissionV4/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] role_project str Possible values are: NONE, VIEWER, CONTRIBUTOR, ADMINISTRATOR, DATA_PROVIDER. More types could be added in a future release. role_flow str Possible values are: NONE, VIEWER, CONTRIBUTOR. More types could be added in a future release. role_base str Possible values are: NONE, VIEWER, CONTRIBUTOR. More types could be added in a future release. role_bench str Possible values are: NONE, CONTRIBUTOR, ADMINISTRATOR. More types could be added in a future release. membership_type str user User [optional] email_address str Only present when membershipType is EMAIL [optional] workgroup Workgroup [optional] invitation_accepted bool Only present when membershipType is EMAIL [optional] invitation_rejected bool Only present when user is invited by EMAIL [optional] upload_allowed bool download_allowed bool application ApplicationV4 [optional]"},{"location":"v3/docs/ProjectPermissionV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_permission_v4 import ProjectPermissionV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectPermissionV4 from a JSON string\nproject_permission_v4_instance = ProjectPermissionV4.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectPermissionV4.to_json())\n\n# convert the object into a dict\nproject_permission_v4_dict = project_permission_v4_instance.to_dict()\n# create an instance of ProjectPermissionV4 from a dict\nproject_permission_v4_from_dict = ProjectPermissionV4.from_dict(project_permission_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipeline/","title":"ProjectPipeline","text":""},{"location":"v3/docs/ProjectPipeline/#properties","title":"Properties","text":"Name Type Description Notes pipeline PipelineV3 project_id str bundle_links BundleList"},{"location":"v3/docs/ProjectPipeline/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_pipeline import ProjectPipeline\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectPipeline from a JSON string\nproject_pipeline_instance = ProjectPipeline.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectPipeline.to_json())\n\n# convert the object into a dict\nproject_pipeline_dict = project_pipeline_instance.to_dict()\n# create an instance of ProjectPipeline from a dict\nproject_pipeline_from_dict = ProjectPipeline.from_dict(project_pipeline_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/","title":"libica.openapi.v3.ProjectPipelineApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_additional_project_pipeline_file POST /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles Create an additional input form file for a pipeline. create_cwl_json_pipeline POST /api/projects/{projectId}/pipelines:createCwlJsonPipeline Create a JSON based CWL pipeline within a project. create_cwl_pipeline POST /api/projects/{projectId}/pipelines:createCwlPipeline Create a CWL pipeline within a project. create_nextflow_json_pipeline POST /api/projects/{projectId}/pipelines:createNextflowJsonPipeline Create a JSON based Nextflow pipeline within a project. create_nextflow_pipeline POST /api/projects/{projectId}/pipelines:createNextflowPipeline Create a Nextflow pipeline within a project. create_project_pipeline_file POST /api/projects/{projectId}/pipelines/{pipelineId}/files Create a file for a pipeline. delete_additional_project_pipeline_file DELETE /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles/{fileId} Delete an additional input form file for a pipeline. delete_project_pipeline_file DELETE /api/projects/{projectId}/pipelines/{pipelineId}/files/{fileId} Delete a file for a pipeline. download_additional_file_content GET /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles/{fileId}/content Download the contents of an additional input form file. download_input_form_file_content GET /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/inputFormFile Download the contents of the input form file. download_on_render_file_content GET /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/onRenderFile Download the contents of the onRender file. download_on_submit_file_content GET /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/onSubmitFile Download the contents of the onSubmit file. download_project_pipeline_file_content GET /api/projects/{projectId}/pipelines/{pipelineId}/files/{fileId}/content Download the contents of a pipeline file. get_project_pipeline GET /api/projects/{projectId}/pipelines/{pipelineId} Retrieve a project pipeline. get_project_pipeline_additional_files GET /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles Retrieve additional input form files for a project pipeline. get_project_pipeline_configuration_parameters GET /api/projects/{projectId}/pipelines/{pipelineId}/configurationParameters Retrieve configuration parameters for a project pipeline. get_project_pipeline_files GET /api/projects/{projectId}/pipelines/{pipelineId}/files Retrieve files for a project pipeline. get_project_pipeline_html_documentation GET /api/projects/{projectId}/pipelines/{pipelineId}/documentation/HTML Retrieve HTML documentation for a project pipeline. get_project_pipeline_input_parameters GET /api/projects/{projectId}/pipelines/{pipelineId}/inputParameters Retrieve input parameters for a project pipeline. get_project_pipeline_reference_sets GET /api/projects/{projectId}/pipelines/{pipelineId}/referenceSets Retrieve the reference sets of a project pipeline. get_project_pipelines GET /api/projects/{projectId}/pipelines Retrieve a list of project pipelines. link_pipeline_to_project POST /api/projects/{projectId}/pipelines/{pipelineId} Link a pipeline to a project. release_project_pipeline POST /api/projects/{projectId}/pipelines/{pipelineId}:release Release a pipeline. unlink_pipeline_from_project DELETE /api/projects/{projectId}/pipelines/{pipelineId} Unlink a pipeline from a project. update_additional_file PUT /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles/{fileId}/content Update the contents of an additional input form file. update_general_attributes_project_pipeline POST /api/projects/{projectId}/pipelines/{pipelineId}/generalAttributes Update the general attributes of a project pipeline. update_input_form_file PUT /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/inputFormFile Update the contents of the input form file for a pipeline. update_on_render_file PUT /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/onRenderFile Update the contents of the onRender file for a pipeline. update_on_submit_file PUT /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/onSubmitFile Update the contents of the onSubmit file for a pipeline. update_project_pipeline_file PUT /api/projects/{projectId}/pipelines/{pipelineId}/files/{fileId}/content Update the contents of a file for a pipeline."},{"location":"v3/docs/ProjectPipelineApi/#create_additional_project_pipeline_file","title":"create_additional_project_pipeline_file","text":"<p>PipelineFile create_additional_project_pipeline_file(project_id, pipeline_id, content)</p> <p>Create an additional input form file for a pipeline.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.pipeline_file import PipelineFile\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to create a file for\n    content = None # bytearray | \n\n    try:\n        # Create an additional input form file for a pipeline.\n        api_response = api_instance.create_additional_project_pipeline_file(project_id, pipeline_id, content)\n        print(\"The response of ProjectPipelineApi-&gt;create_additional_project_pipeline_file:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;create_additional_project_pipeline_file: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to create a file for content bytearray"},{"location":"v3/docs/ProjectPipelineApi/#return-type","title":"Return type","text":"<p>PipelineFile</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The pipeline file is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#create_cwl_json_pipeline","title":"create_cwl_json_pipeline","text":"<p>ProjectPipelineV4 create_cwl_json_pipeline(project_id, code, description, workflow_cwl_file, input_form_file, analysis_storage_id, tool_cwl_files=tool_cwl_files, on_render_file=on_render_file, on_submit_file=on_submit_file, other_input_form_files=other_input_form_files, metadata_model_file=metadata_model_file, links=links, version_comment=version_comment, categories=categories, html_documentation=html_documentation, proprietary=proprietary, report_configs=report_configs)</p> <p>Create a JSON based CWL pipeline within a project.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.links import Links\nfrom libica.openapi.v3.models.pipeline_report_config import PipelineReportConfig\nfrom libica.openapi.v3.models.project_pipeline_v4 import ProjectPipelineV4\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    code = 'code_example' # str | The code of the CWL pipeline\n    description = 'description_example' # str | The description of the CWL pipeline\n    workflow_cwl_file = None # bytearray | The CWL workflow file.\n    input_form_file = None # bytearray | The JSON based input form.\n    analysis_storage_id = 'analysis_storage_id_example' # str | The id of the storage to use for the pipeline.\n    tool_cwl_files = None # List[bytearray] |  (optional)\n    on_render_file = None # bytearray | A file that will render the current state of the input form. (optional)\n    on_submit_file = None # bytearray | A file that will submit the current state of the input form. (optional)\n    other_input_form_files = None # List[bytearray] |  (optional)\n    metadata_model_file = None # bytearray | The metadata model json file(contents can be retrieved from the controlplane). (optional)\n    links = libica.openapi.v3.Links() # Links |  (optional)\n    version_comment = 'version_comment_example' # str |  (optional)\n    categories = ['categories_example'] # List[Optional[str]] |  (optional)\n    html_documentation = 'html_documentation_example' # str |  (optional)\n    proprietary = False # bool | A boolean which indicates if the code of this pipeline is proprietary (optional) (default to False)\n    report_configs = libica.openapi.v3.PipelineReportConfig() # PipelineReportConfig |  (optional)\n\n    try:\n        # Create a JSON based CWL pipeline within a project.\n        api_response = api_instance.create_cwl_json_pipeline(project_id, code, description, workflow_cwl_file, input_form_file, analysis_storage_id, tool_cwl_files=tool_cwl_files, on_render_file=on_render_file, on_submit_file=on_submit_file, other_input_form_files=other_input_form_files, metadata_model_file=metadata_model_file, links=links, version_comment=version_comment, categories=categories, html_documentation=html_documentation, proprietary=proprietary, report_configs=report_configs)\n        print(\"The response of ProjectPipelineApi-&gt;create_cwl_json_pipeline:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;create_cwl_json_pipeline: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str code str The code of the CWL pipeline description str The description of the CWL pipeline workflow_cwl_file bytearray The CWL workflow file. input_form_file bytearray The JSON based input form. analysis_storage_id str The id of the storage to use for the pipeline. tool_cwl_files List[bytearray] [optional] on_render_file bytearray A file that will render the current state of the input form. [optional] on_submit_file bytearray A file that will submit the current state of the input form. [optional] other_input_form_files List[bytearray] [optional] metadata_model_file bytearray The metadata model json file(contents can be retrieved from the controlplane). [optional] links Links [optional] version_comment str [optional] categories List[Optional[str]] [optional] html_documentation str [optional] proprietary bool A boolean which indicates if the code of this pipeline is proprietary [optional] [default to False] report_configs PipelineReportConfig [optional]"},{"location":"v3/docs/ProjectPipelineApi/#return-type_1","title":"Return type","text":"<p>ProjectPipelineV4</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 201 The CWL pipeline is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#create_cwl_pipeline","title":"create_cwl_pipeline","text":"<p>ProjectPipeline create_cwl_pipeline(project_id, code, description, workflow_cwl_file, parameters_xml_file, analysis_storage_id, tool_cwl_files=tool_cwl_files, metadata_model_file=metadata_model_file, links=links, version_comment=version_comment, categories=categories, html_documentation=html_documentation, proprietary=proprietary, report_configs=report_configs)</p> <p>Create a CWL pipeline within a project.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.links import Links\nfrom libica.openapi.v3.models.pipeline_report_config import PipelineReportConfig\nfrom libica.openapi.v3.models.project_pipeline import ProjectPipeline\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    code = 'code_example' # str | The code of the CWL pipeline\n    description = 'description_example' # str | The description of the CWL pipeline\n    workflow_cwl_file = None # bytearray | The CWL workflow file.\n    parameters_xml_file = None # bytearray | \n    analysis_storage_id = 'analysis_storage_id_example' # str | The id of the storage to use for the pipeline.\n    tool_cwl_files = None # List[bytearray] |  (optional)\n    metadata_model_file = None # bytearray | The metadata model json file(contents can be retrieved from the controlplane). (optional)\n    links = libica.openapi.v3.Links() # Links |  (optional)\n    version_comment = 'version_comment_example' # str |  (optional)\n    categories = ['categories_example'] # List[Optional[str]] |  (optional)\n    html_documentation = 'html_documentation_example' # str |  (optional)\n    proprietary = False # bool | A boolean which indicates if the code of this pipeline is proprietary (optional) (default to False)\n    report_configs = libica.openapi.v3.PipelineReportConfig() # PipelineReportConfig |  (optional)\n\n    try:\n        # Create a CWL pipeline within a project.\n        api_response = api_instance.create_cwl_pipeline(project_id, code, description, workflow_cwl_file, parameters_xml_file, analysis_storage_id, tool_cwl_files=tool_cwl_files, metadata_model_file=metadata_model_file, links=links, version_comment=version_comment, categories=categories, html_documentation=html_documentation, proprietary=proprietary, report_configs=report_configs)\n        print(\"The response of ProjectPipelineApi-&gt;create_cwl_pipeline:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;create_cwl_pipeline: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str code str The code of the CWL pipeline description str The description of the CWL pipeline workflow_cwl_file bytearray The CWL workflow file. parameters_xml_file bytearray analysis_storage_id str The id of the storage to use for the pipeline. tool_cwl_files List[bytearray] [optional] metadata_model_file bytearray The metadata model json file(contents can be retrieved from the controlplane). [optional] links Links [optional] version_comment str [optional] categories List[Optional[str]] [optional] html_documentation str [optional] proprietary bool A boolean which indicates if the code of this pipeline is proprietary [optional] [default to False] report_configs PipelineReportConfig [optional]"},{"location":"v3/docs/ProjectPipelineApi/#return-type_2","title":"Return type","text":"<p>ProjectPipeline</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 201 The CWL pipeline is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#create_nextflow_json_pipeline","title":"create_nextflow_json_pipeline","text":"<p>PipelineV4 create_nextflow_json_pipeline(project_id, code, description, main_nextflow_file, input_form_file, analysis_storage_id, pipeline_language_version_id=pipeline_language_version_id, nextflow_config_file=nextflow_config_file, other_nextflow_files=other_nextflow_files, on_render_file=on_render_file, on_submit_file=on_submit_file, other_input_form_files=other_input_form_files, metadata_model_file=metadata_model_file, links=links, version_comment=version_comment, categories=categories, html_documentation=html_documentation, proprietary=proprietary, report_configs=report_configs)</p> <p>Create a JSON based Nextflow pipeline within a project.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.links import Links\nfrom libica.openapi.v3.models.pipeline_report_config import PipelineReportConfig\nfrom libica.openapi.v3.models.pipeline_v4 import PipelineV4\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    code = 'code_example' # str | The code of the pipeline\n    description = 'description_example' # str | The description of the pipeline\n    main_nextflow_file = None # bytearray | The main Nextflow file.\n    input_form_file = None # bytearray | The JSON based input form.\n    analysis_storage_id = 'analysis_storage_id_example' # str | The id of the storage to use for the pipeline.\n    pipeline_language_version_id = 'pipeline_language_version_id_example' # str | The id of the Nextflow version to use for the pipeline. (optional)\n    nextflow_config_file = None # bytearray | The Nextflow config file. (optional)\n    other_nextflow_files = None # List[bytearray] |  (optional)\n    on_render_file = None # bytearray | A file that will render the current state of the input form. (optional)\n    on_submit_file = None # bytearray | A file that will submit the current state of the input form. (optional)\n    other_input_form_files = None # List[bytearray] |  (optional)\n    metadata_model_file = None # bytearray | The metadata model json file(contents can be retrieved from the controlplane). (optional)\n    links = libica.openapi.v3.Links() # Links |  (optional)\n    version_comment = 'version_comment_example' # str |  (optional)\n    categories = ['categories_example'] # List[Optional[str]] |  (optional)\n    html_documentation = 'html_documentation_example' # str |  (optional)\n    proprietary = False # bool | A boolean which indicates if the code of this pipeline is proprietary (optional) (default to False)\n    report_configs = libica.openapi.v3.PipelineReportConfig() # PipelineReportConfig |  (optional)\n\n    try:\n        # Create a JSON based Nextflow pipeline within a project.\n        api_response = api_instance.create_nextflow_json_pipeline(project_id, code, description, main_nextflow_file, input_form_file, analysis_storage_id, pipeline_language_version_id=pipeline_language_version_id, nextflow_config_file=nextflow_config_file, other_nextflow_files=other_nextflow_files, on_render_file=on_render_file, on_submit_file=on_submit_file, other_input_form_files=other_input_form_files, metadata_model_file=metadata_model_file, links=links, version_comment=version_comment, categories=categories, html_documentation=html_documentation, proprietary=proprietary, report_configs=report_configs)\n        print(\"The response of ProjectPipelineApi-&gt;create_nextflow_json_pipeline:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;create_nextflow_json_pipeline: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str code str The code of the pipeline description str The description of the pipeline main_nextflow_file bytearray The main Nextflow file. input_form_file bytearray The JSON based input form. analysis_storage_id str The id of the storage to use for the pipeline. pipeline_language_version_id str The id of the Nextflow version to use for the pipeline. [optional] nextflow_config_file bytearray The Nextflow config file. [optional] other_nextflow_files List[bytearray] [optional] on_render_file bytearray A file that will render the current state of the input form. [optional] on_submit_file bytearray A file that will submit the current state of the input form. [optional] other_input_form_files List[bytearray] [optional] metadata_model_file bytearray The metadata model json file(contents can be retrieved from the controlplane). [optional] links Links [optional] version_comment str [optional] categories List[Optional[str]] [optional] html_documentation str [optional] proprietary bool A boolean which indicates if the code of this pipeline is proprietary [optional] [default to False] report_configs PipelineReportConfig [optional]"},{"location":"v3/docs/ProjectPipelineApi/#return-type_3","title":"Return type","text":"<p>PipelineV4</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 201 The Nextflow pipeline is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#create_nextflow_pipeline","title":"create_nextflow_pipeline","text":"<p>ProjectPipeline create_nextflow_pipeline(project_id, code, description, main_nextflow_file, parameters_xml_file, analysis_storage_id, pipeline_language_version_id=pipeline_language_version_id, nextflow_config_file=nextflow_config_file, other_nextflow_files=other_nextflow_files, metadata_model_file=metadata_model_file, links=links, version_comment=version_comment, categories=categories, html_documentation=html_documentation, proprietary=proprietary, report_configs=report_configs)</p> <p>Create a Nextflow pipeline within a project.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_4","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.links import Links\nfrom libica.openapi.v3.models.pipeline_report_config import PipelineReportConfig\nfrom libica.openapi.v3.models.project_pipeline import ProjectPipeline\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    code = 'code_example' # str | The code of the pipeline\n    description = 'description_example' # str | The description of the pipeline\n    main_nextflow_file = None # bytearray | The main Nextflow file.\n    parameters_xml_file = None # bytearray | \n    analysis_storage_id = 'analysis_storage_id_example' # str | The id of the storage to use for the pipeline.\n    pipeline_language_version_id = 'pipeline_language_version_id_example' # str | The id of the Nextflow version to use for the pipeline. (optional)\n    nextflow_config_file = None # bytearray | The Nextflow config file. (optional)\n    other_nextflow_files = None # List[bytearray] |  (optional)\n    metadata_model_file = None # bytearray | The metadata model json file(contents can be retrieved from the controlplane). (optional)\n    links = libica.openapi.v3.Links() # Links |  (optional)\n    version_comment = 'version_comment_example' # str |  (optional)\n    categories = ['categories_example'] # List[Optional[str]] |  (optional)\n    html_documentation = 'html_documentation_example' # str |  (optional)\n    proprietary = False # bool | A boolean which indicates if the code of this pipeline is proprietary (optional) (default to False)\n    report_configs = libica.openapi.v3.PipelineReportConfig() # PipelineReportConfig |  (optional)\n\n    try:\n        # Create a Nextflow pipeline within a project.\n        api_response = api_instance.create_nextflow_pipeline(project_id, code, description, main_nextflow_file, parameters_xml_file, analysis_storage_id, pipeline_language_version_id=pipeline_language_version_id, nextflow_config_file=nextflow_config_file, other_nextflow_files=other_nextflow_files, metadata_model_file=metadata_model_file, links=links, version_comment=version_comment, categories=categories, html_documentation=html_documentation, proprietary=proprietary, report_configs=report_configs)\n        print(\"The response of ProjectPipelineApi-&gt;create_nextflow_pipeline:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;create_nextflow_pipeline: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str code str The code of the pipeline description str The description of the pipeline main_nextflow_file bytearray The main Nextflow file. parameters_xml_file bytearray analysis_storage_id str The id of the storage to use for the pipeline. pipeline_language_version_id str The id of the Nextflow version to use for the pipeline. [optional] nextflow_config_file bytearray The Nextflow config file. [optional] other_nextflow_files List[bytearray] [optional] metadata_model_file bytearray The metadata model json file(contents can be retrieved from the controlplane). [optional] links Links [optional] version_comment str [optional] categories List[Optional[str]] [optional] html_documentation str [optional] proprietary bool A boolean which indicates if the code of this pipeline is proprietary [optional] [default to False] report_configs PipelineReportConfig [optional]"},{"location":"v3/docs/ProjectPipelineApi/#return-type_4","title":"Return type","text":"<p>ProjectPipeline</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_4","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 201 The Nextflow pipeline is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#create_project_pipeline_file","title":"create_project_pipeline_file","text":"<p>PipelineFile create_project_pipeline_file(project_id, pipeline_id, content)</p> <p>Create a file for a pipeline.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_5","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.pipeline_file import PipelineFile\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to create a file for\n    content = None # bytearray | \n\n    try:\n        # Create a file for a pipeline.\n        api_response = api_instance.create_project_pipeline_file(project_id, pipeline_id, content)\n        print(\"The response of ProjectPipelineApi-&gt;create_project_pipeline_file:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;create_project_pipeline_file: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to create a file for content bytearray"},{"location":"v3/docs/ProjectPipelineApi/#return-type_5","title":"Return type","text":"<p>PipelineFile</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_5","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 201 The pipeline file is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#delete_additional_project_pipeline_file","title":"delete_additional_project_pipeline_file","text":"<p>delete_additional_project_pipeline_file(project_id, pipeline_id, file_id)</p> <p>Delete an additional input form file for a pipeline.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_6","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to delete an additional file for\n    file_id = 'file_id_example' # str | The ID of the pipeline file\n\n    try:\n        # Delete an additional input form file for a pipeline.\n        api_instance.delete_additional_project_pipeline_file(project_id, pipeline_id, file_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;delete_additional_project_pipeline_file: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to delete an additional file for file_id str The ID of the pipeline file"},{"location":"v3/docs/ProjectPipelineApi/#return-type_6","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_6","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 204 The pipeline file is successfully deleted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#delete_project_pipeline_file","title":"delete_project_pipeline_file","text":"<p>delete_project_pipeline_file(project_id, pipeline_id, file_id)</p> <p>Delete a file for a pipeline.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_7","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to delete a file for\n    file_id = 'file_id_example' # str | The ID of the pipeline file\n\n    try:\n        # Delete a file for a pipeline.\n        api_instance.delete_project_pipeline_file(project_id, pipeline_id, file_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;delete_project_pipeline_file: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to delete a file for file_id str The ID of the pipeline file"},{"location":"v3/docs/ProjectPipelineApi/#return-type_7","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_7","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 204 The pipeline file is successfully deleted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#download_additional_file_content","title":"download_additional_file_content","text":"<p>bytearray download_additional_file_content(project_id, pipeline_id, file_id)</p> <p>Download the contents of an additional input form file.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_8","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to retrieve the additional file for\n    file_id = 'file_id_example' # str | The ID of the additional file\n\n    try:\n        # Download the contents of an additional input form file.\n        api_response = api_instance.download_additional_file_content(project_id, pipeline_id, file_id)\n        print(\"The response of ProjectPipelineApi-&gt;download_additional_file_content:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;download_additional_file_content: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve the additional file for file_id str The ID of the additional file"},{"location":"v3/docs/ProjectPipelineApi/#return-type_8","title":"Return type","text":"<p>bytearray</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_8","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/octet-stream</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 200 The file is successfully downloaded. * Content-Disposition - Contains name of the additional file to be downloaded.  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#download_input_form_file_content","title":"download_input_form_file_content","text":"<p>bytearray download_input_form_file_content(project_id, pipeline_id)</p> <p>Download the contents of the input form file.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_9","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to retrieve the input form file for\n\n    try:\n        # Download the contents of the input form file.\n        api_response = api_instance.download_input_form_file_content(project_id, pipeline_id)\n        print(\"The response of ProjectPipelineApi-&gt;download_input_form_file_content:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;download_input_form_file_content: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_9","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve the input form file for"},{"location":"v3/docs/ProjectPipelineApi/#return-type_9","title":"Return type","text":"<p>bytearray</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_9","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_9","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/octet-stream</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_9","title":"HTTP response details","text":"Status code Description Response headers 200 The input form file is successfully downloaded. * Content-Disposition - Contains name of the additional file to be downloaded.  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#download_on_render_file_content","title":"download_on_render_file_content","text":"<p>bytearray download_on_render_file_content(project_id, pipeline_id)</p> <p>Download the contents of the onRender file.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_10","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to retrieve the onRender file for\n\n    try:\n        # Download the contents of the onRender file.\n        api_response = api_instance.download_on_render_file_content(project_id, pipeline_id)\n        print(\"The response of ProjectPipelineApi-&gt;download_on_render_file_content:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;download_on_render_file_content: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_10","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve the onRender file for"},{"location":"v3/docs/ProjectPipelineApi/#return-type_10","title":"Return type","text":"<p>bytearray</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_10","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_10","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/octet-stream</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_10","title":"HTTP response details","text":"Status code Description Response headers 200 The onRender file is successfully downloaded. * Content-Disposition - Contains name of the additional file to be downloaded.  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#download_on_submit_file_content","title":"download_on_submit_file_content","text":"<p>bytearray download_on_submit_file_content(project_id, pipeline_id)</p> <p>Download the contents of the onSubmit file.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_11","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to retrieve the onSubmit file for\n\n    try:\n        # Download the contents of the onSubmit file.\n        api_response = api_instance.download_on_submit_file_content(project_id, pipeline_id)\n        print(\"The response of ProjectPipelineApi-&gt;download_on_submit_file_content:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;download_on_submit_file_content: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_11","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve the onSubmit file for"},{"location":"v3/docs/ProjectPipelineApi/#return-type_11","title":"Return type","text":"<p>bytearray</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_11","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_11","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/octet-stream</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_11","title":"HTTP response details","text":"Status code Description Response headers 200 The onSubmit file is successfully downloaded. * Content-Disposition - Contains name of the additional file to be downloaded.  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#download_project_pipeline_file_content","title":"download_project_pipeline_file_content","text":"<p>bytearray download_project_pipeline_file_content(project_id, pipeline_id, file_id)</p> <p>Download the contents of a pipeline file.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_12","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to retrieve files for\n    file_id = 'file_id_example' # str | The ID of the pipeline file\n\n    try:\n        # Download the contents of a pipeline file.\n        api_response = api_instance.download_project_pipeline_file_content(project_id, pipeline_id, file_id)\n        print(\"The response of ProjectPipelineApi-&gt;download_project_pipeline_file_content:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;download_project_pipeline_file_content: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_12","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve files for file_id str The ID of the pipeline file"},{"location":"v3/docs/ProjectPipelineApi/#return-type_12","title":"Return type","text":"<p>bytearray</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_12","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_12","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/octet-stream</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_12","title":"HTTP response details","text":"Status code Description Response headers 200 The pipeline file is successfully downloaded. * Content-Disposition - Contains name of the additional file to be downloaded.  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#get_project_pipeline","title":"get_project_pipeline","text":"<p>ProjectPipelineV4 get_project_pipeline(project_id, pipeline_id)</p> <p>Retrieve a project pipeline.</p> <p>Retrieves a project pipeline. This can be a pipeline from a linked bundle or an entitled, unlinked bundle.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_13","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_pipeline_v4 import ProjectPipelineV4\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to retrieve\n\n    try:\n        # Retrieve a project pipeline.\n        api_response = api_instance.get_project_pipeline(project_id, pipeline_id)\n        print(\"The response of ProjectPipelineApi-&gt;get_project_pipeline:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;get_project_pipeline: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_13","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve"},{"location":"v3/docs/ProjectPipelineApi/#return-type_13","title":"Return type","text":"<p>ProjectPipelineV4</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_13","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_13","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_13","title":"HTTP response details","text":"Status code Description Response headers 200 The project pipeline is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#get_project_pipeline_additional_files","title":"get_project_pipeline_additional_files","text":"<p>PipelineFileList get_project_pipeline_additional_files(project_id, pipeline_id)</p> <p>Retrieve additional input form files for a project pipeline.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_14","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.pipeline_file_list import PipelineFileList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to retrieve files for\n\n    try:\n        # Retrieve additional input form files for a project pipeline.\n        api_response = api_instance.get_project_pipeline_additional_files(project_id, pipeline_id)\n        print(\"The response of ProjectPipelineApi-&gt;get_project_pipeline_additional_files:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;get_project_pipeline_additional_files: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_14","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve files for"},{"location":"v3/docs/ProjectPipelineApi/#return-type_14","title":"Return type","text":"<p>PipelineFileList</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_14","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_14","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_14","title":"HTTP response details","text":"Status code Description Response headers 200 The files are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#get_project_pipeline_configuration_parameters","title":"get_project_pipeline_configuration_parameters","text":"<p>PipelineConfigurationParameterList get_project_pipeline_configuration_parameters(project_id, pipeline_id)</p> <p>Retrieve configuration parameters for a project pipeline.</p> <p>The pipeline can originate from a linked bundle.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_15","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.pipeline_configuration_parameter_list import PipelineConfigurationParameterList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to retrieve input parameters for\n\n    try:\n        # Retrieve configuration parameters for a project pipeline.\n        api_response = api_instance.get_project_pipeline_configuration_parameters(project_id, pipeline_id)\n        print(\"The response of ProjectPipelineApi-&gt;get_project_pipeline_configuration_parameters:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;get_project_pipeline_configuration_parameters: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_15","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve input parameters for"},{"location":"v3/docs/ProjectPipelineApi/#return-type_15","title":"Return type","text":"<p>PipelineConfigurationParameterList</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_15","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_15","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_15","title":"HTTP response details","text":"Status code Description Response headers 200 The configuration parameters are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#get_project_pipeline_files","title":"get_project_pipeline_files","text":"<p>PipelineFileList get_project_pipeline_files(project_id, pipeline_id)</p> <p>Retrieve files for a project pipeline.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_16","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.pipeline_file_list import PipelineFileList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to retrieve files for\n\n    try:\n        # Retrieve files for a project pipeline.\n        api_response = api_instance.get_project_pipeline_files(project_id, pipeline_id)\n        print(\"The response of ProjectPipelineApi-&gt;get_project_pipeline_files:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;get_project_pipeline_files: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_16","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve files for"},{"location":"v3/docs/ProjectPipelineApi/#return-type_16","title":"Return type","text":"<p>PipelineFileList</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_16","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_16","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_16","title":"HTTP response details","text":"Status code Description Response headers 200 The files are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#get_project_pipeline_html_documentation","title":"get_project_pipeline_html_documentation","text":"<p>PipelineHtmlDocumentation get_project_pipeline_html_documentation(project_id, pipeline_id)</p> <p>Retrieve HTML documentation for a project pipeline.</p> <p>Retrieve HTML documentation for a project pipeline. This can be a pipeline from a linked bundle.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_17","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.pipeline_html_documentation import PipelineHtmlDocumentation\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to retrieve HTML documentation from\n\n    try:\n        # Retrieve HTML documentation for a project pipeline.\n        api_response = api_instance.get_project_pipeline_html_documentation(project_id, pipeline_id)\n        print(\"The response of ProjectPipelineApi-&gt;get_project_pipeline_html_documentation:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;get_project_pipeline_html_documentation: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_17","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve HTML documentation from"},{"location":"v3/docs/ProjectPipelineApi/#return-type_17","title":"Return type","text":"<p>PipelineHtmlDocumentation</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_17","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_17","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_17","title":"HTTP response details","text":"Status code Description Response headers 200 The HTML documentation is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#get_project_pipeline_input_parameters","title":"get_project_pipeline_input_parameters","text":"<p>InputParameterList get_project_pipeline_input_parameters(project_id, pipeline_id)</p> <p>Retrieve input parameters for a project pipeline.</p> <p>The pipeline can originate from a linked bundle.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_18","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.input_parameter_list import InputParameterList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to retrieve input parameters for\n\n    try:\n        # Retrieve input parameters for a project pipeline.\n        api_response = api_instance.get_project_pipeline_input_parameters(project_id, pipeline_id)\n        print(\"The response of ProjectPipelineApi-&gt;get_project_pipeline_input_parameters:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;get_project_pipeline_input_parameters: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_18","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to retrieve input parameters for"},{"location":"v3/docs/ProjectPipelineApi/#return-type_18","title":"Return type","text":"<p>InputParameterList</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_18","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_18","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_18","title":"HTTP response details","text":"Status code Description Response headers 200 The input parameters are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#get_project_pipeline_reference_sets","title":"get_project_pipeline_reference_sets","text":"<p>ReferenceSetList get_project_pipeline_reference_sets(project_id, pipeline_id)</p> <p>Retrieve the reference sets of a project pipeline.</p> <p>Retrieve the reference sets of a project pipeline. This can be a pipeline from a linked bundle.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_19","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.reference_set_list import ReferenceSetList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the pipeline to retrieve reference sets for\n\n    try:\n        # Retrieve the reference sets of a project pipeline.\n        api_response = api_instance.get_project_pipeline_reference_sets(project_id, pipeline_id)\n        print(\"The response of ProjectPipelineApi-&gt;get_project_pipeline_reference_sets:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;get_project_pipeline_reference_sets: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_19","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the pipeline to retrieve reference sets for"},{"location":"v3/docs/ProjectPipelineApi/#return-type_19","title":"Return type","text":"<p>ReferenceSetList</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_19","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_19","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_19","title":"HTTP response details","text":"Status code Description Response headers 200 The list of reference sets is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#get_project_pipelines","title":"get_project_pipelines","text":"<p>ProjectPipelineList get_project_pipelines(project_id)</p> <p>Retrieve a list of project pipelines.</p> <p>Lists all pipelines that are available to the project.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_20","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_pipeline_list import ProjectPipelineList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | The ID of the project to retrieve pipelines for\n\n    try:\n        # Retrieve a list of project pipelines.\n        api_response = api_instance.get_project_pipelines(project_id)\n        print(\"The response of ProjectPipelineApi-&gt;get_project_pipelines:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;get_project_pipelines: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_20","title":"Parameters","text":"Name Type Description Notes project_id str The ID of the project to retrieve pipelines for"},{"location":"v3/docs/ProjectPipelineApi/#return-type_20","title":"Return type","text":"<p>ProjectPipelineList</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_20","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_20","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_20","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project pipelines is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#link_pipeline_to_project","title":"link_pipeline_to_project","text":"<p>link_pipeline_to_project(project_id, pipeline_id)</p> <p>Link a pipeline to a project.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_21","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the pipeline\n\n    try:\n        # Link a pipeline to a project.\n        api_instance.link_pipeline_to_project(project_id, pipeline_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;link_pipeline_to_project: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_21","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the pipeline"},{"location":"v3/docs/ProjectPipelineApi/#return-type_21","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_21","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_21","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_21","title":"HTTP response details","text":"Status code Description Response headers 204 The pipeline is successfully linked to the project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#release_project_pipeline","title":"release_project_pipeline","text":"<p>release_project_pipeline(project_id, pipeline_id)</p> <p>Release a pipeline.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_22","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the pipeline\n\n    try:\n        # Release a pipeline.\n        api_instance.release_project_pipeline(project_id, pipeline_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;release_project_pipeline: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_22","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the pipeline"},{"location":"v3/docs/ProjectPipelineApi/#return-type_22","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_22","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_22","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_22","title":"HTTP response details","text":"Status code Description Response headers 204 The pipeline is successfully released. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#unlink_pipeline_from_project","title":"unlink_pipeline_from_project","text":"<p>unlink_pipeline_from_project(project_id, pipeline_id)</p> <p>Unlink a pipeline from a project.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_23","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the pipeline\n\n    try:\n        # Unlink a pipeline from a project.\n        api_instance.unlink_pipeline_from_project(project_id, pipeline_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;unlink_pipeline_from_project: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_23","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the pipeline"},{"location":"v3/docs/ProjectPipelineApi/#return-type_23","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_23","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_23","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_23","title":"HTTP response details","text":"Status code Description Response headers 204 The pipeline is successfully unlinked from the project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#update_additional_file","title":"update_additional_file","text":"<p>update_additional_file(project_id, pipeline_id, file_id, content)</p> <p>Update the contents of an additional input form file.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_24","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to update the additional file for\n    file_id = 'file_id_example' # str | The ID of the additional file\n    content = None # bytearray | \n\n    try:\n        # Update the contents of an additional input form file.\n        api_instance.update_additional_file(project_id, pipeline_id, file_id, content)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;update_additional_file: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_24","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to update the additional file for file_id str The ID of the additional file content bytearray"},{"location":"v3/docs/ProjectPipelineApi/#return-type_24","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_24","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_24","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_24","title":"HTTP response details","text":"Status code Description Response headers 200 The file is successfully updated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#update_general_attributes_project_pipeline","title":"update_general_attributes_project_pipeline","text":"<p>PipelineV4 update_general_attributes_project_pipeline(project_id, pipeline_id, pipeline_update)</p> <p>Update the general attributes of a project pipeline.</p> <p>Attributes which can be updated: - code - description - languageVersion - proprietary</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_25","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.pipeline_update import PipelineUpdate\nfrom libica.openapi.v3.models.pipeline_v4 import PipelineV4\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to update\n    pipeline_update = libica.openapi.v3.PipelineUpdate() # PipelineUpdate | \n\n    try:\n        # Update the general attributes of a project pipeline.\n        api_response = api_instance.update_general_attributes_project_pipeline(project_id, pipeline_id, pipeline_update)\n        print(\"The response of ProjectPipelineApi-&gt;update_general_attributes_project_pipeline:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;update_general_attributes_project_pipeline: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_25","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to update pipeline_update PipelineUpdate"},{"location":"v3/docs/ProjectPipelineApi/#return-type_25","title":"Return type","text":"<p>PipelineV4</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_25","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_25","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v4+json</li> <li>Accept: application/problem+json, application/vnd.illumina.v4+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_25","title":"HTTP response details","text":"Status code Description Response headers 200 The pipeline is successfully updated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#update_input_form_file","title":"update_input_form_file","text":"<p>update_input_form_file(project_id, pipeline_id, content)</p> <p>Update the contents of the input form file for a pipeline.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_26","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to update a file for\n    content = None # bytearray | \n\n    try:\n        # Update the contents of the input form file for a pipeline.\n        api_instance.update_input_form_file(project_id, pipeline_id, content)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;update_input_form_file: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_26","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to update a file for content bytearray"},{"location":"v3/docs/ProjectPipelineApi/#return-type_26","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_26","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_26","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_26","title":"HTTP response details","text":"Status code Description Response headers 200 The input  form file is successfully updated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#update_on_render_file","title":"update_on_render_file","text":"<p>update_on_render_file(project_id, pipeline_id, content)</p> <p>Update the contents of the onRender file for a pipeline.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_27","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to update the onRender file for\n    content = None # bytearray | \n\n    try:\n        # Update the contents of the onRender file for a pipeline.\n        api_instance.update_on_render_file(project_id, pipeline_id, content)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;update_on_render_file: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_27","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to update the onRender file for content bytearray"},{"location":"v3/docs/ProjectPipelineApi/#return-type_27","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_27","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_27","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_27","title":"HTTP response details","text":"Status code Description Response headers 200 The onRender file is successfully updated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#update_on_submit_file","title":"update_on_submit_file","text":"<p>update_on_submit_file(project_id, pipeline_id, content)</p> <p>Update the contents of the onSubmit file for a pipeline.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_28","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to update the onSubmit file for\n    content = None # bytearray | \n\n    try:\n        # Update the contents of the onSubmit file for a pipeline.\n        api_instance.update_on_submit_file(project_id, pipeline_id, content)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;update_on_submit_file: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_28","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to update the onSubmit file for content bytearray"},{"location":"v3/docs/ProjectPipelineApi/#return-type_28","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_28","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_28","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_28","title":"HTTP response details","text":"Status code Description Response headers 200 The onSubmit file is successfully updated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineApi/#update_project_pipeline_file","title":"update_project_pipeline_file","text":"<p>update_project_pipeline_file(project_id, pipeline_id, file_id, content)</p> <p>Update the contents of a file for a pipeline.</p>"},{"location":"v3/docs/ProjectPipelineApi/#example_29","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectPipelineApi(api_client)\n    project_id = 'project_id_example' # str | \n    pipeline_id = 'pipeline_id_example' # str | The ID of the project pipeline to update a file for\n    file_id = 'file_id_example' # str | The ID of the pipeline file\n    content = None # bytearray | \n\n    try:\n        # Update the contents of a file for a pipeline.\n        api_instance.update_project_pipeline_file(project_id, pipeline_id, file_id, content)\n    except Exception as e:\n        print(\"Exception when calling ProjectPipelineApi-&gt;update_project_pipeline_file: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectPipelineApi/#parameters_29","title":"Parameters","text":"Name Type Description Notes project_id str pipeline_id str The ID of the project pipeline to update a file for file_id str The ID of the pipeline file content bytearray"},{"location":"v3/docs/ProjectPipelineApi/#return-type_29","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectPipelineApi/#authorization_29","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectPipelineApi/#http-request-headers_29","title":"HTTP request headers","text":"<ul> <li>Content-Type: multipart/form-data</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectPipelineApi/#http-response-details_29","title":"HTTP response details","text":"Status code Description Response headers 200 The pipeline file is successfully updated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineList/","title":"ProjectPipelineList","text":""},{"location":"v3/docs/ProjectPipelineList/#properties","title":"Properties","text":"Name Type Description Notes items List[ProjectPipeline]"},{"location":"v3/docs/ProjectPipelineList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_pipeline_list import ProjectPipelineList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectPipelineList from a JSON string\nproject_pipeline_list_instance = ProjectPipelineList.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectPipelineList.to_json())\n\n# convert the object into a dict\nproject_pipeline_list_dict = project_pipeline_list_instance.to_dict()\n# create an instance of ProjectPipelineList from a dict\nproject_pipeline_list_from_dict = ProjectPipelineList.from_dict(project_pipeline_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectPipelineV4/","title":"ProjectPipelineV4","text":""},{"location":"v3/docs/ProjectPipelineV4/#properties","title":"Properties","text":"Name Type Description Notes pipeline PipelineV4 project_id str bundle_links BundleList"},{"location":"v3/docs/ProjectPipelineV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_pipeline_v4 import ProjectPipelineV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectPipelineV4 from a JSON string\nproject_pipeline_v4_instance = ProjectPipelineV4.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectPipelineV4.to_json())\n\n# convert the object into a dict\nproject_pipeline_v4_dict = project_pipeline_v4_instance.to_dict()\n# create an instance of ProjectPipelineV4 from a dict\nproject_pipeline_v4_from_dict = ProjectPipelineV4.from_dict(project_pipeline_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectSample/","title":"ProjectSample","text":""},{"location":"v3/docs/ProjectSample/#properties","title":"Properties","text":"Name Type Description Notes sample Sample project_id str"},{"location":"v3/docs/ProjectSample/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_sample import ProjectSample\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectSample from a JSON string\nproject_sample_instance = ProjectSample.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectSample.to_json())\n\n# convert the object into a dict\nproject_sample_dict = project_sample_instance.to_dict()\n# create an instance of ProjectSample from a dict\nproject_sample_from_dict = ProjectSample.from_dict(project_sample_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/","title":"libica.openapi.v3.ProjectSampleApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description add_metadata_model_to_sample POST /api/projects/{projectId}/samples/{sampleId}/metadata/{metadataModelId} Add a metadata model to a sample. complete_project_sample POST /api/projects/{projectId}/samples/{sampleId}:complete Completes the sample after data has been linked to it. create_sample_in_project POST /api/projects/{projectId}/samples Create a new sample in this project deep_delete_sample POST /api/projects/{projectId}/samples/{sampleId}:deleteDeep Delete a sample together with all of its data. delete_and_unlink_sample POST /api/projects/{projectId}/samples/{sampleId}:deleteUnlink Delete a sample and unlink its data. delete_sample_with_input POST /api/projects/{projectId}/samples/{sampleId}:deleteWithInput Delete a sample as well as its input data. get_project_sample GET /api/projects/{projectId}/samples/{sampleId} Retrieve a project sample. get_project_sample_analyses GET /api/projects/{projectId}/samples/{sampleId}/analyses Retrieve the list of analyses. get_project_samples POST /api/projects/{projectId}/samples:search Retrieve project samples. get_projects_for_sample GET /api/projects/{projectId}/samples/{sampleId}/projects Retrieve a list of projects for this sample. get_sample_data_list GET /api/projects/{projectId}/samples/{sampleId}/data Retrieve the list of sample data. get_sample_history GET /api/projects/{projectId}/samples/{sampleId}/history Retrieve sample history. get_sample_metadata_field GET /api/projects/{projectId}/samples/{sampleId}/metadata/field/{fieldId} Retrieve a metadata field. get_sample_metadata_field_count GET /api/projects/{projectId}/samples/{sampleId}/metadata/{fieldId}/fieldCount Retrieves the number of occurrences of a given field. link_data_to_sample POST /api/projects/{projectId}/samples/{sampleId}/data/{dataId} Link data to a sample. link_sample_to_project POST /api/projects/{projectId}/samples/{sampleId} Link a sample to a project. mark_sample_deleted POST /api/projects/{projectId}/samples/{sampleId}:deleteMark Mark a sample deleted. search_project_sample_analyses POST /api/projects/{projectId}/samples/{sampleId}/analyses:search Search analyses for sample. unlink_data_from_sample POST /api/projects/{projectId}/samples/{sampleId}/data/{dataId}:unlink Unlink data from a sample. unlink_sample_from_project POST /api/projects/{projectId}/samples/{sampleId}:unlink Unlink a sample from a project. update_project_sample PUT /api/projects/{projectId}/samples/{sampleId} Update a project sample. update_sample_metadata_fields POST /api/projects/{projectId}/samples/{sampleId}/metadata:updateFields Update metadata fields."},{"location":"v3/docs/ProjectSampleApi/#add_metadata_model_to_sample","title":"add_metadata_model_to_sample","text":"<p>add_metadata_model_to_sample(project_id, sample_id, metadata_model_id)</p> <p>Add a metadata model to a sample.</p>"},{"location":"v3/docs/ProjectSampleApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    sample_id = 'sample_id_example' # str | The ID of the sample\n    metadata_model_id = 'metadata_model_id_example' # str | The ID of the metadata model\n\n    try:\n        # Add a metadata model to a sample.\n        api_instance.add_metadata_model_to_sample(project_id, sample_id, metadata_model_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;add_metadata_model_to_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample metadata_model_id str The ID of the metadata model"},{"location":"v3/docs/ProjectSampleApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The metadata model is successfully added to the sample. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/#complete_project_sample","title":"complete_project_sample","text":"<p>complete_project_sample(project_id, sample_id)</p> <p>Completes the sample after data has been linked to it.</p> <p>Completes the sample after data has been linked to it. The sample status will be set to 'Available' and a sample completed event will be triggered as well.</p>"},{"location":"v3/docs/ProjectSampleApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    sample_id = 'sample_id_example' # str | \n\n    try:\n        # Completes the sample after data has been linked to it.\n        api_instance.complete_project_sample(project_id, sample_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;complete_project_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str"},{"location":"v3/docs/ProjectSampleApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The sample is successfully completed. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/#create_sample_in_project","title":"create_sample_in_project","text":"<p>ProjectSample create_sample_in_project(project_id, create_sample)</p> <p>Create a new sample in this project</p>"},{"location":"v3/docs/ProjectSampleApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_sample import CreateSample\nfrom libica.openapi.v3.models.project_sample import ProjectSample\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_sample = libica.openapi.v3.CreateSample() # CreateSample | \n\n    try:\n        # Create a new sample in this project\n        api_response = api_instance.create_sample_in_project(project_id, create_sample)\n        print(\"The response of ProjectSampleApi-&gt;create_sample_in_project:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;create_sample_in_project: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str create_sample CreateSample"},{"location":"v3/docs/ProjectSampleApi/#return-type_2","title":"Return type","text":"<p>ProjectSample</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 201 The sample is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/#deep_delete_sample","title":"deep_delete_sample","text":"<p>deep_delete_sample(project_id, sample_id)</p> <p>Delete a sample together with all of its data.</p> <p>Endpoint deleting a sample together with all of its data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/ProjectSampleApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    sample_id = 'sample_id_example' # str | The ID of the sample\n\n    try:\n        # Delete a sample together with all of its data.\n        api_instance.deep_delete_sample(project_id, sample_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;deep_delete_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample"},{"location":"v3/docs/ProjectSampleApi/#return-type_3","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 204 The sample and all of its data are successfully deleted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/#delete_and_unlink_sample","title":"delete_and_unlink_sample","text":"<p>delete_and_unlink_sample(project_id, sample_id)</p> <p>Delete a sample and unlink its data.</p> <p>Endpoint for deleting a sample while unlinking its data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/ProjectSampleApi/#example_4","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    sample_id = 'sample_id_example' # str | The ID of the sample\n\n    try:\n        # Delete a sample and unlink its data.\n        api_instance.delete_and_unlink_sample(project_id, sample_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;delete_and_unlink_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample"},{"location":"v3/docs/ProjectSampleApi/#return-type_4","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization_4","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 204 The sample is successfully deleted and the its data is successfully unlinked. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/#delete_sample_with_input","title":"delete_sample_with_input","text":"<p>delete_sample_with_input(project_id, sample_id)</p> <p>Delete a sample as well as its input data.</p> <p>Endpoint for deleting a sample as well as its input data.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/ProjectSampleApi/#example_5","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    sample_id = 'sample_id_example' # str | The ID of the sample\n\n    try:\n        # Delete a sample as well as its input data.\n        api_instance.delete_sample_with_input(project_id, sample_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;delete_sample_with_input: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample"},{"location":"v3/docs/ProjectSampleApi/#return-type_5","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization_5","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 204 The sample and its input data are successfully deleted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/#get_project_sample","title":"get_project_sample","text":"<p>ProjectSample get_project_sample(project_id, sample_id)</p> <p>Retrieve a project sample.</p>"},{"location":"v3/docs/ProjectSampleApi/#example_6","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_sample import ProjectSample\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    sample_id = 'sample_id_example' # str | The ID of the sample\n\n    try:\n        # Retrieve a project sample.\n        api_response = api_instance.get_project_sample(project_id, sample_id)\n        print(\"The response of ProjectSampleApi-&gt;get_project_sample:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_project_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters_6","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample"},{"location":"v3/docs/ProjectSampleApi/#return-type_6","title":"Return type","text":"<p>ProjectSample</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization_6","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers_6","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details_6","title":"HTTP response details","text":"Status code Description Response headers 200 The project sample is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/#get_project_sample_analyses","title":"get_project_sample_analyses","text":"<p>AnalysisPagedListV3 get_project_sample_analyses(project_id, sample_id, reference=reference, userreference=userreference, status=status, usertag=usertag, technicaltag=technicaltag, referencetag=referencetag, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)</p> <p>Retrieve the list of analyses.</p> <p>This endpoint only returns V3 items. Use the search endpoint to get V4 items.</p>"},{"location":"v3/docs/ProjectSampleApi/#example_7","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_paged_list_v3 import AnalysisPagedListV3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    sample_id = 'sample_id_example' # str | The ID of the sample\n    reference = 'reference_example' # str | The reference to filter on. (optional)\n    userreference = 'userreference_example' # str | The user-reference to filter on. (optional)\n    status = 'status_example' # str | The status to filter on. (optional)\n    usertag = 'usertag_example' # str | The user-tags to filter on. (optional)\n    technicaltag = 'technicaltag_example' # str | The technical-tags to filter on. (optional)\n    referencetag = 'referencetag_example' # str | The reference-data-tags to filter on. (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary  (optional)\n\n    try:\n        # Retrieve the list of analyses.\n        api_response = api_instance.get_project_sample_analyses(project_id, sample_id, reference=reference, userreference=userreference, status=status, usertag=usertag, technicaltag=technicaltag, referencetag=referencetag, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        print(\"The response of ProjectSampleApi-&gt;get_project_sample_analyses:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_project_sample_analyses: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters_7","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample reference str The reference to filter on. [optional] userreference str The user-reference to filter on. [optional] status str The status to filter on. [optional] usertag str The user-tags to filter on. [optional] technicaltag str The technical-tags to filter on. [optional] referencetag str The reference-data-tags to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary [optional]"},{"location":"v3/docs/ProjectSampleApi/#return-type_7","title":"Return type","text":"<p>AnalysisPagedListV3</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization_7","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers_7","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details_7","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project analyses is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/#get_project_samples","title":"get_project_samples","text":"<p>ProjectSamplePagedList get_project_samples(project_id, find_project_samples, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)</p> <p>Retrieve project samples.</p> <p>Endpoint for retrieving project samples. This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/ProjectSampleApi/#example_8","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.find_project_samples import FindProjectSamples\nfrom libica.openapi.v3.models.project_sample_paged_list import ProjectSamplePagedList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    find_project_samples = libica.openapi.v3.FindProjectSamples() # FindProjectSamples | \n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status (optional)\n\n    try:\n        # Retrieve project samples.\n        api_response = api_instance.get_project_samples(project_id, find_project_samples, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        print(\"The response of ProjectSampleApi-&gt;get_project_samples:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_project_samples: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters_8","title":"Parameters","text":"Name Type Description Notes project_id str find_project_samples FindProjectSamples page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\" The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status [optional]"},{"location":"v3/docs/ProjectSampleApi/#return-type_8","title":"Return type","text":"<p>ProjectSamplePagedList</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization_8","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers_8","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details_8","title":"HTTP response details","text":"Status code Description Response headers 200 The project samples are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/#get_projects_for_sample","title":"get_projects_for_sample","text":"<p>ProjectList get_projects_for_sample(project_id, sample_id)</p> <p>Retrieve a list of projects for this sample.</p>"},{"location":"v3/docs/ProjectSampleApi/#example_9","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_list import ProjectList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    sample_id = 'sample_id_example' # str | The ID of the sample\n\n    try:\n        # Retrieve a list of projects for this sample.\n        api_response = api_instance.get_projects_for_sample(project_id, sample_id)\n        print(\"The response of ProjectSampleApi-&gt;get_projects_for_sample:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_projects_for_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters_9","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample"},{"location":"v3/docs/ProjectSampleApi/#return-type_9","title":"Return type","text":"<p>ProjectList</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization_9","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers_9","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details_9","title":"HTTP response details","text":"Status code Description Response headers 200 The list of projects is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/#get_sample_data_list","title":"get_sample_data_list","text":"<p>DataPagedList get_sample_data_list(project_id, sample_id, full_text=full_text, id=id, filename=filename, filename_match_mode=filename_match_mode, file_path=file_path, file_path_match_mode=file_path_match_mode, status=status, format_id=format_id, format_code=format_code, type=type, parent_folder_id=parent_folder_id, parent_folder_path=parent_folder_path, creation_date_after=creation_date_after, creation_date_before=creation_date_before, status_date_after=status_date_after, status_date_before=status_date_before, user_tag=user_tag, user_tag_match_mode=user_tag_match_mode, run_input_tag=run_input_tag, run_input_tag_match_mode=run_input_tag_match_mode, run_output_tag=run_output_tag, run_output_tag_match_mode=run_output_tag_match_mode, connector_tag=connector_tag, connector_tag_match_mode=connector_tag_match_mode, technical_tag=technical_tag, technical_tag_match_mode=technical_tag_match_mode, not_in_run=not_in_run, instrument_run_id=instrument_run_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)</p> <p>Retrieve the list of sample data.</p>"},{"location":"v3/docs/ProjectSampleApi/#example_10","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.data_paged_list import DataPagedList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    sample_id = 'sample_id_example' # str | The ID of the sample to retrieve data for\n    full_text = 'full_text_example' # str | To search through multiple fields of data. (optional)\n    id = ['id_example'] # List[str] | The ids to filter on. This will always match exact. (optional)\n    filename = ['filename_example'] # List[str] | The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. (optional)\n    filename_match_mode = 'filename_match_mode_example' # str | How the filenames are filtered.  (optional)\n    file_path = ['file_path_example'] # List[str] | The paths of the files to filter on. (optional)\n    file_path_match_mode = STARTS_WITH_CASE_INSENSITIVE # str | How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). (optional) (default to STARTS_WITH_CASE_INSENSITIVE)\n    status = ['status_example'] # List[str] | The statuses to filter on. (optional)\n    format_id = ['format_id_example'] # List[str] | The IDs of the formats to filter on. (optional)\n    format_code = ['format_code_example'] # List[str] | The codes of the formats to filter on. (optional)\n    type = 'type_example' # str | The type to filter on. (optional)\n    parent_folder_id = ['parent_folder_id_example'] # List[str] | The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. (optional)\n    parent_folder_path = 'parent_folder_path_example' # str | The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files. (optional)\n    creation_date_after = '2013-10-20T19:20:30+01:00' # datetime | The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    creation_date_before = '2013-10-20T19:20:30+01:00' # datetime | The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_after = '2013-10-20T19:20:30+01:00' # datetime | The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    status_date_before = '2013-10-20T19:20:30+01:00' # datetime | The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z (optional)\n    user_tag = ['user_tag_example'] # List[str] | The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. (optional)\n    user_tag_match_mode = 'user_tag_match_mode_example' # str | How the usertags are filtered.  (optional)\n    run_input_tag = ['run_input_tag_example'] # List[str] | The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_input_tag_match_mode = 'run_input_tag_match_mode_example' # str | How the runInputTags are filtered.  (optional)\n    run_output_tag = ['run_output_tag_example'] # List[str] | The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. (optional)\n    run_output_tag_match_mode = 'run_output_tag_match_mode_example' # str | How the runOutputTags are filtered.  (optional)\n    connector_tag = ['connector_tag_example'] # List[str] | The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. (optional)\n    connector_tag_match_mode = 'connector_tag_match_mode_example' # str | How the connectorTags are filtered.  (optional)\n    technical_tag = ['technical_tag_example'] # List[str] | The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. (optional)\n    technical_tag_match_mode = 'technical_tag_match_mode_example' # str | How the technicalTags are filtered.  (optional)\n    not_in_run = True # bool | When set to true, the data will be filtered on data which is not used in a run. (optional)\n    instrument_run_id = ['instrument_run_id_example'] # List[str] | The instrument run IDs of the sequencing runs to filter on. (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt (optional)\n\n    try:\n        # Retrieve the list of sample data.\n        api_response = api_instance.get_sample_data_list(project_id, sample_id, full_text=full_text, id=id, filename=filename, filename_match_mode=filename_match_mode, file_path=file_path, file_path_match_mode=file_path_match_mode, status=status, format_id=format_id, format_code=format_code, type=type, parent_folder_id=parent_folder_id, parent_folder_path=parent_folder_path, creation_date_after=creation_date_after, creation_date_before=creation_date_before, status_date_after=status_date_after, status_date_before=status_date_before, user_tag=user_tag, user_tag_match_mode=user_tag_match_mode, run_input_tag=run_input_tag, run_input_tag_match_mode=run_input_tag_match_mode, run_output_tag=run_output_tag, run_output_tag_match_mode=run_output_tag_match_mode, connector_tag=connector_tag, connector_tag_match_mode=connector_tag_match_mode, technical_tag=technical_tag, technical_tag_match_mode=technical_tag_match_mode, not_in_run=not_in_run, instrument_run_id=instrument_run_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        print(\"The response of ProjectSampleApi-&gt;get_sample_data_list:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_sample_data_list: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters_10","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample to retrieve data for full_text str To search through multiple fields of data. [optional] id List[str] The ids to filter on. This will always match exact. [optional] filename List[str] The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done. [optional] filename_match_mode str How the filenames are filtered. [optional] file_path List[str] The paths of the files to filter on. [optional] file_path_match_mode str How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt). [optional] [default to STARTS_WITH_CASE_INSENSITIVE] status List[str] The statuses to filter on. [optional] format_id List[str] The IDs of the formats to filter on. [optional] format_code List[str] The codes of the formats to filter on. [optional] type str The type to filter on. [optional] parent_folder_id List[str] The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively. [optional] parent_folder_path str The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files. [optional] creation_date_after datetime The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] creation_date_before datetime The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_after datetime The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] status_date_before datetime The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z [optional] user_tag List[str] The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done. [optional] user_tag_match_mode str How the usertags are filtered. [optional] run_input_tag List[str] The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done. [optional] run_input_tag_match_mode str How the runInputTags are filtered. [optional] run_output_tag List[str] The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done. [optional] run_output_tag_match_mode str How the runOutputTags are filtered. [optional] connector_tag List[str] The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done. [optional] connector_tag_match_mode str How the connectorTags are filtered. [optional] technical_tag List[str] The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done. [optional] technical_tag_match_mode str How the technicalTags are filtered. [optional] not_in_run bool When set to true, the data will be filtered on data which is not used in a run. [optional] instrument_run_id List[str] The instrument run IDs of the sequencing runs to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt [optional]"},{"location":"v3/docs/ProjectSampleApi/#return-type_10","title":"Return type","text":"<p>DataPagedList</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization_10","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers_10","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details_10","title":"HTTP response details","text":"Status code Description Response headers 200 The list of sample data is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/#get_sample_history","title":"get_sample_history","text":"<p>SampleHistoryList get_sample_history(project_id, sample_id)</p> <p>Retrieve sample history.</p>"},{"location":"v3/docs/ProjectSampleApi/#example_11","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.sample_history_list import SampleHistoryList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    sample_id = 'sample_id_example' # str | The ID of the sample\n\n    try:\n        # Retrieve sample history.\n        api_response = api_instance.get_sample_history(project_id, sample_id)\n        print(\"The response of ProjectSampleApi-&gt;get_sample_history:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_sample_history: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters_11","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample"},{"location":"v3/docs/ProjectSampleApi/#return-type_11","title":"Return type","text":"<p>SampleHistoryList</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization_11","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers_11","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details_11","title":"HTTP response details","text":"Status code Description Response headers 200 The sample history is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/#get_sample_metadata_field","title":"get_sample_metadata_field","text":"<p>ModelField get_sample_metadata_field(project_id, sample_id, field_id)</p> <p>Retrieve a metadata field.</p> <p>Returns a list of values for the field with identifier fieldId belonging to the sample with identifier sampleId. If the field is a group field that can occur more than once or belongs to a group field that can occur more than once the return value will have one entry in the list for each occurrence. If not the return value will be a single value list</p>"},{"location":"v3/docs/ProjectSampleApi/#example_12","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.model_field import ModelField\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    sample_id = 'sample_id_example' # str | The ID of the sample\n    field_id = 'field_id_example' # str | The ID of the field\n\n    try:\n        # Retrieve a metadata field.\n        api_response = api_instance.get_sample_metadata_field(project_id, sample_id, field_id)\n        print(\"The response of ProjectSampleApi-&gt;get_sample_metadata_field:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_sample_metadata_field: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters_12","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample field_id str The ID of the field"},{"location":"v3/docs/ProjectSampleApi/#return-type_12","title":"Return type","text":"<p>ModelField</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization_12","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers_12","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details_12","title":"HTTP response details","text":"Status code Description Response headers 200 The metadata field is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/#get_sample_metadata_field_count","title":"get_sample_metadata_field_count","text":"<p>ModelField get_sample_metadata_field_count(project_id, sample_id, field_id)</p> <p>Retrieves the number of occurrences of a given field.</p> <p>Returns a list of values for the field with identifier fieldId belonging to the sample with identifier sampleId. If the field is a group field that can occur more than once or belongs to a group field that can occur more than once the return value will have one entry in the list for each occurrence. If not the return value will be a single value list</p>"},{"location":"v3/docs/ProjectSampleApi/#example_13","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.model_field import ModelField\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    sample_id = 'sample_id_example' # str | The ID of the sample\n    field_id = 'field_id_example' # str | The ID of the field\n\n    try:\n        # Retrieves the number of occurrences of a given field.\n        api_response = api_instance.get_sample_metadata_field_count(project_id, sample_id, field_id)\n        print(\"The response of ProjectSampleApi-&gt;get_sample_metadata_field_count:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;get_sample_metadata_field_count: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters_13","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample field_id str The ID of the field"},{"location":"v3/docs/ProjectSampleApi/#return-type_13","title":"Return type","text":"<p>ModelField</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization_13","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers_13","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details_13","title":"HTTP response details","text":"Status code Description Response headers 200 The number of occurrences is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/#link_data_to_sample","title":"link_data_to_sample","text":"<p>link_data_to_sample(project_id, sample_id, data_id)</p> <p>Link data to a sample.</p>"},{"location":"v3/docs/ProjectSampleApi/#example_14","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    sample_id = 'sample_id_example' # str | The ID of the sample\n    data_id = 'data_id_example' # str | The ID of the data to link\n\n    try:\n        # Link data to a sample.\n        api_instance.link_data_to_sample(project_id, sample_id, data_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;link_data_to_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters_14","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample data_id str The ID of the data to link"},{"location":"v3/docs/ProjectSampleApi/#return-type_14","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization_14","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers_14","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details_14","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully linked to the sample. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/#link_sample_to_project","title":"link_sample_to_project","text":"<p>ProjectSample link_sample_to_project(project_id, sample_id)</p> <p>Link a sample to a project.</p>"},{"location":"v3/docs/ProjectSampleApi/#example_15","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_sample import ProjectSample\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    sample_id = 'sample_id_example' # str | \n\n    try:\n        # Link a sample to a project.\n        api_response = api_instance.link_sample_to_project(project_id, sample_id)\n        print(\"The response of ProjectSampleApi-&gt;link_sample_to_project:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;link_sample_to_project: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters_15","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str"},{"location":"v3/docs/ProjectSampleApi/#return-type_15","title":"Return type","text":"<p>ProjectSample</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization_15","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers_15","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details_15","title":"HTTP response details","text":"Status code Description Response headers 201 The sample is successfully linked to the project. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/#mark_sample_deleted","title":"mark_sample_deleted","text":"<p>mark_sample_deleted(project_id, sample_id)</p> <p>Mark a sample deleted.</p> <p>Endpoint for marking a sample as deleted.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/ProjectSampleApi/#example_16","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    sample_id = 'sample_id_example' # str | The ID of the sample\n\n    try:\n        # Mark a sample deleted.\n        api_instance.mark_sample_deleted(project_id, sample_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;mark_sample_deleted: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters_16","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample"},{"location":"v3/docs/ProjectSampleApi/#return-type_16","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization_16","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers_16","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details_16","title":"HTTP response details","text":"Status code Description Response headers 204 The sample is successfully marked as deleted. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/#search_project_sample_analyses","title":"search_project_sample_analyses","text":"<p>AnalysisPagedListV4 search_project_sample_analyses(project_id, sample_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort, analysis_query_parameters=analysis_query_parameters)</p> <p>Search analyses for sample.</p>"},{"location":"v3/docs/ProjectSampleApi/#example_17","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_paged_list_v4 import AnalysisPagedListV4\nfrom libica.openapi.v3.models.analysis_query_parameters import AnalysisQueryParameters\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    sample_id = 'sample_id_example' # str | The ID of the sample\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary  (optional)\n    analysis_query_parameters = libica.openapi.v3.AnalysisQueryParameters() # AnalysisQueryParameters |  (optional)\n\n    try:\n        # Search analyses for sample.\n        api_response = api_instance.search_project_sample_analyses(project_id, sample_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort, analysis_query_parameters=analysis_query_parameters)\n        print(\"The response of ProjectSampleApi-&gt;search_project_sample_analyses:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;search_project_sample_analyses: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters_17","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary [optional] analysis_query_parameters AnalysisQueryParameters [optional]"},{"location":"v3/docs/ProjectSampleApi/#return-type_17","title":"Return type","text":"<p>AnalysisPagedListV4</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization_17","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers_17","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details_17","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project analyses is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/#unlink_data_from_sample","title":"unlink_data_from_sample","text":"<p>unlink_data_from_sample(project_id, sample_id, data_id)</p> <p>Unlink data from a sample.</p>"},{"location":"v3/docs/ProjectSampleApi/#example_18","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    sample_id = 'sample_id_example' # str | The ID of the sample\n    data_id = 'data_id_example' # str | The ID of the data to unlink\n\n    try:\n        # Unlink data from a sample.\n        api_instance.unlink_data_from_sample(project_id, sample_id, data_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;unlink_data_from_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters_18","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str The ID of the sample data_id str The ID of the data to unlink"},{"location":"v3/docs/ProjectSampleApi/#return-type_18","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization_18","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers_18","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details_18","title":"HTTP response details","text":"Status code Description Response headers 204 The data is successfully unlinked from the sample. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/#unlink_sample_from_project","title":"unlink_sample_from_project","text":"<p>unlink_sample_from_project(project_id, sample_id)</p> <p>Unlink a sample from a project.</p>"},{"location":"v3/docs/ProjectSampleApi/#example_19","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    sample_id = 'sample_id_example' # str | \n\n    try:\n        # Unlink a sample from a project.\n        api_instance.unlink_sample_from_project(project_id, sample_id)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;unlink_sample_from_project: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters_19","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str"},{"location":"v3/docs/ProjectSampleApi/#return-type_19","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization_19","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers_19","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details_19","title":"HTTP response details","text":"Status code Description Response headers 204 The sample is successfully unlinked from the project. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/#update_project_sample","title":"update_project_sample","text":"<p>ProjectSample update_project_sample(project_id, sample_id, project_sample, if_match=if_match)</p> <p>Update a project sample.</p> <p>Fields which can be updated: - sample.name - sample.description - sample.status - sample.tags</p>"},{"location":"v3/docs/ProjectSampleApi/#example_20","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.project_sample import ProjectSample\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    sample_id = 'sample_id_example' # str | \n    project_sample = libica.openapi.v3.ProjectSample() # ProjectSample | \n    if_match = 'if_match_example' # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n\n    try:\n        # Update a project sample.\n        api_response = api_instance.update_project_sample(project_id, sample_id, project_sample, if_match=if_match)\n        print(\"The response of ProjectSampleApi-&gt;update_project_sample:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;update_project_sample: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters_20","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str project_sample ProjectSample if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional]"},{"location":"v3/docs/ProjectSampleApi/#return-type_20","title":"Return type","text":"<p>ProjectSample</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization_20","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers_20","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details_20","title":"HTTP response details","text":"Status code Description Response headers 200 The sample is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleApi/#update_sample_metadata_fields","title":"update_sample_metadata_fields","text":"<p>Sample update_sample_metadata_fields(project_id, sample_id, update_metadata)</p> <p>Update metadata fields.</p> <p>Endpoint for updating metadata fields.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/ProjectSampleApi/#example_21","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.sample import Sample\nfrom libica.openapi.v3.models.update_metadata import UpdateMetadata\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleApi(api_client)\n    project_id = 'project_id_example' # str | \n    sample_id = 'sample_id_example' # str | \n    update_metadata = libica.openapi.v3.UpdateMetadata() # UpdateMetadata | \n\n    try:\n        # Update metadata fields.\n        api_response = api_instance.update_sample_metadata_fields(project_id, sample_id, update_metadata)\n        print(\"The response of ProjectSampleApi-&gt;update_sample_metadata_fields:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleApi-&gt;update_sample_metadata_fields: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleApi/#parameters_21","title":"Parameters","text":"Name Type Description Notes project_id str sample_id str update_metadata UpdateMetadata"},{"location":"v3/docs/ProjectSampleApi/#return-type_21","title":"Return type","text":"<p>Sample</p>"},{"location":"v3/docs/ProjectSampleApi/#authorization_21","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleApi/#http-request-headers_21","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectSampleApi/#http-response-details_21","title":"HTTP response details","text":"Status code Description Response headers 204 The metadata is successfully updated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleBatchApi/","title":"libica.openapi.v3.ProjectSampleBatchApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_sample_creation_batch POST /api/projects/{projectId}/sampleCreationBatch Create a sample creation batch. get_sample_creation_batch GET /api/projects/{projectId}/sampleCreationBatch/{batchId} Retrieve a sample creation batch. get_sample_creation_batch_item GET /api/projects/{projectId}/sampleCreationBatch/{batchId}/items/{itemId} Retrieve a sample creation batch item. get_sample_creation_batch_items GET /api/projects/{projectId}/sampleCreationBatch/{batchId}/items Retrieve a list of sample creation batch items."},{"location":"v3/docs/ProjectSampleBatchApi/#create_sample_creation_batch","title":"create_sample_creation_batch","text":"<p>SampleCreationBatch create_sample_creation_batch(project_id, create_sample_creation_batch, idempotency_key=idempotency_key)</p> <p>Create a sample creation batch.</p>"},{"location":"v3/docs/ProjectSampleBatchApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_sample_creation_batch import CreateSampleCreationBatch\nfrom libica.openapi.v3.models.sample_creation_batch import SampleCreationBatch\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    create_sample_creation_batch = libica.openapi.v3.CreateSampleCreationBatch() # CreateSampleCreationBatch | \n    idempotency_key = 'idempotency_key_example' # str | The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. (optional)\n\n    try:\n        # Create a sample creation batch.\n        api_response = api_instance.create_sample_creation_batch(project_id, create_sample_creation_batch, idempotency_key=idempotency_key)\n        print(\"The response of ProjectSampleBatchApi-&gt;create_sample_creation_batch:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleBatchApi-&gt;create_sample_creation_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleBatchApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str create_sample_creation_batch CreateSampleCreationBatch idempotency_key str The Idempotency-Key header can be used to prevent duplicate requests and support retries. It is implemented according to the IETF spec, with one exception (see below). The header value is allowed to be max 255 characters long. If the header is supplied for a successful response (HTTP status code &lt; 400) then the response  will be saved for 7 days for the specific API endpoint, header value and user reference. When the same user makes  a new request within 7 days to the same API endpoint with the same Idempotency-Key header value, following use cases can occur:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the request body is the same as the previous request and an answer is stored =&gt; the stored response is returned without executing the request again.&lt;/li&gt;&lt;li&gt;the request body is the same as the previous request and no answer is stored because the previous request has not finished =&gt; 409 error response, which indicates that the original call is still in progress.&lt;/li&gt;&lt;li&gt;the request body is not the same as the previous request =&gt; 422 error response, as this is not allowed.&lt;/li&gt;&lt;/ul&gt;This means that each time when executing a new API request using the Idempotency-Key header, the request has to contain a new header value that hasn't been used (successfully) in the past 7 days for that specific API endpoint and by the specific user. For error responses (HTTP status code &gt;= 400) we allow clients to retry the call. This is where we don't follow the IETF specification. [optional]"},{"location":"v3/docs/ProjectSampleBatchApi/#return-type","title":"Return type","text":"<p>SampleCreationBatch</p>"},{"location":"v3/docs/ProjectSampleBatchApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleBatchApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/x-www-form-urlencoded, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectSampleBatchApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The sample creation batch is successfully created. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleBatchApi/#get_sample_creation_batch","title":"get_sample_creation_batch","text":"<p>SampleCreationBatch get_sample_creation_batch(project_id, batch_id)</p> <p>Retrieve a sample creation batch.</p>"},{"location":"v3/docs/ProjectSampleBatchApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.sample_creation_batch import SampleCreationBatch\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    batch_id = 'batch_id_example' # str | The ID of the sample creation batch\n\n    try:\n        # Retrieve a sample creation batch.\n        api_response = api_instance.get_sample_creation_batch(project_id, batch_id)\n        print(\"The response of ProjectSampleBatchApi-&gt;get_sample_creation_batch:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleBatchApi-&gt;get_sample_creation_batch: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleBatchApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str The ID of the sample creation batch"},{"location":"v3/docs/ProjectSampleBatchApi/#return-type_1","title":"Return type","text":"<p>SampleCreationBatch</p>"},{"location":"v3/docs/ProjectSampleBatchApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleBatchApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectSampleBatchApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The sample creation batch is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleBatchApi/#get_sample_creation_batch_item","title":"get_sample_creation_batch_item","text":"<p>SampleCreationBatchSampleItem get_sample_creation_batch_item(project_id, batch_id, item_id)</p> <p>Retrieve a sample creation batch item.</p>"},{"location":"v3/docs/ProjectSampleBatchApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.sample_creation_batch_sample_item import SampleCreationBatchSampleItem\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    batch_id = 'batch_id_example' # str | The ID of the sample creation batch\n    item_id = 'item_id_example' # str | The ID of the sample creation batch item\n\n    try:\n        # Retrieve a sample creation batch item.\n        api_response = api_instance.get_sample_creation_batch_item(project_id, batch_id, item_id)\n        print(\"The response of ProjectSampleBatchApi-&gt;get_sample_creation_batch_item:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleBatchApi-&gt;get_sample_creation_batch_item: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleBatchApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str The ID of the sample creation batch item_id str The ID of the sample creation batch item"},{"location":"v3/docs/ProjectSampleBatchApi/#return-type_2","title":"Return type","text":"<p>SampleCreationBatchSampleItem</p>"},{"location":"v3/docs/ProjectSampleBatchApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleBatchApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectSampleBatchApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The sample creation batch item is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSampleBatchApi/#get_sample_creation_batch_items","title":"get_sample_creation_batch_items","text":"<p>SampleCreationBatchItemPagedList get_sample_creation_batch_items(project_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size)</p> <p>Retrieve a list of sample creation batch items.</p>"},{"location":"v3/docs/ProjectSampleBatchApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.sample_creation_batch_item_paged_list import SampleCreationBatchItemPagedList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectSampleBatchApi(api_client)\n    project_id = 'project_id_example' # str | \n    batch_id = 'batch_id_example' # str | The ID of the sample creation batch\n    status = ['status_example'] # List[str] | The statuses to filter on. (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n\n    try:\n        # Retrieve a list of sample creation batch items.\n        api_response = api_instance.get_sample_creation_batch_items(project_id, batch_id, status=status, page_offset=page_offset, page_token=page_token, page_size=page_size)\n        print(\"The response of ProjectSampleBatchApi-&gt;get_sample_creation_batch_items:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectSampleBatchApi-&gt;get_sample_creation_batch_items: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectSampleBatchApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str batch_id str The ID of the sample creation batch status List[str] The statuses to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional]"},{"location":"v3/docs/ProjectSampleBatchApi/#return-type_3","title":"Return type","text":"<p>SampleCreationBatchItemPagedList</p>"},{"location":"v3/docs/ProjectSampleBatchApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectSampleBatchApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectSampleBatchApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of sample creation batch items is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectSamplePagedList/","title":"ProjectSamplePagedList","text":""},{"location":"v3/docs/ProjectSamplePagedList/#properties","title":"Properties","text":"Name Type Description Notes items List[ProjectSample] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/ProjectSamplePagedList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_sample_paged_list import ProjectSamplePagedList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectSamplePagedList from a JSON string\nproject_sample_paged_list_instance = ProjectSamplePagedList.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectSamplePagedList.to_json())\n\n# convert the object into a dict\nproject_sample_paged_list_dict = project_sample_paged_list_instance.to_dict()\n# create an instance of ProjectSamplePagedList from a dict\nproject_sample_paged_list_from_dict = ProjectSamplePagedList.from_dict(project_sample_paged_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectTag/","title":"ProjectTag","text":""},{"location":"v3/docs/ProjectTag/#properties","title":"Properties","text":"Name Type Description Notes technical_tags List[str] user_tags List[str]"},{"location":"v3/docs/ProjectTag/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.project_tag import ProjectTag\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ProjectTag from a JSON string\nproject_tag_instance = ProjectTag.from_json(json)\n# print the JSON string representation of the object\nprint(ProjectTag.to_json())\n\n# convert the object into a dict\nproject_tag_dict = project_tag_instance.to_dict()\n# create an instance of ProjectTag from a dict\nproject_tag_from_dict = ProjectTag.from_dict(project_tag_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ProjectWorkflowSessionApi/","title":"libica.openapi.v3.ProjectWorkflowSessionApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_workflow_session_configurations GET /api/projects/{projectId}/workflowSessions/{workflowSessionId}/configurations Retrieve the configurations of a workflow session. get_workflow_session_inputs GET /api/projects/{projectId}/workflowSessions/{workflowSessionId}/inputs Retrieve the inputs of a workflow session. get_workflow_sessions GET /api/projects/{projectId}/workflowSessions Retrieve the list of workflow sessions. search_orchestrated_analyses POST /api/projects/{projectId}/workflowSessions/{workflowSessionId}/analyses:search Search analyses orchestrated by the workflow session. search_workflow_sessions POST /api/projects/{projectId}/workflowSessions:search Search workflow sessions."},{"location":"v3/docs/ProjectWorkflowSessionApi/#get_workflow_session_configurations","title":"get_workflow_session_configurations","text":"<p>WorkflowSessionConfigurationList get_workflow_session_configurations(project_id, workflow_session_id)</p> <p>Retrieve the configurations of a workflow session.</p>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.workflow_session_configuration_list import WorkflowSessionConfigurationList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectWorkflowSessionApi(api_client)\n    project_id = 'project_id_example' # str | \n    workflow_session_id = 'workflow_session_id_example' # str | The ID of the workflow session to retrieve the configuration for\n\n    try:\n        # Retrieve the configurations of a workflow session.\n        api_response = api_instance.get_workflow_session_configurations(project_id, workflow_session_id)\n        print(\"The response of ProjectWorkflowSessionApi-&gt;get_workflow_session_configurations:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectWorkflowSessionApi-&gt;get_workflow_session_configurations: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#parameters","title":"Parameters","text":"Name Type Description Notes project_id str workflow_session_id str The ID of the workflow session to retrieve the configuration for"},{"location":"v3/docs/ProjectWorkflowSessionApi/#return-type","title":"Return type","text":"<p>WorkflowSessionConfigurationList</p>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The configurations of the workflow session are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#get_workflow_session_inputs","title":"get_workflow_session_inputs","text":"<p>WorkflowSessionInputList get_workflow_session_inputs(project_id, workflow_session_id)</p> <p>Retrieve the inputs of a workflow session.</p>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.workflow_session_input_list import WorkflowSessionInputList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectWorkflowSessionApi(api_client)\n    project_id = 'project_id_example' # str | \n    workflow_session_id = 'workflow_session_id_example' # str | The ID of the workflow session to retrieve the inputs for\n\n    try:\n        # Retrieve the inputs of a workflow session.\n        api_response = api_instance.get_workflow_session_inputs(project_id, workflow_session_id)\n        print(\"The response of ProjectWorkflowSessionApi-&gt;get_workflow_session_inputs:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectWorkflowSessionApi-&gt;get_workflow_session_inputs: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes project_id str workflow_session_id str The ID of the workflow session to retrieve the inputs for"},{"location":"v3/docs/ProjectWorkflowSessionApi/#return-type_1","title":"Return type","text":"<p>WorkflowSessionInputList</p>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The inputs of the workflow session are successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#get_workflow_sessions","title":"get_workflow_sessions","text":"<p>WorkflowSessionPagedListV3 get_workflow_sessions(project_id, reference=reference, userreference=userreference, status=status, usertag=usertag, technicaltag=technicaltag, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)</p> <p>Retrieve the list of workflow sessions.</p> <p>This endpoint only returns V3 items. Use the search endpoint to get V4 items.</p>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.workflow_session_paged_list_v3 import WorkflowSessionPagedListV3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectWorkflowSessionApi(api_client)\n    project_id = 'project_id_example' # str | \n    reference = 'reference_example' # str | The reference to filter on. (optional)\n    userreference = 'userreference_example' # str | The user-reference to filter on. (optional)\n    status = 'status_example' # str | The status to filter on. (optional)\n    usertag = 'usertag_example' # str | The user-tags to filter on. (optional)\n    technicaltag = 'technicaltag_example' # str | The technical-tags to filter on. (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - workflow  (optional)\n\n    try:\n        # Retrieve the list of workflow sessions.\n        api_response = api_instance.get_workflow_sessions(project_id, reference=reference, userreference=userreference, status=status, usertag=usertag, technicaltag=technicaltag, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        print(\"The response of ProjectWorkflowSessionApi-&gt;get_workflow_sessions:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectWorkflowSessionApi-&gt;get_workflow_sessions: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes project_id str reference str The reference to filter on. [optional] userreference str The user-reference to filter on. [optional] status str The status to filter on. [optional] usertag str The user-tags to filter on. [optional] technicaltag str The technical-tags to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - workflow [optional]"},{"location":"v3/docs/ProjectWorkflowSessionApi/#return-type_2","title":"Return type","text":"<p>WorkflowSessionPagedListV3</p>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project workflow sessions is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#search_orchestrated_analyses","title":"search_orchestrated_analyses","text":"<p>WorkflowSessionAnalysisPagedListV4 search_orchestrated_analyses(project_id, workflow_session_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort, analysis_query_parameters=analysis_query_parameters)</p> <p>Search analyses orchestrated by the workflow session.</p>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_query_parameters import AnalysisQueryParameters\nfrom libica.openapi.v3.models.workflow_session_analysis_paged_list_v4 import WorkflowSessionAnalysisPagedListV4\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectWorkflowSessionApi(api_client)\n    project_id = 'project_id_example' # str | \n    workflow_session_id = 'workflow_session_id_example' # str | \n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary  (optional)\n    analysis_query_parameters = libica.openapi.v3.AnalysisQueryParameters() # AnalysisQueryParameters |  (optional)\n\n    try:\n        # Search analyses orchestrated by the workflow session.\n        api_response = api_instance.search_orchestrated_analyses(project_id, workflow_session_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort, analysis_query_parameters=analysis_query_parameters)\n        print(\"The response of ProjectWorkflowSessionApi-&gt;search_orchestrated_analyses:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectWorkflowSessionApi-&gt;search_orchestrated_analyses: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes project_id str workflow_session_id str page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - summary [optional] analysis_query_parameters AnalysisQueryParameters [optional]"},{"location":"v3/docs/ProjectWorkflowSessionApi/#return-type_3","title":"Return type","text":"<p>WorkflowSessionAnalysisPagedListV4</p>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of orchestrated analyses is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#search_workflow_sessions","title":"search_workflow_sessions","text":"<p>WorkflowSessionPagedListV4 search_workflow_sessions(project_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort, analysis_query_parameters=analysis_query_parameters)</p> <p>Search workflow sessions.</p>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#example_4","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.analysis_query_parameters import AnalysisQueryParameters\nfrom libica.openapi.v3.models.workflow_session_paged_list_v4 import WorkflowSessionPagedListV4\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ProjectWorkflowSessionApi(api_client)\n    project_id = 'project_id_example' # str | \n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - workflow  (optional)\n    analysis_query_parameters = libica.openapi.v3.AnalysisQueryParameters() # AnalysisQueryParameters |  (optional)\n\n    try:\n        # Search workflow sessions.\n        api_response = api_instance.search_workflow_sessions(project_id, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort, analysis_query_parameters=analysis_query_parameters)\n        print(\"The response of ProjectWorkflowSessionApi-&gt;search_workflow_sessions:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ProjectWorkflowSessionApi-&gt;search_workflow_sessions: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes project_id str page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - reference - userReference - pipeline - status - startDate - endDate - workflow [optional] analysis_query_parameters AnalysisQueryParameters [optional]"},{"location":"v3/docs/ProjectWorkflowSessionApi/#return-type_4","title":"Return type","text":"<p>WorkflowSessionPagedListV4</p>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#authorization_4","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ProjectWorkflowSessionApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 200 The list of project workflow sessions is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/RcloneTempCredentials/","title":"RcloneTempCredentials","text":""},{"location":"v3/docs/RcloneTempCredentials/#properties","title":"Properties","text":"Name Type Description Notes config Dict[str, str] The config in key value format. file_path_prefix str The prefix of the file path. storage_type str The type of the object storage. expiration_time str The timestamp when the credentials expire. upload_session_id str The folder upload session id which can be used after upload to complete the upload session. [optional]"},{"location":"v3/docs/RcloneTempCredentials/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.rclone_temp_credentials import RcloneTempCredentials\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of RcloneTempCredentials from a JSON string\nrclone_temp_credentials_instance = RcloneTempCredentials.from_json(json)\n# print the JSON string representation of the object\nprint(RcloneTempCredentials.to_json())\n\n# convert the object into a dict\nrclone_temp_credentials_dict = rclone_temp_credentials_instance.to_dict()\n# create an instance of RcloneTempCredentials from a dict\nrclone_temp_credentials_from_dict = RcloneTempCredentials.from_dict(rclone_temp_credentials_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ReferenceData/","title":"ReferenceData","text":""},{"location":"v3/docs/ReferenceData/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] name str The name of the reference data species Species [optional] data_format DataFormat [optional] version str The version of the reference data type_list ReferenceDataTypeList"},{"location":"v3/docs/ReferenceData/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.reference_data import ReferenceData\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ReferenceData from a JSON string\nreference_data_instance = ReferenceData.from_json(json)\n# print the JSON string representation of the object\nprint(ReferenceData.to_json())\n\n# convert the object into a dict\nreference_data_dict = reference_data_instance.to_dict()\n# create an instance of ReferenceData from a dict\nreference_data_from_dict = ReferenceData.from_dict(reference_data_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ReferenceDataList/","title":"ReferenceDataList","text":""},{"location":"v3/docs/ReferenceDataList/#properties","title":"Properties","text":"Name Type Description Notes items List[ReferenceData]"},{"location":"v3/docs/ReferenceDataList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.reference_data_list import ReferenceDataList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ReferenceDataList from a JSON string\nreference_data_list_instance = ReferenceDataList.from_json(json)\n# print the JSON string representation of the object\nprint(ReferenceDataList.to_json())\n\n# convert the object into a dict\nreference_data_list_dict = reference_data_list_instance.to_dict()\n# create an instance of ReferenceDataList from a dict\nreference_data_list_from_dict = ReferenceDataList.from_dict(reference_data_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ReferenceDataType/","title":"ReferenceDataType","text":""},{"location":"v3/docs/ReferenceDataType/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] name str The name of the reference data type"},{"location":"v3/docs/ReferenceDataType/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.reference_data_type import ReferenceDataType\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ReferenceDataType from a JSON string\nreference_data_type_instance = ReferenceDataType.from_json(json)\n# print the JSON string representation of the object\nprint(ReferenceDataType.to_json())\n\n# convert the object into a dict\nreference_data_type_dict = reference_data_type_instance.to_dict()\n# create an instance of ReferenceDataType from a dict\nreference_data_type_from_dict = ReferenceDataType.from_dict(reference_data_type_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ReferenceDataTypeList/","title":"ReferenceDataTypeList","text":""},{"location":"v3/docs/ReferenceDataTypeList/#properties","title":"Properties","text":"Name Type Description Notes items List[ReferenceDataType]"},{"location":"v3/docs/ReferenceDataTypeList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.reference_data_type_list import ReferenceDataTypeList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ReferenceDataTypeList from a JSON string\nreference_data_type_list_instance = ReferenceDataTypeList.from_json(json)\n# print the JSON string representation of the object\nprint(ReferenceDataTypeList.to_json())\n\n# convert the object into a dict\nreference_data_type_list_dict = reference_data_type_list_instance.to_dict()\n# create an instance of ReferenceDataTypeList from a dict\nreference_data_type_list_from_dict = ReferenceDataTypeList.from_dict(reference_data_type_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ReferenceSet/","title":"ReferenceSet","text":""},{"location":"v3/docs/ReferenceSet/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] name str The name of the reference set reference_data_list ReferenceDataList"},{"location":"v3/docs/ReferenceSet/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.reference_set import ReferenceSet\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ReferenceSet from a JSON string\nreference_set_instance = ReferenceSet.from_json(json)\n# print the JSON string representation of the object\nprint(ReferenceSet.to_json())\n\n# convert the object into a dict\nreference_set_dict = reference_set_instance.to_dict()\n# create an instance of ReferenceSet from a dict\nreference_set_from_dict = ReferenceSet.from_dict(reference_set_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ReferenceSetApi/","title":"libica.openapi.v3.ReferenceSetApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_reference_sets GET /api/referenceSets Retrieve a list of of reference sets. get_species GET /api/referenceSets/{referenceSetId}/species Retrieve a list of species linked to the reference set."},{"location":"v3/docs/ReferenceSetApi/#get_reference_sets","title":"get_reference_sets","text":"<p>ReferenceSetList get_reference_sets()</p> <p>Retrieve a list of of reference sets.</p>"},{"location":"v3/docs/ReferenceSetApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.reference_set_list import ReferenceSetList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ReferenceSetApi(api_client)\n\n    try:\n        # Retrieve a list of of reference sets.\n        api_response = api_instance.get_reference_sets()\n        print(\"The response of ReferenceSetApi-&gt;get_reference_sets:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ReferenceSetApi-&gt;get_reference_sets: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ReferenceSetApi/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v3/docs/ReferenceSetApi/#return-type","title":"Return type","text":"<p>ReferenceSetList</p>"},{"location":"v3/docs/ReferenceSetApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ReferenceSetApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ReferenceSetApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of reference sets is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ReferenceSetApi/#get_species","title":"get_species","text":"<p>SpeciesList get_species(reference_set_id)</p> <p>Retrieve a list of species linked to the reference set.</p>"},{"location":"v3/docs/ReferenceSetApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.species_list import SpeciesList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.ReferenceSetApi(api_client)\n    reference_set_id = 'reference_set_id_example' # str | \n\n    try:\n        # Retrieve a list of species linked to the reference set.\n        api_response = api_instance.get_species(reference_set_id)\n        print(\"The response of ReferenceSetApi-&gt;get_species:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling ReferenceSetApi-&gt;get_species: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/ReferenceSetApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes reference_set_id str"},{"location":"v3/docs/ReferenceSetApi/#return-type_1","title":"Return type","text":"<p>SpeciesList</p>"},{"location":"v3/docs/ReferenceSetApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/ReferenceSetApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/ReferenceSetApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The list of species is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/ReferenceSetList/","title":"ReferenceSetList","text":""},{"location":"v3/docs/ReferenceSetList/#properties","title":"Properties","text":"Name Type Description Notes items List[ReferenceSet]"},{"location":"v3/docs/ReferenceSetList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.reference_set_list import ReferenceSetList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ReferenceSetList from a JSON string\nreference_set_list_instance = ReferenceSetList.from_json(json)\n# print the JSON string representation of the object\nprint(ReferenceSetList.to_json())\n\n# convert the object into a dict\nreference_set_list_dict = reference_set_list_instance.to_dict()\n# create an instance of ReferenceSetList from a dict\nreference_set_list_from_dict = ReferenceSetList.from_dict(reference_set_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/Region/","title":"Region","text":""},{"location":"v3/docs/Region/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] code str country Country city_name str"},{"location":"v3/docs/Region/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.region import Region\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of Region from a JSON string\nregion_instance = Region.from_json(json)\n# print the JSON string representation of the object\nprint(Region.to_json())\n\n# convert the object into a dict\nregion_dict = region_instance.to_dict()\n# create an instance of Region from a dict\nregion_from_dict = Region.from_dict(region_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/RegionApi/","title":"libica.openapi.v3.RegionApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_region GET /api/regions/{regionId} Retrieve a region. Only the regions the user has access to through his/her entitlements can be retrieved. get_regions GET /api/regions Retrieve a list of regions. Only the regions the user has access to through his/her entitlements are returned."},{"location":"v3/docs/RegionApi/#get_region","title":"get_region","text":"<p>Region get_region(region_id)</p> <p>Retrieve a region. Only the regions the user has access to through his/her entitlements can be retrieved.</p>"},{"location":"v3/docs/RegionApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.region import Region\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.RegionApi(api_client)\n    region_id = 'region_id_example' # str | \n\n    try:\n        # Retrieve a region. Only the regions the user has access to through his/her entitlements can be retrieved.\n        api_response = api_instance.get_region(region_id)\n        print(\"The response of RegionApi-&gt;get_region:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling RegionApi-&gt;get_region: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/RegionApi/#parameters","title":"Parameters","text":"Name Type Description Notes region_id str"},{"location":"v3/docs/RegionApi/#return-type","title":"Return type","text":"<p>Region</p>"},{"location":"v3/docs/RegionApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/RegionApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/RegionApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The region is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/RegionApi/#get_regions","title":"get_regions","text":"<p>RegionList get_regions()</p> <p>Retrieve a list of regions. Only the regions the user has access to through his/her entitlements are returned.</p>"},{"location":"v3/docs/RegionApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.region_list import RegionList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.RegionApi(api_client)\n\n    try:\n        # Retrieve a list of regions. Only the regions the user has access to through his/her entitlements are returned.\n        api_response = api_instance.get_regions()\n        print(\"The response of RegionApi-&gt;get_regions:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling RegionApi-&gt;get_regions: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/RegionApi/#parameters_1","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v3/docs/RegionApi/#return-type_1","title":"Return type","text":"<p>RegionList</p>"},{"location":"v3/docs/RegionApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/RegionApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/RegionApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The list of regions is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/RegionList/","title":"RegionList","text":""},{"location":"v3/docs/RegionList/#properties","title":"Properties","text":"Name Type Description Notes items List[Region]"},{"location":"v3/docs/RegionList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.region_list import RegionList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of RegionList from a JSON string\nregion_list_instance = RegionList.from_json(json)\n# print the JSON string representation of the object\nprint(RegionList.to_json())\n\n# convert the object into a dict\nregion_list_dict = region_list_instance.to_dict()\n# create an instance of RegionList from a dict\nregion_list_from_dict = RegionList.from_dict(region_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/RegionV4/","title":"RegionV4","text":""},{"location":"v3/docs/RegionV4/#properties","title":"Properties","text":"Name Type Description Notes id str code str"},{"location":"v3/docs/RegionV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.region_v4 import RegionV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of RegionV4 from a JSON string\nregion_v4_instance = RegionV4.from_json(json)\n# print the JSON string representation of the object\nprint(RegionV4.to_json())\n\n# convert the object into a dict\nregion_v4_dict = region_v4_instance.to_dict()\n# create an instance of RegionV4 from a dict\nregion_v4_from_dict = RegionV4.from_dict(region_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/Sample/","title":"Sample","text":""},{"location":"v3/docs/Sample/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] name str The name of the sample description str The description of the sample [optional] tags SampleTag region Region application ApplicationV4 [optional] status str metadata_valid bool Whether the metadata is valid metadata List[MetadataField] The metadata of the sample sequencing_runs List[SequencingRun] [optional]"},{"location":"v3/docs/Sample/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.sample import Sample\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of Sample from a JSON string\nsample_instance = Sample.from_json(json)\n# print the JSON string representation of the object\nprint(Sample.to_json())\n\n# convert the object into a dict\nsample_dict = sample_instance.to_dict()\n# create an instance of Sample from a dict\nsample_from_dict = Sample.from_dict(sample_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/SampleApi/","title":"libica.openapi.v3.SampleApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_samples GET /api/samples Retrieve a list of samples."},{"location":"v3/docs/SampleApi/#get_samples","title":"get_samples","text":"<p>SamplePagedList get_samples(region, search=search, user_tags=user_tags, technical_tags=technical_tags, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)</p> <p>Retrieve a list of samples.</p>"},{"location":"v3/docs/SampleApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.sample_paged_list import SamplePagedList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.SampleApi(api_client)\n    region = 'region_example' # str | The ID of the region to filter on. This parameter is required.\n    search = 'search_example' # str | To search through multiple fields of data. (optional)\n    user_tags = 'user_tags_example' # str | The user tags to filter on. (optional)\n    technical_tags = 'technical_tags_example' # str | The technical tags to filter on. (optional)\n    page_offset = 'page_offset_example' # str | [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages (optional)\n    page_token = 'page_token_example' # str | [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. (optional)\n    page_size = 'page_size_example' # str | [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results (optional)\n    sort = 'sort_example' # str | [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status (optional)\n\n    try:\n        # Retrieve a list of samples.\n        api_response = api_instance.get_samples(region, search=search, user_tags=user_tags, technical_tags=technical_tags, page_offset=page_offset, page_token=page_token, page_size=page_size, sort=sort)\n        print(\"The response of SampleApi-&gt;get_samples:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling SampleApi-&gt;get_samples: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/SampleApi/#parameters","title":"Parameters","text":"Name Type Description Notes region str The ID of the region to filter on. This parameter is required. search str To search through multiple fields of data. [optional] user_tags str The user tags to filter on. [optional] technical_tags str The technical tags to filter on. [optional] page_offset str [only use with offset-based paging]&lt;br&gt;The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages [optional] page_token str [only use with cursor-based paging]&lt;br&gt;The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages. [optional] page_size str [can be used with both offset- and cursor-based paging]&lt;br&gt;The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results [optional] sort str [only use with offset-based paging]&lt;br&gt;Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \\\"?sort=sortAttribute1, sortAttribute2 desc\\\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - description - metadataValid - status [optional]"},{"location":"v3/docs/SampleApi/#return-type","title":"Return type","text":"<p>SamplePagedList</p>"},{"location":"v3/docs/SampleApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/SampleApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/SampleApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of samples is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/SampleCreationBatch/","title":"SampleCreationBatch","text":""},{"location":"v3/docs/SampleCreationBatch/#properties","title":"Properties","text":"Name Type Description Notes id str job Job [optional] sequencing_run_id str The sequencingRunId to link to all created samples and linked data [optional]"},{"location":"v3/docs/SampleCreationBatch/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.sample_creation_batch import SampleCreationBatch\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of SampleCreationBatch from a JSON string\nsample_creation_batch_instance = SampleCreationBatch.from_json(json)\n# print the JSON string representation of the object\nprint(SampleCreationBatch.to_json())\n\n# convert the object into a dict\nsample_creation_batch_dict = sample_creation_batch_instance.to_dict()\n# create an instance of SampleCreationBatch from a dict\nsample_creation_batch_from_dict = SampleCreationBatch.from_dict(sample_creation_batch_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/SampleCreationBatchItemPagedList/","title":"SampleCreationBatchItemPagedList","text":""},{"location":"v3/docs/SampleCreationBatchItemPagedList/#properties","title":"Properties","text":"Name Type Description Notes items List[SampleCreationBatchSampleItem] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/SampleCreationBatchItemPagedList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.sample_creation_batch_item_paged_list import SampleCreationBatchItemPagedList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of SampleCreationBatchItemPagedList from a JSON string\nsample_creation_batch_item_paged_list_instance = SampleCreationBatchItemPagedList.from_json(json)\n# print the JSON string representation of the object\nprint(SampleCreationBatchItemPagedList.to_json())\n\n# convert the object into a dict\nsample_creation_batch_item_paged_list_dict = sample_creation_batch_item_paged_list_instance.to_dict()\n# create an instance of SampleCreationBatchItemPagedList from a dict\nsample_creation_batch_item_paged_list_from_dict = SampleCreationBatchItemPagedList.from_dict(sample_creation_batch_item_paged_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/SampleCreationBatchItemProcessing/","title":"SampleCreationBatchItemProcessing","text":""},{"location":"v3/docs/SampleCreationBatchItemProcessing/#properties","title":"Properties","text":"Name Type Description Notes status str additional_status_information str Additional information regarding the status of this batch item. [optional]"},{"location":"v3/docs/SampleCreationBatchItemProcessing/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.sample_creation_batch_item_processing import SampleCreationBatchItemProcessing\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of SampleCreationBatchItemProcessing from a JSON string\nsample_creation_batch_item_processing_instance = SampleCreationBatchItemProcessing.from_json(json)\n# print the JSON string representation of the object\nprint(SampleCreationBatchItemProcessing.to_json())\n\n# convert the object into a dict\nsample_creation_batch_item_processing_dict = sample_creation_batch_item_processing_instance.to_dict()\n# create an instance of SampleCreationBatchItemProcessing from a dict\nsample_creation_batch_item_processing_from_dict = SampleCreationBatchItemProcessing.from_dict(sample_creation_batch_item_processing_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/SampleCreationBatchItemRequest/","title":"SampleCreationBatchItemRequest","text":""},{"location":"v3/docs/SampleCreationBatchItemRequest/#properties","title":"Properties","text":"Name Type Description Notes sample_to_create CreateSample complete_sample bool Indicates whether the sample must be completed."},{"location":"v3/docs/SampleCreationBatchItemRequest/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.sample_creation_batch_item_request import SampleCreationBatchItemRequest\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of SampleCreationBatchItemRequest from a JSON string\nsample_creation_batch_item_request_instance = SampleCreationBatchItemRequest.from_json(json)\n# print the JSON string representation of the object\nprint(SampleCreationBatchItemRequest.to_json())\n\n# convert the object into a dict\nsample_creation_batch_item_request_dict = sample_creation_batch_item_request_instance.to_dict()\n# create an instance of SampleCreationBatchItemRequest from a dict\nsample_creation_batch_item_request_from_dict = SampleCreationBatchItemRequest.from_dict(sample_creation_batch_item_request_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/SampleCreationBatchSampleItem/","title":"SampleCreationBatchSampleItem","text":""},{"location":"v3/docs/SampleCreationBatchSampleItem/#properties","title":"Properties","text":"Name Type Description Notes id str request SampleCreationBatchItemRequest processing SampleCreationBatchItemProcessing created_sample Sample [optional]"},{"location":"v3/docs/SampleCreationBatchSampleItem/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.sample_creation_batch_sample_item import SampleCreationBatchSampleItem\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of SampleCreationBatchSampleItem from a JSON string\nsample_creation_batch_sample_item_instance = SampleCreationBatchSampleItem.from_json(json)\n# print the JSON string representation of the object\nprint(SampleCreationBatchSampleItem.to_json())\n\n# convert the object into a dict\nsample_creation_batch_sample_item_dict = sample_creation_batch_sample_item_instance.to_dict()\n# create an instance of SampleCreationBatchSampleItem from a dict\nsample_creation_batch_sample_item_from_dict = SampleCreationBatchSampleItem.from_dict(sample_creation_batch_sample_item_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/SampleHistory/","title":"SampleHistory","text":""},{"location":"v3/docs/SampleHistory/#properties","title":"Properties","text":"Name Type Description Notes occurred_at datetime When the change was made user str The user that made the change [optional] run str In which execution context the change was made [optional] source str In which context the change was made text str What was changed project str In which project context the change was made [optional] model int In which model context the change was made [optional]"},{"location":"v3/docs/SampleHistory/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.sample_history import SampleHistory\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of SampleHistory from a JSON string\nsample_history_instance = SampleHistory.from_json(json)\n# print the JSON string representation of the object\nprint(SampleHistory.to_json())\n\n# convert the object into a dict\nsample_history_dict = sample_history_instance.to_dict()\n# create an instance of SampleHistory from a dict\nsample_history_from_dict = SampleHistory.from_dict(sample_history_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/SampleHistoryList/","title":"SampleHistoryList","text":""},{"location":"v3/docs/SampleHistoryList/#properties","title":"Properties","text":"Name Type Description Notes items List[SampleHistory]"},{"location":"v3/docs/SampleHistoryList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.sample_history_list import SampleHistoryList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of SampleHistoryList from a JSON string\nsample_history_list_instance = SampleHistoryList.from_json(json)\n# print the JSON string representation of the object\nprint(SampleHistoryList.to_json())\n\n# convert the object into a dict\nsample_history_list_dict = sample_history_list_instance.to_dict()\n# create an instance of SampleHistoryList from a dict\nsample_history_list_from_dict = SampleHistoryList.from_dict(sample_history_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/SamplePagedList/","title":"SamplePagedList","text":""},{"location":"v3/docs/SamplePagedList/#properties","title":"Properties","text":"Name Type Description Notes items List[Sample] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/SamplePagedList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.sample_paged_list import SamplePagedList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of SamplePagedList from a JSON string\nsample_paged_list_instance = SamplePagedList.from_json(json)\n# print the JSON string representation of the object\nprint(SamplePagedList.to_json())\n\n# convert the object into a dict\nsample_paged_list_dict = sample_paged_list_instance.to_dict()\n# create an instance of SamplePagedList from a dict\nsample_paged_list_from_dict = SamplePagedList.from_dict(sample_paged_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/SampleTag/","title":"SampleTag","text":""},{"location":"v3/docs/SampleTag/#properties","title":"Properties","text":"Name Type Description Notes technical_tags List[str] user_tags List[str] connector_tags List[str] run_in_tags List[str]"},{"location":"v3/docs/SampleTag/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.sample_tag import SampleTag\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of SampleTag from a JSON string\nsample_tag_instance = SampleTag.from_json(json)\n# print the JSON string representation of the object\nprint(SampleTag.to_json())\n\n# convert the object into a dict\nsample_tag_dict = sample_tag_instance.to_dict()\n# create an instance of SampleTag from a dict\nsample_tag_from_dict = SampleTag.from_dict(sample_tag_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/ScheduleDownload/","title":"ScheduleDownload","text":""},{"location":"v3/docs/ScheduleDownload/#properties","title":"Properties","text":"Name Type Description Notes connector_id str [optional] protocol str [optional] local_path str [optional] disable_hashing bool [optional]"},{"location":"v3/docs/ScheduleDownload/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.schedule_download import ScheduleDownload\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of ScheduleDownload from a JSON string\nschedule_download_instance = ScheduleDownload.from_json(json)\n# print the JSON string representation of the object\nprint(ScheduleDownload.to_json())\n\n# convert the object into a dict\nschedule_download_dict = schedule_download_instance.to_dict()\n# create an instance of ScheduleDownload from a dict\nschedule_download_from_dict = ScheduleDownload.from_dict(schedule_download_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/SearchMatchingActivationCodesForCwlAnalysis/","title":"SearchMatchingActivationCodesForCwlAnalysis","text":""},{"location":"v3/docs/SearchMatchingActivationCodesForCwlAnalysis/#properties","title":"Properties","text":"Name Type Description Notes project_id str pipeline_id str analysis_input CwlAnalysisInput"},{"location":"v3/docs/SearchMatchingActivationCodesForCwlAnalysis/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.search_matching_activation_codes_for_cwl_analysis import SearchMatchingActivationCodesForCwlAnalysis\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of SearchMatchingActivationCodesForCwlAnalysis from a JSON string\nsearch_matching_activation_codes_for_cwl_analysis_instance = SearchMatchingActivationCodesForCwlAnalysis.from_json(json)\n# print the JSON string representation of the object\nprint(SearchMatchingActivationCodesForCwlAnalysis.to_json())\n\n# convert the object into a dict\nsearch_matching_activation_codes_for_cwl_analysis_dict = search_matching_activation_codes_for_cwl_analysis_instance.to_dict()\n# create an instance of SearchMatchingActivationCodesForCwlAnalysis from a dict\nsearch_matching_activation_codes_for_cwl_analysis_from_dict = SearchMatchingActivationCodesForCwlAnalysis.from_dict(search_matching_activation_codes_for_cwl_analysis_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/SearchMatchingActivationCodesForNextflowAnalysis/","title":"SearchMatchingActivationCodesForNextflowAnalysis","text":""},{"location":"v3/docs/SearchMatchingActivationCodesForNextflowAnalysis/#properties","title":"Properties","text":"Name Type Description Notes project_id str pipeline_id str analysis_input NextflowAnalysisInput"},{"location":"v3/docs/SearchMatchingActivationCodesForNextflowAnalysis/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.search_matching_activation_codes_for_nextflow_analysis import SearchMatchingActivationCodesForNextflowAnalysis\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of SearchMatchingActivationCodesForNextflowAnalysis from a JSON string\nsearch_matching_activation_codes_for_nextflow_analysis_instance = SearchMatchingActivationCodesForNextflowAnalysis.from_json(json)\n# print the JSON string representation of the object\nprint(SearchMatchingActivationCodesForNextflowAnalysis.to_json())\n\n# convert the object into a dict\nsearch_matching_activation_codes_for_nextflow_analysis_dict = search_matching_activation_codes_for_nextflow_analysis_instance.to_dict()\n# create an instance of SearchMatchingActivationCodesForNextflowAnalysis from a dict\nsearch_matching_activation_codes_for_nextflow_analysis_from_dict = SearchMatchingActivationCodesForNextflowAnalysis.from_dict(search_matching_activation_codes_for_nextflow_analysis_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/SequencingRun/","title":"SequencingRun","text":""},{"location":"v3/docs/SequencingRun/#properties","title":"Properties","text":"Name Type Description Notes id str instrument_run_id str name str"},{"location":"v3/docs/SequencingRun/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.sequencing_run import SequencingRun\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of SequencingRun from a JSON string\nsequencing_run_instance = SequencingRun.from_json(json)\n# print the JSON string representation of the object\nprint(SequencingRun.to_json())\n\n# convert the object into a dict\nsequencing_run_dict = sequencing_run_instance.to_dict()\n# create an instance of SequencingRun from a dict\nsequencing_run_from_dict = SequencingRun.from_dict(sequencing_run_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/SequencingRunApi/","title":"libica.openapi.v3.SequencingRunApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_sequencing_run GET /api/sequencingRuns/{sequencingRunId} Retrieve a sequencing run."},{"location":"v3/docs/SequencingRunApi/#get_sequencing_run","title":"get_sequencing_run","text":"<p>SequencingRun get_sequencing_run(sequencing_run_id)</p> <p>Retrieve a sequencing run.</p>"},{"location":"v3/docs/SequencingRunApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.sequencing_run import SequencingRun\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.SequencingRunApi(api_client)\n    sequencing_run_id = 'sequencing_run_id_example' # str | The ID of the sequencing run to retrieve\n\n    try:\n        # Retrieve a sequencing run.\n        api_response = api_instance.get_sequencing_run(sequencing_run_id)\n        print(\"The response of SequencingRunApi-&gt;get_sequencing_run:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling SequencingRunApi-&gt;get_sequencing_run: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/SequencingRunApi/#parameters","title":"Parameters","text":"Name Type Description Notes sequencing_run_id str The ID of the sequencing run to retrieve"},{"location":"v3/docs/SequencingRunApi/#return-type","title":"Return type","text":"<p>SequencingRun</p>"},{"location":"v3/docs/SequencingRunApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/SequencingRunApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/SequencingRunApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The sequencing run is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/Settings/","title":"Settings","text":"<p>This object contains a \\\"anyOf\\\" construct. Depending on which type, you will receive a StringSettings-, IntegerSettings or OptionsSettings object.</p>"},{"location":"v3/docs/Settings/#properties","title":"Properties","text":"Name Type Description Notes default_values List[str] [optional] options List[str] [optional]"},{"location":"v3/docs/Settings/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.settings import Settings\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of Settings from a JSON string\nsettings_instance = Settings.from_json(json)\n# print the JSON string representation of the object\nprint(Settings.to_json())\n\n# convert the object into a dict\nsettings_dict = settings_instance.to_dict()\n# create an instance of Settings from a dict\nsettings_from_dict = Settings.from_dict(settings_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/Species/","title":"Species","text":""},{"location":"v3/docs/Species/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] name str The name of the species"},{"location":"v3/docs/Species/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.species import Species\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of Species from a JSON string\nspecies_instance = Species.from_json(json)\n# print the JSON string representation of the object\nprint(Species.to_json())\n\n# convert the object into a dict\nspecies_dict = species_instance.to_dict()\n# create an instance of Species from a dict\nspecies_from_dict = Species.from_dict(species_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/SpeciesList/","title":"SpeciesList","text":""},{"location":"v3/docs/SpeciesList/#properties","title":"Properties","text":"Name Type Description Notes items List[Species]"},{"location":"v3/docs/SpeciesList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.species_list import SpeciesList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of SpeciesList from a JSON string\nspecies_list_instance = SpeciesList.from_json(json)\n# print the JSON string representation of the object\nprint(SpeciesList.to_json())\n\n# convert the object into a dict\nspecies_list_dict = species_list_instance.to_dict()\n# create an instance of SpeciesList from a dict\nspecies_list_from_dict = SpeciesList.from_dict(species_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/StorageBundle/","title":"StorageBundle","text":""},{"location":"v3/docs/StorageBundle/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] bundle_name str The name of the storage bundle entitlement_name str The name of the parent entitlement region Region"},{"location":"v3/docs/StorageBundle/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.storage_bundle import StorageBundle\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of StorageBundle from a JSON string\nstorage_bundle_instance = StorageBundle.from_json(json)\n# print the JSON string representation of the object\nprint(StorageBundle.to_json())\n\n# convert the object into a dict\nstorage_bundle_dict = storage_bundle_instance.to_dict()\n# create an instance of StorageBundle from a dict\nstorage_bundle_from_dict = StorageBundle.from_dict(storage_bundle_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/StorageBundleApi/","title":"libica.openapi.v3.StorageBundleApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_storage_bundles GET /api/storageBundles Retrieve a list of storage bundles."},{"location":"v3/docs/StorageBundleApi/#get_storage_bundles","title":"get_storage_bundles","text":"<p>StorageBundleList get_storage_bundles()</p> <p>Retrieve a list of storage bundles.</p>"},{"location":"v3/docs/StorageBundleApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.storage_bundle_list import StorageBundleList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.StorageBundleApi(api_client)\n\n    try:\n        # Retrieve a list of storage bundles.\n        api_response = api_instance.get_storage_bundles()\n        print(\"The response of StorageBundleApi-&gt;get_storage_bundles:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling StorageBundleApi-&gt;get_storage_bundles: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/StorageBundleApi/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v3/docs/StorageBundleApi/#return-type","title":"Return type","text":"<p>StorageBundleList</p>"},{"location":"v3/docs/StorageBundleApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/StorageBundleApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/StorageBundleApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The list of storage bundles is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/StorageBundleList/","title":"StorageBundleList","text":""},{"location":"v3/docs/StorageBundleList/#properties","title":"Properties","text":"Name Type Description Notes items List[StorageBundle]"},{"location":"v3/docs/StorageBundleList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.storage_bundle_list import StorageBundleList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of StorageBundleList from a JSON string\nstorage_bundle_list_instance = StorageBundleList.from_json(json)\n# print the JSON string representation of the object\nprint(StorageBundleList.to_json())\n\n# convert the object into a dict\nstorage_bundle_list_dict = storage_bundle_list_instance.to_dict()\n# create an instance of StorageBundleList from a dict\nstorage_bundle_list_from_dict = StorageBundleList.from_dict(storage_bundle_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/StorageConfiguration/","title":"StorageConfiguration","text":""},{"location":"v3/docs/StorageConfiguration/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] name str The name of the storage configuration description str An optional description [optional] type str status str error_message str An optional error message when something went wrong with the configuration [optional] region Region is_default bool An indication if this is the default in region for new projects"},{"location":"v3/docs/StorageConfiguration/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.storage_configuration import StorageConfiguration\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of StorageConfiguration from a JSON string\nstorage_configuration_instance = StorageConfiguration.from_json(json)\n# print the JSON string representation of the object\nprint(StorageConfiguration.to_json())\n\n# convert the object into a dict\nstorage_configuration_dict = storage_configuration_instance.to_dict()\n# create an instance of StorageConfiguration from a dict\nstorage_configuration_from_dict = StorageConfiguration.from_dict(storage_configuration_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/StorageConfigurationApi/","title":"libica.openapi.v3.StorageConfigurationApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_storage_configuration POST /api/storageConfigurations Create a new storage configuration get_storage_configuration GET /api/storageConfigurations/{storageConfigurationId} Retrieve a storage configuration. get_storage_configuration_details GET /api/storageConfigurations/{storageConfigurationId}/details Retrieve a storage configuration detail. get_storage_configurations GET /api/storageConfigurations Retrieve a list of storage configurations. share_storage_configuration POST /api/storageConfigurations/{storageConfigurationId}:share Share your own storage configuration with tenant. validate_storage_configuration POST /api/storageConfigurations/{storageConfigurationId}:validate Start validation of your storage configuration."},{"location":"v3/docs/StorageConfigurationApi/#create_storage_configuration","title":"create_storage_configuration","text":"<p>StorageConfiguration create_storage_configuration(create_storage_configuration)</p> <p>Create a new storage configuration</p>"},{"location":"v3/docs/StorageConfigurationApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_storage_configuration import CreateStorageConfiguration\nfrom libica.openapi.v3.models.storage_configuration import StorageConfiguration\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.StorageConfigurationApi(api_client)\n    create_storage_configuration = libica.openapi.v3.CreateStorageConfiguration() # CreateStorageConfiguration | \n\n    try:\n        # Create a new storage configuration\n        api_response = api_instance.create_storage_configuration(create_storage_configuration)\n        print(\"The response of StorageConfigurationApi-&gt;create_storage_configuration:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling StorageConfigurationApi-&gt;create_storage_configuration: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/StorageConfigurationApi/#parameters","title":"Parameters","text":"Name Type Description Notes create_storage_configuration CreateStorageConfiguration"},{"location":"v3/docs/StorageConfigurationApi/#return-type","title":"Return type","text":"<p>StorageConfiguration</p>"},{"location":"v3/docs/StorageConfigurationApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/StorageConfigurationApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/StorageConfigurationApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The storage configuration is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/StorageConfigurationApi/#get_storage_configuration","title":"get_storage_configuration","text":"<p>StorageConfiguration get_storage_configuration(storage_configuration_id)</p> <p>Retrieve a storage configuration.</p>"},{"location":"v3/docs/StorageConfigurationApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.storage_configuration import StorageConfiguration\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.StorageConfigurationApi(api_client)\n    storage_configuration_id = 'storage_configuration_id_example' # str | The ID of the storage configuration to retrieve\n\n    try:\n        # Retrieve a storage configuration.\n        api_response = api_instance.get_storage_configuration(storage_configuration_id)\n        print(\"The response of StorageConfigurationApi-&gt;get_storage_configuration:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling StorageConfigurationApi-&gt;get_storage_configuration: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/StorageConfigurationApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes storage_configuration_id str The ID of the storage configuration to retrieve"},{"location":"v3/docs/StorageConfigurationApi/#return-type_1","title":"Return type","text":"<p>StorageConfiguration</p>"},{"location":"v3/docs/StorageConfigurationApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/StorageConfigurationApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/StorageConfigurationApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The storage configuration is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/StorageConfigurationApi/#get_storage_configuration_details","title":"get_storage_configuration_details","text":"<p>StorageConfigurationDetails get_storage_configuration_details(storage_configuration_id)</p> <p>Retrieve a storage configuration detail.</p>"},{"location":"v3/docs/StorageConfigurationApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.storage_configuration_details import StorageConfigurationDetails\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.StorageConfigurationApi(api_client)\n    storage_configuration_id = 'storage_configuration_id_example' # str | The ID of the storage configuration to retrieve\n\n    try:\n        # Retrieve a storage configuration detail.\n        api_response = api_instance.get_storage_configuration_details(storage_configuration_id)\n        print(\"The response of StorageConfigurationApi-&gt;get_storage_configuration_details:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling StorageConfigurationApi-&gt;get_storage_configuration_details: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/StorageConfigurationApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes storage_configuration_id str The ID of the storage configuration to retrieve"},{"location":"v3/docs/StorageConfigurationApi/#return-type_2","title":"Return type","text":"<p>StorageConfigurationDetails</p>"},{"location":"v3/docs/StorageConfigurationApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/StorageConfigurationApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/StorageConfigurationApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The storage configuration detail is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/StorageConfigurationApi/#get_storage_configurations","title":"get_storage_configurations","text":"<p>StorageConfigurationWithDetailsList get_storage_configurations()</p> <p>Retrieve a list of storage configurations.</p>"},{"location":"v3/docs/StorageConfigurationApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.storage_configuration_with_details_list import StorageConfigurationWithDetailsList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.StorageConfigurationApi(api_client)\n\n    try:\n        # Retrieve a list of storage configurations.\n        api_response = api_instance.get_storage_configurations()\n        print(\"The response of StorageConfigurationApi-&gt;get_storage_configurations:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling StorageConfigurationApi-&gt;get_storage_configurations: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/StorageConfigurationApi/#parameters_3","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v3/docs/StorageConfigurationApi/#return-type_3","title":"Return type","text":"<p>StorageConfigurationWithDetailsList</p>"},{"location":"v3/docs/StorageConfigurationApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/StorageConfigurationApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/StorageConfigurationApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of storage configurations is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/StorageConfigurationApi/#share_storage_configuration","title":"share_storage_configuration","text":"<p>share_storage_configuration(storage_configuration_id)</p> <p>Share your own storage configuration with tenant.</p> <p>Here you share your own storage configuration with all the other users in your tenant.</p>"},{"location":"v3/docs/StorageConfigurationApi/#example_4","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.StorageConfigurationApi(api_client)\n    storage_configuration_id = 'storage_configuration_id_example' # str | The ID of the storage configuration to share\n\n    try:\n        # Share your own storage configuration with tenant.\n        api_instance.share_storage_configuration(storage_configuration_id)\n    except Exception as e:\n        print(\"Exception when calling StorageConfigurationApi-&gt;share_storage_configuration: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/StorageConfigurationApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes storage_configuration_id str The ID of the storage configuration to share"},{"location":"v3/docs/StorageConfigurationApi/#return-type_4","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/StorageConfigurationApi/#authorization_4","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/StorageConfigurationApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/StorageConfigurationApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 204 The storage configuration is successfully shared. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/StorageConfigurationApi/#validate_storage_configuration","title":"validate_storage_configuration","text":"<p>validate_storage_configuration(storage_configuration_id)</p> <p>Start validation of your storage configuration.</p> <p>Here you start the validation of your storage configuration.</p>"},{"location":"v3/docs/StorageConfigurationApi/#example_5","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.StorageConfigurationApi(api_client)\n    storage_configuration_id = 'storage_configuration_id_example' # str | The ID of the storage configuration to validate\n\n    try:\n        # Start validation of your storage configuration.\n        api_instance.validate_storage_configuration(storage_configuration_id)\n    except Exception as e:\n        print(\"Exception when calling StorageConfigurationApi-&gt;validate_storage_configuration: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/StorageConfigurationApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes storage_configuration_id str The ID of the storage configuration to validate"},{"location":"v3/docs/StorageConfigurationApi/#return-type_5","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/StorageConfigurationApi/#authorization_5","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/StorageConfigurationApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/StorageConfigurationApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 204 The storage configuration validation is successfully started. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/StorageConfigurationDetails/","title":"StorageConfigurationDetails","text":""},{"location":"v3/docs/StorageConfigurationDetails/#properties","title":"Properties","text":"Name Type Description Notes aws_s3 AWSDetails [optional]"},{"location":"v3/docs/StorageConfigurationDetails/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.storage_configuration_details import StorageConfigurationDetails\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of StorageConfigurationDetails from a JSON string\nstorage_configuration_details_instance = StorageConfigurationDetails.from_json(json)\n# print the JSON string representation of the object\nprint(StorageConfigurationDetails.to_json())\n\n# convert the object into a dict\nstorage_configuration_details_dict = storage_configuration_details_instance.to_dict()\n# create an instance of StorageConfigurationDetails from a dict\nstorage_configuration_details_from_dict = StorageConfigurationDetails.from_dict(storage_configuration_details_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/StorageConfigurationWithDetails/","title":"StorageConfigurationWithDetails","text":""},{"location":"v3/docs/StorageConfigurationWithDetails/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] name str The name of the storage configuration description str An optional description [optional] type str status str error_message str An optional error message when something went wrong with the configuration [optional] region Region is_default bool An indication if this is the default in region for new projects storage_configuration_details StorageConfigurationDetails"},{"location":"v3/docs/StorageConfigurationWithDetails/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.storage_configuration_with_details import StorageConfigurationWithDetails\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of StorageConfigurationWithDetails from a JSON string\nstorage_configuration_with_details_instance = StorageConfigurationWithDetails.from_json(json)\n# print the JSON string representation of the object\nprint(StorageConfigurationWithDetails.to_json())\n\n# convert the object into a dict\nstorage_configuration_with_details_dict = storage_configuration_with_details_instance.to_dict()\n# create an instance of StorageConfigurationWithDetails from a dict\nstorage_configuration_with_details_from_dict = StorageConfigurationWithDetails.from_dict(storage_configuration_with_details_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/StorageConfigurationWithDetailsList/","title":"StorageConfigurationWithDetailsList","text":""},{"location":"v3/docs/StorageConfigurationWithDetailsList/#properties","title":"Properties","text":"Name Type Description Notes items List[StorageConfigurationWithDetails]"},{"location":"v3/docs/StorageConfigurationWithDetailsList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.storage_configuration_with_details_list import StorageConfigurationWithDetailsList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of StorageConfigurationWithDetailsList from a JSON string\nstorage_configuration_with_details_list_instance = StorageConfigurationWithDetailsList.from_json(json)\n# print the JSON string representation of the object\nprint(StorageConfigurationWithDetailsList.to_json())\n\n# convert the object into a dict\nstorage_configuration_with_details_list_dict = storage_configuration_with_details_list_instance.to_dict()\n# create an instance of StorageConfigurationWithDetailsList from a dict\nstorage_configuration_with_details_list_from_dict = StorageConfigurationWithDetailsList.from_dict(storage_configuration_with_details_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/StorageCredential/","title":"StorageCredential","text":""},{"location":"v3/docs/StorageCredential/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] name str type str"},{"location":"v3/docs/StorageCredential/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.storage_credential import StorageCredential\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of StorageCredential from a JSON string\nstorage_credential_instance = StorageCredential.from_json(json)\n# print the JSON string representation of the object\nprint(StorageCredential.to_json())\n\n# convert the object into a dict\nstorage_credential_dict = storage_credential_instance.to_dict()\n# create an instance of StorageCredential from a dict\nstorage_credential_from_dict = StorageCredential.from_dict(storage_credential_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/StorageCredentialList/","title":"StorageCredentialList","text":""},{"location":"v3/docs/StorageCredentialList/#properties","title":"Properties","text":"Name Type Description Notes items List[StorageCredential]"},{"location":"v3/docs/StorageCredentialList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.storage_credential_list import StorageCredentialList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of StorageCredentialList from a JSON string\nstorage_credential_list_instance = StorageCredentialList.from_json(json)\n# print the JSON string representation of the object\nprint(StorageCredentialList.to_json())\n\n# convert the object into a dict\nstorage_credential_list_dict = storage_credential_list_instance.to_dict()\n# create an instance of StorageCredentialList from a dict\nstorage_credential_list_from_dict = StorageCredentialList.from_dict(storage_credential_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/StorageCredentialsApi/","title":"libica.openapi.v3.StorageCredentialsApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_storage_credential POST /api/storageCredentials Create a new storage credential get_storage_credential GET /api/storageCredentials/{storageCredentialId} Retrieve a storage credential. get_storage_credentials GET /api/storageCredentials Retrieve a list of storage credentials. share_storage_credential POST /api/storageCredentials/{storageCredentialId}:share Share your own storage credentials with tenant. update_storage_credential_secrets POST /api/storageCredentials/{storageCredentialId}:updateSecrets Update a storage credential's secrets."},{"location":"v3/docs/StorageCredentialsApi/#create_storage_credential","title":"create_storage_credential","text":"<p>StorageCredential create_storage_credential(create_storage_credential)</p> <p>Create a new storage credential</p>"},{"location":"v3/docs/StorageCredentialsApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.create_storage_credential import CreateStorageCredential\nfrom libica.openapi.v3.models.storage_credential import StorageCredential\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.StorageCredentialsApi(api_client)\n    create_storage_credential = libica.openapi.v3.CreateStorageCredential() # CreateStorageCredential | \n\n    try:\n        # Create a new storage credential\n        api_response = api_instance.create_storage_credential(create_storage_credential)\n        print(\"The response of StorageCredentialsApi-&gt;create_storage_credential:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling StorageCredentialsApi-&gt;create_storage_credential: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/StorageCredentialsApi/#parameters","title":"Parameters","text":"Name Type Description Notes create_storage_credential CreateStorageCredential"},{"location":"v3/docs/StorageCredentialsApi/#return-type","title":"Return type","text":"<p>StorageCredential</p>"},{"location":"v3/docs/StorageCredentialsApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/StorageCredentialsApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/StorageCredentialsApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 201 The storage credential is successfully created. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/StorageCredentialsApi/#get_storage_credential","title":"get_storage_credential","text":"<p>StorageCredential get_storage_credential(storage_credential_id)</p> <p>Retrieve a storage credential.</p>"},{"location":"v3/docs/StorageCredentialsApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.storage_credential import StorageCredential\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.StorageCredentialsApi(api_client)\n    storage_credential_id = 'storage_credential_id_example' # str | The ID of the storage credential to retrieve\n\n    try:\n        # Retrieve a storage credential.\n        api_response = api_instance.get_storage_credential(storage_credential_id)\n        print(\"The response of StorageCredentialsApi-&gt;get_storage_credential:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling StorageCredentialsApi-&gt;get_storage_credential: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/StorageCredentialsApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes storage_credential_id str The ID of the storage credential to retrieve"},{"location":"v3/docs/StorageCredentialsApi/#return-type_1","title":"Return type","text":"<p>StorageCredential</p>"},{"location":"v3/docs/StorageCredentialsApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/StorageCredentialsApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/StorageCredentialsApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The storage credential is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/StorageCredentialsApi/#get_storage_credentials","title":"get_storage_credentials","text":"<p>StorageCredentialList get_storage_credentials()</p> <p>Retrieve a list of storage credentials.</p>"},{"location":"v3/docs/StorageCredentialsApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.storage_credential_list import StorageCredentialList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.StorageCredentialsApi(api_client)\n\n    try:\n        # Retrieve a list of storage credentials.\n        api_response = api_instance.get_storage_credentials()\n        print(\"The response of StorageCredentialsApi-&gt;get_storage_credentials:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling StorageCredentialsApi-&gt;get_storage_credentials: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/StorageCredentialsApi/#parameters_2","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v3/docs/StorageCredentialsApi/#return-type_2","title":"Return type","text":"<p>StorageCredentialList</p>"},{"location":"v3/docs/StorageCredentialsApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/StorageCredentialsApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/StorageCredentialsApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The list of storage credentials is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/StorageCredentialsApi/#share_storage_credential","title":"share_storage_credential","text":"<p>share_storage_credential(storage_credential_id)</p> <p>Share your own storage credentials with tenant.</p> <p>Here you share your own storage credentials with all the other users in your tenant.</p>"},{"location":"v3/docs/StorageCredentialsApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.StorageCredentialsApi(api_client)\n    storage_credential_id = 'storage_credential_id_example' # str | The ID of the storage credential to share\n\n    try:\n        # Share your own storage credentials with tenant.\n        api_instance.share_storage_credential(storage_credential_id)\n    except Exception as e:\n        print(\"Exception when calling StorageCredentialsApi-&gt;share_storage_credential: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/StorageCredentialsApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes storage_credential_id str The ID of the storage credential to share"},{"location":"v3/docs/StorageCredentialsApi/#return-type_3","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/StorageCredentialsApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/StorageCredentialsApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/StorageCredentialsApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 204 The storage credential is successfully shared. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/StorageCredentialsApi/#update_storage_credential_secrets","title":"update_storage_credential_secrets","text":"<p>update_storage_credential_secrets(storage_credential_id, update_storage_credential_secrets)</p> <p>Update a storage credential's secrets.</p> <p>When your storage credentials change or get updated due to security reasons you need to update them here.</p>"},{"location":"v3/docs/StorageCredentialsApi/#example_4","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.update_storage_credential_secrets import UpdateStorageCredentialSecrets\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.StorageCredentialsApi(api_client)\n    storage_credential_id = 'storage_credential_id_example' # str | \n    update_storage_credential_secrets = libica.openapi.v3.UpdateStorageCredentialSecrets() # UpdateStorageCredentialSecrets | \n\n    try:\n        # Update a storage credential's secrets.\n        api_instance.update_storage_credential_secrets(storage_credential_id, update_storage_credential_secrets)\n    except Exception as e:\n        print(\"Exception when calling StorageCredentialsApi-&gt;update_storage_credential_secrets: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/StorageCredentialsApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes storage_credential_id str update_storage_credential_secrets UpdateStorageCredentialSecrets"},{"location":"v3/docs/StorageCredentialsApi/#return-type_4","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/StorageCredentialsApi/#authorization_4","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/StorageCredentialsApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/StorageCredentialsApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 204 The storage credential secrets are successfully updated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/StringSettings/","title":"StringSettings","text":""},{"location":"v3/docs/StringSettings/#properties","title":"Properties","text":"Name Type Description Notes default_values List[str] [optional]"},{"location":"v3/docs/StringSettings/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.string_settings import StringSettings\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of StringSettings from a JSON string\nstring_settings_instance = StringSettings.from_json(json)\n# print the JSON string representation of the object\nprint(StringSettings.to_json())\n\n# convert the object into a dict\nstring_settings_dict = string_settings_instance.to_dict()\n# create an instance of StringSettings from a dict\nstring_settings_from_dict = StringSettings.from_dict(string_settings_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/SystemApi/","title":"libica.openapi.v3.SystemApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_system_info GET /api/system/info Retrieve system information."},{"location":"v3/docs/SystemApi/#get_system_info","title":"get_system_info","text":"<p>SystemInfo get_system_info()</p> <p>Retrieve system information.</p>"},{"location":"v3/docs/SystemApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.system_info import SystemInfo\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.SystemApi(api_client)\n\n    try:\n        # Retrieve system information.\n        api_response = api_instance.get_system_info()\n        print(\"The response of SystemApi-&gt;get_system_info:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling SystemApi-&gt;get_system_info: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/SystemApi/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v3/docs/SystemApi/#return-type","title":"Return type","text":"<p>SystemInfo</p>"},{"location":"v3/docs/SystemApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/SystemApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/SystemApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The system information is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/SystemInfo/","title":"SystemInfo","text":""},{"location":"v3/docs/SystemInfo/#properties","title":"Properties","text":"Name Type Description Notes name str version str"},{"location":"v3/docs/SystemInfo/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.system_info import SystemInfo\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of SystemInfo from a JSON string\nsystem_info_instance = SystemInfo.from_json(json)\n# print the JSON string representation of the object\nprint(SystemInfo.to_json())\n\n# convert the object into a dict\nsystem_info_dict = system_info_instance.to_dict()\n# create an instance of SystemInfo from a dict\nsystem_info_from_dict = SystemInfo.from_dict(system_info_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/TagUpdate/","title":"TagUpdate","text":""},{"location":"v3/docs/TagUpdate/#properties","title":"Properties","text":"Name Type Description Notes add_tags List[str] [optional] remove_tags List[str] [optional]"},{"location":"v3/docs/TagUpdate/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.tag_update import TagUpdate\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of TagUpdate from a JSON string\ntag_update_instance = TagUpdate.from_json(json)\n# print the JSON string representation of the object\nprint(TagUpdate.to_json())\n\n# convert the object into a dict\ntag_update_dict = tag_update_instance.to_dict()\n# create an instance of TagUpdate from a dict\ntag_update_from_dict = TagUpdate.from_dict(tag_update_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/TempCredentials/","title":"TempCredentials","text":""},{"location":"v3/docs/TempCredentials/#properties","title":"Properties","text":"Name Type Description Notes aws_temp_credentials AwsTempCredentials [optional] rclone_temp_credentials RcloneTempCredentials [optional]"},{"location":"v3/docs/TempCredentials/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.temp_credentials import TempCredentials\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of TempCredentials from a JSON string\ntemp_credentials_instance = TempCredentials.from_json(json)\n# print the JSON string representation of the object\nprint(TempCredentials.to_json())\n\n# convert the object into a dict\ntemp_credentials_dict = temp_credentials_instance.to_dict()\n# create an instance of TempCredentials from a dict\ntemp_credentials_from_dict = TempCredentials.from_dict(temp_credentials_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/TenantIdentifier/","title":"TenantIdentifier","text":""},{"location":"v3/docs/TenantIdentifier/#properties","title":"Properties","text":"Name Type Description Notes id str name str The unique name of the tenant. [optional]"},{"location":"v3/docs/TenantIdentifier/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.tenant_identifier import TenantIdentifier\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of TenantIdentifier from a JSON string\ntenant_identifier_instance = TenantIdentifier.from_json(json)\n# print the JSON string representation of the object\nprint(TenantIdentifier.to_json())\n\n# convert the object into a dict\ntenant_identifier_dict = tenant_identifier_instance.to_dict()\n# create an instance of TenantIdentifier from a dict\ntenant_identifier_from_dict = TenantIdentifier.from_dict(tenant_identifier_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/TermsOfUse/","title":"TermsOfUse","text":""},{"location":"v3/docs/TermsOfUse/#properties","title":"Properties","text":"Name Type Description Notes terms_of_use str Terms of Use for a bundle. Supports plain text or HTML. requires_user_acceptance bool Flag indicating whether the Terms of Use should be accepted before using/viewing the bundle. release_version str Version number of the Terms of Use. [optional]"},{"location":"v3/docs/TermsOfUse/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.terms_of_use import TermsOfUse\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of TermsOfUse from a JSON string\nterms_of_use_instance = TermsOfUse.from_json(json)\n# print the JSON string representation of the object\nprint(TermsOfUse.to_json())\n\n# convert the object into a dict\nterms_of_use_dict = terms_of_use_instance.to_dict()\n# create an instance of TermsOfUse from a dict\nterms_of_use_from_dict = TermsOfUse.from_dict(terms_of_use_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/TermsOfUseAcceptance/","title":"TermsOfUseAcceptance","text":""},{"location":"v3/docs/TermsOfUseAcceptance/#properties","title":"Properties","text":"Name Type Description Notes accepted bool Are the terms of use accepted first_acceptance_date datetime Date of the first time the terms of use were accepted. version_terms_of_use_first_accept str Version of the first accepted Terms of Use. last_acceptance_date datetime Date of the last time the terms of use were accepted. [optional] version_terms_of_use_last_accept str Version of the last accepted Terms of Use. [optional]"},{"location":"v3/docs/TermsOfUseAcceptance/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.terms_of_use_acceptance import TermsOfUseAcceptance\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of TermsOfUseAcceptance from a JSON string\nterms_of_use_acceptance_instance = TermsOfUseAcceptance.from_json(json)\n# print the JSON string representation of the object\nprint(TermsOfUseAcceptance.to_json())\n\n# convert the object into a dict\nterms_of_use_acceptance_dict = terms_of_use_acceptance_instance.to_dict()\n# create an instance of TermsOfUseAcceptance from a dict\nterms_of_use_acceptance_from_dict = TermsOfUseAcceptance.from_dict(terms_of_use_acceptance_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/Token/","title":"Token","text":""},{"location":"v3/docs/Token/#properties","title":"Properties","text":"Name Type Description Notes token str [optional]"},{"location":"v3/docs/Token/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.token import Token\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of Token from a JSON string\ntoken_instance = Token.from_json(json)\n# print the JSON string representation of the object\nprint(Token.to_json())\n\n# convert the object into a dict\ntoken_dict = token_instance.to_dict()\n# create an instance of Token from a dict\ntoken_from_dict = Token.from_dict(token_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/TokenApi/","title":"libica.openapi.v3.TokenApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description create_jwt_token POST /api/tokens Generate a JWT using an API-key, Basic Authentication or a psToken. refresh_jwt_token POST /api/tokens:refresh Refresh a JWT using a not yet expired, still valid JWT."},{"location":"v3/docs/TokenApi/#create_jwt_token","title":"create_jwt_token","text":"<p>Token create_jwt_token(tenant=tenant)</p> <p>Generate a JWT using an API-key, Basic Authentication or a psToken.</p> <p>Generate a JWT using an API-key, Basic Authentication or a psToken. When using Basic Authentication, and you are member of several tenants, also provide the tenant request parameter to indicate for which tenant you want to authenticate. Note that Basic Authentication will not work for SSO (Single Sign On) enabled authentication.</p>"},{"location":"v3/docs/TokenApi/#example","title":"Example","text":"<ul> <li>Bearer (psToken) Authentication (PsTokenAuth):</li> <li>Basic Authentication (BasicAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.token import Token\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (psToken): PsTokenAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure HTTP basic authorization: BasicAuth\nconfiguration = libica.openapi.v3.Configuration(\n    username = os.environ[\"USERNAME\"],\n    password = os.environ[\"PASSWORD\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.TokenApi(api_client)\n    tenant = 'tenant_example' # str | The name of your tenant in case you have access to multiple tenants. (optional)\n\n    try:\n        # Generate a JWT using an API-key, Basic Authentication or a psToken.\n        api_response = api_instance.create_jwt_token(tenant=tenant)\n        print(\"The response of TokenApi-&gt;create_jwt_token:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling TokenApi-&gt;create_jwt_token: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/TokenApi/#parameters","title":"Parameters","text":"Name Type Description Notes tenant str The name of your tenant in case you have access to multiple tenants. [optional]"},{"location":"v3/docs/TokenApi/#return-type","title":"Return type","text":"<p>Token</p>"},{"location":"v3/docs/TokenApi/#authorization","title":"Authorization","text":"<p>PsTokenAuth, BasicAuth, ApiKeyAuth</p>"},{"location":"v3/docs/TokenApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/TokenApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The JWT is successfully generated. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/TokenApi/#refresh_jwt_token","title":"refresh_jwt_token","text":"<p>Token refresh_jwt_token()</p> <p>Refresh a JWT using a not yet expired, still valid JWT.</p> <p>When still having a valid JWT, this endpoint can be used to extend the validity.Refreshing the JWT is not possible if it has been created using an API-key.</p>"},{"location":"v3/docs/TokenApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.token import Token\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.TokenApi(api_client)\n\n    try:\n        # Refresh a JWT using a not yet expired, still valid JWT.\n        api_response = api_instance.refresh_jwt_token()\n        print(\"The response of TokenApi-&gt;refresh_jwt_token:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling TokenApi-&gt;refresh_jwt_token: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/TokenApi/#parameters_1","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v3/docs/TokenApi/#return-type_1","title":"Return type","text":"<p>Token</p>"},{"location":"v3/docs/TokenApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth</p>"},{"location":"v3/docs/TokenApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/TokenApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The JWT is successfully refreshed. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/UpdateMetadata/","title":"UpdateMetadata","text":""},{"location":"v3/docs/UpdateMetadata/#properties","title":"Properties","text":"Name Type Description Notes update_single_metadata_fields List[UpdateSingleMetadataField] List of metadata fields to be updated [optional] update_metadata_field_groups List[UpdateMetadataFieldGroup] List of metadata field groups to be updated [optional]"},{"location":"v3/docs/UpdateMetadata/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.update_metadata import UpdateMetadata\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of UpdateMetadata from a JSON string\nupdate_metadata_instance = UpdateMetadata.from_json(json)\n# print the JSON string representation of the object\nprint(UpdateMetadata.to_json())\n\n# convert the object into a dict\nupdate_metadata_dict = update_metadata_instance.to_dict()\n# create an instance of UpdateMetadata from a dict\nupdate_metadata_from_dict = UpdateMetadata.from_dict(update_metadata_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/UpdateMetadataFieldGroup/","title":"UpdateMetadataFieldGroup","text":"<p>List of metadata field groups to be updated</p>"},{"location":"v3/docs/UpdateMetadataFieldGroup/#properties","title":"Properties","text":"Name Type Description Notes field_id FieldId [optional] field_name str The field name to be updated. Either the field ID or field name is required. [optional] index int Which metadata row index to update update_single_metadata_fields List[UpdateSingleMetadataField] List of metadata fields to be updated"},{"location":"v3/docs/UpdateMetadataFieldGroup/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.update_metadata_field_group import UpdateMetadataFieldGroup\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of UpdateMetadataFieldGroup from a JSON string\nupdate_metadata_field_group_instance = UpdateMetadataFieldGroup.from_json(json)\n# print the JSON string representation of the object\nprint(UpdateMetadataFieldGroup.to_json())\n\n# convert the object into a dict\nupdate_metadata_field_group_dict = update_metadata_field_group_instance.to_dict()\n# create an instance of UpdateMetadataFieldGroup from a dict\nupdate_metadata_field_group_from_dict = UpdateMetadataFieldGroup.from_dict(update_metadata_field_group_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/UpdateSingleMetadataField/","title":"UpdateSingleMetadataField","text":"<p>List of metadata fields to be updated</p>"},{"location":"v3/docs/UpdateSingleMetadataField/#properties","title":"Properties","text":"Name Type Description Notes field_id FieldId [optional] field_name str The field name to be updated. Either the field ID or field name is required. [optional] values List[str] The updated value(s) [optional]"},{"location":"v3/docs/UpdateSingleMetadataField/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.update_single_metadata_field import UpdateSingleMetadataField\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of UpdateSingleMetadataField from a JSON string\nupdate_single_metadata_field_instance = UpdateSingleMetadataField.from_json(json)\n# print the JSON string representation of the object\nprint(UpdateSingleMetadataField.to_json())\n\n# convert the object into a dict\nupdate_single_metadata_field_dict = update_single_metadata_field_instance.to_dict()\n# create an instance of UpdateSingleMetadataField from a dict\nupdate_single_metadata_field_from_dict = UpdateSingleMetadataField.from_dict(update_single_metadata_field_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/UpdateStorageCredentialSecrets/","title":"UpdateStorageCredentialSecrets","text":""},{"location":"v3/docs/UpdateStorageCredentialSecrets/#properties","title":"Properties","text":"Name Type Description Notes aws_credentials AwsCredentials [optional]"},{"location":"v3/docs/UpdateStorageCredentialSecrets/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.update_storage_credential_secrets import UpdateStorageCredentialSecrets\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of UpdateStorageCredentialSecrets from a JSON string\nupdate_storage_credential_secrets_instance = UpdateStorageCredentialSecrets.from_json(json)\n# print the JSON string representation of the object\nprint(UpdateStorageCredentialSecrets.to_json())\n\n# convert the object into a dict\nupdate_storage_credential_secrets_dict = update_storage_credential_secrets_instance.to_dict()\n# create an instance of UpdateStorageCredentialSecrets from a dict\nupdate_storage_credential_secrets_from_dict = UpdateStorageCredentialSecrets.from_dict(update_storage_credential_secrets_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/Upload/","title":"Upload","text":""},{"location":"v3/docs/Upload/#properties","title":"Properties","text":"Name Type Description Notes url str A pre-signed url which is temporarily available for uploading the data."},{"location":"v3/docs/Upload/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.upload import Upload\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of Upload from a JSON string\nupload_instance = Upload.from_json(json)\n# print the JSON string representation of the object\nprint(Upload.to_json())\n\n# convert the object into a dict\nupload_dict = upload_instance.to_dict()\n# create an instance of Upload from a dict\nupload_from_dict = Upload.from_dict(upload_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/UploadRule/","title":"UploadRule","text":""},{"location":"v3/docs/UploadRule/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] code str active bool [optional] description str [optional] local_folder str The local folder to monitor. Files in this folder on your local environment will be uploaded to the specified project. Only files matching the filePattern will be uploaded. file_pattern str The regular expression to match a file name. eg: to match all files use '.*' data_format DataFormat [optional] project Project"},{"location":"v3/docs/UploadRule/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.upload_rule import UploadRule\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of UploadRule from a JSON string\nupload_rule_instance = UploadRule.from_json(json)\n# print the JSON string representation of the object\nprint(UploadRule.to_json())\n\n# convert the object into a dict\nupload_rule_dict = upload_rule_instance.to_dict()\n# create an instance of UploadRule from a dict\nupload_rule_from_dict = UploadRule.from_dict(upload_rule_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/UploadRuleList/","title":"UploadRuleList","text":""},{"location":"v3/docs/UploadRuleList/#properties","title":"Properties","text":"Name Type Description Notes items List[UploadRule]"},{"location":"v3/docs/UploadRuleList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.upload_rule_list import UploadRuleList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of UploadRuleList from a JSON string\nupload_rule_list_instance = UploadRuleList.from_json(json)\n# print the JSON string representation of the object\nprint(UploadRuleList.to_json())\n\n# convert the object into a dict\nupload_rule_list_dict = upload_rule_list_instance.to_dict()\n# create an instance of UploadRuleList from a dict\nupload_rule_list_from_dict = UploadRuleList.from_dict(upload_rule_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/User/","title":"User","text":""},{"location":"v3/docs/User/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime time_modified datetime owner_id str tenant_id str tenant_name str [optional] username str email str firstname str [optional] lastname str [optional] active bool tenant_administrator bool job_title str [optional] greeting str [optional] mobile_phone_number str [optional] phone_number str [optional] fax_number str [optional] email_verified bool two_factor_authentication bool country Country [optional] address_line1 str [optional] address_line2 str [optional] address_line3 str [optional] postal_code str [optional] city str [optional] state str [optional]"},{"location":"v3/docs/User/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.user import User\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of User from a JSON string\nuser_instance = User.from_json(json)\n# print the JSON string representation of the object\nprint(User.to_json())\n\n# convert the object into a dict\nuser_dict = user_instance.to_dict()\n# create an instance of User from a dict\nuser_from_dict = User.from_dict(user_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/UserApi/","title":"libica.openapi.v3.UserApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description approve_user POST /api/users/{userId}:approve Approve a user. assign_tenant_admin_rights_to_user POST /api/users/{userId}:assignTenantAdministratorRights Assign tenant administrator rights to a user. get_user GET /api/users/{userId} Retrieve a user. get_users GET /api/users Retrieve a list of users. revoke_tenant_admin_rights_to_user POST /api/users/{userId}:revokeTenantAdministratorRights Revoke tenant administrator rights to a user. update_user PUT /api/users/{userId} Update a user."},{"location":"v3/docs/UserApi/#approve_user","title":"approve_user","text":"<p>approve_user(user_id)</p> <p>Approve a user.</p> <p>Endpoint for approving a user.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/UserApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.UserApi(api_client)\n    user_id = 'user_id_example' # str | \n\n    try:\n        # Approve a user.\n        api_instance.approve_user(user_id)\n    except Exception as e:\n        print(\"Exception when calling UserApi-&gt;approve_user: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/UserApi/#parameters","title":"Parameters","text":"Name Type Description Notes user_id str"},{"location":"v3/docs/UserApi/#return-type","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/UserApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/UserApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/UserApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 204 The user is successfully approved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/UserApi/#assign_tenant_admin_rights_to_user","title":"assign_tenant_admin_rights_to_user","text":"<p>assign_tenant_admin_rights_to_user(user_id)</p> <p>Assign tenant administrator rights to a user.</p> <p>Endpoint for assigning tenant administrator rights to a user.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/UserApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.UserApi(api_client)\n    user_id = 'user_id_example' # str | \n\n    try:\n        # Assign tenant administrator rights to a user.\n        api_instance.assign_tenant_admin_rights_to_user(user_id)\n    except Exception as e:\n        print(\"Exception when calling UserApi-&gt;assign_tenant_admin_rights_to_user: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/UserApi/#parameters_1","title":"Parameters","text":"Name Type Description Notes user_id str"},{"location":"v3/docs/UserApi/#return-type_1","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/UserApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/UserApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/UserApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 204 The tenant administrator rights are successfully assigned. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/UserApi/#get_user","title":"get_user","text":"<p>User get_user(user_id)</p> <p>Retrieve a user.</p>"},{"location":"v3/docs/UserApi/#example_2","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.user import User\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.UserApi(api_client)\n    user_id = 'user_id_example' # str | \n\n    try:\n        # Retrieve a user.\n        api_response = api_instance.get_user(user_id)\n        print(\"The response of UserApi-&gt;get_user:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling UserApi-&gt;get_user: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/UserApi/#parameters_2","title":"Parameters","text":"Name Type Description Notes user_id str"},{"location":"v3/docs/UserApi/#return-type_2","title":"Return type","text":"<p>User</p>"},{"location":"v3/docs/UserApi/#authorization_2","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/UserApi/#http-request-headers_2","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/UserApi/#http-response-details_2","title":"HTTP response details","text":"Status code Description Response headers 200 The user is successfully retrieved. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/UserApi/#get_users","title":"get_users","text":"<p>UserList get_users(email_address=email_address)</p> <p>Retrieve a list of users.</p>"},{"location":"v3/docs/UserApi/#example_3","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.user_list import UserList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.UserApi(api_client)\n    email_address = 'email_address_example' # str | The email address to filter on (optional)\n\n    try:\n        # Retrieve a list of users.\n        api_response = api_instance.get_users(email_address=email_address)\n        print(\"The response of UserApi-&gt;get_users:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling UserApi-&gt;get_users: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/UserApi/#parameters_3","title":"Parameters","text":"Name Type Description Notes email_address str The email address to filter on [optional]"},{"location":"v3/docs/UserApi/#return-type_3","title":"Return type","text":"<p>UserList</p>"},{"location":"v3/docs/UserApi/#authorization_3","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/UserApi/#http-request-headers_3","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/UserApi/#http-response-details_3","title":"HTTP response details","text":"Status code Description Response headers 200 The list of users is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/UserApi/#revoke_tenant_admin_rights_to_user","title":"revoke_tenant_admin_rights_to_user","text":"<p>revoke_tenant_admin_rights_to_user(user_id)</p> <p>Revoke tenant administrator rights to a user.</p> <p>Endpoint for revoking tenant administrator rights to a user.This is a non-RESTful endpoint, as the path of this endpoint is not representing a REST resource.</p>"},{"location":"v3/docs/UserApi/#example_4","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.UserApi(api_client)\n    user_id = 'user_id_example' # str | \n\n    try:\n        # Revoke tenant administrator rights to a user.\n        api_instance.revoke_tenant_admin_rights_to_user(user_id)\n    except Exception as e:\n        print(\"Exception when calling UserApi-&gt;revoke_tenant_admin_rights_to_user: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/UserApi/#parameters_4","title":"Parameters","text":"Name Type Description Notes user_id str"},{"location":"v3/docs/UserApi/#return-type_4","title":"Return type","text":"<p>void (empty response body)</p>"},{"location":"v3/docs/UserApi/#authorization_4","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/UserApi/#http-request-headers_4","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json</li> </ul>"},{"location":"v3/docs/UserApi/#http-response-details_4","title":"HTTP response details","text":"Status code Description Response headers 204 The tenant administrator rights are successfully revoked. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/UserApi/#update_user","title":"update_user","text":"<p>User update_user(user_id, user, if_match=if_match)</p> <p>Update a user.</p> <p>Fields which can be updated: - greeting - two factor authentication - job title - first name - last name - mobile phone number - phone number - fax number - address lines - postal code - city - country - state</p>"},{"location":"v3/docs/UserApi/#example_5","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.user import User\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.UserApi(api_client)\n    user_id = 'user_id_example' # str | \n    user = libica.openapi.v3.User() # User | \n    if_match = 'if_match_example' # str | Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. (optional)\n\n    try:\n        # Update a user.\n        api_response = api_instance.update_user(user_id, user, if_match=if_match)\n        print(\"The response of UserApi-&gt;update_user:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling UserApi-&gt;update_user: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/UserApi/#parameters_5","title":"Parameters","text":"Name Type Description Notes user_id str user User if_match str Optional header parameter to enable conflict exposure. If the client provides this header, then it must contains the client's most recent value of the 'ETag' response header, and the server will respond with a 409 code if it detects a conflict. If the client does not provide this header, then the server will not do a conflict check, which means that as a client you can override the resource even when the server has a more recent version. [optional]"},{"location":"v3/docs/UserApi/#return-type_5","title":"Return type","text":"<p>User</p>"},{"location":"v3/docs/UserApi/#authorization_5","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/UserApi/#http-request-headers_5","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/vnd.illumina.v3+json, application/json</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/UserApi/#http-response-details_5","title":"HTTP response details","text":"Status code Description Response headers 200 The user is successfully updated. * ETag - The current version of the resource. Can be passed to the corresponding PUT endpoint to enable conflict exposure (409 response).  0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/UserIdentifier/","title":"UserIdentifier","text":""},{"location":"v3/docs/UserIdentifier/#properties","title":"Properties","text":"Name Type Description Notes id str"},{"location":"v3/docs/UserIdentifier/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.user_identifier import UserIdentifier\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of UserIdentifier from a JSON string\nuser_identifier_instance = UserIdentifier.from_json(json)\n# print the JSON string representation of the object\nprint(UserIdentifier.to_json())\n\n# convert the object into a dict\nuser_identifier_dict = user_identifier_instance.to_dict()\n# create an instance of UserIdentifier from a dict\nuser_identifier_from_dict = UserIdentifier.from_dict(user_identifier_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/UserList/","title":"UserList","text":""},{"location":"v3/docs/UserList/#properties","title":"Properties","text":"Name Type Description Notes items List[User]"},{"location":"v3/docs/UserList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.user_list import UserList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of UserList from a JSON string\nuser_list_instance = UserList.from_json(json)\n# print the JSON string representation of the object\nprint(UserList.to_json())\n\n# convert the object into a dict\nuser_list_dict = user_list_instance.to_dict()\n# create an instance of UserList from a dict\nuser_list_from_dict = UserList.from_dict(user_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/WorkflowSessionAnalysisPagedListV4/","title":"WorkflowSessionAnalysisPagedListV4","text":""},{"location":"v3/docs/WorkflowSessionAnalysisPagedListV4/#properties","title":"Properties","text":"Name Type Description Notes items List[WorkflowSessionAnalysisV4] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/WorkflowSessionAnalysisPagedListV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.workflow_session_analysis_paged_list_v4 import WorkflowSessionAnalysisPagedListV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of WorkflowSessionAnalysisPagedListV4 from a JSON string\nworkflow_session_analysis_paged_list_v4_instance = WorkflowSessionAnalysisPagedListV4.from_json(json)\n# print the JSON string representation of the object\nprint(WorkflowSessionAnalysisPagedListV4.to_json())\n\n# convert the object into a dict\nworkflow_session_analysis_paged_list_v4_dict = workflow_session_analysis_paged_list_v4_instance.to_dict()\n# create an instance of WorkflowSessionAnalysisPagedListV4 from a dict\nworkflow_session_analysis_paged_list_v4_from_dict = WorkflowSessionAnalysisPagedListV4.from_dict(workflow_session_analysis_paged_list_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/WorkflowSessionAnalysisV4/","title":"WorkflowSessionAnalysisV4","text":""},{"location":"v3/docs/WorkflowSessionAnalysisV4/#properties","title":"Properties","text":"Name Type Description Notes analysis AnalysisV4 project Project workflow_session_id str"},{"location":"v3/docs/WorkflowSessionAnalysisV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.workflow_session_analysis_v4 import WorkflowSessionAnalysisV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of WorkflowSessionAnalysisV4 from a JSON string\nworkflow_session_analysis_v4_instance = WorkflowSessionAnalysisV4.from_json(json)\n# print the JSON string representation of the object\nprint(WorkflowSessionAnalysisV4.to_json())\n\n# convert the object into a dict\nworkflow_session_analysis_v4_dict = workflow_session_analysis_v4_instance.to_dict()\n# create an instance of WorkflowSessionAnalysisV4 from a dict\nworkflow_session_analysis_v4_from_dict = WorkflowSessionAnalysisV4.from_dict(workflow_session_analysis_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/WorkflowSessionConfiguration/","title":"WorkflowSessionConfiguration","text":""},{"location":"v3/docs/WorkflowSessionConfiguration/#properties","title":"Properties","text":"Name Type Description Notes name str The name of the configuration multi_value bool Whether the configuration has multiple values values List[str] The configuration values"},{"location":"v3/docs/WorkflowSessionConfiguration/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.workflow_session_configuration import WorkflowSessionConfiguration\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of WorkflowSessionConfiguration from a JSON string\nworkflow_session_configuration_instance = WorkflowSessionConfiguration.from_json(json)\n# print the JSON string representation of the object\nprint(WorkflowSessionConfiguration.to_json())\n\n# convert the object into a dict\nworkflow_session_configuration_dict = workflow_session_configuration_instance.to_dict()\n# create an instance of WorkflowSessionConfiguration from a dict\nworkflow_session_configuration_from_dict = WorkflowSessionConfiguration.from_dict(workflow_session_configuration_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/WorkflowSessionConfigurationList/","title":"WorkflowSessionConfigurationList","text":""},{"location":"v3/docs/WorkflowSessionConfigurationList/#properties","title":"Properties","text":"Name Type Description Notes items List[WorkflowSessionConfiguration]"},{"location":"v3/docs/WorkflowSessionConfigurationList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.workflow_session_configuration_list import WorkflowSessionConfigurationList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of WorkflowSessionConfigurationList from a JSON string\nworkflow_session_configuration_list_instance = WorkflowSessionConfigurationList.from_json(json)\n# print the JSON string representation of the object\nprint(WorkflowSessionConfigurationList.to_json())\n\n# convert the object into a dict\nworkflow_session_configuration_list_dict = workflow_session_configuration_list_instance.to_dict()\n# create an instance of WorkflowSessionConfigurationList from a dict\nworkflow_session_configuration_list_from_dict = WorkflowSessionConfigurationList.from_dict(workflow_session_configuration_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/WorkflowSessionData/","title":"WorkflowSessionData","text":"<p>The workflow-session-data used as input by the workflow session.</p>"},{"location":"v3/docs/WorkflowSessionData/#properties","title":"Properties","text":"Name Type Description Notes data_id str The id of the file/folder. format DataFormat name str The name of the file/folder as it was processed by the workflow session. data_type str mount_path str The requested location where the input file was located on the machine that was running the workflow. [optional]"},{"location":"v3/docs/WorkflowSessionData/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.workflow_session_data import WorkflowSessionData\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of WorkflowSessionData from a JSON string\nworkflow_session_data_instance = WorkflowSessionData.from_json(json)\n# print the JSON string representation of the object\nprint(WorkflowSessionData.to_json())\n\n# convert the object into a dict\nworkflow_session_data_dict = workflow_session_data_instance.to_dict()\n# create an instance of WorkflowSessionData from a dict\nworkflow_session_data_from_dict = WorkflowSessionData.from_dict(workflow_session_data_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/WorkflowSessionExternalData/","title":"WorkflowSessionExternalData","text":"<p>The external data used as input by the workflow session.</p>"},{"location":"v3/docs/WorkflowSessionExternalData/#properties","title":"Properties","text":"Name Type Description Notes url str type str Possible values are: s3, http, basespace. More types could be added in a future release. mount_path str"},{"location":"v3/docs/WorkflowSessionExternalData/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.workflow_session_external_data import WorkflowSessionExternalData\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of WorkflowSessionExternalData from a JSON string\nworkflow_session_external_data_instance = WorkflowSessionExternalData.from_json(json)\n# print the JSON string representation of the object\nprint(WorkflowSessionExternalData.to_json())\n\n# convert the object into a dict\nworkflow_session_external_data_dict = workflow_session_external_data_instance.to_dict()\n# create an instance of WorkflowSessionExternalData from a dict\nworkflow_session_external_data_from_dict = WorkflowSessionExternalData.from_dict(workflow_session_external_data_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/WorkflowSessionInput/","title":"WorkflowSessionInput","text":""},{"location":"v3/docs/WorkflowSessionInput/#properties","title":"Properties","text":"Name Type Description Notes code str The name of the input-parameter. analysis_data List[WorkflowSessionData] The workflow-session-data used as input by the workflow session. [optional] external_data List[WorkflowSessionExternalData] The external data used as input by the workflow session. [optional]"},{"location":"v3/docs/WorkflowSessionInput/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.workflow_session_input import WorkflowSessionInput\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of WorkflowSessionInput from a JSON string\nworkflow_session_input_instance = WorkflowSessionInput.from_json(json)\n# print the JSON string representation of the object\nprint(WorkflowSessionInput.to_json())\n\n# convert the object into a dict\nworkflow_session_input_dict = workflow_session_input_instance.to_dict()\n# create an instance of WorkflowSessionInput from a dict\nworkflow_session_input_from_dict = WorkflowSessionInput.from_dict(workflow_session_input_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/WorkflowSessionInputList/","title":"WorkflowSessionInputList","text":""},{"location":"v3/docs/WorkflowSessionInputList/#properties","title":"Properties","text":"Name Type Description Notes items List[WorkflowSessionInput]"},{"location":"v3/docs/WorkflowSessionInputList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.workflow_session_input_list import WorkflowSessionInputList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of WorkflowSessionInputList from a JSON string\nworkflow_session_input_list_instance = WorkflowSessionInputList.from_json(json)\n# print the JSON string representation of the object\nprint(WorkflowSessionInputList.to_json())\n\n# convert the object into a dict\nworkflow_session_input_list_dict = workflow_session_input_list_instance.to_dict()\n# create an instance of WorkflowSessionInputList from a dict\nworkflow_session_input_list_from_dict = WorkflowSessionInputList.from_dict(workflow_session_input_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/WorkflowSessionPagedListV3/","title":"WorkflowSessionPagedListV3","text":""},{"location":"v3/docs/WorkflowSessionPagedListV3/#properties","title":"Properties","text":"Name Type Description Notes items List[WorkflowSessionV3] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/WorkflowSessionPagedListV3/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.workflow_session_paged_list_v3 import WorkflowSessionPagedListV3\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of WorkflowSessionPagedListV3 from a JSON string\nworkflow_session_paged_list_v3_instance = WorkflowSessionPagedListV3.from_json(json)\n# print the JSON string representation of the object\nprint(WorkflowSessionPagedListV3.to_json())\n\n# convert the object into a dict\nworkflow_session_paged_list_v3_dict = workflow_session_paged_list_v3_instance.to_dict()\n# create an instance of WorkflowSessionPagedListV3 from a dict\nworkflow_session_paged_list_v3_from_dict = WorkflowSessionPagedListV3.from_dict(workflow_session_paged_list_v3_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/WorkflowSessionPagedListV4/","title":"WorkflowSessionPagedListV4","text":""},{"location":"v3/docs/WorkflowSessionPagedListV4/#properties","title":"Properties","text":"Name Type Description Notes items List[WorkflowSessionV4] next_page_token str The cursor to request the next page. For offset-based paging the value is an empty string. [optional] remaining_records int The number of records remaining (used in cursor based pagination) [optional] total_item_count int The total number of records matching the search criteria (used in offset based pagination) [optional]"},{"location":"v3/docs/WorkflowSessionPagedListV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.workflow_session_paged_list_v4 import WorkflowSessionPagedListV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of WorkflowSessionPagedListV4 from a JSON string\nworkflow_session_paged_list_v4_instance = WorkflowSessionPagedListV4.from_json(json)\n# print the JSON string representation of the object\nprint(WorkflowSessionPagedListV4.to_json())\n\n# convert the object into a dict\nworkflow_session_paged_list_v4_dict = workflow_session_paged_list_v4_instance.to_dict()\n# create an instance of WorkflowSessionPagedListV4 from a dict\nworkflow_session_paged_list_v4_from_dict = WorkflowSessionPagedListV4.from_dict(workflow_session_paged_list_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/WorkflowSessionTag/","title":"WorkflowSessionTag","text":""},{"location":"v3/docs/WorkflowSessionTag/#properties","title":"Properties","text":"Name Type Description Notes technical_tags List[Optional[str]] Technical tags [optional] user_tags List[Optional[str]] User tags [optional]"},{"location":"v3/docs/WorkflowSessionTag/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.workflow_session_tag import WorkflowSessionTag\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of WorkflowSessionTag from a JSON string\nworkflow_session_tag_instance = WorkflowSessionTag.from_json(json)\n# print the JSON string representation of the object\nprint(WorkflowSessionTag.to_json())\n\n# convert the object into a dict\nworkflow_session_tag_dict = workflow_session_tag_instance.to_dict()\n# create an instance of WorkflowSessionTag from a dict\nworkflow_session_tag_from_dict = WorkflowSessionTag.from_dict(workflow_session_tag_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/WorkflowSessionV3/","title":"WorkflowSessionV3","text":""},{"location":"v3/docs/WorkflowSessionV3/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime owner_id str tenant_id str tenant_name str [optional] user_reference str The user reference of the workflow session workflow WorkflowV3 status str The status of the workflow session start_date datetime When the workflow session was started [optional] end_date datetime When the workflow session was finished [optional] summary str The summary of the workflow session [optional] tags WorkflowSessionTag"},{"location":"v3/docs/WorkflowSessionV3/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.workflow_session_v3 import WorkflowSessionV3\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of WorkflowSessionV3 from a JSON string\nworkflow_session_v3_instance = WorkflowSessionV3.from_json(json)\n# print the JSON string representation of the object\nprint(WorkflowSessionV3.to_json())\n\n# convert the object into a dict\nworkflow_session_v3_dict = workflow_session_v3_instance.to_dict()\n# create an instance of WorkflowSessionV3 from a dict\nworkflow_session_v3_from_dict = WorkflowSessionV3.from_dict(workflow_session_v3_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/WorkflowSessionV4/","title":"WorkflowSessionV4","text":""},{"location":"v3/docs/WorkflowSessionV4/#properties","title":"Properties","text":"Name Type Description Notes id str time_created datetime owner UserIdentifier tenant TenantIdentifier user_reference str The user reference of the workflow session workflow WorkflowV4 status str The status of the workflow session start_date datetime When the workflow session was started [optional] end_date datetime When the workflow session was finished [optional] summary str The summary of the workflow session [optional] tags WorkflowSessionTag"},{"location":"v3/docs/WorkflowSessionV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.workflow_session_v4 import WorkflowSessionV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of WorkflowSessionV4 from a JSON string\nworkflow_session_v4_instance = WorkflowSessionV4.from_json(json)\n# print the JSON string representation of the object\nprint(WorkflowSessionV4.to_json())\n\n# convert the object into a dict\nworkflow_session_v4_dict = workflow_session_v4_instance.to_dict()\n# create an instance of WorkflowSessionV4 from a dict\nworkflow_session_v4_from_dict = WorkflowSessionV4.from_dict(workflow_session_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/WorkflowV3/","title":"WorkflowV3","text":""},{"location":"v3/docs/WorkflowV3/#properties","title":"Properties","text":"Name Type Description Notes id str code str The code of the workflow urn str The URN of the workflow. The format is urn:ilmn:ica:\\&lt;type of the object\\&gt;:\\&lt;ID of the object\\&gt;#\\&lt;optional human readable hint representing the object\\&gt;. The hint can be omitted, in that case the hashtag (#) must also be omitted. description str The description of the workflow language_version PipelineLanguageVersion [optional] workflow_tags PipelineTag [optional] analysis_storage AnalysisStorageV3"},{"location":"v3/docs/WorkflowV3/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.workflow_v3 import WorkflowV3\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of WorkflowV3 from a JSON string\nworkflow_v3_instance = WorkflowV3.from_json(json)\n# print the JSON string representation of the object\nprint(WorkflowV3.to_json())\n\n# convert the object into a dict\nworkflow_v3_dict = workflow_v3_instance.to_dict()\n# create an instance of WorkflowV3 from a dict\nworkflow_v3_from_dict = WorkflowV3.from_dict(workflow_v3_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/WorkflowV4/","title":"WorkflowV4","text":""},{"location":"v3/docs/WorkflowV4/#properties","title":"Properties","text":"Name Type Description Notes id str code str The code of the workflow urn str The URN of the workflow. The format is urn:ilmn:ica:\\&lt;type of the object\\&gt;:\\&lt;ID of the object\\&gt;#\\&lt;optional human readable hint representing the object\\&gt;. The hint can be omitted, in that case the hashtag (#) must also be omitted. description str The description of the workflow language_version PipelineLanguageVersion [optional] workflow_tags PipelineTag [optional] analysis_storage AnalysisStorageV4"},{"location":"v3/docs/WorkflowV4/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.workflow_v4 import WorkflowV4\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of WorkflowV4 from a JSON string\nworkflow_v4_instance = WorkflowV4.from_json(json)\n# print the JSON string representation of the object\nprint(WorkflowV4.to_json())\n\n# convert the object into a dict\nworkflow_v4_dict = workflow_v4_instance.to_dict()\n# create an instance of WorkflowV4 from a dict\nworkflow_v4_from_dict = WorkflowV4.from_dict(workflow_v4_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/Workgroup/","title":"Workgroup","text":""},{"location":"v3/docs/Workgroup/#properties","title":"Properties","text":"Name Type Description Notes id str name str description str"},{"location":"v3/docs/Workgroup/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.workgroup import Workgroup\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of Workgroup from a JSON string\nworkgroup_instance = Workgroup.from_json(json)\n# print the JSON string representation of the object\nprint(Workgroup.to_json())\n\n# convert the object into a dict\nworkgroup_dict = workgroup_instance.to_dict()\n# create an instance of Workgroup from a dict\nworkgroup_from_dict = Workgroup.from_dict(workgroup_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"},{"location":"v3/docs/WorkgroupApi/","title":"libica.openapi.v3.WorkgroupApi","text":"<p>All URIs are relative to /ica/rest</p> Method HTTP request Description get_workgroup GET /api/workgroups/{workgroupId} Retrieve a workgroup. get_workgroups GET /api/workgroups Retrieve a list of workgroups."},{"location":"v3/docs/WorkgroupApi/#get_workgroup","title":"get_workgroup","text":"<p>Workgroup get_workgroup(workgroup_id)</p> <p>Retrieve a workgroup.</p>"},{"location":"v3/docs/WorkgroupApi/#example","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.workgroup import Workgroup\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.WorkgroupApi(api_client)\n    workgroup_id = 'workgroup_id_example' # str | The ID of the workgroup to retrieve\n\n    try:\n        # Retrieve a workgroup.\n        api_response = api_instance.get_workgroup(workgroup_id)\n        print(\"The response of WorkgroupApi-&gt;get_workgroup:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling WorkgroupApi-&gt;get_workgroup: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/WorkgroupApi/#parameters","title":"Parameters","text":"Name Type Description Notes workgroup_id str The ID of the workgroup to retrieve"},{"location":"v3/docs/WorkgroupApi/#return-type","title":"Return type","text":"<p>Workgroup</p>"},{"location":"v3/docs/WorkgroupApi/#authorization","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/WorkgroupApi/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/WorkgroupApi/#http-response-details","title":"HTTP response details","text":"Status code Description Response headers 200 The workgroup is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/WorkgroupApi/#get_workgroups","title":"get_workgroups","text":"<p>WorkgroupList get_workgroups()</p> <p>Retrieve a list of workgroups.</p>"},{"location":"v3/docs/WorkgroupApi/#example_1","title":"Example","text":"<ul> <li>Bearer (JWT) Authentication (JwtAuth):</li> <li>Api Key Authentication (ApiKeyAuth):</li> </ul> <pre><code>import libica.openapi.v3\nfrom libica.openapi.v3.models.workgroup_list import WorkgroupList\nfrom libica.openapi.v3.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to /ica/rest\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = libica.openapi.v3.Configuration(\n    host = \"/ica/rest\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure Bearer authorization (JWT): JwtAuth\nconfiguration = libica.openapi.v3.Configuration(\n    access_token = os.environ[\"BEARER_TOKEN\"]\n)\n\n# Configure API key authorization: ApiKeyAuth\nconfiguration.api_key['ApiKeyAuth'] = os.environ[\"API_KEY\"]\n\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['ApiKeyAuth'] = 'Bearer'\n\n# Enter a context with an instance of the API client\nwith libica.openapi.v3.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = libica.openapi.v3.WorkgroupApi(api_client)\n\n    try:\n        # Retrieve a list of workgroups.\n        api_response = api_instance.get_workgroups()\n        print(\"The response of WorkgroupApi-&gt;get_workgroups:\\n\")\n        pprint(api_response)\n    except Exception as e:\n        print(\"Exception when calling WorkgroupApi-&gt;get_workgroups: %s\\n\" % e)\n</code></pre>"},{"location":"v3/docs/WorkgroupApi/#parameters_1","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"v3/docs/WorkgroupApi/#return-type_1","title":"Return type","text":"<p>WorkgroupList</p>"},{"location":"v3/docs/WorkgroupApi/#authorization_1","title":"Authorization","text":"<p>JwtAuth, ApiKeyAuth</p>"},{"location":"v3/docs/WorkgroupApi/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/problem+json, application/vnd.illumina.v3+json</li> </ul>"},{"location":"v3/docs/WorkgroupApi/#http-response-details_1","title":"HTTP response details","text":"Status code Description Response headers 200 The list of workgroups is successfully retrieved. - 0 A problem occurred. - <p>[Back to top] [Back to API list] [Back to Model list] [Back to README]</p>"},{"location":"v3/docs/WorkgroupList/","title":"WorkgroupList","text":""},{"location":"v3/docs/WorkgroupList/#properties","title":"Properties","text":"Name Type Description Notes items List[Workgroup]"},{"location":"v3/docs/WorkgroupList/#example","title":"Example","text":"<pre><code>from libica.openapi.v3.models.workgroup_list import WorkgroupList\n\n# TODO update the JSON string below\njson = \"{}\"\n# create an instance of WorkgroupList from a JSON string\nworkgroup_list_instance = WorkgroupList.from_json(json)\n# print the JSON string representation of the object\nprint(WorkgroupList.to_json())\n\n# convert the object into a dict\nworkgroup_list_dict = workgroup_list_instance.to_dict()\n# create an instance of WorkgroupList from a dict\nworkgroup_list_from_dict = WorkgroupList.from_dict(workgroup_list_dict)\n</code></pre> <p>[Back to Model list] [Back to API list] [Back to README]</p>"}]}