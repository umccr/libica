# coding: utf-8

"""
    ICA Rest API

    This API can be used to interact with Illumina Connected Analytics.<br> <h2>Authentication</h2> <p> Authentication to the  API can be done in multiple ways:<br> <ul><li>For the entire API, except for the POST /tokens endpoint: API-key + JWT</li> <li>Only for the POST /tokens endpoint: API-key + Basic Authentication</li></ul> </p> <p> <h4>API-key</h4> API keys are managed within the Illumina portal where you can manage your profile after you have logged on. The API-key has to be provided in the X-API-Key header parameter when executing API calls to ICA. In the background, a JWT will be requested at the IDP of Illumina to create a session. A good practice is to not use the API-key for every API call, but to first generate a JWT and to use that for authentication in subsequent calls.<br> </p> <p> <h4>JWT</h4> To avoid using an API-key for each call, we recommend to request a JWT via the POST /tokens endpoint  using this API-key. The JWT will expire after a pre-configured period specified by a tenant administrator through the IAM console in the Illumina portal. The JWT is the preferred way for authentication.<br>A not yet expired, still valid JWT could be refreshed using the POST /tokens:refresh endpoint.<br>Refreshing the JWT is not possible if the JWT was generated by using an API-key.<br> </p> <p> <h4>Basic Authentication</h4> Basic authentication is only supported by the POST /tokens endpoint for generating a JWT. Use \"Basic base64encoded(emailaddress:password)\" in the \"Authorization\" header parameter for this authentication method. In case having access to multiple tenants using the same email-address, also provide the \"tenant\" request parameter to indicate what tenant you would like to request a JWT for. </p> <p> <h2>Compression</h2> If the API client provides request header 'Accept-Encoding' with value 'gzip', then the API applies GZIP compression on the JSON response. This significantly reduces the size and thus the download time of the response, which results in faster end-to-end API calls. In case of compression, the API also provides response header 'Content-Encoding' with value 'gzip', as indication for the client that decompression is required. </p> 

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from libica.openapi.v3.models.bundle_data_paged_list import BundleDataPagedList

from libica.openapi.v3.api_client import ApiClient, RequestSerialized
from libica.openapi.v3.api_response import ApiResponse
from libica.openapi.v3.rest import RESTResponseType


class BundleDataApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_bundle_data(
        self,
        bundle_id: StrictStr,
        full_text: Annotated[Optional[StrictStr], Field(description="To search through multiple fields of data.")] = None,
        id: Annotated[Optional[StrictStr], Field(description="The ids to filter on. This will always match exact.")] = None,
        filename: Annotated[Optional[StrictStr], Field(description="The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done.")] = None,
        filename_match_mode: Annotated[Optional[StrictStr], Field(description="How the filenames are filtered.")] = None,
        file_path: Annotated[Optional[StrictStr], Field(description="The paths of the files to filter on.")] = None,
        file_path_match_mode: Annotated[Optional[StrictStr], Field(description="How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt).")] = None,
        status: Annotated[Optional[StrictStr], Field(description="The statuses to filter on.")] = None,
        format_id: Annotated[Optional[StrictStr], Field(description="The IDs of the formats to filter on.")] = None,
        format_code: Annotated[Optional[StrictStr], Field(description="The codes of the formats to filter on.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The type to filter on.")] = None,
        parent_folder_id: Annotated[Optional[StrictStr], Field(description="The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively.")] = None,
        parent_folder_path: Annotated[Optional[StrictStr], Field(description="The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files.")] = None,
        creation_date_after: Annotated[Optional[StrictStr], Field(description="The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z")] = None,
        creation_date_before: Annotated[Optional[StrictStr], Field(description="The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z")] = None,
        status_date_after: Annotated[Optional[StrictStr], Field(description="The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z")] = None,
        status_date_before: Annotated[Optional[StrictStr], Field(description="The date before which the status has been updated Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z")] = None,
        user_tag: Annotated[Optional[StrictStr], Field(description="The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done.")] = None,
        user_tag_match_mode: Annotated[Optional[StrictStr], Field(description="How the usertags are filtered.")] = None,
        run_input_tag: Annotated[Optional[StrictStr], Field(description="The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done.")] = None,
        run_input_tag_match_mode: Annotated[Optional[StrictStr], Field(description="How the runInputTags are filtered.")] = None,
        run_output_tag: Annotated[Optional[StrictStr], Field(description="The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done.")] = None,
        run_output_tag_match_mode: Annotated[Optional[StrictStr], Field(description="How the runOutputTags are filtered.")] = None,
        connector_tag: Annotated[Optional[StrictStr], Field(description="The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done.")] = None,
        connector_tag_match_mode: Annotated[Optional[StrictStr], Field(description="How the connectorTags are filtered.")] = None,
        technical_tag: Annotated[Optional[StrictStr], Field(description="The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done.")] = None,
        technical_tag_match_mode: Annotated[Optional[StrictStr], Field(description="How the technicalTags are filtered.")] = None,
        not_in_run: Annotated[Optional[StrictStr], Field(description="When set to true, the data will be filtered on data which is not used in a run.")] = None,
        not_linked_to_sample: Annotated[Optional[StrictStr], Field(description="When set to true only date that is unlinked to a sample will be returned.  This filter implies a filter of type File.")] = None,
        instrument_run_id: Annotated[Optional[List[StrictStr]], Field(description="The instrument run IDs of the sequencing runs to filter on.")] = None,
        page_offset: Annotated[Optional[StrictStr], Field(description="[only use with offset-based paging]<br>The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="[only use with cursor-based paging]<br>The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="[can be used with both offset- and cursor-based paging]<br>The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="[only use with offset-based paging]<br>Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2 desc\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BundleDataPagedList:
        """Retrieve the list of bundle data.


        :param bundle_id: (required)
        :type bundle_id: str
        :param full_text: To search through multiple fields of data.
        :type full_text: str
        :param id: The ids to filter on. This will always match exact.
        :type id: str
        :param filename: The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done.
        :type filename: str
        :param filename_match_mode: How the filenames are filtered.
        :type filename_match_mode: str
        :param file_path: The paths of the files to filter on.
        :type file_path: str
        :param file_path_match_mode: How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt).
        :type file_path_match_mode: str
        :param status: The statuses to filter on.
        :type status: str
        :param format_id: The IDs of the formats to filter on.
        :type format_id: str
        :param format_code: The codes of the formats to filter on.
        :type format_code: str
        :param type: The type to filter on.
        :type type: str
        :param parent_folder_id: The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively.
        :type parent_folder_id: str
        :param parent_folder_path: The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files.
        :type parent_folder_path: str
        :param creation_date_after: The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z
        :type creation_date_after: str
        :param creation_date_before: The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z
        :type creation_date_before: str
        :param status_date_after: The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z
        :type status_date_after: str
        :param status_date_before: The date before which the status has been updated Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z
        :type status_date_before: str
        :param user_tag: The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done.
        :type user_tag: str
        :param user_tag_match_mode: How the usertags are filtered.
        :type user_tag_match_mode: str
        :param run_input_tag: The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done.
        :type run_input_tag: str
        :param run_input_tag_match_mode: How the runInputTags are filtered.
        :type run_input_tag_match_mode: str
        :param run_output_tag: The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done.
        :type run_output_tag: str
        :param run_output_tag_match_mode: How the runOutputTags are filtered.
        :type run_output_tag_match_mode: str
        :param connector_tag: The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done.
        :type connector_tag: str
        :param connector_tag_match_mode: How the connectorTags are filtered.
        :type connector_tag_match_mode: str
        :param technical_tag: The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done.
        :type technical_tag: str
        :param technical_tag_match_mode: How the technicalTags are filtered.
        :type technical_tag_match_mode: str
        :param not_in_run: When set to true, the data will be filtered on data which is not used in a run.
        :type not_in_run: str
        :param not_linked_to_sample: When set to true only date that is unlinked to a sample will be returned.  This filter implies a filter of type File.
        :type not_linked_to_sample: str
        :param instrument_run_id: The instrument run IDs of the sequencing runs to filter on.
        :type instrument_run_id: List[str]
        :param page_offset: [only use with offset-based paging]<br>The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages
        :type page_offset: str
        :param page_token: [only use with cursor-based paging]<br>The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages.
        :type page_token: str
        :param page_size: [can be used with both offset- and cursor-based paging]<br>The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results
        :type page_size: str
        :param sort: [only use with offset-based paging]<br>Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2 desc\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_bundle_data_serialize(
            bundle_id=bundle_id,
            full_text=full_text,
            id=id,
            filename=filename,
            filename_match_mode=filename_match_mode,
            file_path=file_path,
            file_path_match_mode=file_path_match_mode,
            status=status,
            format_id=format_id,
            format_code=format_code,
            type=type,
            parent_folder_id=parent_folder_id,
            parent_folder_path=parent_folder_path,
            creation_date_after=creation_date_after,
            creation_date_before=creation_date_before,
            status_date_after=status_date_after,
            status_date_before=status_date_before,
            user_tag=user_tag,
            user_tag_match_mode=user_tag_match_mode,
            run_input_tag=run_input_tag,
            run_input_tag_match_mode=run_input_tag_match_mode,
            run_output_tag=run_output_tag,
            run_output_tag_match_mode=run_output_tag_match_mode,
            connector_tag=connector_tag,
            connector_tag_match_mode=connector_tag_match_mode,
            technical_tag=technical_tag,
            technical_tag_match_mode=technical_tag_match_mode,
            not_in_run=not_in_run,
            not_linked_to_sample=not_linked_to_sample,
            instrument_run_id=instrument_run_id,
            page_offset=page_offset,
            page_token=page_token,
            page_size=page_size,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BundleDataPagedList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_bundle_data_with_http_info(
        self,
        bundle_id: StrictStr,
        full_text: Annotated[Optional[StrictStr], Field(description="To search through multiple fields of data.")] = None,
        id: Annotated[Optional[StrictStr], Field(description="The ids to filter on. This will always match exact.")] = None,
        filename: Annotated[Optional[StrictStr], Field(description="The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done.")] = None,
        filename_match_mode: Annotated[Optional[StrictStr], Field(description="How the filenames are filtered.")] = None,
        file_path: Annotated[Optional[StrictStr], Field(description="The paths of the files to filter on.")] = None,
        file_path_match_mode: Annotated[Optional[StrictStr], Field(description="How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt).")] = None,
        status: Annotated[Optional[StrictStr], Field(description="The statuses to filter on.")] = None,
        format_id: Annotated[Optional[StrictStr], Field(description="The IDs of the formats to filter on.")] = None,
        format_code: Annotated[Optional[StrictStr], Field(description="The codes of the formats to filter on.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The type to filter on.")] = None,
        parent_folder_id: Annotated[Optional[StrictStr], Field(description="The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively.")] = None,
        parent_folder_path: Annotated[Optional[StrictStr], Field(description="The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files.")] = None,
        creation_date_after: Annotated[Optional[StrictStr], Field(description="The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z")] = None,
        creation_date_before: Annotated[Optional[StrictStr], Field(description="The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z")] = None,
        status_date_after: Annotated[Optional[StrictStr], Field(description="The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z")] = None,
        status_date_before: Annotated[Optional[StrictStr], Field(description="The date before which the status has been updated Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z")] = None,
        user_tag: Annotated[Optional[StrictStr], Field(description="The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done.")] = None,
        user_tag_match_mode: Annotated[Optional[StrictStr], Field(description="How the usertags are filtered.")] = None,
        run_input_tag: Annotated[Optional[StrictStr], Field(description="The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done.")] = None,
        run_input_tag_match_mode: Annotated[Optional[StrictStr], Field(description="How the runInputTags are filtered.")] = None,
        run_output_tag: Annotated[Optional[StrictStr], Field(description="The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done.")] = None,
        run_output_tag_match_mode: Annotated[Optional[StrictStr], Field(description="How the runOutputTags are filtered.")] = None,
        connector_tag: Annotated[Optional[StrictStr], Field(description="The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done.")] = None,
        connector_tag_match_mode: Annotated[Optional[StrictStr], Field(description="How the connectorTags are filtered.")] = None,
        technical_tag: Annotated[Optional[StrictStr], Field(description="The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done.")] = None,
        technical_tag_match_mode: Annotated[Optional[StrictStr], Field(description="How the technicalTags are filtered.")] = None,
        not_in_run: Annotated[Optional[StrictStr], Field(description="When set to true, the data will be filtered on data which is not used in a run.")] = None,
        not_linked_to_sample: Annotated[Optional[StrictStr], Field(description="When set to true only date that is unlinked to a sample will be returned.  This filter implies a filter of type File.")] = None,
        instrument_run_id: Annotated[Optional[List[StrictStr]], Field(description="The instrument run IDs of the sequencing runs to filter on.")] = None,
        page_offset: Annotated[Optional[StrictStr], Field(description="[only use with offset-based paging]<br>The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="[only use with cursor-based paging]<br>The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="[can be used with both offset- and cursor-based paging]<br>The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="[only use with offset-based paging]<br>Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2 desc\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BundleDataPagedList]:
        """Retrieve the list of bundle data.


        :param bundle_id: (required)
        :type bundle_id: str
        :param full_text: To search through multiple fields of data.
        :type full_text: str
        :param id: The ids to filter on. This will always match exact.
        :type id: str
        :param filename: The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done.
        :type filename: str
        :param filename_match_mode: How the filenames are filtered.
        :type filename_match_mode: str
        :param file_path: The paths of the files to filter on.
        :type file_path: str
        :param file_path_match_mode: How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt).
        :type file_path_match_mode: str
        :param status: The statuses to filter on.
        :type status: str
        :param format_id: The IDs of the formats to filter on.
        :type format_id: str
        :param format_code: The codes of the formats to filter on.
        :type format_code: str
        :param type: The type to filter on.
        :type type: str
        :param parent_folder_id: The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively.
        :type parent_folder_id: str
        :param parent_folder_path: The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files.
        :type parent_folder_path: str
        :param creation_date_after: The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z
        :type creation_date_after: str
        :param creation_date_before: The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z
        :type creation_date_before: str
        :param status_date_after: The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z
        :type status_date_after: str
        :param status_date_before: The date before which the status has been updated Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z
        :type status_date_before: str
        :param user_tag: The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done.
        :type user_tag: str
        :param user_tag_match_mode: How the usertags are filtered.
        :type user_tag_match_mode: str
        :param run_input_tag: The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done.
        :type run_input_tag: str
        :param run_input_tag_match_mode: How the runInputTags are filtered.
        :type run_input_tag_match_mode: str
        :param run_output_tag: The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done.
        :type run_output_tag: str
        :param run_output_tag_match_mode: How the runOutputTags are filtered.
        :type run_output_tag_match_mode: str
        :param connector_tag: The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done.
        :type connector_tag: str
        :param connector_tag_match_mode: How the connectorTags are filtered.
        :type connector_tag_match_mode: str
        :param technical_tag: The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done.
        :type technical_tag: str
        :param technical_tag_match_mode: How the technicalTags are filtered.
        :type technical_tag_match_mode: str
        :param not_in_run: When set to true, the data will be filtered on data which is not used in a run.
        :type not_in_run: str
        :param not_linked_to_sample: When set to true only date that is unlinked to a sample will be returned.  This filter implies a filter of type File.
        :type not_linked_to_sample: str
        :param instrument_run_id: The instrument run IDs of the sequencing runs to filter on.
        :type instrument_run_id: List[str]
        :param page_offset: [only use with offset-based paging]<br>The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages
        :type page_offset: str
        :param page_token: [only use with cursor-based paging]<br>The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages.
        :type page_token: str
        :param page_size: [can be used with both offset- and cursor-based paging]<br>The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results
        :type page_size: str
        :param sort: [only use with offset-based paging]<br>Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2 desc\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_bundle_data_serialize(
            bundle_id=bundle_id,
            full_text=full_text,
            id=id,
            filename=filename,
            filename_match_mode=filename_match_mode,
            file_path=file_path,
            file_path_match_mode=file_path_match_mode,
            status=status,
            format_id=format_id,
            format_code=format_code,
            type=type,
            parent_folder_id=parent_folder_id,
            parent_folder_path=parent_folder_path,
            creation_date_after=creation_date_after,
            creation_date_before=creation_date_before,
            status_date_after=status_date_after,
            status_date_before=status_date_before,
            user_tag=user_tag,
            user_tag_match_mode=user_tag_match_mode,
            run_input_tag=run_input_tag,
            run_input_tag_match_mode=run_input_tag_match_mode,
            run_output_tag=run_output_tag,
            run_output_tag_match_mode=run_output_tag_match_mode,
            connector_tag=connector_tag,
            connector_tag_match_mode=connector_tag_match_mode,
            technical_tag=technical_tag,
            technical_tag_match_mode=technical_tag_match_mode,
            not_in_run=not_in_run,
            not_linked_to_sample=not_linked_to_sample,
            instrument_run_id=instrument_run_id,
            page_offset=page_offset,
            page_token=page_token,
            page_size=page_size,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BundleDataPagedList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_bundle_data_without_preload_content(
        self,
        bundle_id: StrictStr,
        full_text: Annotated[Optional[StrictStr], Field(description="To search through multiple fields of data.")] = None,
        id: Annotated[Optional[StrictStr], Field(description="The ids to filter on. This will always match exact.")] = None,
        filename: Annotated[Optional[StrictStr], Field(description="The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done.")] = None,
        filename_match_mode: Annotated[Optional[StrictStr], Field(description="How the filenames are filtered.")] = None,
        file_path: Annotated[Optional[StrictStr], Field(description="The paths of the files to filter on.")] = None,
        file_path_match_mode: Annotated[Optional[StrictStr], Field(description="How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt).")] = None,
        status: Annotated[Optional[StrictStr], Field(description="The statuses to filter on.")] = None,
        format_id: Annotated[Optional[StrictStr], Field(description="The IDs of the formats to filter on.")] = None,
        format_code: Annotated[Optional[StrictStr], Field(description="The codes of the formats to filter on.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The type to filter on.")] = None,
        parent_folder_id: Annotated[Optional[StrictStr], Field(description="The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively.")] = None,
        parent_folder_path: Annotated[Optional[StrictStr], Field(description="The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files.")] = None,
        creation_date_after: Annotated[Optional[StrictStr], Field(description="The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z")] = None,
        creation_date_before: Annotated[Optional[StrictStr], Field(description="The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z")] = None,
        status_date_after: Annotated[Optional[StrictStr], Field(description="The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z")] = None,
        status_date_before: Annotated[Optional[StrictStr], Field(description="The date before which the status has been updated Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z")] = None,
        user_tag: Annotated[Optional[StrictStr], Field(description="The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done.")] = None,
        user_tag_match_mode: Annotated[Optional[StrictStr], Field(description="How the usertags are filtered.")] = None,
        run_input_tag: Annotated[Optional[StrictStr], Field(description="The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done.")] = None,
        run_input_tag_match_mode: Annotated[Optional[StrictStr], Field(description="How the runInputTags are filtered.")] = None,
        run_output_tag: Annotated[Optional[StrictStr], Field(description="The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done.")] = None,
        run_output_tag_match_mode: Annotated[Optional[StrictStr], Field(description="How the runOutputTags are filtered.")] = None,
        connector_tag: Annotated[Optional[StrictStr], Field(description="The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done.")] = None,
        connector_tag_match_mode: Annotated[Optional[StrictStr], Field(description="How the connectorTags are filtered.")] = None,
        technical_tag: Annotated[Optional[StrictStr], Field(description="The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done.")] = None,
        technical_tag_match_mode: Annotated[Optional[StrictStr], Field(description="How the technicalTags are filtered.")] = None,
        not_in_run: Annotated[Optional[StrictStr], Field(description="When set to true, the data will be filtered on data which is not used in a run.")] = None,
        not_linked_to_sample: Annotated[Optional[StrictStr], Field(description="When set to true only date that is unlinked to a sample will be returned.  This filter implies a filter of type File.")] = None,
        instrument_run_id: Annotated[Optional[List[StrictStr]], Field(description="The instrument run IDs of the sequencing runs to filter on.")] = None,
        page_offset: Annotated[Optional[StrictStr], Field(description="[only use with offset-based paging]<br>The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="[only use with cursor-based paging]<br>The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="[can be used with both offset- and cursor-based paging]<br>The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="[only use with offset-based paging]<br>Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2 desc\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve the list of bundle data.


        :param bundle_id: (required)
        :type bundle_id: str
        :param full_text: To search through multiple fields of data.
        :type full_text: str
        :param id: The ids to filter on. This will always match exact.
        :type id: str
        :param filename: The filenames to filter on. The filenameMatchMode-parameter determines how the filtering is done.
        :type filename: str
        :param filename_match_mode: How the filenames are filtered.
        :type filename_match_mode: str
        :param file_path: The paths of the files to filter on.
        :type file_path: str
        :param file_path_match_mode: How the file paths are filtered:   - STARTS_WITH_CASE_INSENSITIVE: Filters the file path to start with the value of the 'filePath' parameter, regardless of upper/lower casing. This allows e.g. listing all data in a folder and all it's sub-folders (recursively).  - FULL_CASE_INSENSITIVE: Filters the file path to fully match the value of the 'filePath' parameter, regardless of upper/lower casing. Note that this can result in multiple results if e.g. two files exist with the same filename but different casing (abc.txt and ABC.txt).
        :type file_path_match_mode: str
        :param status: The statuses to filter on.
        :type status: str
        :param format_id: The IDs of the formats to filter on.
        :type format_id: str
        :param format_code: The codes of the formats to filter on.
        :type format_code: str
        :param type: The type to filter on.
        :type type: str
        :param parent_folder_id: The IDs of parents folders to filter on. Lists all files and folders within the folder for the given ID, non-recursively.
        :type parent_folder_id: str
        :param parent_folder_path: The full path of the parent folder. Should start and end with a '/'. Lists all files and folders within the folder for the given path, non-recursively. This can be used to browse through the hierarchical tree of folders, e.g. traversing one level up can be done by removing the last part of the path. This does not work for contents from a linked folder apposed to individual linked files.
        :type parent_folder_path: str
        :param creation_date_after: The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z
        :type creation_date_after: str
        :param creation_date_before: The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z
        :type creation_date_before: str
        :param status_date_after: The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z
        :type status_date_after: str
        :param status_date_before: The date before which the status has been updated Format: yyyy-MM-dd'T'HH:mm:ss'Z' eg: 2021-01-30T08:30:00Z
        :type status_date_before: str
        :param user_tag: The usertags to filter on. The userTagMatchMode-parameter determines how the filtering is done.
        :type user_tag: str
        :param user_tag_match_mode: How the usertags are filtered.
        :type user_tag_match_mode: str
        :param run_input_tag: The runInputTags to filter on. The runInputTagMatchMode-parameter determines how the filtering is done.
        :type run_input_tag: str
        :param run_input_tag_match_mode: How the runInputTags are filtered.
        :type run_input_tag_match_mode: str
        :param run_output_tag: The runOutputTags to filter on. The runOutputTagMatchMode-parameter determines how the filtering is done.
        :type run_output_tag: str
        :param run_output_tag_match_mode: How the runOutputTags are filtered.
        :type run_output_tag_match_mode: str
        :param connector_tag: The connectorTags to filter on. The connectorTagMatchMode-parameter determines how the filtering is done.
        :type connector_tag: str
        :param connector_tag_match_mode: How the connectorTags are filtered.
        :type connector_tag_match_mode: str
        :param technical_tag: The technicalTags to filter on. The techTagMatchMode-parameter determines how the filtering is done.
        :type technical_tag: str
        :param technical_tag_match_mode: How the technicalTags are filtered.
        :type technical_tag_match_mode: str
        :param not_in_run: When set to true, the data will be filtered on data which is not used in a run.
        :type not_in_run: str
        :param not_linked_to_sample: When set to true only date that is unlinked to a sample will be returned.  This filter implies a filter of type File.
        :type not_linked_to_sample: str
        :param instrument_run_id: The instrument run IDs of the sequencing runs to filter on.
        :type instrument_run_id: List[str]
        :param page_offset: [only use with offset-based paging]<br>The amount of rows to skip in the result. Ideally this is a multiple of the size parameter. Offset-based pagination has a result limit of 200K rows and does not guarantee unique results across pages
        :type page_offset: str
        :param page_token: [only use with cursor-based paging]<br>The cursor to get subsequent results. The value to use is returned in the result when using cursor-based pagination. Cursor-based pagination guarantees complete and unique results across all pages.
        :type page_token: str
        :param page_size: [can be used with both offset- and cursor-based paging]<br>The amount of rows to return. Use in combination with the offset (when using offset-based pagination) or cursor (when using cursor-based pagination) parameter to get subsequent results
        :type page_size: str
        :param sort: [only use with offset-based paging]<br>Which field to order the results by. The default order is ascending, suffix with ' desc' to sort descending (suffix ' asc' also works for ascending). Multiple values should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2 desc\"  The attributes for which sorting is supported: - timeCreated - timeModified - name - path - fileSizeInBytes - status - format - dataType - willBeArchivedAt - willBeDeletedAt
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_bundle_data_serialize(
            bundle_id=bundle_id,
            full_text=full_text,
            id=id,
            filename=filename,
            filename_match_mode=filename_match_mode,
            file_path=file_path,
            file_path_match_mode=file_path_match_mode,
            status=status,
            format_id=format_id,
            format_code=format_code,
            type=type,
            parent_folder_id=parent_folder_id,
            parent_folder_path=parent_folder_path,
            creation_date_after=creation_date_after,
            creation_date_before=creation_date_before,
            status_date_after=status_date_after,
            status_date_before=status_date_before,
            user_tag=user_tag,
            user_tag_match_mode=user_tag_match_mode,
            run_input_tag=run_input_tag,
            run_input_tag_match_mode=run_input_tag_match_mode,
            run_output_tag=run_output_tag,
            run_output_tag_match_mode=run_output_tag_match_mode,
            connector_tag=connector_tag,
            connector_tag_match_mode=connector_tag_match_mode,
            technical_tag=technical_tag,
            technical_tag_match_mode=technical_tag_match_mode,
            not_in_run=not_in_run,
            not_linked_to_sample=not_linked_to_sample,
            instrument_run_id=instrument_run_id,
            page_offset=page_offset,
            page_token=page_token,
            page_size=page_size,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BundleDataPagedList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_bundle_data_serialize(
        self,
        bundle_id,
        full_text,
        id,
        filename,
        filename_match_mode,
        file_path,
        file_path_match_mode,
        status,
        format_id,
        format_code,
        type,
        parent_folder_id,
        parent_folder_path,
        creation_date_after,
        creation_date_before,
        status_date_after,
        status_date_before,
        user_tag,
        user_tag_match_mode,
        run_input_tag,
        run_input_tag_match_mode,
        run_output_tag,
        run_output_tag_match_mode,
        connector_tag,
        connector_tag_match_mode,
        technical_tag,
        technical_tag_match_mode,
        not_in_run,
        not_linked_to_sample,
        instrument_run_id,
        page_offset,
        page_token,
        page_size,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'instrumentRunId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if bundle_id is not None:
            _path_params['bundleId'] = bundle_id
        # process the query parameters
        if full_text is not None:
            
            _query_params.append(('fullText', full_text))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if filename is not None:
            
            _query_params.append(('filename', filename))
            
        if filename_match_mode is not None:
            
            _query_params.append(('filenameMatchMode', filename_match_mode))
            
        if file_path is not None:
            
            _query_params.append(('filePath', file_path))
            
        if file_path_match_mode is not None:
            
            _query_params.append(('filePathMatchMode', file_path_match_mode))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if format_id is not None:
            
            _query_params.append(('formatId', format_id))
            
        if format_code is not None:
            
            _query_params.append(('formatCode', format_code))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if parent_folder_id is not None:
            
            _query_params.append(('parentFolderId', parent_folder_id))
            
        if parent_folder_path is not None:
            
            _query_params.append(('parentFolderPath', parent_folder_path))
            
        if creation_date_after is not None:
            
            _query_params.append(('creationDateAfter', creation_date_after))
            
        if creation_date_before is not None:
            
            _query_params.append(('creationDateBefore', creation_date_before))
            
        if status_date_after is not None:
            
            _query_params.append(('statusDateAfter', status_date_after))
            
        if status_date_before is not None:
            
            _query_params.append(('statusDateBefore', status_date_before))
            
        if user_tag is not None:
            
            _query_params.append(('userTag', user_tag))
            
        if user_tag_match_mode is not None:
            
            _query_params.append(('userTagMatchMode', user_tag_match_mode))
            
        if run_input_tag is not None:
            
            _query_params.append(('runInputTag', run_input_tag))
            
        if run_input_tag_match_mode is not None:
            
            _query_params.append(('runInputTagMatchMode', run_input_tag_match_mode))
            
        if run_output_tag is not None:
            
            _query_params.append(('runOutputTag', run_output_tag))
            
        if run_output_tag_match_mode is not None:
            
            _query_params.append(('runOutputTagMatchMode', run_output_tag_match_mode))
            
        if connector_tag is not None:
            
            _query_params.append(('connectorTag', connector_tag))
            
        if connector_tag_match_mode is not None:
            
            _query_params.append(('connectorTagMatchMode', connector_tag_match_mode))
            
        if technical_tag is not None:
            
            _query_params.append(('technicalTag', technical_tag))
            
        if technical_tag_match_mode is not None:
            
            _query_params.append(('technicalTagMatchMode', technical_tag_match_mode))
            
        if not_in_run is not None:
            
            _query_params.append(('notInRun', not_in_run))
            
        if not_linked_to_sample is not None:
            
            _query_params.append(('notLinkedToSample', not_linked_to_sample))
            
        if instrument_run_id is not None:
            
            _query_params.append(('instrumentRunId', instrument_run_id))
            
        if page_offset is not None:
            
            _query_params.append(('pageOffset', page_offset))
            
        if page_token is not None:
            
            _query_params.append(('pageToken', page_token))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/problem+json', 
                    'application/vnd.illumina.v3+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'JwtAuth', 
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/bundles/{bundleId}/data',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def link_data_to_bundle(
        self,
        bundle_id: StrictStr,
        data_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Link data to this bundle.


        :param bundle_id: (required)
        :type bundle_id: str
        :param data_id: (required)
        :type data_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._link_data_to_bundle_serialize(
            bundle_id=bundle_id,
            data_id=data_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def link_data_to_bundle_with_http_info(
        self,
        bundle_id: StrictStr,
        data_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Link data to this bundle.


        :param bundle_id: (required)
        :type bundle_id: str
        :param data_id: (required)
        :type data_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._link_data_to_bundle_serialize(
            bundle_id=bundle_id,
            data_id=data_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def link_data_to_bundle_without_preload_content(
        self,
        bundle_id: StrictStr,
        data_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Link data to this bundle.


        :param bundle_id: (required)
        :type bundle_id: str
        :param data_id: (required)
        :type data_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._link_data_to_bundle_serialize(
            bundle_id=bundle_id,
            data_id=data_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _link_data_to_bundle_serialize(
        self,
        bundle_id,
        data_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if bundle_id is not None:
            _path_params['bundleId'] = bundle_id
        if data_id is not None:
            _path_params['dataId'] = data_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'JwtAuth', 
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/bundles/{bundleId}/data/{dataId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def unlink_data_from_bundle(
        self,
        bundle_id: StrictStr,
        data_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Unlink data from this bundle.

        Note that for folders, this only unlinks the folder itself, not the folder contents!  Use 'Bundle Data Unlinking Batch' for recursive unlinking.

        :param bundle_id: (required)
        :type bundle_id: str
        :param data_id: (required)
        :type data_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._unlink_data_from_bundle_serialize(
            bundle_id=bundle_id,
            data_id=data_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def unlink_data_from_bundle_with_http_info(
        self,
        bundle_id: StrictStr,
        data_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Unlink data from this bundle.

        Note that for folders, this only unlinks the folder itself, not the folder contents!  Use 'Bundle Data Unlinking Batch' for recursive unlinking.

        :param bundle_id: (required)
        :type bundle_id: str
        :param data_id: (required)
        :type data_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._unlink_data_from_bundle_serialize(
            bundle_id=bundle_id,
            data_id=data_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def unlink_data_from_bundle_without_preload_content(
        self,
        bundle_id: StrictStr,
        data_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Unlink data from this bundle.

        Note that for folders, this only unlinks the folder itself, not the folder contents!  Use 'Bundle Data Unlinking Batch' for recursive unlinking.

        :param bundle_id: (required)
        :type bundle_id: str
        :param data_id: (required)
        :type data_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._unlink_data_from_bundle_serialize(
            bundle_id=bundle_id,
            data_id=data_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _unlink_data_from_bundle_serialize(
        self,
        bundle_id,
        data_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if bundle_id is not None:
            _path_params['bundleId'] = bundle_id
        if data_id is not None:
            _path_params['dataId'] = data_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/problem+json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'JwtAuth', 
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/bundles/{bundleId}/data/{dataId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


