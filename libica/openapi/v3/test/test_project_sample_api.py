# coding: utf-8

"""
    ICA Rest API

    This API can be used to interact with Illumina Connected Analytics.<br> <h2>Authentication</h2> <p> Authentication to the  API can be done in multiple ways:<br> <ul><li>For the entire API, except for the POST /tokens endpoint: API-key + JWT</li> <li>Only for the POST /tokens endpoint: API-key + Basic Authentication</li></ul> </p> <p> <h4>API-key</h4> API keys are managed within the Illumina portal where you can manage your profile after you have logged on. The API-key has to be provided in the X-API-Key header parameter when executing API calls to ICA. In the background, a JWT will be requested at the IDP of Illumina to create a session. A good practice is to not use the API-key for every API call, but to first generate a JWT and to use that for authentication in subsequent calls.<br> </p> <p> <h4>JWT</h4> To avoid using an API-key for each call, we recommend to request a JWT via the POST /tokens endpoint  using this API-key. The JWT will expire after a pre-configured period specified by a tenant administrator through the IAM console in the Illumina portal. The JWT is the preferred way for authentication.<br>A not yet expired, still valid JWT could be refreshed using the POST /tokens:refresh endpoint.<br>Refreshing the JWT is not possible if the JWT was generated by using an API-key.<br> </p> <p> <h4>Basic Authentication</h4> Basic authentication is only supported by the POST /tokens endpoint for generating a JWT. Use \"Basic base64encoded(emailaddress:password)\" in the \"Authorization\" header parameter for this authentication method. In case having access to multiple tenants using the same email-address, also provide the \"tenant\" request parameter to indicate what tenant you would like to request a JWT for. </p> <p> <h2>Compression</h2> If the API client provides request header 'Accept-Encoding' with value 'gzip', then the API applies GZIP compression on the JSON response. This significantly reduces the size and thus the download time of the response, which results in faster end-to-end API calls. In case of compression, the API also provides response header 'Content-Encoding' with value 'gzip', as indication for the client that decompression is required. </p> 

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from libica.openapi.v3.api.project_sample_api import ProjectSampleApi


class TestProjectSampleApi(unittest.TestCase):
    """ProjectSampleApi unit test stubs"""

    def setUp(self) -> None:
        self.api = ProjectSampleApi()

    def tearDown(self) -> None:
        pass

    def test_add_metadata_model_to_sample(self) -> None:
        """Test case for add_metadata_model_to_sample

        Add a metadata model to a sample.
        """
        pass

    def test_complete_project_sample(self) -> None:
        """Test case for complete_project_sample

        Completes the sample after data has been linked to it.
        """
        pass

    def test_create_sample_in_project(self) -> None:
        """Test case for create_sample_in_project

        Create a new sample in this project
        """
        pass

    def test_deep_delete_sample(self) -> None:
        """Test case for deep_delete_sample

        Delete a sample together with all of its data.
        """
        pass

    def test_delete_and_unlink_sample(self) -> None:
        """Test case for delete_and_unlink_sample

        Delete a sample and unlink its data.
        """
        pass

    def test_delete_sample_with_input(self) -> None:
        """Test case for delete_sample_with_input

        Delete a sample as well as its input data.
        """
        pass

    def test_get_project_sample(self) -> None:
        """Test case for get_project_sample

        Retrieve a project sample.
        """
        pass

    def test_get_project_sample_analyses(self) -> None:
        """Test case for get_project_sample_analyses

        Retrieve the list of analyses.
        """
        pass

    def test_get_project_samples(self) -> None:
        """Test case for get_project_samples

        Retrieve project samples.
        """
        pass

    def test_get_projects_for_sample(self) -> None:
        """Test case for get_projects_for_sample

        Retrieve a list of projects for this sample.
        """
        pass

    def test_get_sample_data_list(self) -> None:
        """Test case for get_sample_data_list

        Retrieve the list of sample data.
        """
        pass

    def test_get_sample_history(self) -> None:
        """Test case for get_sample_history

        Retrieve sample history.
        """
        pass

    def test_get_sample_metadata_field(self) -> None:
        """Test case for get_sample_metadata_field

        Retrieve a metadata field.
        """
        pass

    def test_get_sample_metadata_field_count(self) -> None:
        """Test case for get_sample_metadata_field_count

        Retrieves the number of occurrences of a given field.
        """
        pass

    def test_link_data_to_sample(self) -> None:
        """Test case for link_data_to_sample

        Link data to a sample.
        """
        pass

    def test_link_sample_to_project(self) -> None:
        """Test case for link_sample_to_project

        Link a sample to a project.
        """
        pass

    def test_mark_sample_deleted(self) -> None:
        """Test case for mark_sample_deleted

        Mark a sample deleted.
        """
        pass

    def test_search_project_sample_analyses(self) -> None:
        """Test case for search_project_sample_analyses

        Search analyses for sample.
        """
        pass

    def test_unlink_data_from_sample(self) -> None:
        """Test case for unlink_data_from_sample

        Unlink data from a sample.
        """
        pass

    def test_unlink_sample_from_project(self) -> None:
        """Test case for unlink_sample_from_project

        Unlink a sample from a project.
        """
        pass

    def test_update_project_sample(self) -> None:
        """Test case for update_project_sample

        Update a project sample.
        """
        pass

    def test_update_sample_metadata_fields(self) -> None:
        """Test case for update_sample_metadata_fields

        Update metadata fields.
        """
        pass


if __name__ == '__main__':
    unittest.main()
