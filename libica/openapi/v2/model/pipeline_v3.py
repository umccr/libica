"""
    ICA Rest API

    This API can be used to interact with Illumina Connected Analytics.<br> <h2>Authentication</h2> <p> Authentication to the  API can be done in multiple ways:<br> <ul><li>For the entire API, except for the POST /tokens endpoint: API-key + JWT</li> <li>Only for the POST /tokens endpoint: API-key + Basic Authentication</li></ul> </p> <p> <h4>API-key</h4> API keys are managed within the Illumina portal where you can manage your profile after you have logged on. The API-key has to be provided in the X-API-Key header parameter when executing API calls to ICA. In the background, a JWT will be requested at the IDP of Illumina to create a session. A good practice is to not use the API-key for every API call, but to first generate a JWT and to use that for authentication in subsequent calls.<br> </p> <p> <h4>JWT</h4> To avoid using an API-key for each call, we recommend to request a JWT via the POST /tokens endpoint  using this API-key. The JWT will expire after a pre-configured period specified by a tenant administrator through the IAM console in the Illumina portal. The JWT is the preferred way for authentication.<br>A not yet expired, still valid JWT could be refreshed using the POST /tokens:refresh endpoint.<br>Refreshing the JWT is not possible if the JWT was generated by using an API-key.<br> </p> <p> <h4>Basic Authentication</h4> Basic authentication is only supported by the POST /tokens endpoint for generating a JWT. Use \"Basic base64encoded(emailaddress:password)\" in the \"Authorization\" header parameter for this authentication method. In case having access to multiple tenants using the same email-address, also provide the \"tenant\" request parameter to indicate what tenant you would like to request a JWT for. </p> <p> <h2>Compression</h2> If the API client provides request header 'Accept-Encoding' with value 'gzip', then the API applies GZIP compression on the JSON response. This significantly reduces the size and thus the download time of the response, which results in faster end-to-end API calls. In case of compression, the API also provides response header 'Content-Encoding' with value 'gzip', as indication for the client that decompression is required. </p>   # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from libica.openapi.v2.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from libica.openapi.v2.exceptions import ApiAttributeError


def lazy_import():
    from libica.openapi.v2.model.analysis_storage_v3 import AnalysisStorageV3
    from libica.openapi.v2.model.pipeline_language_version import PipelineLanguageVersion
    from libica.openapi.v2.model.pipeline_tag import PipelineTag
    globals()['AnalysisStorageV3'] = AnalysisStorageV3
    globals()['PipelineLanguageVersion'] = PipelineLanguageVersion
    globals()['PipelineTag'] = PipelineTag


class PipelineV3(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('language',): {
            'CWL': "CWL",
            'NEXTFLOW': "NEXTFLOW",
            'UNKNOWN': "UNKNOWN",
        },
        ('status',): {
            'None': None,
            'DRAFT': "DRAFT",
            'RELEASED': "RELEASED",
        },
        ('input_form_type',): {
            'XML': "XML",
            'JSON': "JSON",
        },
    }

    validations = {
        ('code',): {
            'max_length': 255,
            'min_length': 1,
        },
        ('description',): {
            'max_length': 4000,
            'min_length': 1,
        },
        ('urn',): {
            'max_length': 2000,
            'min_length': 1,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (str,),  # noqa: E501
            'time_created': (datetime,),  # noqa: E501
            'time_modified': (datetime,),  # noqa: E501
            'owner_id': (str,),  # noqa: E501
            'tenant_id': (str,),  # noqa: E501
            'code': (str,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'language': (str,),  # noqa: E501
            'pipeline_tags': (PipelineTag,),  # noqa: E501
            'analysis_storage': (AnalysisStorageV3,),  # noqa: E501
            'tenant_name': (str, none_type,),  # noqa: E501
            'urn': (str, none_type,),  # noqa: E501
            'status': (str, none_type,),  # noqa: E501
            'language_version': (PipelineLanguageVersion,),  # noqa: E501
            'proprietary': (bool, none_type,),  # noqa: E501
            'input_form_type': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'time_created': 'timeCreated',  # noqa: E501
        'time_modified': 'timeModified',  # noqa: E501
        'owner_id': 'ownerId',  # noqa: E501
        'tenant_id': 'tenantId',  # noqa: E501
        'code': 'code',  # noqa: E501
        'description': 'description',  # noqa: E501
        'language': 'language',  # noqa: E501
        'pipeline_tags': 'pipelineTags',  # noqa: E501
        'analysis_storage': 'analysisStorage',  # noqa: E501
        'tenant_name': 'tenantName',  # noqa: E501
        'urn': 'urn',  # noqa: E501
        'status': 'status',  # noqa: E501
        'language_version': 'languageVersion',  # noqa: E501
        'proprietary': 'proprietary',  # noqa: E501
        'input_form_type': 'inputFormType',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, id, time_created, time_modified, owner_id, tenant_id, code, description, language, pipeline_tags, analysis_storage, *args, **kwargs):  # noqa: E501
        """PipelineV3 - a model defined in OpenAPI

        Args:
            id (str):
            time_created (datetime):
            time_modified (datetime):
            owner_id (str):
            tenant_id (str):
            code (str): The code of the pipeline
            description (str): The description of the pipeline
            language (str): The language that is used by the pipeline
            pipeline_tags (PipelineTag):
            analysis_storage (AnalysisStorageV3):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            tenant_name (str, none_type): [optional]  # noqa: E501
            urn (str, none_type): The URN of the pipeline. The format is urn:ilmn:ica:\\<type of the object\\>:\\<ID of the object\\>#\\<optional human readable hint representing the object\\>. The hint can be omitted, in that case the hashtag (#) must also be omitted.. [optional]  # noqa: E501
            status (str, none_type): The status of the pipeline. [optional]  # noqa: E501
            language_version (PipelineLanguageVersion): [optional]  # noqa: E501
            proprietary (bool, none_type): A boolean which indicates if the code of this pipeline is proprietary. [optional] if omitted the server will use the default value of False  # noqa: E501
            input_form_type (str): The type of the inputform used.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.time_created = time_created
        self.time_modified = time_modified
        self.owner_id = owner_id
        self.tenant_id = tenant_id
        self.code = code
        self.description = description
        self.language = language
        self.pipeline_tags = pipeline_tags
        self.analysis_storage = analysis_storage
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, id, time_created, time_modified, owner_id, tenant_id, code, description, language, pipeline_tags, analysis_storage, *args, **kwargs):  # noqa: E501
        """PipelineV3 - a model defined in OpenAPI

        Args:
            id (str):
            time_created (datetime):
            time_modified (datetime):
            owner_id (str):
            tenant_id (str):
            code (str): The code of the pipeline
            description (str): The description of the pipeline
            language (str): The language that is used by the pipeline
            pipeline_tags (PipelineTag):
            analysis_storage (AnalysisStorageV3):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            tenant_name (str, none_type): [optional]  # noqa: E501
            urn (str, none_type): The URN of the pipeline. The format is urn:ilmn:ica:\\<type of the object\\>:\\<ID of the object\\>#\\<optional human readable hint representing the object\\>. The hint can be omitted, in that case the hashtag (#) must also be omitted.. [optional]  # noqa: E501
            status (str, none_type): The status of the pipeline. [optional]  # noqa: E501
            language_version (PipelineLanguageVersion): [optional]  # noqa: E501
            proprietary (bool, none_type): A boolean which indicates if the code of this pipeline is proprietary. [optional] if omitted the server will use the default value of False  # noqa: E501
            input_form_type (str): The type of the inputform used.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.time_created = time_created
        self.time_modified = time_modified
        self.owner_id = owner_id
        self.tenant_id = tenant_id
        self.code = code
        self.description = description
        self.language = language
        self.pipeline_tags = pipeline_tags
        self.analysis_storage = analysis_storage
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
