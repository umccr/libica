openapi: 3.0.1
info:
  title: ICA Rest API
  description: "This API can be used to interact with Illumina Connected Analytics.<br>\n\
    <h2>Authentication</h2>\n<p>\nAuthentication to the  API can be done in multiple\
    \ ways:<br>\n<ul><li>For the entire API, except for the POST /tokens endpoint:\
    \ API-key + JWT</li>\n<li>Only for the POST /tokens endpoint: API-key + Basic\
    \ Authentication</li></ul>\n</p>\n<p>\n<h4>API-key</h4>\nAPI keys are managed\
    \ within the Illumina portal where you can manage your profile after you have\
    \ logged on. The API-key has to be provided in the X-API-Key header parameter\
    \ when executing API calls to ICA. In the background, a JWT will be requested\
    \ at the IDP of Illumina to create a session. A good practice is to not use the\
    \ API-key for every API call, but to first generate a JWT and to use that for\
    \ authentication in subsequent calls.<br>\n</p>\n<p>\n<h4>JWT</h4>\nTo avoid using\
    \ an API-key for each call, we recommend to request a JWT via the POST /tokens\
    \ endpoint  using this API-key. The JWT will expire after a pre-configured period\
    \ specified by a tenant administrator through the IAM console in the Illumina\
    \ portal. The JWT is the preferred way for authentication.<br>A not yet expired,\
    \ still valid JWT could be refreshed using the POST /tokens:refresh endpoint.<br>Refreshing\
    \ the JWT is not possible if the JWT was generated by using an API-key.<br>\n\
    </p>\n<p>\n<h4>Basic Authentication</h4>\nBasic authentication is only supported\
    \ by the POST /tokens endpoint for generating a JWT. Use \"Basic base64encoded(emailaddress:password)\"\
    \ in the \"Authorization\" header parameter for this authentication method. In\
    \ case having access to multiple tenants using the same email-address, also provide\
    \ the \"tenant\" request parameter to indicate what tenant you would like to request\
    \ a JWT for.\n</p>\n<p>\n<h2>Compression</h2>\nIf the API client provides request\
    \ header 'Accept-Encoding' with value 'gzip', then the API applies GZIP compression\
    \ on the JSON response. This significantly reduces the size and thus the download\
    \ time of the response, which results in faster end-to-end API calls. In case\
    \ of compression, the API also provides response header 'Content-Encoding' with\
    \ value 'gzip', as indication for the client that decompression is required.\n\
    </p>\n"
  version: "3"
servers:
- url: /ica/rest
security:
- JwtAuth: []
- ApiKeyAuth: []
paths:
  /api/analysisStorages:
    get:
      tags:
      - Analysis Storage
      summary: Retrieve the list of analysis storage options.
      description: This endpoint only returns V3 items. Use the search project analysis
        storage endpoint to get V4 items.
      operationId: getAnalysisStorageOptions
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of analysis storage options is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/AnalysisStorageListV3'
      deprecated: true
  /api/bundles:
    get:
      tags:
      - Bundle
      summary: Retrieve a list of bundles.
      operationId: getBundles
      parameters:
      - name: search
        in: query
        description: Search
        schema:
          type: string
      - name: userTags
        in: query
        description: User tags to filter on
        schema:
          type: string
      - name: technicalTags
        in: query
        description: Technical tags to filter on
        schema:
          type: string
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\n\nThe attributes for which sorting is supported:\n- name\n- shortDescription"
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of bundles is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/BundlePagedList'
    post:
      tags:
      - Bundle
      summary: Create a new bundle
      operationId: createBundle
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateBundle'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBundle'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The bundle is successfully created.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/Bundle'
  /api/bundles/{bundleId}:
    get:
      tags:
      - Bundle
      summary: Retrieve a bundle.
      operationId: getBundle
      parameters:
      - name: bundleId
        in: path
        description: The ID of the bundle to retrieve
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The bundle is successfully retrieved.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/Bundle'
  /api/bundles/{bundleId}/termsOfUse:accept:
    post:
      tags:
      - Bundle
      summary: accept terms of use for a bundle
      operationId: acceptTermsOfUseBundle
      parameters:
      - name: bundleId
        in: path
        description: The ID of the bundle where the terms of use are accepted of.
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The terms of use of the bundle is accepted
  /api/bundles/{bundleId}:release:
    post:
      tags:
      - Bundle
      summary: release a bundle
      operationId: releaseBundle
      parameters:
      - name: bundleId
        in: path
        description: The ID of the bundle to release
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The bundle is successfully released
  /api/bundles/{bundleId}/termsOfUse:
    get:
      tags:
      - Bundle
      summary: Retrieve the last version of terms of use for a bundle.
      operationId: getBundleTermsOfUse
      parameters:
      - name: bundleId
        in: path
        description: The ID of the bundle of the terms of use to retrieve
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: Terms of use are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/TermsOfUse'
  /api/bundles/{bundleId}/termsOfUse/userAcceptance/currentUser:
    get:
      tags:
      - Bundle
      summary: Retrieve the acceptance record for a bundle for the current user.
      operationId: getTermsOfUseAcceptance
      parameters:
      - name: bundleId
        in: path
        description: The ID of the bundle of the terms of use acceptance records.
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: Terms of use acceptance is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/TermsOfUseAcceptance'
  /api/bundles/{bundleId}/termsOfUse:new:
    post:
      tags:
      - Bundle
      summary: Insert a new version of the terms of use for a bundle
      operationId: insertBundleTermsOfUse
      parameters:
      - name: bundleId
        in: path
        description: The ID of the bundle to update
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateTermsOfUse'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateTermsOfUse'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTermsOfUse'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: A new version of the terms of use are successfully created.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/TermsOfUse'
  /api/bundles/{bundleId}:deprecate:
    post:
      tags:
      - Bundle
      summary: deprecate a bundle
      operationId: deprecateBundle
      parameters:
      - name: bundleId
        in: path
        description: The ID of the bundle to deprecate.
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The bundle is successfully deprecated.
  /api/bundles/{bundleId}/data:
    get:
      tags:
      - Bundle Data
      summary: Retrieve the list of bundle data.
      operationId: getBundleData
      parameters:
      - name: fullText
        in: query
        description: To search through multiple fields of data.
        schema:
          type: string
      - name: id
        in: query
        description: The ids to filter on. This will always match exact.
        schema:
          type: string
      - name: filename
        in: query
        description: The filenames to filter on. The filenameMatchMode-parameter determines
          how the filtering is done.
        schema:
          type: string
      - name: filenameMatchMode
        in: query
        description: How the filenames are filtered.
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: filePath
        in: query
        description: The paths of the files to filter on.
        schema:
          type: string
      - name: filePathMatchMode
        in: query
        description: "How the file paths are filtered: \n - STARTS_WITH_CASE_INSENSITIVE:\
          \ Filters the file path to start with the value of the 'filePath' parameter,\
          \ regardless of upper/lower casing. This allows e.g. listing all data in\
          \ a folder and all it's sub-folders (recursively).\n - FULL_CASE_INSENSITIVE:\
          \ Filters the file path to fully match the value of the 'filePath' parameter,\
          \ regardless of upper/lower casing. Note that this can result in multiple\
          \ results if e.g. two files exist with the same filename but different casing\
          \ (abc.txt and ABC.txt)."
        schema:
          type: string
          default: STARTS_WITH_CASE_INSENSITIVE
          enum:
          - STARTS_WITH_CASE_INSENSITIVE
          - FULL_CASE_INSENSITIVE
      - name: status
        in: query
        description: The statuses to filter on.
        schema:
          type: string
          enum:
          - PARTIAL
          - AVAILABLE
          - ARCHIVING
          - ARCHIVED
          - UNARCHIVING
          - DELETING
      - name: formatId
        in: query
        description: The IDs of the formats to filter on.
        schema:
          type: string
      - name: formatCode
        in: query
        description: The codes of the formats to filter on.
        schema:
          type: string
      - name: type
        in: query
        description: The type to filter on.
        schema:
          type: string
          enum:
          - FILE
          - FOLDER
      - name: parentFolderId
        in: query
        description: "The IDs of parents folders to filter on. Lists all files and\
          \ folders within the folder for the given ID, non-recursively."
        schema:
          type: string
      - name: parentFolderPath
        in: query
        description: "The full path of the parent folder. Should start and end with\
          \ a '/'. Lists all files and folders within the folder for the given path,\
          \ non-recursively. This can be used to browse through the hierarchical tree\
          \ of folders, e.g. traversing one level up can be done by removing the last\
          \ part of the path. This does not work for contents from a linked folder\
          \ apposed to individual linked files."
        schema:
          type: string
      - name: creationDateAfter
        in: query
        description: "The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z'\
          \ eg: 2021-01-30T08:30:00Z"
        schema:
          type: string
      - name: creationDateBefore
        in: query
        description: "The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z'\
          \ eg: 2021-01-30T08:30:00Z"
        schema:
          type: string
      - name: statusDateAfter
        in: query
        description: "The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z'\
          \ eg: 2021-01-30T08:30:00Z"
        schema:
          type: string
      - name: statusDateBefore
        in: query
        description: "The date before which the status has been updated Format: yyyy-MM-dd'T'HH:mm:ss'Z'\
          \ eg: 2021-01-30T08:30:00Z"
        schema:
          type: string
      - name: userTag
        in: query
        description: The usertags to filter on. The userTagMatchMode-parameter determines
          how the filtering is done.
        schema:
          type: string
      - name: userTagMatchMode
        in: query
        description: How the usertags are filtered.
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: runInputTag
        in: query
        description: The runInputTags to filter on. The runInputTagMatchMode-parameter
          determines how the filtering is done.
        schema:
          type: string
      - name: runInputTagMatchMode
        in: query
        description: How the runInputTags are filtered.
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: runOutputTag
        in: query
        description: The runOutputTags to filter on. The runOutputTagMatchMode-parameter
          determines how the filtering is done.
        schema:
          type: string
      - name: runOutputTagMatchMode
        in: query
        description: How the runOutputTags are filtered.
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: connectorTag
        in: query
        description: The connectorTags to filter on. The connectorTagMatchMode-parameter
          determines how the filtering is done.
        schema:
          type: string
      - name: connectorTagMatchMode
        in: query
        description: How the connectorTags are filtered.
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: technicalTag
        in: query
        description: The technicalTags to filter on. The techTagMatchMode-parameter
          determines how the filtering is done.
        schema:
          type: string
      - name: technicalTagMatchMode
        in: query
        description: How the technicalTags are filtered.
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: notInRun
        in: query
        description: "When set to true, the data will be filtered on data which is\
          \ not used in a run."
        schema:
          type: string
      - name: notLinkedToSample
        in: query
        description: When set to true only date that is unlinked to a sample will
          be returned.  This filter implies a filter of type File.
        schema:
          type: string
      - name: instrumentRunId
        in: query
        description: The instrument run IDs of the sequencing runs to filter on.
        schema:
          type: array
          items:
            type: string
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\n\nThe attributes for which sorting is supported:\n- timeCreated\n\
          - timeModified\n- name\n- path\n- fileSizeInBytes\n- status\n- format\n\
          - dataType\n- willBeArchivedAt\n- willBeDeletedAt"
        schema:
          type: string
      - name: bundleId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of bundle data is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/BundleDataPagedList'
  /api/bundles/{bundleId}/data/{dataId}:
    post:
      tags:
      - Bundle Data
      summary: Link data to this bundle.
      operationId: linkDataToBundle
      parameters:
      - name: bundleId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The data is successfully linked to this bundle.
    delete:
      tags:
      - Bundle Data
      summary: Unlink data from this bundle.
      description: "Note that for folders, this only unlinks the folder itself, not\
        \ the folder contents!  Use 'Bundle Data Unlinking Batch' for recursive unlinking."
      operationId: unlinkDataFromBundle
      parameters:
      - name: bundleId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The data is successfully unlinked from this bundle.
  /api/bundles/{bundleId}/dataLinkingBatch:
    post:
      tags:
      - Bundle Data Linking Batch
      summary: Create a bundle data linking batch.
      operationId: createBundleDataLinkingBatch
      parameters:
      - name: bundleId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateBundleDataLinkingBatch'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The bundle data linking batch is successfully created.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/BundleDataLinkingBatch'
  /api/bundles/{bundleId}/dataLinkingBatch/{batchId}:
    get:
      tags:
      - Bundle Data Linking Batch
      summary: Retrieve a bundle data linking batch.
      operationId: getBundleDataLinkingBatch
      parameters:
      - name: bundleId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The bundle data linking batch is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/BundleDataLinkingBatch'
  /api/bundles/{bundleId}/dataLinkingBatch/{batchId}/items:
    get:
      tags:
      - Bundle Data Linking Batch
      summary: Retrieve a list of bundle data linking batch items.
      operationId: getBundleDataLinkingBatchItems
      parameters:
      - name: status
        in: query
        description: The statuses to filter on.
        schema:
          type: array
          items:
            type: string
            enum:
            - INITIALISED
            - WAITING_RESOURCES
            - RUNNING
            - LINKED
            - ALREADY_LINKED
            - FAILED
            - PARTIALLY_LINKED
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: bundleId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of bundle data linking batch items is successfully
            retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/BundleDataLinkingBatchItemPagedList'
  /api/bundles/{bundleId}/dataLinkingBatch/{batchId}/items/{itemId}:
    get:
      tags:
      - Bundle Data Linking Batch
      summary: Retrieve a bundle data linking batch item.
      operationId: getBundleDataLinkingBatchItem
      parameters:
      - name: bundleId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: itemId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The bundle data linking batch item is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/BundleDataLinkingBatchItem'
  /api/bundles/{bundleId}/dataUnlinkingBatch:
    post:
      tags:
      - Bundle Data Unlinking Batch
      summary: Create a bundle data unlinking batch.
      operationId: createBundleDataUnlinkingBatch
      parameters:
      - name: bundleId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateBundleDataUnlinkingBatch'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The bundle data unlinking batch is successfully created.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/BundleDataUnlinkingBatch'
  /api/bundles/{bundleId}/dataUnlinkingBatch/{batchId}:
    get:
      tags:
      - Bundle Data Unlinking Batch
      summary: Retrieve a bundle data unlinking batch.
      operationId: getBundleDataUnlinkingBatch
      parameters:
      - name: bundleId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The bundle data unlinking batch is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/BundleDataUnlinkingBatch'
  /api/bundles/{bundleId}/dataUnlinkingBatch/{batchId}/items:
    get:
      tags:
      - Bundle Data Unlinking Batch
      summary: Retrieve a list of bundle data unlinking batch items.
      operationId: getBundleDataUnlinkingBatchItems
      parameters:
      - name: status
        in: query
        description: The statuses to filter on.
        schema:
          type: array
          items:
            type: string
            enum:
            - INITIALISED
            - WAITING_RESOURCES
            - RUNNING
            - UNLINKED
            - ALREADY_UNLINKED
            - FAILED
            - PARTIALLY_UNLINKED
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\""
        schema:
          type: string
      - name: bundleId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of bundle data unlinking batch items is successfully
            retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/BundleDataUnlinkingBatchItemPagedList'
  /api/bundles/{bundleId}/dataUnlinkingBatch/{batchId}/items/{itemId}:
    get:
      tags:
      - Bundle Data Unlinking Batch
      summary: Retrieve a bundle data unlinking batch item.
      operationId: getBundleDataUnlinkingBatchItem
      parameters:
      - name: bundleId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: itemId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The bundle data unlinking batch item is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/BundleDataUnlinkingBatchItem'
  /api/bundles/{bundleId}/pipelines:
    get:
      tags:
      - Bundle Pipeline
      summary: Retrieve a list of bundle pipelines.
      operationId: getBundlePipelines
      parameters:
      - name: bundleId
        in: path
        description: The ID of the bundle to retrieve pipelines for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of bundle pipelines is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/BundlePipelineList'
  /api/bundles/{bundleId}/pipelines/{pipelineId}:
    post:
      tags:
      - Bundle Pipeline
      summary: Link a pipeline to a bundle.
      operationId: linkPipelineToBundle
      parameters:
      - name: bundleId
        in: path
        description: The ID of the bundle
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the pipeline
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The pipeline is successfully linked to the bundle.
    delete:
      tags:
      - Bundle Pipeline
      summary: Unlink a pipeline from a bundle.
      operationId: unlinkPipelineFromBundle
      parameters:
      - name: bundleId
        in: path
        description: The ID of the bundle
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the pipeline
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The pipeline is successfully unlinked from the bundle.
  /api/bundles/{bundleId}/samples:
    get:
      tags:
      - Bundle Sample
      summary: Retrieve a list of bundle samples.
      operationId: getBundleSamples
      parameters:
      - name: search
        in: query
        description: To search through multiple fields of data.
        schema:
          type: string
      - name: userTags
        in: query
        description: The user tags to filter on.
        schema:
          type: string
      - name: technicalTags
        in: query
        description: The technical tags to filter on.
        schema:
          type: string
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\nThe attributes for which sorting is supported:\n- timeCreated\n\
          - timeModified\n- name\n- description\n- metadataValid\n- status"
        schema:
          type: string
      - name: bundleId
        in: path
        description: The ID of the bundle to get bundle samples from
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of bundle samples are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/BundleSamplePagedList'
  /api/bundles/{bundleId}/samples/{sampleId}:
    post:
      tags:
      - Bundle Sample
      summary: Link a sample to a bundle.
      operationId: linkSampleToBundle
      parameters:
      - name: bundleId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The sample is successfully linked to the bundle.
    delete:
      tags:
      - Bundle Sample
      summary: Unlink a sample from a bundle.
      operationId: unlinkSampleFromBundle
      parameters:
      - name: bundleId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The sample is successfully unlinked from the bundle.
  /api/bundles/{bundleId}/tools:
    get:
      tags:
      - Bundle Tool
      summary: Retrieve a list of bundle tools.
      operationId: getBundleTools
      parameters:
      - name: bundleId
        in: path
        description: The ID of the bundle to get tools from
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of bundle tools is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/BundleToolsList'
  /api/bundles/{bundleId}/tools/eligibleForLinking:
    get:
      tags:
      - Bundle Tool
      summary: Retrieve a list of tools eligible for linking to the bundle.
      operationId: getToolsEligibleForLinkingToBundle
      parameters:
      - name: bundleId
        in: path
        description: The ID of the bundle to get the eligible tools for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of tools is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/CwlToolDefinitionList'
  /api/bundles/{bundleId}/tools/{toolId}:
    post:
      tags:
      - Bundle Tool
      summary: Link a tool to a bundle
      operationId: linkToolToBundle
      parameters:
      - name: bundleId
        in: path
        description: The ID of the bundle to link the tool to
        required: true
        schema:
          type: string
      - name: toolId
        in: path
        description: The ID of the tool to link
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The tool is successfully linked to the bundle.
    delete:
      tags:
      - Bundle Tool
      summary: Unlink a tool from this bundle.
      operationId: unlinkToolFromBundle
      parameters:
      - name: bundleId
        in: path
        required: true
        schema:
          type: string
      - name: toolId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The tool is successfully unlinked from this bundle.
  /api/connectors:
    get:
      tags:
      - Connector
      summary: Retrieve a list of connectors.
      operationId: getConnectors
      parameters:
      - name: activeOnly
        in: query
        description: When true only the active connectors will be returned. When false
          (default value) all connectors wil be returned.
        schema:
          type: boolean
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of connectors is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ConnectorList'
    post:
      tags:
      - Connector
      summary: Create a connector.
      operationId: createConnector
      requestBody:
        description: The connector to create.
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateConnector'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnector'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The connector is successfully created.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/Connector'
  /api/connectors/{connectorId}:
    get:
      tags:
      - Connector
      summary: Retrieve a connector.
      operationId: getConnector
      parameters:
      - name: connectorId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The connector is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/Connector'
  /api/connectors/{connectorId}/uploadRules:
    get:
      tags:
      - Connector
      summary: Retrieve a list of upload rules.
      operationId: getUploadRules
      parameters:
      - name: connectorId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The upload rules are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/UploadRuleList'
    post:
      tags:
      - Connector
      summary: Create an upload rule.
      operationId: createUploadRule
      parameters:
      - name: connectorId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The local folder where to write the data. Leading or trailing
          spaces are not accepted.
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateUploadRule'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUploadRule'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The upload rule is successfully created.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/UploadRule'
  /api/connectors/{connectorId}/uploadRules/{uploadRuleId}:
    get:
      tags:
      - Connector
      summary: Retrieve an upload rule.
      operationId: getUploadRule
      parameters:
      - name: connectorId
        in: path
        required: true
        schema:
          type: string
      - name: uploadRuleId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The upload rule is successfully retrieved.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/UploadRule'
    put:
      tags:
      - Connector
      summary: Update an upload rule.
      description: |
        Fields which can be updated:
         - code
         - active
         - description
         - localFolder
         - filePattern
         - dataFormat
      operationId: updateUploadRule
      parameters:
      - name: connectorId
        in: path
        required: true
        schema:
          type: string
      - name: uploadRuleId
        in: path
        required: true
        schema:
          type: string
      - name: If-Match
        in: header
        description: "Optional header parameter to enable conflict exposure. If the\
          \ client provides this header, then it must contains the client's most recent\
          \ value of the 'ETag' response header, and the server will respond with\
          \ a 409 code if it detects a conflict. If the client does not provide this\
          \ header, then the server will not do a conflict check, which means that\
          \ as a client you can override the resource even when the server has a more\
          \ recent version."
        schema:
          type: string
      requestBody:
        description: The local folder where to write the data. Leading or trailing
          spaces are not accepted.
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/UploadRule'
          application/json:
            schema:
              $ref: '#/components/schemas/UploadRule'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The upload rule is successfully updated.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/UploadRule'
    delete:
      tags:
      - Connector
      summary: Delete an upload rule.
      operationId: deleteUploadRule
      parameters:
      - name: connectorId
        in: path
        required: true
        schema:
          type: string
      - name: uploadRuleId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The upload rule is successfully deleted.
  /api/connectors/{connectorId}/downloadRules:
    get:
      tags:
      - Connector
      summary: Retrieve a list of download rules.
      operationId: getDownloadRules
      parameters:
      - name: connectorId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The download rules are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/DownloadRuleList'
    post:
      tags:
      - Connector
      summary: Create a download rule.
      operationId: createDownloadRule
      parameters:
      - name: connectorId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The target local folder where to write the data. Leading or trailing
          spaces are not accepted.
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateDownloadRule'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDownloadRule'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The download rule is successfully created.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/DownloadRule'
  /api/connectors/{connectorId}/downloadRules/{downloadRuleId}:
    get:
      tags:
      - Connector
      summary: Retrieve a download rule.
      operationId: getDownloadRule
      parameters:
      - name: connectorId
        in: path
        required: true
        schema:
          type: string
      - name: downloadRuleId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The download rule is successfully retrieved.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/DownloadRule'
    put:
      tags:
      - Connector
      summary: Update a download rule.
      description: |-
        Fields which can be updated:
         - code
         - active
         - description
         - sequence
         - formatCode
         - projectName
         - targetLocalFolder
         - protocol
         - fileNameExpression
         - disableHashing
      operationId: updateDownloadRule
      parameters:
      - name: connectorId
        in: path
        required: true
        schema:
          type: string
      - name: downloadRuleId
        in: path
        required: true
        schema:
          type: string
      - name: If-Match
        in: header
        description: "Optional header parameter to enable conflict exposure. If the\
          \ client provides this header, then it must contains the client's most recent\
          \ value of the 'ETag' response header, and the server will respond with\
          \ a 409 code if it detects a conflict. If the client does not provide this\
          \ header, then the server will not do a conflict check, which means that\
          \ as a client you can override the resource even when the server has a more\
          \ recent version."
        schema:
          type: string
      requestBody:
        description: The target local folder where to write the data. Leading or trailing
          spaces are not accepted.
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/DownloadRule'
          application/json:
            schema:
              $ref: '#/components/schemas/DownloadRule'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The download rule is successfully updated.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/DownloadRule'
    delete:
      tags:
      - Connector
      summary: Delete a download rule.
      operationId: deleteDownloadRule
      parameters:
      - name: connectorId
        in: path
        required: true
        schema:
          type: string
      - name: downloadRuleId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The download rule is successfully deleted.
  /api/connectors/{connectorId}:cancel:
    post:
      tags:
      - Connector
      summary: Cancel a connector.
      description: "Endpoint for cancelling a connector. This is a non-RESTful endpoint,\
        \ as the path of this endpoint is not representing a REST resource."
      operationId: cancelConnector
      parameters:
      - name: connectorId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The connector is successfully cancelled.
  /api/connectors/{connectorId}:enable:
    post:
      tags:
      - Connector
      summary: Enable a connector.
      description: "Endpoint for enabling a connector. This is a non-RESTful endpoint,\
        \ as the path of this endpoint is not representing a REST resource."
      operationId: enableConnector
      parameters:
      - name: connectorId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The connector is successfully enabled.
  /api/connectors/{connectorId}:disable:
    post:
      tags:
      - Connector
      summary: Disable a connector.
      description: "Endpoint for disabling a connector. This is a non-RESTful endpoint,\
        \ as the path of this endpoint is not representing a REST resource."
      operationId: disableConnector
      parameters:
      - name: connectorId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The connector is successfully disabled.
  /api/data/{dataUrn}:
    get:
      tags:
      - Data
      summary: Retrieve a data.
      operationId: getData
      parameters:
      - name: dataUrn
        in: path
        description: "The format is urn:ilmn:ica:region:\\<ID of the region\\>:data:\\\
          <ID of the data\\>#\\<optional data path\\>. The path can be omitted, in\
          \ that case the hashtag (#) must also be omitted."
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The data is successfully retrieved.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/Data'
  /api/data/{dataUrn}:createInlineViewUrl:
    post:
      tags:
      - Data
      summary: Retrieve an URL for this data to use for inline view in a browser.
      description: "Can be used to view a file directly from the region where it is\
        \ located, no connector is needed."
      operationId: createInlineViewUrlForDataWithoutProjectContext
      parameters:
      - name: dataUrn
        in: path
        description: "The format is urn:ilmn:ica:region:\\<ID of the region\\>:data:\\\
          <ID of the data\\>#\\<optional data path\\>. The path can be omitted, in\
          \ that case the hashtag (#) must also be omitted."
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The inline view URL is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/InlineView'
  /api/data/{dataUrn}:createDownloadUrl:
    post:
      tags:
      - Data
      summary: Retrieve a download URL for this data.
      description: "Can be used to download a file directly from the region where\
        \ it is located, no connector is needed. Not applicable for Folder."
      operationId: createDownloadUrlForDataWithoutProjectContext
      parameters:
      - name: dataUrn
        in: path
        description: "The format is urn:ilmn:ica:region:\\<ID of the region\\>:data:\\\
          <ID of the data\\>#\\<optional data path\\>. The path can be omitted, in\
          \ that case the hashtag (#) must also be omitted."
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The download URL is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/Download'
  /api/dataFormats:
    get:
      tags:
      - Data Format
      summary: Retrieve a list of data formats.
      operationId: getDataFormats
      parameters:
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\n\nThe attributes for which sorting is supported:\n- code"
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of data formats is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/DataFormatPagedList'
  /api/dockerImages:
    get:
      tags:
      - Docker Image
      summary: Retrieve a list of Docker images. Only the Docker images the user has
        access to are returned.
      operationId: getDockerImages
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of Docker images is successfully retrieved.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/DockerImageList'
  /api/dockerImages/{imageId}:
    get:
      tags:
      - Docker Image
      summary: Retrieve a Docker image. Only the Docker image the user has access
        to can be retrieved.
      operationId: getDockerImage
      parameters:
      - name: imageId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The Docker image is successfully retrieved.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/DockerImage'
  /api/dockerImages:createExternal:
    post:
      tags:
      - Docker Image
      summary: Create an external Docker image.
      operationId: createExternalDockerImage
      requestBody:
        content:
          application/vnd.illumina.v4+json:
            schema:
              $ref: '#/components/schemas/CreateExternalDockerImage'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The Docker image is successfully created.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/DockerImage'
  /api/dockerImages:createInternal:
    post:
      tags:
      - Docker Image
      summary: Create an internal Docker image.
      operationId: createInternalDockerImage
      requestBody:
        content:
          application/vnd.illumina.v4+json:
            schema:
              $ref: '#/components/schemas/CreateInternalDockerImage'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The Docker image is successfully created.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/DockerImage'
  /api/dockerImages/{imageId}:addRegions:
    post:
      tags:
      - Docker Image
      summary: Add regions to an existing Docker image.
      operationId: addRegions
      parameters:
      - name: imageId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v4+json:
            schema:
              $ref: '#/components/schemas/DockerImageRegionList'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The regions are successfully added.
  /api/dockerImages/{imageId}:removeRegions:
    post:
      tags:
      - Docker Image
      summary: Remove regions to an existing Docker image.
      operationId: removeRegions
      parameters:
      - name: imageId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v4+json:
            schema:
              $ref: '#/components/schemas/DockerImageRegionList'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The regions are successfully removed.
  /api/entitledbundles:
    get:
      tags:
      - Entitled Bundle
      summary: Retrieve a list of entitled bundles.
      operationId: getEntitledBundles
      parameters:
      - name: search
        in: query
        description: Search
        schema:
          type: string
      - name: userTags
        in: query
        description: User tags to filter on
        schema:
          type: string
      - name: technicalTags
        in: query
        description: Technical tags to filter on
        schema:
          type: string
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\n\nThe attributes for which sorting is supported:\n- name\n- shortDescription"
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of entitled bundles is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/BundlePagedList'
  /api/entitledbundles/{entitledBundleId}:
    get:
      tags:
      - Entitled Bundle
      summary: Retrieve an entitled bundle.
      operationId: getEntitledBundle
      parameters:
      - name: entitledBundleId
        in: path
        description: The ID of the entitled bundle to retrieve
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The entitled bundle is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/Bundle'
  /api/entitledbundles/{entitledBundleId}/termsOfUse:accept:
    post:
      tags:
      - Entitled Bundle
      summary: Accept terms of use for an entitled bundle
      operationId: acceptTermsOfUseEntitledBundle
      parameters:
      - name: entitledBundleId
        in: path
        description: The ID of the entitled bundle where the terms of use are accepted
          of.
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The terms of use of the entitled bundle is accepted
  /api/entitledbundles/{entitledBundleId}/termsOfUse:
    get:
      tags:
      - Entitled Bundle
      summary: Retrieve the last version of terms of use for an entitled bundle.
      operationId: getEntitledBundleTermsOfUse
      parameters:
      - name: entitledBundleId
        in: path
        description: The ID of the entitled bundle of the terms of use to retrieve
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: Terms of use are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/TermsOfUse'
  /api/entitledbundles/{entitledBundleId}/termsOfUse/userAcceptance/currentUser:
    get:
      tags:
      - Entitled Bundle
      summary: Retrieve the acceptance record for an entitled bundle for the current
        user.
      operationId: getEntitledBundleTermsOfUseAcceptance
      parameters:
      - name: entitledBundleId
        in: path
        description: The ID of the entitled bundle of the terms of use acceptance
          records.
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: Terms of use acceptance is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/TermsOfUseAcceptance'
  /api/activationCodes:findBestMatchingForCwl:
    post:
      tags:
      - Entitlement Detail
      summary: Search the best matching activation code detail for Cwl pipeline.
      description: "Endpoint for searching the best activation code detail for a project\
        \ and an analysis from a Cwl pipeline.This is a non-RESTful endpoint, as the\
        \ path of this endpoint is not representing a REST resource."
      operationId: findBestMatchingActivationCodeForCwl
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/SearchMatchingActivationCodesForCwlAnalysis'
          application/json:
            schema:
              $ref: '#/components/schemas/SearchMatchingActivationCodesForCwlAnalysis'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The best matching activation code details are successfully
            searched.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ActivationCodeDetail'
  /api/activationCodes:findBestMatchingForNextflow:
    post:
      tags:
      - Entitlement Detail
      summary: Search the best matching activation code details for Nextflow pipeline.
      description: "Endpoint for searching the best activation code details for a\
        \ project and an analysis for a Nextflow pipeline.This is a non-RESTful endpoint,\
        \ as the path of this endpoint is not representing a REST resource."
      operationId: findBestMatchingActivationCodesForNextflow
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/SearchMatchingActivationCodesForNextflowAnalysis'
          application/json:
            schema:
              $ref: '#/components/schemas/SearchMatchingActivationCodesForNextflowAnalysis'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The best matching activation code details are successfully
            searched.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ActivationCodeDetail'
  /api/activationCodes:findAllMatchingForCwl:
    post:
      tags:
      - Entitlement Detail
      summary: Search all matching activation code details for a Cwl pipeline.
      description: "Endpoint for searching all matching activation code details for\
        \ a project and an analysis from a Cwl pipeline.This is a non-RESTful endpoint,\
        \ as the path of this endpoint is not representing a REST resource."
      operationId: findAllMatchingActivationCodesForCwl
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/SearchMatchingActivationCodesForCwlAnalysis'
          application/json:
            schema:
              $ref: '#/components/schemas/SearchMatchingActivationCodesForCwlAnalysis'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The matching activation code details are successfully searched.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ActivationCodeDetailList'
  /api/activationCodes:findAllMatchingForNextflow:
    post:
      tags:
      - Entitlement Detail
      summary: Search all matching activation code details for a Nextflow pipeline.
      description: "Endpoint for searching all matching activation code details for\
        \ a project and an analysis from a Nextflow pipeline.This is a non-RESTful\
        \ endpoint, as the path of this endpoint is not representing a REST resource."
      operationId: findAllMatchingActivationCodesForNextflow
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/SearchMatchingActivationCodesForNextflowAnalysis'
          application/json:
            schema:
              $ref: '#/components/schemas/SearchMatchingActivationCodesForNextflowAnalysis'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The matching activation code details are successfully searched.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ActivationCodeDetailList'
  /api/eventCodes:
    get:
      tags:
      - Event Code
      summary: Retrieve event codes
      operationId: getEventCodes
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The event codes are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/EventCodeList'
  /api/eventLog:
    get:
      tags:
      - Event Log
      summary: Retrieve a list of event logs.
      operationId: getEventLogs
      parameters:
      - name: code
        in: query
        description: Code
        schema:
          type: string
      - name: codeFilterType
        in: query
        description: Code filter type
        schema:
          type: string
          enum:
          - STARTS_WITH
          - ENDS_WITH
          - EQUALS
      - name: category
        in: query
        description: Category
        schema:
          type: string
          enum:
          - ERROR
          - WARN
          - INFO
      - name: dateFrom
        in: query
        description: "Date from. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z"
        schema:
          type: string
      - name: dateUntil
        in: query
        description: "Date until. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z"
        schema:
          type: string
      - name: rows
        in: query
        description: Amount of rows to fetch (chronologically oldest first). Maximum
          250. Defaults to 250
        schema:
          type: integer
          format: int32
          default: 250
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of event logs is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/EventLogListV3'
      deprecated: true
  /api/jobs:
    get:
      tags:
      - Job
      summary: Retrieve a list of jobs.
      operationId: getJobs
      parameters:
      - name: status
        in: query
        description: The statuses to filter on.
        schema:
          type: array
          items:
            type: string
            enum:
            - INITIALIZED
            - WAITING_FOR_RESOURCES
            - RUNNING
            - STOPPED
            - SUCCEEDED
            - PARTIALLY_SUCCEEDED
            - FAILED
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\n\nThe attributes for which sorting is supported:\n- timeCreated\n\
          - timeStarted\n- timeFinished"
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of jobs is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/JobPagedList'
  /api/jobs/{jobId}:
    get:
      tags:
      - Job
      summary: Retrieve a job.
      operationId: getJob
      parameters:
      - name: jobId
        in: path
        description: The ID of the job.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The job is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/Job'
  /api/metadataModels:
    get:
      tags:
      - Metadata Model
      summary: Retrieve the metadata models for the tenant associated to the security
        context.
      description: Retrieve the metadata models for the tenant associated to the security
        context. This call returns a list of metadata models for the tenant in a non-hierarchical
        way. Instead of a model having a list of child models all models except the
        root model have a parent model identifier. This can be used to reconstruct
        the hierarchy.
      operationId: getMetadataModels
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The metadata models are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/MetadataModelList'
  /api/metadataModels/{metadataModelId}:
    get:
      tags:
      - Metadata Model
      summary: Retrieve a metadata model. Only metadata models that the user has access
        to can be retrieved.
      operationId: getMetadataModel
      parameters:
      - name: metadataModelId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The metadata model is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/MetadataModel'
  /api/metadataModels/{metadataModelId}/fields:
    get:
      tags:
      - Metadata Model
      summary: Retrieve the fields of a metadata model. Only metadata models that
        the user has access to can be retrieved.
      operationId: getMetadataModelFields
      parameters:
      - name: metadataModelId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The metadata model fields are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/FieldList'
  /api/metadataModels/tenantModel:
    get:
      tags:
      - Metadata Model
      summary: Retrieve the tenant model for the tenant associated to the security
        context.
      description: Retrieve the tenant model for the tenant associated to the security
        context. The tenant model is a hierarchical structure where the top level
        tenant holds a list of child models (which in turn can hold child models).
      operationId: getTenantModel
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The tenant model is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/Model'
  /api/notificationChannels:
    get:
      tags:
      - Notification Channel
      summary: Retrieve notification channels
      operationId: getNotificationChannels
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The notification channels are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/NotificationChannelList'
    post:
      tags:
      - Notification Channel
      summary: Create a notification channel
      operationId: createNotificationChannel
      requestBody:
        description: The new channel
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateNotificationChannel'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNotificationChannel'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The notification channel is successfully created.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/NotificationChannel'
  /api/notificationChannels/{channelId}:
    get:
      tags:
      - Notification Channel
      summary: Retrieve a notification channel
      operationId: getNotificationChannel
      parameters:
      - name: channelId
        in: path
        description: The ID of the notification channel to retrieve
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The notification channel is successfully retrieved.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/NotificationChannel'
    put:
      tags:
      - Notification Channel
      summary: Update a notification channel
      description: |
        This will affect all subscriptions which use this address!Fields which can be updated:
         - enabled
         - address
         - awsRegion
      operationId: updateNotificationChannel
      parameters:
      - name: channelId
        in: path
        description: The ID of the notification channel to update
        required: true
        schema:
          type: string
      - name: If-Match
        in: header
        description: "Optional header parameter to enable conflict exposure. If the\
          \ client provides this header, then it must contains the client's most recent\
          \ value of the 'ETag' response header, and the server will respond with\
          \ a 409 code if it detects a conflict. If the client does not provide this\
          \ header, then the server will not do a conflict check, which means that\
          \ as a client you can override the resource even when the server has a more\
          \ recent version."
        schema:
          type: string
      requestBody:
        description: The updated channel
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/NotificationChannel'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationChannel'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The notification channel is successfully updated.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/NotificationChannel'
    delete:
      tags:
      - Notification Channel
      summary: Delete a notification channel
      operationId: deleteNotificationChannel
      parameters:
      - name: channelId
        in: path
        description: The ID of the notification channel to delete
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The notification channel is successfully deleted
  /api/pipelines:
    get:
      tags:
      - Pipeline
      summary: Retrieve a list of pipelines.
      description: Only lists pipelines that are owned by the user/tenant (not those
        to which a user is entitled).
      operationId: getPipelines
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of pipelines is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/PipelineList'
  /api/pipelines/{pipelineId}:
    get:
      tags:
      - Pipeline
      summary: Retrieve a pipeline.
      operationId: getPipeline
      parameters:
      - name: pipelineId
        in: path
        description: The ID of the pipeline to retrieve
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The pipeline is successfully retrieved.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/PipelineV3'
  /api/pipelines/{pipelineId}/inputParameters:
    get:
      tags:
      - Pipeline
      summary: Retrieve input parameters for a pipeline.
      operationId: getPipelineInputParameters
      parameters:
      - name: pipelineId
        in: path
        description: The ID of the pipeline to retrieve input parameters for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The input parameters is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/InputParameterList'
  /api/pipelines/{pipelineId}/configurationParameters:
    get:
      tags:
      - Pipeline
      summary: Retrieve configuration parameters for a pipeline.
      operationId: getPipelineConfigurationParameters
      parameters:
      - name: pipelineId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The configuration parameters are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/PipelineConfigurationParameterList'
  /api/pipelines/{pipelineId}/referenceSets:
    get:
      tags:
      - Pipeline
      summary: Retrieve the reference sets of a pipeline.
      operationId: getPipelineReferenceSets
      parameters:
      - name: pipelineId
        in: path
        description: The ID of the pipeline to retrieve reference sets for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of reference sets is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ReferenceSetList'
  /api/pipelines/{pipelineId}/documentation/HTML:
    get:
      tags:
      - Pipeline
      summary: Retrieve HTML documentation for a project pipeline.
      description: Retrieve HTML documentation for a project pipeline. This can be
        a pipeline from a linked bundle.
      operationId: getPipelineHtmlDocumentation
      parameters:
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to retrieve HTML documentation
          from
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The HTML documentation is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/PipelineHtmlDocumentation'
  /api/pipelines/{pipelineId}/files:
    get:
      tags:
      - Pipeline
      summary: Retrieve files for a pipeline.
      operationId: getPipelineFiles
      parameters:
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to retrieve files for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The files are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/PipelineFileList'
  /api/pipelines/{pipelineId}/files/{fileId}/content:
    get:
      tags:
      - Pipeline
      summary: Download the contents of a pipeline file.
      operationId: downloadPipelineFileContent
      parameters:
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to retrieve files for
        required: true
        schema:
          type: string
      - name: fileId
        in: path
        description: The ID of the pipeline file
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The pipeline file is successfully downloaded.
          headers:
            Content-Disposition:
              description: Contains name of the file to be downloaded.
              style: simple
              schema:
                type: string
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/pipelineLanguages/nextflow/versions:
    get:
      tags:
      - Pipeline Language
      summary: Retrieve a list of nextflow versions.
      operationId: getNextflowVersions
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of nextflow versions is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/PipelineLanguageVersionList'
  /api/projects/{projectId}/analyses:
    get:
      tags:
      - Project Analysis
      summary: Retrieve the list of analyses.
      description: This endpoint only returns V3 items. Use the search endpoint to
        get V4 items.
      operationId: getAnalyses
      parameters:
      - name: reference
        in: query
        description: The reference to filter on.
        schema:
          type: string
      - name: userreference
        in: query
        description: The user-reference to filter on.
        schema:
          type: string
      - name: status
        in: query
        description: The status to filter on.
        schema:
          type: string
      - name: usertag
        in: query
        description: The user-tags to filter on.
        schema:
          type: string
      - name: technicaltag
        in: query
        description: The technical-tags to filter on.
        schema:
          type: string
      - name: referencetag
        in: query
        description: The reference-data-tags to filter on.
        schema:
          type: string
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\n\nThe attributes for which sorting is supported:\n- reference\n\
          - userReference\n- pipeline\n- status\n- startDate\n- endDate\n- summary\n"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of project analyses is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/AnalysisPagedListV3'
      deprecated: true
  /api/projects/{projectId}/analyses/{analysisId}:
    get:
      tags:
      - Project Analysis
      summary: Retrieve an analysis.
      description: "# Changelog\nFor this endpoint multiple versions exist. Note that\
        \ the values for request headers 'Content-Type' and 'Accept' must contain\
        \ a matching version.\n\n## [V3]\n * Initial version\n## [V4]\n * Field type\
        \ 'status' changed from enum to String. New statuses have been added: ['QUEUED',\
        \ 'INITIALIZING', 'PREPARING_INPUTS', 'GENERATING_OUTPUTS', 'ABORTING'].\n\
        \ * Field analysisPriority changed from enum to String.\n * The owner and\
        \ tenant are now represented by Identifier objects.\n"
      operationId: getAnalysis
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: analysisId
        in: path
        description: The ID of the analysis to retrieve
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The analysis is successfully retrieved.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/AnalysisV4'
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/AnalysisV3'
    put:
      tags:
      - Project Analysis
      summary: Update an analysis.
      description: "# Attributes which can be updated: \n  - tags\n# Changelog\nFor\
        \ this endpoint multiple versions exist. Note that the values for request\
        \ headers 'Content-Type' and 'Accept' must contain a matching version.\n\n\
        ## [V3]\n * Initial version\n## [V4]\n * Field type 'status' changed from\
        \ enum to String. New statuses have been added: ['QUEUED', 'INITIALIZING',\
        \ 'PREPARING_INPUTS', 'GENERATING_OUTPUTS', 'ABORTING'].\n * Field analysisPriority\
        \ changed from enum to String.\n * The owner and tenant are now represented\
        \ by Identifier objects.\n"
      operationId: updateAnalysis
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: analysisId
        in: path
        required: true
        schema:
          type: string
      - name: If-Match
        in: header
        description: "Optional header parameter to enable conflict exposure. If the\
          \ client provides this header, then it must contains the client's most recent\
          \ value of the 'ETag' response header, and the server will respond with\
          \ a 409 code if it detects a conflict. If the client does not provide this\
          \ header, then the server will not do a conflict check, which means that\
          \ as a client you can override the resource even when the server has a more\
          \ recent version."
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v4+json:
            schema:
              $ref: '#/components/schemas/AnalysisV4'
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/AnalysisV3'
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisV3'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The analysis is successfully updated.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/AnalysisV4'
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/AnalysisV3'
  /api/projects/{projectId}/analyses/{analysisId}/steps:
    get:
      tags:
      - Project Analysis
      summary: Retrieve the individual steps of an analysis.
      operationId: getAnalysisSteps
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: analysisId
        in: path
        description: The ID of the analysis to retrieve the individual steps for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The individual steps of the analysis are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/AnalysisStepList'
  /api/projects/{projectId}/analyses/{analysisId}/inputs:
    get:
      tags:
      - Project Analysis
      summary: Retrieve the inputs of an analysis.
      operationId: getAnalysisInputs
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: analysisId
        in: path
        description: The ID of the analysis to retrieve the inputs for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The inputs of the analysis are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/AnalysisInputList'
  /api/projects/{projectId}/analyses/{analysisId}/outputs:
    get:
      tags:
      - Project Analysis
      summary: "Retrieve the outputs of an analysis. The list might be incomplete\
        \ if a folder contains too many output files, but all the data can always\
        \ be retrieved through the GET data endpoint."
      operationId: getAnalysisOutputs
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: analysisId
        in: path
        description: The ID of the analysis to retrieve the outputs for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The outputs of the analysis are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/AnalysisOutputList'
  /api/projects/{projectId}/analyses/{analysisId}/rawOutput:
    get:
      tags:
      - Project Analysis
      summary: Retrieve the raw output of an analysis.
      operationId: getRawAnalysisOutput
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: analysisId
        in: path
        description: The ID of the analysis for which to retrieve the raw output
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The raw output of the analysis is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/AnalysisRawOutput'
      deprecated: true
  /api/projects/{projectId}/analyses/{analysisId}/configurations:
    get:
      tags:
      - Project Analysis
      summary: Retrieve the configurations of an analysis.
      operationId: getAnalysisConfigurations
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: analysisId
        in: path
        description: The ID of the analysis to retrieve the configuration for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The configurations of the analysis are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ExecutionConfigurationList'
  /api/projects/{projectId}/analyses/{analysisId}/inputFormValues:
    get:
      tags:
      - Project Analysis
      summary: Retrieve the values from an input form.
      description: Retrieve the values from an input form of a JSON based pipeline
        used to start an analysis.
      operationId: getProjectAnalysisInputFormValues
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: analysisId
        in: path
        description: The ID of the analysis to retrieve the input form values from
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The input form values are successfully retrieved.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/InputFormFieldList'
  /api/projects/{projectId}/analyses/{analysisId}/usage:
    get:
      tags:
      - Project Analysis
      summary: Retrieve the analysis usage details.
      description: The usage details can be retrieved once the analysis has completed
        with status SUCCEEDED or FAILED. It may take several minutes for the information
        to become available. A 404 status indicates that the system is busy processing
        the information.
      operationId: getAnalysisUsageDetails
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: analysisId
        in: path
        description: The ID of the analysis to retrieve the usage details for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The analysis usage details are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/AnalysisUsageDetails'
  /api/projects/{projectId}/analyses/{analysisId}:abort:
    post:
      tags:
      - Project Analysis
      summary: Abort an analysis.
      description: "Endpoint for aborting an analysis. The status of the analysis\
        \ is not updated immediately, only when the abortion of the analysis has actually\
        \ started.This is a non-RESTful endpoint, as the path of this endpoint is\
        \ not representing a REST resource."
      operationId: abortAnalysis
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: analysisId
        in: path
        description: The ID of the analysis to abort
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The analysis is successfully aborted.
  /api/projects/{projectId}/analysisCreationBatch:
    post:
      tags:
      - Project Analysis Creation Batch
      summary: Create and start multiple analyses in batch.
      operationId: createAnalysisCreationBatch
      parameters:
      - name: Idempotency-Key
        in: header
        description: "The Idempotency-Key header can be used to prevent duplicate\
          \ requests and support retries. It is implemented according to the IETF\
          \ spec, with one exception (see below). The header value is allowed to be\
          \ max 255 characters long. If the header is supplied for a successful response\
          \ (HTTP status code < 400) then the response \nwill be saved for 7 days\
          \ for the specific API endpoint, header value and user reference. When the\
          \ same user makes \na new request within 7 days to the same API endpoint\
          \ with the same Idempotency-Key header value, following use cases can occur:<br\
          \ /><ul><li>the request body is the same as the previous request and an\
          \ answer is stored => the stored response is returned without executing\
          \ the request again.</li><li>the request body is the same as the previous\
          \ request and no answer is stored because the previous request has not finished\
          \ => 409 error response, which indicates that the original call is still\
          \ in progress.</li><li>the request body is not the same as the previous\
          \ request => 422 error response, as this is not allowed.</li></ul>This means\
          \ that each time when executing a new API request using the Idempotency-Key\
          \ header, the request has to contain a\nnew header value that hasn't been\
          \ used (successfully) in the past 7 days for that specific API endpoint\
          \ and by the specific user.\nFor error responses (HTTP status code >= 400)\
          \ we allow clients to retry the call. This is where we don't follow the\
          \ IETF specification."
        schema:
          maxLength: 255
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateAnalysisCreationBatch'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The analyses are scheduled for creation.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/AnalysisCreationBatch'
  /api/projects/{projectId}/analysisCreationBatch/{batchId}:
    get:
      tags:
      - Project Analysis Creation Batch
      summary: Retrieve a analysis creation batch.
      operationId: getAnalysisCreationBatch
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        description: The ID of the analysis creation batch
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The analysis creation batch is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/AnalysisCreationBatch'
  /api/projects/{projectId}/analysisCreationBatch/{batchId}/items:
    get:
      tags:
      - Project Analysis Creation Batch
      summary: Retrieve a list of analysis creation batch items.
      description: "# Changelog\nFor this endpoint multiple versions exist. Note that\
        \ the values for request headers 'Content-Type' and 'Accept' must contain\
        \ a matching version.\n\n## [V3]\n * Initial version\n## [V4]\n## Item field\
        \ 'createdAnalysis' changes:\n * Field type 'status' changed from enum to\
        \ String. New statuses have been added: ['QUEUED', 'INITIALIZING', 'PREPARING_INPUTS',\
        \ 'GENERATING_OUTPUTS', 'ABORTING'].\n * Field analysisPriority changed from\
        \ enum to String.\n * The owner and tenant are now represented by Identifier\
        \ objects.\n"
      operationId: getAnalysisCreationBatchItems
      parameters:
      - name: status
        in: query
        description: The statuses to filter on.
        schema:
          type: array
          items:
            type: string
            enum:
            - RUNNING
            - WAITING_RESOURCES
            - SUCCEEDED
            - FAILED
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        description: The ID of the analysis creation batch
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of analysis creation batch items is successfully retrieved.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/AnalysisCreationBatchItemPagedListV4'
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/AnalysisCreationBatchItemPagedListV3'
  /api/projects/{projectId}/analysisCreationBatch/{batchId}/items/{itemId}:
    get:
      tags:
      - Project Analysis Creation Batch
      summary: Retrieve a analysis creation batch item.
      description: "# Changelog\nFor this endpoint multiple versions exist. Note that\
        \ the values for request headers 'Content-Type' and 'Accept' must contain\
        \ a matching version.\n\n## [V3]\nInitial version\n## [V4]\nField 'createdAnalysis'\
        \ changes:\n * Field type 'status' changed from enum to String. New statuses\
        \ have been added: ['QUEUED', 'INITIALIZING', 'PREPARING_INPUTS', 'GENERATING_OUTPUTS',\
        \ 'ABORTING'].\n * Field analysisPriority changed from enum to String.\n *\
        \ The owner and tenant are now represented by Identifier objects.\n"
      operationId: getAnalysisCreationBatchItem
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        description: The ID of the analysis creation batch
        required: true
        schema:
          type: string
          format: uuid
      - name: itemId
        in: path
        description: The ID of the analysis creation batch item
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The analysis creation batch item is successfully retrieved.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/AnalysisCreationBatchItemV4'
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/AnalysisCreationBatchItemV3'
  /api/projects/{projectId}/analysis:search:
    post:
      tags:
      - Project Analysis
      summary: Search analyses.
      operationId: searchAnalyses
      parameters:
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\n\nThe attributes for which sorting is supported:\n- reference\n\
          - userReference\n- pipeline\n- status\n- startDate\n- endDate\n- summary\n"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/AnalysisQueryParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisQueryParameters'
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of project analyses is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/AnalysisPagedListV4'
  /api/projects/{projectId}/analysis:cwlJson:
    post:
      tags:
      - Project Analysis
      summary: Create and start an analysis for a JSON based CWL pipeline.
      operationId: createCwlJsonAnalysis
      parameters:
      - name: Idempotency-Key
        in: header
        description: "The Idempotency-Key header can be used to prevent duplicate\
          \ requests and support retries. It is implemented according to the IETF\
          \ spec, with one exception (see below). The header value is allowed to be\
          \ max 255 characters long. If the header is supplied for a successful response\
          \ (HTTP status code < 400) then the response \nwill be saved for 7 days\
          \ for the specific API endpoint, header value and user reference. When the\
          \ same user makes \na new request within 7 days to the same API endpoint\
          \ with the same Idempotency-Key header value, following use cases can occur:<br\
          \ /><ul><li>the request body is the same as the previous request and an\
          \ answer is stored => the stored response is returned without executing\
          \ the request again.</li><li>the request body is the same as the previous\
          \ request and no answer is stored because the previous request has not finished\
          \ => 409 error response, which indicates that the original call is still\
          \ in progress.</li><li>the request body is not the same as the previous\
          \ request => 422 error response, as this is not allowed.</li></ul>This means\
          \ that each time when executing a new API request using the Idempotency-Key\
          \ header, the request has to contain a\nnew header value that hasn't been\
          \ used (successfully) in the past 7 days for that specific API endpoint\
          \ and by the specific user.\nFor error responses (HTTP status code >= 400)\
          \ we allow clients to retry the call. This is where we don't follow the\
          \ IETF specification."
        schema:
          maxLength: 255
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: "The following options can be used for actionOnExist:<br /><ul><li>Overwrite\
          \ (default): If a file with that name already exists, it is overwritten.</li><li>Rename:\
          \ If a file with that name already exists, an incremental counter is appended\
          \ to the file name.</li><li>Skip: If a file with that name already exists,\
          \ the new file is not saved and the data is discarded.</li></ul>"
        content:
          application/vnd.illumina.v4+json:
            schema:
              $ref: '#/components/schemas/CreateCwlJsonAnalysis'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The analysis is successfully created and scheduled.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/AnalysisV4'
  /api/projects/{projectId}/analysis:cwl:
    post:
      tags:
      - Project Analysis
      summary: Create and start an analysis for a CWL pipeline.
      description: "# Changelog\nFor this endpoint multiple versions exist. Note that\
        \ the values for request headers 'Content-Type' and 'Accept' must contain\
        \ a matching version.\n\n## [V3]\n * Initial version\n## [V4]\n * Field type\
        \ 'status' changed from enum to String. New statuses have been added: ['QUEUED',\
        \ 'INITIALIZING', 'PREPARING_INPUTS', 'GENERATING_OUTPUTS', 'ABORTING'].\n\
        \ * Field analysisPriority changed from enum to String.\n * The owner and\
        \ tenant are now represented by Identifier objects.\n"
      operationId: createCwlAnalysis
      parameters:
      - name: Idempotency-Key
        in: header
        description: "The Idempotency-Key header can be used to prevent duplicate\
          \ requests and support retries. It is implemented according to the IETF\
          \ spec, with one exception (see below). The header value is allowed to be\
          \ max 255 characters long. If the header is supplied for a successful response\
          \ (HTTP status code < 400) then the response \nwill be saved for 7 days\
          \ for the specific API endpoint, header value and user reference. When the\
          \ same user makes \na new request within 7 days to the same API endpoint\
          \ with the same Idempotency-Key header value, following use cases can occur:<br\
          \ /><ul><li>the request body is the same as the previous request and an\
          \ answer is stored => the stored response is returned without executing\
          \ the request again.</li><li>the request body is the same as the previous\
          \ request and no answer is stored because the previous request has not finished\
          \ => 409 error response, which indicates that the original call is still\
          \ in progress.</li><li>the request body is not the same as the previous\
          \ request => 422 error response, as this is not allowed.</li></ul>This means\
          \ that each time when executing a new API request using the Idempotency-Key\
          \ header, the request has to contain a\nnew header value that hasn't been\
          \ used (successfully) in the past 7 days for that specific API endpoint\
          \ and by the specific user.\nFor error responses (HTTP status code >= 400)\
          \ we allow clients to retry the call. This is where we don't follow the\
          \ IETF specification."
        schema:
          maxLength: 255
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: "The following options can be used for actionOnExist:<br /><ul><li>Overwrite\
          \ (default): If a file with that name already exists, it is overwritten.</li><li>Rename:\
          \ If a file with that name already exists, an incremental counter is appended\
          \ to the file name.</li><li>Skip: If a file with that name already exists,\
          \ the new file is not saved and the data is discarded.</li></ul>"
        content:
          application/vnd.illumina.v4+json:
            schema:
              $ref: '#/components/schemas/CreateCwlAnalysis'
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateCwlAnalysis'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCwlAnalysis'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The analysis is successfully created and scheduled.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/AnalysisV4'
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/AnalysisV3'
      deprecated: true
  /api/projects/{projectId}/analysis:cwlWithJsonInput:
    post:
      tags:
      - Project Analysis
      summary: Create and start an analysis for a CWL pipeline with an input.json.
      description: This endpoint is intended to be used with an input.json and will
        bypass the input form. The combination of using this endpoint with an input.json
        for a json-form based pipeline with sensitive fields defined is not possible.
      operationId: createCwlAnalysisWithJsonInput
      parameters:
      - name: Idempotency-Key
        in: header
        description: "The Idempotency-Key header can be used to prevent duplicate\
          \ requests and support retries. It is implemented according to the IETF\
          \ spec, with one exception (see below). The header value is allowed to be\
          \ max 255 characters long. If the header is supplied for a successful response\
          \ (HTTP status code < 400) then the response \nwill be saved for 7 days\
          \ for the specific API endpoint, header value and user reference. When the\
          \ same user makes \na new request within 7 days to the same API endpoint\
          \ with the same Idempotency-Key header value, following use cases can occur:<br\
          \ /><ul><li>the request body is the same as the previous request and an\
          \ answer is stored => the stored response is returned without executing\
          \ the request again.</li><li>the request body is the same as the previous\
          \ request and no answer is stored because the previous request has not finished\
          \ => 409 error response, which indicates that the original call is still\
          \ in progress.</li><li>the request body is not the same as the previous\
          \ request => 422 error response, as this is not allowed.</li></ul>This means\
          \ that each time when executing a new API request using the Idempotency-Key\
          \ header, the request has to contain a\nnew header value that hasn't been\
          \ used (successfully) in the past 7 days for that specific API endpoint\
          \ and by the specific user.\nFor error responses (HTTP status code >= 400)\
          \ we allow clients to retry the call. This is where we don't follow the\
          \ IETF specification."
        schema:
          maxLength: 255
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: "The following options can be used for actionOnExist:<br /><ul><li>Overwrite\
          \ (default): If a file with that name already exists, it is overwritten.</li><li>Rename:\
          \ If a file with that name already exists, an incremental counter is appended\
          \ to the file name.</li><li>Skip: If a file with that name already exists,\
          \ the new file is not saved and the data is discarded.</li></ul>"
        content:
          application/vnd.illumina.v4+json:
            schema:
              $ref: '#/components/schemas/CreateCwlWithJsonInputAnalysis'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The analysis is successfully created and scheduled.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/AnalysisV4'
  /api/projects/{projectId}/analysis:cwlWithStructuredInput:
    post:
      tags:
      - Project Analysis
      summary: Create and start an analysis for a CWL pipeline with a structured input.
      operationId: createCwlAnalysisWithStructuredInput
      parameters:
      - name: Idempotency-Key
        in: header
        description: "The Idempotency-Key header can be used to prevent duplicate\
          \ requests and support retries. It is implemented according to the IETF\
          \ spec, with one exception (see below). The header value is allowed to be\
          \ max 255 characters long. If the header is supplied for a successful response\
          \ (HTTP status code < 400) then the response \nwill be saved for 7 days\
          \ for the specific API endpoint, header value and user reference. When the\
          \ same user makes \na new request within 7 days to the same API endpoint\
          \ with the same Idempotency-Key header value, following use cases can occur:<br\
          \ /><ul><li>the request body is the same as the previous request and an\
          \ answer is stored => the stored response is returned without executing\
          \ the request again.</li><li>the request body is the same as the previous\
          \ request and no answer is stored because the previous request has not finished\
          \ => 409 error response, which indicates that the original call is still\
          \ in progress.</li><li>the request body is not the same as the previous\
          \ request => 422 error response, as this is not allowed.</li></ul>This means\
          \ that each time when executing a new API request using the Idempotency-Key\
          \ header, the request has to contain a\nnew header value that hasn't been\
          \ used (successfully) in the past 7 days for that specific API endpoint\
          \ and by the specific user.\nFor error responses (HTTP status code >= 400)\
          \ we allow clients to retry the call. This is where we don't follow the\
          \ IETF specification."
        schema:
          maxLength: 255
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: "The following options can be used for actionOnExist:<br /><ul><li>Overwrite\
          \ (default): If a file with that name already exists, it is overwritten.</li><li>Rename:\
          \ If a file with that name already exists, an incremental counter is appended\
          \ to the file name.</li><li>Skip: If a file with that name already exists,\
          \ the new file is not saved and the data is discarded.</li></ul>"
        content:
          application/vnd.illumina.v4+json:
            schema:
              $ref: '#/components/schemas/CreateCwlWithStructuredInputAnalysis'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The analysis is successfully created and scheduled.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/AnalysisV4'
  /api/projects/{projectId}/analysis:nextflowJson:
    post:
      tags:
      - Project Analysis
      summary: Create and start an analysis for a JSON based Nextflow pipeline.
      operationId: createNextflowJsonAnalysis
      parameters:
      - name: Idempotency-Key
        in: header
        description: "The Idempotency-Key header can be used to prevent duplicate\
          \ requests and support retries. It is implemented according to the IETF\
          \ spec, with one exception (see below). The header value is allowed to be\
          \ max 255 characters long. If the header is supplied for a successful response\
          \ (HTTP status code < 400) then the response \nwill be saved for 7 days\
          \ for the specific API endpoint, header value and user reference. When the\
          \ same user makes \na new request within 7 days to the same API endpoint\
          \ with the same Idempotency-Key header value, following use cases can occur:<br\
          \ /><ul><li>the request body is the same as the previous request and an\
          \ answer is stored => the stored response is returned without executing\
          \ the request again.</li><li>the request body is the same as the previous\
          \ request and no answer is stored because the previous request has not finished\
          \ => 409 error response, which indicates that the original call is still\
          \ in progress.</li><li>the request body is not the same as the previous\
          \ request => 422 error response, as this is not allowed.</li></ul>This means\
          \ that each time when executing a new API request using the Idempotency-Key\
          \ header, the request has to contain a\nnew header value that hasn't been\
          \ used (successfully) in the past 7 days for that specific API endpoint\
          \ and by the specific user.\nFor error responses (HTTP status code >= 400)\
          \ we allow clients to retry the call. This is where we don't follow the\
          \ IETF specification."
        schema:
          maxLength: 255
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: "The following options can be used for actionOnExist:<br /><ul><li>Overwrite\
          \ (default): If a file with that name already exists, it is overwritten.</li><li>Rename:\
          \ If a file with that name already exists, an incremental counter is appended\
          \ to the file name.</li><li>Skip: If a file with that name already exists,\
          \ the new file is not saved and the data is discarded.</li></ul>"
        content:
          application/vnd.illumina.v4+json:
            schema:
              $ref: '#/components/schemas/CreateNextflowJsonAnalysis'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The analysis is successfully created and scheduled.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/AnalysisV4'
  /api/projects/{projectId}/analysis:nextflow:
    post:
      tags:
      - Project Analysis
      summary: Create and start an analysis for a Nextflow pipeline.
      description: "# Changelog\nFor this endpoint multiple versions exist. Note that\
        \ the values for request headers 'Content-Type' and 'Accept' must contain\
        \ a matching version.\n\n## [V3]\n * Initial version\n## [V4]\n * Field type\
        \ 'status' changed from enum to String. New statuses have been added: ['QUEUED',\
        \ 'INITIALIZING', 'PREPARING_INPUTS', 'GENERATING_OUTPUTS', 'ABORTING'].\n\
        \ * Field analysisPriority changed from enum to String.\n * The owner and\
        \ tenant are now represented by Identifier objects.\n"
      operationId: createNextflowAnalysis
      parameters:
      - name: Idempotency-Key
        in: header
        description: "The Idempotency-Key header can be used to prevent duplicate\
          \ requests and support retries. It is implemented according to the IETF\
          \ spec, with one exception (see below). The header value is allowed to be\
          \ max 255 characters long. If the header is supplied for a successful response\
          \ (HTTP status code < 400) then the response \nwill be saved for 7 days\
          \ for the specific API endpoint, header value and user reference. When the\
          \ same user makes \na new request within 7 days to the same API endpoint\
          \ with the same Idempotency-Key header value, following use cases can occur:<br\
          \ /><ul><li>the request body is the same as the previous request and an\
          \ answer is stored => the stored response is returned without executing\
          \ the request again.</li><li>the request body is the same as the previous\
          \ request and no answer is stored because the previous request has not finished\
          \ => 409 error response, which indicates that the original call is still\
          \ in progress.</li><li>the request body is not the same as the previous\
          \ request => 422 error response, as this is not allowed.</li></ul>This means\
          \ that each time when executing a new API request using the Idempotency-Key\
          \ header, the request has to contain a\nnew header value that hasn't been\
          \ used (successfully) in the past 7 days for that specific API endpoint\
          \ and by the specific user.\nFor error responses (HTTP status code >= 400)\
          \ we allow clients to retry the call. This is where we don't follow the\
          \ IETF specification."
        schema:
          maxLength: 255
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: "The following options can be used for actionOnExist:<br /><ul><li>Overwrite\
          \ (default): If a file with that name already exists, it is overwritten.</li><li>Rename:\
          \ If a file with that name already exists, an incremental counter is appended\
          \ to the file name.</li><li>Skip: If a file with that name already exists,\
          \ the new file is not saved and the data is discarded.</li></ul>"
        content:
          application/vnd.illumina.v4+json:
            schema:
              $ref: '#/components/schemas/CreateNextflowAnalysis'
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateNextflowAnalysis'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The analysis is successfully created and scheduled.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/AnalysisV4'
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/AnalysisV3'
  /api/projects/{projectId}/analysis:nextflowWithCustomInput:
    post:
      tags:
      - Project Analysis
      summary: "Create and initiate an analysis for a Nextflow pipeline using a custom\
        \ input, provided in either YAML format or an escaped JSON string."
      description: This endpoint is intended to be used with a custom input and will
        bypass the input form. The combination of using this endpoint with a custom
        input for a json-form based pipeline with sensitive fields defined is not
        possible.
      operationId: createNextflowAnalysisWithCustomInput
      parameters:
      - name: Idempotency-Key
        in: header
        description: "The Idempotency-Key header can be used to prevent duplicate\
          \ requests and support retries. It is implemented according to the IETF\
          \ spec, with one exception (see below). The header value is allowed to be\
          \ max 255 characters long. If the header is supplied for a successful response\
          \ (HTTP status code < 400) then the response \nwill be saved for 7 days\
          \ for the specific API endpoint, header value and user reference. When the\
          \ same user makes \na new request within 7 days to the same API endpoint\
          \ with the same Idempotency-Key header value, following use cases can occur:<br\
          \ /><ul><li>the request body is the same as the previous request and an\
          \ answer is stored => the stored response is returned without executing\
          \ the request again.</li><li>the request body is the same as the previous\
          \ request and no answer is stored because the previous request has not finished\
          \ => 409 error response, which indicates that the original call is still\
          \ in progress.</li><li>the request body is not the same as the previous\
          \ request => 422 error response, as this is not allowed.</li></ul>This means\
          \ that each time when executing a new API request using the Idempotency-Key\
          \ header, the request has to contain a\nnew header value that hasn't been\
          \ used (successfully) in the past 7 days for that specific API endpoint\
          \ and by the specific user.\nFor error responses (HTTP status code >= 400)\
          \ we allow clients to retry the call. This is where we don't follow the\
          \ IETF specification."
        schema:
          maxLength: 255
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: "The following options can be used for actionOnExist:<br /><ul><li>Overwrite\
          \ (default): If a file with that name already exists, it is overwritten.</li><li>Rename:\
          \ If a file with that name already exists, an incremental counter is appended\
          \ to the file name.</li><li>Skip: If a file with that name already exists,\
          \ the new file is not saved and the data is discarded.</li></ul>"
        content:
          application/vnd.illumina.v4+json:
            schema:
              $ref: '#/components/schemas/CreateNextflowWithCustomInputAnalysis'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The analysis is successfully created and scheduled.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/AnalysisV4'
  /api/projects/{projectId}/analysisStorages:
    get:
      tags:
      - Project Analysis Storage
      summary: Retrieve the list of project analysis storage options.
      operationId: getProjectAnalysisStorageOptions
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of project analysis storage options is successfully
            retrieved.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/AnalysisStorageListV4'
  /api/projects:
    get:
      tags:
      - Project
      summary: Retrieve a list of projects.
      operationId: getProjects
      parameters:
      - name: search
        in: query
        description: Search
        schema:
          type: string
      - name: userTags
        in: query
        description: User tags to filter on
        schema:
          type: array
          items:
            type: string
      - name: technicalTags
        in: query
        description: Technical tags to filter on
        schema:
          type: array
          items:
            type: string
      - name: includeHiddenProjects
        in: query
        description: Include hidden projects.
        schema:
          type: boolean
          nullable: true
          default: false
      - name: region
        in: query
        description: The ID of the region to filter on.
        schema:
          type: string
      - name: workgroups
        in: query
        description: Workgroup IDs to filter on
        schema:
          type: array
          items:
            type: string
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\n\nThe attributes for which sorting is supported:\n- name\n- shortDescription\n\
          - information"
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of projects is successfully retrieved
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectPagedList'
    post:
      tags:
      - Project
      summary: Create a new project.
      operationId: createProject
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateProject'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProject'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The project is successfully created.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/Project'
  /api/projects/{projectId}:
    get:
      tags:
      - Project
      summary: Retrieve a project.
      operationId: getProject
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The project is successfully retrieved.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/Project'
    put:
      tags:
      - Project
      summary: Update a project.
      description: |-
        Fields which can be updated:
        - shortDescription
        - projectInformation
        - billingMode
        - dataSharingEnabled
        - tags
        - storageBundle
        - metaDataModel
        - analysisPriority
      operationId: updateProject
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: If-Match
        in: header
        description: "Optional header parameter to enable conflict exposure. If the\
          \ client provides this header, then it must contains the client's most recent\
          \ value of the 'ETag' response header, and the server will respond with\
          \ a 409 code if it detects a conflict. If the client does not provide this\
          \ header, then the server will not do a conflict check, which means that\
          \ as a client you can override the resource even when the server has a more\
          \ recent version."
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/Project'
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The project is successfully update.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/Project'
  /api/projects/{projectId}/bundles:
    get:
      tags:
      - Project
      summary: Retrieve project bundles.
      operationId: getProjectBundles
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The project bundles are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectBundleList'
  /api/projects/{projectId}/bundles/{bundleId}:
    get:
      tags:
      - Project
      summary: Retrieve a project bundle.
      operationId: getProjectBundle
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: bundleId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The project bundle is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectBundle'
    post:
      tags:
      - Project
      summary: Link a bundle to a project.
      operationId: linkProjectBundle
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: bundleId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The bundle is successfully linked to the project.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectBundle'
    delete:
      tags:
      - Project
      summary: Unlink a bundle from a project.
      operationId: unlinkProjectBundle
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: bundleId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The bundle is successfully unlinked from the project.
  /api/projects/{projectId}:hide:
    post:
      tags:
      - Project
      summary: Hide a project.
      operationId: hideProject
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The project is hidden.
  /api/projects/{projectId}:changeOwner:
    post:
      tags:
      - Project
      summary: Change the project owner.
      operationId: changeProjectOwner
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/ChangeProjectOwner'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The project owner is changed.
  /api/projects/{projectId}/base:connectionDetails:
    post:
      tags:
      - Project Base
      summary: Creates the connection details to snowflake instance.
      operationId: createBaseConnectionDetails
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The base connection details are created.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/BaseConnection'
  /api/projects/{projectId}/base/jobs:
    get:
      tags:
      - Project Base
      summary: Retrieve a list of base jobs
      operationId: getBaseJobs
      parameters:
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\n\nThe attributes for which sorting is supported:\n- description\n\
          - type"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of base jobs is successfully retrieved
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/BaseJobList'
  /api/projects/{projectId}/base/jobs/{baseJobId}:
    get:
      tags:
      - Project Base
      summary: Retrieve a base job.
      operationId: getBaseJob
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: baseJobId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The base job is successfully retrieved.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/BaseJob'
  /api/projects/{projectId}/base/tables:
    get:
      tags:
      - Project Base
      summary: Retrieve a list of base tables.
      operationId: getBaseTables
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of base tables is successfully retrieved
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectBaseTableList'
  /api/projects/{projectId}/base/tables/{tableId}:loadData:
    post:
      tags:
      - Project Base
      summary: Load data in a base table.
      description: Load data in the specified table
      operationId: loadData
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: tableId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Load data request
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/LoadDataInBaseRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/LoadDataInBaseRequest'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: Base job to load data is created.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/BaseJob'
  /api/projects/{projectId}/customEvents:
    post:
      tags:
      - Project Custom Events
      summary: Create a new custom event.
      description: "Warning: this endpoint allows to create custom events with a code\
        \ larger than 20 characters (max 50), but the endpoint for creating a custom\
        \ notification subscription (POST /api/projects/{projectId}/customNotificationSubscriptions)\
        \ only accepts event codes up to 20 characters."
      operationId: createCustomEvent
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateCustomEvent'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The event is successfully created.
  /api/projects/{projectId}/customNotificationSubscriptions:
    get:
      tags:
      - Project Custom Notification Subscriptions
      summary: Retrieve notification subscriptions
      operationId: getCustomNotificationSubscriptions
      parameters:
      - name: projectId
        in: path
        description: The ID of the project
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The notification subscriptions are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/CustomNotificationSubscriptionList'
    post:
      tags:
      - Project Custom Notification Subscriptions
      summary: Create a custom notification subscription
      operationId: createCustomNotificationSubscription
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The new subscription
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateCustomNotificationSubscription'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomNotificationSubscription'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The custom notification subscription is successfully created.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/CustomNotificationSubscription'
  /api/projects/{projectId}/customNotificationSubscriptions/{subscriptionId}:
    get:
      tags:
      - Project Custom Notification Subscriptions
      summary: Retrieve a notification subscription
      operationId: getCustomNotificationSubscription
      parameters:
      - name: projectId
        in: path
        description: The ID of the project
        required: true
        schema:
          type: string
      - name: subscriptionId
        in: path
        description: The ID of the notification subscription
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The notification subscription is successfully retrieved.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/CustomNotificationSubscription'
    put:
      tags:
      - Project Custom Notification Subscriptions
      summary: Update a notification subscription
      description: |
        Fields which can be updated:
         - enabled
         - eventCode
         - filterExpression
         - notificationChannel
      operationId: updateCustomNotificationSubscription
      parameters:
      - name: projectId
        in: path
        description: The ID of the project
        required: true
        schema:
          type: string
      - name: subscriptionId
        in: path
        description: The ID of the custom notification subscription to update
        required: true
        schema:
          type: string
      - name: If-Match
        in: header
        description: "Optional header parameter to enable conflict exposure. If the\
          \ client provides this header, then it must contains the client's most recent\
          \ value of the 'ETag' response header, and the server will respond with\
          \ a 409 code if it detects a conflict. If the client does not provide this\
          \ header, then the server will not do a conflict check, which means that\
          \ as a client you can override the resource even when the server has a more\
          \ recent version."
        schema:
          type: string
      requestBody:
        description: The updated subscription
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CustomNotificationSubscription'
          application/json:
            schema:
              $ref: '#/components/schemas/CustomNotificationSubscription'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The notification subscription is successfully updated.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/CustomNotificationSubscription'
    delete:
      tags:
      - Project Custom Notification Subscriptions
      summary: Delete a custom notification subscription
      operationId: deleteCustomNotificationSubscription
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: subscriptionId
        in: path
        description: The ID of the custom notification subscription to delete
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The custom notification subscription is successfully deleted
  /api/projects/{projectId}/analyses/{analysisId}/cwl/inputJson:
    get:
      tags:
      - Project Analysis
      summary: Retrieve the input json of a CWL analysis.
      operationId: getCWLInputJson
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: analysisId
        in: path
        description: The ID of the CWL analysis for which to retrieve the input json
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The input json of the CWL analysis is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/CwlAnalysisInputJson'
  /api/projects/{projectId}/analyses/{analysisId}/cwl/outputJson:
    get:
      tags:
      - Project Analysis
      summary: Retrieve the output json of a CWL analysis.
      operationId: getCWLOutputJson
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: analysisId
        in: path
        description: The ID of the CWL analysis for which to retrieve the output json
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The output json of the CWL analysis is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/CwlAnalysisOutputJson'
  /api/projects/{projectId}/data:
    get:
      tags:
      - Project Data
      summary: Retrieve the list of project data.
      operationId: getProjectDataList
      parameters:
      - name: fullText
        in: query
        description: To search through multiple fields of data.
        schema:
          type: string
      - name: id
        in: query
        description: The ids to filter on. This will always match exact.
        schema:
          type: array
          items:
            type: string
      - name: filename
        in: query
        description: The filenames to filter on. The filenameMatchMode-parameter determines
          how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: filenameMatchMode
        in: query
        description: 'How the filenames are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: filePath
        in: query
        description: The paths of the files to filter on.
        schema:
          type: array
          items:
            type: string
      - name: filePathMatchMode
        in: query
        description: "How the file paths are filtered: \n - STARTS_WITH_CASE_INSENSITIVE:\
          \ Filters the file path to start with the value of the 'filePath' parameter,\
          \ regardless of upper/lower casing. This allows e.g. listing all data in\
          \ a folder and all it's sub-folders (recursively).\n - FULL_CASE_INSENSITIVE:\
          \ Filters the file path to fully match the value of the 'filePath' parameter,\
          \ regardless of upper/lower casing. Note that this can result in multiple\
          \ results if e.g. two files exist with the same filename but different casing\
          \ (abc.txt and ABC.txt)."
        schema:
          type: string
          default: STARTS_WITH_CASE_INSENSITIVE
          enum:
          - STARTS_WITH_CASE_INSENSITIVE
          - FULL_CASE_INSENSITIVE
      - name: status
        in: query
        description: The statuses to filter on.
        schema:
          type: array
          items:
            type: string
            enum:
            - PARTIAL
            - AVAILABLE
            - ARCHIVING
            - ARCHIVED
            - UNARCHIVING
            - DELETING
      - name: formatId
        in: query
        description: The IDs of the formats to filter on.
        schema:
          type: array
          items:
            type: string
      - name: formatCode
        in: query
        description: The codes of the formats to filter on.
        schema:
          type: array
          items:
            type: string
      - name: type
        in: query
        description: The type to filter on.
        schema:
          type: string
          enum:
          - FILE
          - FOLDER
      - name: nonIndexedFolders
        in: query
        description: To filter on non-indexed folders.
        schema:
          type: boolean
      - name: parentFolderId
        in: query
        description: "The IDs of parents folders to filter on. Lists all files and\
          \ folders within the folder for the given ID, non-recursively."
        schema:
          type: array
          items:
            type: string
      - name: parentFolderPath
        in: query
        description: "The full path of the parent folder. Should start and end with\
          \ a '/'. Lists all files and folders within the folder for the given path,\
          \ non-recursively. This can be used to browse through the hierarchical tree\
          \ of folders, e.g. traversing one level up can be done by removing the last\
          \ part of the path. This does not work for contents from a linked folder\
          \ apposed to individual linked files."
        schema:
          type: string
      - name: creationDateAfter
        in: query
        description: "The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z'\
          \ eg: 2021-01-30T08:30:00Z"
        schema:
          type: string
          format: date-time
      - name: creationDateBefore
        in: query
        description: "The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z'\
          \ eg: 2021-01-30T08:30:00Z"
        schema:
          type: string
          format: date-time
      - name: statusDateAfter
        in: query
        description: "The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z'\
          \ eg: 2021-01-30T08:30:00Z"
        schema:
          type: string
          format: date-time
      - name: statusDateBefore
        in: query
        description: "The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z'\
          \ eg: 2021-01-30T08:30:00Z"
        schema:
          type: string
          format: date-time
      - name: userTag
        in: query
        description: The usertags to filter on. The userTagMatchMode-parameter determines
          how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: userTagMatchMode
        in: query
        description: 'How the usertags are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: runInputTag
        in: query
        description: The runInputTags to filter on. The runInputTagMatchMode-parameter
          determines how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: runInputTagMatchMode
        in: query
        description: 'How the runInputTags are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: runOutputTag
        in: query
        description: The runOutputTags to filter on. The runOutputTagMatchMode-parameter
          determines how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: runOutputTagMatchMode
        in: query
        description: 'How the runOutputTags are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: connectorTag
        in: query
        description: The connectorTags to filter on. The connectorTagMatchMode-parameter
          determines how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: connectorTagMatchMode
        in: query
        description: 'How the connectorTags are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: technicalTag
        in: query
        description: The technicalTags to filter on. The techTagMatchMode-parameter
          determines how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: technicalTagMatchMode
        in: query
        description: 'How the technicalTags are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: notInRun
        in: query
        description: "When set to true, the data will be filtered on data which is\
          \ not used in a run."
        schema:
          type: boolean
      - name: notLinkedToSample
        in: query
        description: When set to true only data that is unlinked to a sample will
          be returned.  This filter implies a filter of type File.
        schema:
          type: boolean
      - name: instrumentRunId
        in: query
        description: The instrument run IDs of the sequencing runs to filter on.
        schema:
          type: array
          items:
            type: string
      - name: owningProjectId
        in: query
        description: The owning project ID to filter on.
        schema:
          type: array
          items:
            type: string
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\n\nThe attributes for which sorting is supported:\n- timeCreated\n\
          - timeModified\n- name\n- path\n- fileSizeInBytes\n- status\n- format\n\
          - dataType\n- willBeArchivedAt\n- willBeDeletedAt"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of project data is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataPagedList'
    post:
      tags:
      - Project Data
      summary: Create data in this project.
      operationId: createDataInProject
      parameters:
      - name: Idempotency-Key
        in: header
        description: "The Idempotency-Key header can be used to prevent duplicate\
          \ requests and support retries. It is implemented according to the IETF\
          \ spec, with one exception (see below). The header value is allowed to be\
          \ max 255 characters long. If the header is supplied for a successful response\
          \ (HTTP status code < 400) then the response \nwill be saved for 7 days\
          \ for the specific API endpoint, header value and user reference. When the\
          \ same user makes \na new request within 7 days to the same API endpoint\
          \ with the same Idempotency-Key header value, following use cases can occur:<br\
          \ /><ul><li>the request body is the same as the previous request and an\
          \ answer is stored => the stored response is returned without executing\
          \ the request again.</li><li>the request body is the same as the previous\
          \ request and no answer is stored because the previous request has not finished\
          \ => 409 error response, which indicates that the original call is still\
          \ in progress.</li><li>the request body is not the same as the previous\
          \ request => 422 error response, as this is not allowed.</li></ul>This means\
          \ that each time when executing a new API request using the Idempotency-Key\
          \ header, the request has to contain a\nnew header value that hasn't been\
          \ used (successfully) in the past 7 days for that specific API endpoint\
          \ and by the specific user.\nFor error responses (HTTP status code >= 400)\
          \ we allow clients to retry the call. This is where we don't follow the\
          \ IETF specification."
        schema:
          maxLength: 255
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The data to create.
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateData'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateData'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The data is successfully created in this project.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectData'
      deprecated: true
  /api/projects/{projectId}/data/eligibleForLinking:
    get:
      tags:
      - Project Data
      summary: Retrieve a list of data eligible for linking to the current project.
      operationId: getDataEligibleForLinking
      parameters:
      - name: fullText
        in: query
        description: To search through multiple fields of data.
        schema:
          type: string
      - name: id
        in: query
        description: The ids to filter on. This will always match exact.
        schema:
          type: array
          items:
            type: string
      - name: filename
        in: query
        description: The filenames to filter on. The filenameMatchMode-parameter determines
          how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: filenameMatchMode
        in: query
        description: 'How the filenames are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: filePath
        in: query
        description: The paths of the files to filter on.
        schema:
          type: array
          items:
            type: string
      - name: filePathMatchMode
        in: query
        description: "How the file paths are filtered: \n - STARTS_WITH_CASE_INSENSITIVE:\
          \ Filters the file path to start with the value of the 'filePath' parameter,\
          \ regardless of upper/lower casing. This allows e.g. listing all data in\
          \ a folder and all it's sub-folders (recursively).\n - FULL_CASE_INSENSITIVE:\
          \ Filters the file path to fully match the value of the 'filePath' parameter,\
          \ regardless of upper/lower casing. Note that this can result in multiple\
          \ results if e.g. two files exist with the same filename but different casing\
          \ (abc.txt and ABC.txt)."
        schema:
          type: string
          default: STARTS_WITH_CASE_INSENSITIVE
          enum:
          - STARTS_WITH_CASE_INSENSITIVE
          - FULL_CASE_INSENSITIVE
      - name: status
        in: query
        description: The statuses to filter on.
        schema:
          type: array
          items:
            type: string
            enum:
            - PARTIAL
            - AVAILABLE
            - ARCHIVING
            - ARCHIVED
            - UNARCHIVING
            - DELETING
      - name: formatId
        in: query
        description: The IDs of the formats to filter on.
        schema:
          type: array
          items:
            type: string
      - name: formatCode
        in: query
        description: The codes of the formats to filter on.
        schema:
          type: array
          items:
            type: string
      - name: type
        in: query
        description: The type to filter on.
        schema:
          type: string
          enum:
          - FILE
          - FOLDER
      - name: parentFolderId
        in: query
        description: "The IDs of parents folders to filter on. Lists all files and\
          \ folders within the folder for the given ID, non-recursively."
        schema:
          type: array
          items:
            type: string
      - name: parentFolderPath
        in: query
        description: "The full path of the parent folder. Should start and end with\
          \ a '/'. Lists all files and folders within the folder for the given path,\
          \ non-recursively. This can be used to browse through the hierarchical tree\
          \ of folders, e.g. traversing one level up can be done by removing the last\
          \ part of the path. This does not work for contents from a linked folder\
          \ apposed to individual linked files."
        schema:
          type: string
      - name: creationDateAfter
        in: query
        description: "The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z'\
          \ eg: 2021-01-30T08:30:00Z"
        schema:
          type: string
          format: date-time
      - name: creationDateBefore
        in: query
        description: "The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z'\
          \ eg: 2021-01-30T08:30:00Z"
        schema:
          type: string
          format: date-time
      - name: statusDateAfter
        in: query
        description: "The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z'\
          \ eg: 2021-01-30T08:30:00Z"
        schema:
          type: string
          format: date-time
      - name: statusDateBefore
        in: query
        description: "The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z'\
          \ eg: 2021-01-30T08:30:00Z"
        schema:
          type: string
          format: date-time
      - name: userTag
        in: query
        description: The usertags to filter on. The userTagMatchMode-parameter determines
          how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: userTagMatchMode
        in: query
        description: 'How the usertags are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: runInputTag
        in: query
        description: The runInputTags to filter on. The runInputTagMatchMode-parameter
          determines how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: runInputTagMatchMode
        in: query
        description: 'How the runInputTags are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: runOutputTag
        in: query
        description: The runOutputTags to filter on. The runOutputTagMatchMode-parameter
          determines how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: runOutputTagMatchMode
        in: query
        description: 'How the runOutputTags are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: connectorTag
        in: query
        description: The connectorTags to filter on. The connectorTagMatchMode-parameter
          determines how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: connectorTagMatchMode
        in: query
        description: 'How the connectorTags are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: technicalTag
        in: query
        description: The technicalTags to filter on. The techTagMatchMode-parameter
          determines how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: technicalTagMatchMode
        in: query
        description: 'How the technicalTags are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: notInRun
        in: query
        description: "When set to true, the data will be filtered on data which is\
          \ not used in a run."
        schema:
          type: boolean
      - name: notLinkedToSample
        in: query
        description: When set to true only data that is unlinked to a sample will
          be returned. This filter implies a filter of type File.
        schema:
          type: boolean
      - name: instrumentRunId
        in: query
        description: The instrument run IDs of the sequencing runs to filter on.
        schema:
          type: array
          items:
            type: string
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\n\nThe attributes for which sorting is supported:\n- timeCreated\n\
          - timeModified\n- name\n- path\n- fileSizeInBytes\n- status\n- format\n\
          - dataType\n- willBeArchivedAt\n- willBeDeletedAt"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of data is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/DataPagedList'
  /api/projects/{projectId}/data/nonSampleData:
    get:
      tags:
      - Project Data
      summary: Retrieve a list of project data not linked to a sample.
      operationId: getNonSampleProjectData
      parameters:
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of project data is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataPagedList'
  /api/projects/{projectId}/data/{dataId}:
    get:
      tags:
      - Project Data
      summary: Retrieve a project data.
      operationId: getProjectData
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The project data is successfully retrieved.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectData'
    put:
      tags:
      - Project Data
      summary: Update this project data.
      description: |+
        Fields which can be updated for files:
         - data.willBeArchivedAt
         - data.willBeDeletedAt
         - data.format
         - data.tags

        Fields which can be updated for folders:
         - data.tags

      operationId: updateProjectData
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The updated project data.
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/ProjectData'
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectData'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The project data is successfully updated.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectData'
    post:
      tags:
      - Project Data
      summary: Link data to this project.
      operationId: linkDataToProject
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The data is successfully linked to the project.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectData'
  /api/projects/{projectId}/data/{dataId}/children:
    get:
      tags:
      - Project Data
      summary: Retrieve the children of this data.
      description: "# Changelog\nFor this endpoint multiple versions exist. Note that\
        \ the values for request headers 'Content-Type' and 'Accept' must contain\
        \ a matching version.\n\n## [V3]\nInitial version\n## [V4]\nAdded pagination\n"
      operationId: getProjectDataChildren
      parameters:
      - name: fullText
        in: query
        description: To search through multiple fields of data.
        schema:
          type: string
      - name: id
        in: query
        description: The ids to filter on. This will always match exact.
        schema:
          type: array
          items:
            type: string
      - name: filename
        in: query
        description: The filenames to filter on. The filenameMatchMode-parameter determines
          how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: filenameMatchMode
        in: query
        description: 'How the filenames are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: status
        in: query
        description: The statuses to filter on.
        schema:
          type: array
          items:
            type: string
            enum:
            - PARTIAL
            - AVAILABLE
            - ARCHIVING
            - ARCHIVED
            - UNARCHIVING
            - DELETING
      - name: formatId
        in: query
        description: The IDs of the formats to filter on.
        schema:
          type: array
          items:
            type: string
      - name: formatCode
        in: query
        description: The codes of the formats to filter on.
        schema:
          type: array
          items:
            type: string
      - name: type
        in: query
        description: The type to filter on.
        schema:
          type: string
          enum:
          - FILE
          - FOLDER
      - name: creationDateAfter
        in: query
        description: "The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z'\
          \ eg: 2021-01-30T08:30:00Z"
        schema:
          type: string
          format: date-time
      - name: creationDateBefore
        in: query
        description: "The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z'\
          \ eg: 2021-01-30T08:30:00Z"
        schema:
          type: string
          format: date-time
      - name: statusDateAfter
        in: query
        description: "The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z'\
          \ eg: 2021-01-30T08:30:00Z"
        schema:
          type: string
          format: date-time
      - name: statusDateBefore
        in: query
        description: "The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z'\
          \ eg: 2021-01-30T08:30:00Z"
        schema:
          type: string
          format: date-time
      - name: userTag
        in: query
        description: The usertags to filter on. The userTagMatchMode-parameter determines
          how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: userTagMatchMode
        in: query
        description: 'How the usertags are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: runInputTag
        in: query
        description: The runInputTags to filter on. The runInputTagMatchMode-parameter
          determines how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: runInputTagMatchMode
        in: query
        description: 'How the runInputTags are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: runOutputTag
        in: query
        description: The runOutputTags to filter on. The runOutputTagMatchMode-parameter
          determines how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: runOutputTagMatchMode
        in: query
        description: 'How the runOutputTags are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: connectorTag
        in: query
        description: The connectorTags to filter on. The connectorTagMatchMode-parameter
          determines how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: connectorTagMatchMode
        in: query
        description: 'How the connectorTags are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: technicalTag
        in: query
        description: The technicalTags to filter on. The techTagMatchMode-parameter
          determines how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: technicalTagMatchMode
        in: query
        description: 'How the technicalTags are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: notInRun
        in: query
        description: "When set to true, the data will be filtered on data which is\
          \ not used in a run."
        schema:
          type: boolean
      - name: notLinkedToSample
        in: query
        description: When set to true only data that is unlinked to a sample will
          be returned.  This filter implies a filter of type File.
        schema:
          type: boolean
      - name: instrumentRunId
        in: query
        description: The instrument run IDs of the sequencing runs to filter on.
        schema:
          type: array
          items:
            type: string
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of data children is successfully retrieved.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/ProjectDataPagedList'
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/DataList'
  /api/projects/{projectId}/data/{dataId}/linkedProjects:
    get:
      tags:
      - Project Data
      summary: Retrieve a list of projects to which this data is linked.
      operationId: getProjectsLinkedToData
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of projects is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectList'
  /api/projects/{projectId}/data/{dataId}/secondaryData:
    get:
      tags:
      - Project Data
      summary: Retrieve a list of secondary data for data.
      operationId: getSecondaryData
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of secondary data is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/DataList'
  /api/projects/{projectId}/data/{dataId}/secondaryData/{secondaryDataId}:
    post:
      tags:
      - Project Data
      summary: Add secondary data to data.
      operationId: addSecondaryData
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      - name: secondaryDataId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The secondary data is successfully added.
    delete:
      tags:
      - Project Data
      summary: Remove secondary data from data.
      operationId: removeSecondaryData
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      - name: secondaryDataId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The secondary data is successfully removed.
  /api/projects/{projectId}/data/{dataId}:createInlineViewUrl:
    post:
      tags:
      - Project Data
      summary: Retrieve an URL for this data to use for inline view in a browser.
      description: "Can be used to view a file directly from the region where it is\
        \ located, no connector is needed."
      operationId: createInlineViewUrlForData
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The inline view URL is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/InlineView'
  /api/projects/{projectId}/data/{dataId}:createDownloadUrl:
    post:
      tags:
      - Project Data
      summary: Retrieve a download URL for this data.
      description: "Can be used to download a file directly from the region where\
        \ it is located, no connector is needed. Not applicable for Folder."
      operationId: createDownloadUrlForData
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The download URL is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/Download'
  /api/projects/{projectId}/data/{dataId}:createUploadUrl:
    post:
      tags:
      - Project Data
      summary: Retrieve an upload URL for this data.
      description: "Can be used to upload a file directly from the region where it\
        \ is located, no connector is needed. The project identifier must match the\
        \ project which owns the data. You can create both new files and overwrite\
        \ files in status 'partial'."
      operationId: createUploadUrlForData
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      - name: fileType
        in: query
        schema:
          type: string
      - name: hash
        in: query
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The upload URL is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/Upload'
  /api/projects/{projectId}/data/{dataId}:createTemporaryCredentials:
    post:
      tags:
      - Project Data
      summary: Retrieve temporary credentials for this data.
      description: "Can be used to upload or download a file directly from the region\
        \ where it is located, no connector is needed. The returned credentials expire\
        \ after 36 hours."
      operationId: createTemporaryCredentialsForData
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Temporary credentials request options.
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateTemporaryCredentials'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTemporaryCredentials'
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The temporary credentials are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/TempCredentials'
  /api/projects/{projectId}/data/{dataId}:scheduleDownload:
    post:
      tags:
      - Project Data
      summary: Schedule a download.
      description: "Endpoint for scheduling a download for the data specified by the\
        \ ID to a connector. This download will only start when the connector is running.\
        \ Data transfers for folder contents are created asynchronously, meaning that\
        \ they will not be immediately visible in the project data transfers end point.\
        \ This is a non-RESTful endpoint, as the path of this endpoint is not representing\
        \ a REST resource."
      operationId: scheduleDownloadForData
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/ScheduleDownload'
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleDownload'
        required: true
      responses:
        default:
          description: The datatransfer which is scheduled.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/DataTransfer'
  /api/projects/{projectId}/data/{dataId}:unlink:
    post:
      tags:
      - Project Data
      summary: Unlink data from this project.
      description: "Note that for folders, this only unlinks the folder itself, not\
        \ the folder contents!  Use 'Project Data Unlinking Batch' for recursive unlinking."
      operationId: unlinkDataFromProject
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The data is successfully unlinked from this project.
  /api/projects/{projectId}/data/{dataId}:archive:
    post:
      tags:
      - Project Data
      summary: Schedule this data for archival.
      description: "Endpoint for scheduling this data for archival. This will also\
        \ archive all files and directories below that data.This is a non-RESTful\
        \ endpoint, as the path of this endpoint is not representing a REST resource."
      operationId: archiveData
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The data is successfully scheduled for archival.
  /api/projects/{projectId}/data/{dataId}:unarchive:
    post:
      tags:
      - Project Data
      summary: Schedule this data for unarchival.
      description: "Endpoint for scheduling this data for unarchival. This will also\
        \ unarchive all files and directories below that data. This is a non-RESTful\
        \ endpoint, as the path of this endpoint is not representing a REST resource."
      operationId: unarchiveData
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The data is successfully scheduled for unarchival.
  /api/projects/{projectId}/data/{dataId}:delete:
    post:
      tags:
      - Project Data
      summary: Schedule this data for deletion.
      description: "Endpoint for scheduling this data for deletion. This will also\
        \ delete all files and directories below that data.This is a non-RESTful endpoint,\
        \ as the path of this endpoint is not representing a REST resource."
      operationId: deleteData
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The data is successfully scheduled for deletion.
  /api/projects/{projectId}/data/{dataId}/folderUploadSessions:
    post:
      tags:
      - Project Data
      summary: Create a trackable folder upload session.
      description: This endpoint can be used to ensure that all uploaded files within
        the requested session are accounted for. This call has to be used together
        with the :complete endpoint once upload is done.
      operationId: createFolderUploadSession
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Temporary credentials request options.
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateTemporaryCredentials'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTemporaryCredentials'
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The folder upload session is successfully created.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/FolderUploadSession'
  /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId}:
    get:
      tags:
      - Project Data
      summary: Retrieve folder upload session details.
      description: "Retrieve folder upload session details, including the current\
        \ status of your upload session."
      operationId: getFolderUploadSession
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      - name: folderUploadSessionId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The folder upload session details are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/FolderUploadSession'
  /api/projects/{projectId}/data/{dataId}/folderUploadSessions/{folderUploadSessionId}:complete:
    post:
      tags:
      - Project Data
      summary: Complete a trackable folder upload session.
      description: "Complete a trackable folder upload session. By completing the\
        \ folder upload session, and specifying how many files you have uploaded,\
        \ ICA can ensure that all uploaded files are accounted for."
      operationId: completeFolderUploadSession
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        required: true
        schema:
          type: string
      - name: folderUploadSessionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The info required to complete the folder upload session.
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CompleteFolderUploadSession'
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteFolderUploadSession'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The folder upload session is successfully completed.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/FolderUploadSession'
  /api/projects/{projectId}/dataCopyBatch:
    post:
      tags:
      - Project Data Copy Batch
      summary: Create a project data copy batch.
      operationId: createProjectDataCopyBatch
      parameters:
      - name: projectId
        in: path
        description: The ID of the project to which the data will be copied
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateProjectDataCopyBatch'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectDataCopyBatch'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The project data copy batch is successfully created.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataCopyBatch'
  /api/projects/{projectId}/dataCopyBatch/{batchId}:
    get:
      tags:
      - Project Data Copy Batch
      summary: Retrieve a project data copy batch.
      operationId: getProjectDataCopyBatch
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The project data copy batch is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataCopyBatch'
  /api/projects/{projectId}/dataCopyBatch/{batchId}/items:
    get:
      tags:
      - Project Data Copy Batch
      summary: Retrieve a list of project data copy batch items.
      operationId: getProjectDataCopyBatchItems
      parameters:
      - name: status
        in: query
        description: The statuses to filter on.
        schema:
          type: array
          items:
            type: string
            enum:
            - QUEUED
            - COPYING
            - COPIED
            - PARTIALLY_COPIED
            - FAILED
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of project data copy batch items is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataCopyBatchItemPagedList'
  /api/projects/{projectId}/dataCopyBatch/{batchId}/items/{itemId}:
    get:
      tags:
      - Project Data Copy Batch
      summary: Retrieve a project data copy batch item.
      operationId: getProjectDataCopyBatchItem
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: itemId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The project data copy batch item is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataCopyBatchItem'
  /api/projects/{projectId}/dataLinkingBatch:
    post:
      tags:
      - Project Data Linking Batch
      summary: Create a project data linking batch.
      description: "# Changelog\nFor this endpoint multiple versions exist. Note that\
        \ the values for request headers 'Content-Type' and 'Accept' must contain\
        \ a matching version.\n\n## [V3]\nInitial version deprecated.  It's recommended\
        \ to limit the amount of links per batch to 25.000.\nRecommended to use V4\
        \ for performance efficiency.\n## [V4]\nMore efficient, handles folder contents\
        \ via the folder item, instead of creating separate items for all contents.\n"
      operationId: createProjectDataLinkingBatch
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v4+json:
            schema:
              $ref: '#/components/schemas/CreateProjectDataLinkingBatch'
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateProjectDataLinkingBatch'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectDataLinkingBatch'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The project data linking batch is successfully created.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/ProjectDataLinkingBatch'
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataLinkingBatch'
  /api/projects/{projectId}/dataLinkingBatch/{batchId}:
    get:
      tags:
      - Project Data Linking Batch
      summary: Retrieve a project data linking batch.
      operationId: getProjectDataLinkingBatch
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The project data linking batch is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataLinkingBatch'
  /api/projects/{projectId}/dataLinkingBatch/{batchId}/items:
    get:
      tags:
      - Project Data Linking Batch
      summary: Retrieve a list of project data linking batch items.
      description: "# Changelog\nFor this endpoint multiple versions exist. Note that\
        \ the values for request headers 'Content-Type' and 'Accept' must contain\
        \ a matching version.\n\n## [V3]\nInitial version, deprecated, returns PARTIALLY_LINKED\
        \ item processing status as FAILED.\n## [V4]\nSupports PARTIALLY_LINKED item\
        \ processing status.\n"
      operationId: getProjectDataLinkingBatchItems
      parameters:
      - name: status
        in: query
        description: The statuses to filter on.
        schema:
          type: array
          items:
            type: string
            enum:
            - INITIALISED
            - WAITING_RESOURCES
            - RUNNING
            - LINKED
            - ALREADY_LINKED
            - FAILED
            - PARTIALLY_LINKED
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of project data linking batch items is successfully
            retrieved.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/ProjectDataLinkingBatchItemPagedListV4'
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataLinkingBatchItemPagedList'
  /api/projects/{projectId}/dataLinkingBatch/{batchId}/items/{itemId}:
    get:
      tags:
      - Project Data Linking Batch
      summary: Retrieve a project data linking batch item.
      description: "# Changelog\nFor this endpoint multiple versions exist. Note that\
        \ the values for request headers 'Content-Type' and 'Accept' must contain\
        \ a matching version.\n\n## [V3]\nInitial version, deprecated, returns PARTIALLY_LINKED\
        \ item processing status as FAILED.\n## [V4]\nSupports PARTIALLY_LINKED item\
        \ processing status.\n"
      operationId: getProjectDataLinkingBatchItem
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: itemId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The project data linking batch item is successfully retrieved.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/ProjectDataLinkingBatchItemV4'
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataLinkingBatchItem'
  /api/projects/{projectId}/dataMoveBatch:
    post:
      tags:
      - Project Data Move Batch
      summary: Create a project data move batch.
      operationId: createProjectDataMoveBatch
      parameters:
      - name: projectId
        in: path
        description: The ID of the project to which the data will be moved
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateProjectDataMoveBatch'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectDataMoveBatch'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The project data move batch is successfully created.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataMoveBatch'
  /api/projects/{projectId}/dataMoveBatch/{batchId}:
    get:
      tags:
      - Project Data Move Batch
      summary: Retrieve a project data move batch.
      operationId: getProjectDataMoveBatch
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The project data move batch is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataMoveBatch'
  /api/projects/{projectId}/dataMoveBatch/{batchId}/items:search:
    post:
      tags:
      - Project Data Move Batch
      summary: Retrieve a list of project data move batch items.
      operationId: getProjectDataMoveBatchItems
      parameters:
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/ProjectDataMoveBatchItemQueryParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectDataMoveBatchItemQueryParameters'
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of project data move batch items is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataMoveBatchItemPagedList'
  /api/projects/{projectId}/dataMoveBatch/{batchId}/items/{itemId}:
    get:
      tags:
      - Project Data Move Batch
      summary: Retrieve a project data move batch item.
      operationId: getProjectDataMoveBatchItem
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: itemId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The project data move batch item is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataMoveBatchItem'
  /api/projects/{projectId}/dataTransfers:
    get:
      tags:
      - Project Data Transfer
      summary: Retrieve a list of data transfers.
      description: "Retrieve a list of data transfers for the current app (session),\
        \ excluding web browser transfers."
      operationId: getDataTransfers
      parameters:
      - name: connector
        in: query
        description: The ID of the connector to filter on.
        schema:
          type: string
      - name: direction
        in: query
        description: The direction to filter on.
        schema:
          type: string
      - name: status
        in: query
        description: The status to filter on.
        schema:
          type: string
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\n\nThe attributes for which sorting is supported:\n- reference\n\
          - direction\n- connector\n- protocol\n- dataTransferred\n- status\n- statusMessage\n\
          - duration\n"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of data transfers is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/DataTransferPagedList'
  /api/projects/{projectId}/dataTransfers/{dataTransferId}:
    get:
      tags:
      - Project Data Transfer
      summary: Retrieve a data transfer.
      operationId: getDataTransfer
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataTransferId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The data transfer is successfully retrieved.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/DataTransfer'
  /api/projects/{projectId}/dataTransfers/{dataTransferId}:abort:
    post:
      tags:
      - Project Data Transfer
      summary: Abort a data transfer.
      description: "Endpoint for aborting a data transfer.This is a non-RESTful endpoint,\
        \ as the path of this endpoint is not representing a REST resource."
      operationId: abortDataTransfer
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: dataTransferId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The data transfer is successfully aborted.
  /api/projects/{projectId}/dataUnlinkingBatch:
    post:
      tags:
      - Project Data Unlinking Batch
      summary: Create a project data unlinking batch.
      operationId: createProjectDataUnlinkingBatch
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateProjectDataUnlinkingBatch'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The project data unlinking batch is successfully created.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataUnlinkingBatch'
  /api/projects/{projectId}/dataUnlinkingBatch/{batchId}:
    get:
      tags:
      - Project Data Unlinking Batch
      summary: Retrieve a project data unlinking batch.
      operationId: getProjectDataUnlinkingBatch
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The project data unlinking batch is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataUnlinkingBatch'
  /api/projects/{projectId}/dataUnlinkingBatch/{batchId}/items:
    get:
      tags:
      - Project Data Unlinking Batch
      summary: Retrieve a list of project data unlinking batch items.
      operationId: getProjectDataUnlinkingBatchItems
      parameters:
      - name: status
        in: query
        description: The statuses to filter on.
        schema:
          type: array
          items:
            type: string
            enum:
            - INITIALISED
            - WAITING_RESOURCES
            - RUNNING
            - UNLINKED
            - ALREADY_UNLINKED
            - FAILED
            - PARTIALLY_UNLINKED
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of project data unlinking batch items is successfully
            retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataUnlinkingBatchItemPagedList'
  /api/projects/{projectId}/dataUnlinkingBatch/{batchId}/items/{itemId}:
    get:
      tags:
      - Project Data Unlinking Batch
      summary: Retrieve a project data unlinking batch item.
      operationId: getProjectDataUnlinkingBatchItem
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: itemId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The project data unlinking batch item is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataUnlinkingBatchItem'
  /api/projects/{projectId}/dataUpdateBatch:
    post:
      tags:
      - Project Data Update Batch
      summary: Create a project data update batch.  Folder contents will be updated
        recursively.  Time archive/delete cannot be defined for folders.
      description: Avoid specifying more than 5000 total dataIds per call if possible
        (specifying more than 100000 is not allowed).
      operationId: createProjectDataUpdateBatch
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateProjectDataUpdateBatch'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectDataUpdateBatch'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The project data update batch is successfully created.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataUpdateBatch'
  /api/projects/{projectId}/dataUpdateBatch/{batchId}:
    get:
      tags:
      - Project Data Update Batch
      summary: Retrieve a project data update batch.
      operationId: getProjectDataUpdateBatch
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The project data update batch is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataUpdateBatch'
  /api/projects/{projectId}/dataUpdateBatch/{batchId}/items:
    get:
      tags:
      - Project Data Update Batch
      summary: Retrieve a list of project data update batch items.
      operationId: getProjectDataUpdateBatchItems
      parameters:
      - name: status
        in: query
        description: The statuses to filter on.
        schema:
          type: array
          items:
            type: string
            enum:
            - INITIALISED
            - WAITING_RESOURCES
            - UPDATING
            - UPDATED
            - PARTIALLY_UPDATED
            - FAILED
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of project data update batch items is successfully
            retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataUpdateBatchItemPagedList'
  /api/projects/{projectId}/dataUpdateBatch/{batchId}/items/{itemId}:
    get:
      tags:
      - Project Data Update Batch
      summary: Retrieve a project data update batch item.
      operationId: getProjectDataUpdateBatchItem
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: itemId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The project data update batch item is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataUpdateBatchItem'
  /api/projects/{projectId}/notificationSubscriptions:
    get:
      tags:
      - Project Notification Subscriptions
      summary: Retrieve notification subscriptions
      operationId: getNotificationSubscriptions
      parameters:
      - name: projectId
        in: path
        description: The ID of the project
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The notification subscriptions are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/NotificationSubscriptionList'
    post:
      tags:
      - Project Notification Subscriptions
      summary: Create a notification subscription
      operationId: createNotificationSubscription
      parameters:
      - name: projectId
        in: path
        description: The ID of the project
        required: true
        schema:
          type: string
      requestBody:
        description: The new subscription
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateNotificationSubscription'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNotificationSubscription'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The notification subscription is successfully created.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/NotificationSubscription'
  /api/projects/{projectId}/notificationSubscriptions/{subscriptionId}:
    get:
      tags:
      - Project Notification Subscriptions
      summary: Retrieve a notification subscription
      operationId: getNotificationSubscription
      parameters:
      - name: projectId
        in: path
        description: The ID of the project
        required: true
        schema:
          type: string
      - name: subscriptionId
        in: path
        description: The ID of the notification subscription
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The notification subscription is successfully retrieved.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/NotificationSubscription'
    put:
      tags:
      - Project Notification Subscriptions
      summary: Update a notification subscription
      description: |
        Fields which can be updated:
         - enabled
         - eventCode
         - filterExpression
         - notificationChannel
      operationId: updateNotificationSubscription
      parameters:
      - name: projectId
        in: path
        description: The ID of the project
        required: true
        schema:
          type: string
      - name: subscriptionId
        in: path
        description: The ID of the notification subscription to update
        required: true
        schema:
          type: string
      - name: If-Match
        in: header
        description: "Optional header parameter to enable conflict exposure. If the\
          \ client provides this header, then it must contains the client's most recent\
          \ value of the 'ETag' response header, and the server will respond with\
          \ a 409 code if it detects a conflict. If the client does not provide this\
          \ header, then the server will not do a conflict check, which means that\
          \ as a client you can override the resource even when the server has a more\
          \ recent version."
        schema:
          type: string
      requestBody:
        description: The updated subscription
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/NotificationSubscription'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSubscription'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The notification subscription is successfully updated.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/NotificationSubscription'
    delete:
      tags:
      - Project Notification Subscriptions
      summary: Delete a notification subscription
      operationId: deleteNotificationSubscription
      parameters:
      - name: projectId
        in: path
        description: The ID of the project
        required: true
        schema:
          type: string
      - name: subscriptionId
        in: path
        description: The ID of the notification subscription to delete
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The notification subscription is successfully deleted
  /api/projects/{projectId}/permissions:
    get:
      tags:
      - Project Permission
      summary: Retrieve a list of project permissions.
      description: "# Changelog\nFor this endpoint multiple versions exist. Note that\
        \ the values for request headers 'Content-Type' and 'Accept' must contain\
        \ a matching version.\n\n## [V3]\nInitial version\n## [V4]\nAdded 'Administrator'\
        \ role for Bench.\nThe role attributes are strings instead of enums to support\
        \ future additions in a backward compatible manner.\n"
      operationId: getProjectPermissions
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of project permissions is successfully retrieved.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/ProjectPermissionListV4'
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectPermissionList'
    post:
      tags:
      - Project Permission
      summary: Create a project permission.
      description: "# Changelog\nFor this endpoint multiple versions exist. Note that\
        \ the values for request headers 'Content-Type' and 'Accept' must contain\
        \ a matching version.\n\n## [V3]\nInitial version\n## [V4]\nAdded 'Administrator'\
        \ role for Bench.\nThe role attributes are strings instead of enums to support\
        \ future additions in a backward compatible manner.\n"
      operationId: createProjectPermission
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v4+json:
            schema:
              $ref: '#/components/schemas/CreateProjectPermissionV4'
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateProjectPermission'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectPermission'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The project permission is successfully created.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/ProjectPermissionV4'
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectPermission'
  /api/projects/{projectId}/permissions/{permissionId}:
    get:
      tags:
      - Project Permission
      summary: Retrieve a project permission.
      description: "# Changelog\nFor this endpoint multiple versions exist. Note that\
        \ the values for request headers 'Content-Type' and 'Accept' must contain\
        \ a matching version.\n\n## [V3]\nInitial version\n## [V4]\nAdded 'Administrator'\
        \ role for Bench.\nThe role attributes are strings instead of enums to support\
        \ future additions in a backward compatible manner.\n"
      operationId: getProjectPermission
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: permissionId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The project permission is successfully retrieved.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/ProjectPermissionV4'
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectPermission'
    put:
      tags:
      - Project Permission
      summary: Update a project permission.
      description: "# Changelog\nFor this endpoint multiple versions exist. Note that\
        \ the values for request headers 'Content-Type' and 'Accept' must contain\
        \ a matching version.\n\n## [V3]\nInitial version\n## [V4]\nAdded 'Administrator'\
        \ role for Bench.\nThe role attributes are strings instead of enums to support\
        \ future additions in a backward compatible manner.\nFields which can be updated:\n\
        - uploadAllowed\n- downloadAllowed\n- roleProject\n- roleFlow\n- roleBase\n\
        - roleBench"
      operationId: updateProjectPermission
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: permissionId
        in: path
        required: true
        schema:
          type: string
      - name: If-Match
        in: header
        description: "Optional header parameter to enable conflict exposure. If the\
          \ client provides this header, then it must contains the client's most recent\
          \ value of the 'ETag' response header, and the server will respond with\
          \ a 409 code if it detects a conflict. If the client does not provide this\
          \ header, then the server will not do a conflict check, which means that\
          \ as a client you can override the resource even when the server has a more\
          \ recent version."
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v4+json:
            schema:
              $ref: '#/components/schemas/ProjectPermissionV4'
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/ProjectPermission'
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectPermission'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The project permission is successfully updated.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/ProjectPermissionV4'
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectPermission'
  /api/projects/{projectId}/pipelines:
    get:
      tags:
      - Project Pipeline
      summary: Retrieve a list of project pipelines.
      description: Lists all pipelines that are available to the project.
      operationId: getProjectPipelines
      parameters:
      - name: projectId
        in: path
        description: The ID of the project to retrieve pipelines for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of project pipelines is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectPipelineList'
  /api/projects/{projectId}/pipelines/{pipelineId}:
    get:
      tags:
      - Project Pipeline
      summary: Retrieve a project pipeline.
      description: "Retrieves a project pipeline. This can be a pipeline from a linked\
        \ bundle or an entitled, unlinked bundle."
      operationId: getProjectPipeline
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to retrieve
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The project pipeline is successfully retrieved.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectPipeline'
    post:
      tags:
      - Project Pipeline
      summary: Link a pipeline to a project.
      operationId: linkPipelineToProject
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the pipeline
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The pipeline is successfully linked to the project.
    delete:
      tags:
      - Project Pipeline
      summary: Unlink a pipeline from a project.
      operationId: unlinkPipelineFromProject
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the pipeline
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The pipeline is successfully unlinked from the project.
  /api/projects/{projectId}/pipelines/{pipelineId}/inputParameters:
    get:
      tags:
      - Project Pipeline
      summary: Retrieve input parameters for a project pipeline.
      description: The pipeline can originate from a linked bundle.
      operationId: getProjectPipelineInputParameters
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to retrieve input parameters for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The input parameters are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/InputParameterList'
  /api/projects/{projectId}/pipelines/{pipelineId}/configurationParameters:
    get:
      tags:
      - Project Pipeline
      summary: Retrieve configuration parameters for a project pipeline.
      description: The pipeline can originate from a linked bundle.
      operationId: getProjectPipelineConfigurationParameters
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to retrieve input parameters for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The configuration parameters are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/PipelineConfigurationParameterList'
  /api/projects/{projectId}/pipelines/{pipelineId}/referenceSets:
    get:
      tags:
      - Project Pipeline
      summary: Retrieve the reference sets of a project pipeline.
      description: Retrieve the reference sets of a project pipeline. This can be
        a pipeline from a linked bundle.
      operationId: getProjectPipelineReferenceSets
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the pipeline to retrieve reference sets for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of reference sets is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ReferenceSetList'
  /api/projects/{projectId}/pipelines/{pipelineId}:release:
    post:
      tags:
      - Project Pipeline
      summary: Release a pipeline.
      operationId: releaseProjectPipeline
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the pipeline
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The pipeline is successfully released.
  /api/projects/{projectId}/pipelines/{pipelineId}/documentation/HTML:
    get:
      tags:
      - Project Pipeline
      summary: Retrieve HTML documentation for a project pipeline.
      description: Retrieve HTML documentation for a project pipeline. This can be
        a pipeline from a linked bundle.
      operationId: getProjectPipelineHtmlDocumentation
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to retrieve HTML documentation
          from
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The HTML documentation is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/PipelineHtmlDocumentation'
  /api/projects/{projectId}/pipelines/{pipelineId}/files:
    get:
      tags:
      - Project Pipeline
      summary: Retrieve files for a project pipeline.
      operationId: getProjectPipelineFiles
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to retrieve files for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The files are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/PipelineFileList'
    post:
      tags:
      - Project Pipeline
      summary: Create a file for a pipeline.
      operationId: createProjectPipelineFile
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to create a file for
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PipelineFileContentSpec'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The pipeline file is successfully created.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/PipelineFile'
  /api/projects/{projectId}/pipelines/{pipelineId}/files/{fileId}/content:
    get:
      tags:
      - Project Pipeline
      summary: Download the contents of a pipeline file.
      operationId: downloadProjectPipelineFileContent
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to retrieve files for
        required: true
        schema:
          type: string
      - name: fileId
        in: path
        description: The ID of the pipeline file
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The pipeline file is successfully downloaded.
          headers:
            Content-Disposition:
              description: Contains name of the file to be downloaded.
              style: simple
              schema:
                type: string
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    put:
      tags:
      - Project Pipeline
      summary: Update the contents of a file for a pipeline.
      operationId: updateProjectPipelineFile
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to update a file for
        required: true
        schema:
          type: string
      - name: fileId
        in: path
        description: The ID of the pipeline file
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PipelineFileContentSpec'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The pipeline file is successfully updated.
  /api/projects/{projectId}/pipelines/{pipelineId}/files/{fileId}:
    delete:
      tags:
      - Project Pipeline
      summary: Delete a file for a pipeline.
      operationId: deleteProjectPipelineFile
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to delete a file for
        required: true
        schema:
          type: string
      - name: fileId
        in: path
        description: The ID of the pipeline file
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The pipeline file is successfully deleted.
  /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/inputFormFile:
    get:
      tags:
      - Project Pipeline
      summary: Download the contents of the input form file.
      operationId: downloadInputFormFileContent
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to retrieve the input form file
          for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The input form file is successfully downloaded.
          headers:
            Content-Disposition:
              description: Contains name of the file to be downloaded.
              style: simple
              schema:
                type: string
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    put:
      tags:
      - Project Pipeline
      summary: Update the contents of the input form file for a pipeline.
      operationId: updateInputFormFile
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to update a file for
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PipelineFileContentSpec'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The input  form file is successfully updated.
  /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/onSubmitFile:
    get:
      tags:
      - Project Pipeline
      summary: Download the contents of the onSubmit file.
      operationId: downloadOnSubmitFileContent
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to retrieve the onSubmit file
          for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The onSubmit file is successfully downloaded.
          headers:
            Content-Disposition:
              description: Contains name of the onSubmit file to be downloaded.
              style: simple
              schema:
                type: string
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    put:
      tags:
      - Project Pipeline
      summary: Update the contents of the onSubmit file for a pipeline.
      operationId: updateOnSubmitFile
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to update the onSubmit file for
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PipelineFileContentSpec'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The onSubmit file is successfully updated.
  /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/onRenderFile:
    get:
      tags:
      - Project Pipeline
      summary: Download the contents of the onRender file.
      operationId: downloadOnRenderFileContent
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to retrieve the onRender file
          for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The onRender file is successfully downloaded.
          headers:
            Content-Disposition:
              description: Contains name of the onRender file to be downloaded.
              style: simple
              schema:
                type: string
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    put:
      tags:
      - Project Pipeline
      summary: Update the contents of the onRender file for a pipeline.
      operationId: updateOnRenderFile
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to update the onRender file for
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PipelineFileContentSpec'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The onRender file is successfully updated.
  /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles:
    get:
      tags:
      - Project Pipeline
      summary: Retrieve additional input form files for a project pipeline.
      operationId: getProjectPipelineAdditionalFiles
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to retrieve files for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The files are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/PipelineFileList'
    post:
      tags:
      - Project Pipeline
      summary: Create an additional input form file for a pipeline.
      operationId: createAdditionalProjectPipelineFile
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to create a file for
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PipelineFileContentSpec'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The pipeline file is successfully created.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/PipelineFile'
  /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles/{fileId}/content:
    get:
      tags:
      - Project Pipeline
      summary: Download the contents of an additional input form file.
      operationId: downloadAdditionalFileContent
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to retrieve the additional file
          for
        required: true
        schema:
          type: string
      - name: fileId
        in: path
        description: The ID of the additional file
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The file is successfully downloaded.
          headers:
            Content-Disposition:
              description: Contains name of the additional file to be downloaded.
              style: simple
              schema:
                type: string
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    put:
      tags:
      - Project Pipeline
      summary: Update the contents of an additional input form file.
      operationId: updateAdditionalFile
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to update the additional file
          for
        required: true
        schema:
          type: string
      - name: fileId
        in: path
        description: The ID of the additional file
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PipelineFileContentSpec'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The file is successfully updated.
  /api/projects/{projectId}/pipelines/{pipelineId}/inputForm/additionalFiles/{fileId}:
    delete:
      tags:
      - Project Pipeline
      summary: Delete an additional input form file for a pipeline.
      operationId: deleteAdditionalProjectPipelineFile
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: pipelineId
        in: path
        description: The ID of the project pipeline to delete an additional file for
        required: true
        schema:
          type: string
      - name: fileId
        in: path
        description: The ID of the pipeline file
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The pipeline file is successfully deleted.
  /api/projects/{projectId}/pipelines:createNextflowJsonPipeline:
    post:
      tags:
      - Project Pipeline
      summary: Create a JSON based Nextflow pipeline within a project.
      operationId: createNextflowJsonPipeline
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateNextflowJsonPipeline'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The Nextflow pipeline is successfully created.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/PipelineV4'
  /api/projects/{projectId}/pipelines:createNextflowPipeline:
    post:
      tags:
      - Project Pipeline
      summary: Create a Nextflow pipeline within a project.
      operationId: createNextflowPipeline
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateNextflowPipeline'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The Nextflow pipeline is successfully created.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectPipeline'
  /api/projects/{projectId}/pipelines:createCwlJsonPipeline:
    post:
      tags:
      - Project Pipeline
      summary: Create a JSON based CWL pipeline within a project.
      operationId: createCwlJsonPipeline
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateCwlJsonPipeline'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The CWL pipeline is successfully created.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/ProjectPipelineV4'
  /api/projects/{projectId}/pipelines:createCwlPipeline:
    post:
      tags:
      - Project Pipeline
      summary: Create a CWL pipeline within a project.
      operationId: createCwlPipeline
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateCwlPipeline'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The CWL pipeline is successfully created.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectPipeline'
  /api/projects/{projectId}/samples:
    post:
      tags:
      - Project Sample
      summary: Create a new sample in this project
      operationId: createSampleInProject
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateSample'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSample'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The sample is successfully created.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectSample'
  /api/projects/{projectId}/samples/{sampleId}:
    get:
      tags:
      - Project Sample
      summary: Retrieve a project sample.
      operationId: getProjectSample
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        description: The ID of the sample
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The project sample is successfully retrieved.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectSample'
    put:
      tags:
      - Project Sample
      summary: Update a project sample.
      description: |-
        Fields which can be updated:
        - sample.name
        - sample.description
        - sample.status
        - sample.tags
      operationId: updateProjectSample
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        required: true
        schema:
          type: string
      - name: If-Match
        in: header
        description: "Optional header parameter to enable conflict exposure. If the\
          \ client provides this header, then it must contains the client's most recent\
          \ value of the 'ETag' response header, and the server will respond with\
          \ a 409 code if it detects a conflict. If the client does not provide this\
          \ header, then the server will not do a conflict check, which means that\
          \ as a client you can override the resource even when the server has a more\
          \ recent version."
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/ProjectSample'
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectSample'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The sample is successfully updated.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectSample'
    post:
      tags:
      - Project Sample
      summary: Link a sample to a project.
      operationId: linkSampleToProject
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The sample is successfully linked to the project.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectSample'
  /api/projects/{projectId}/samples/{sampleId}/history:
    get:
      tags:
      - Project Sample
      summary: Retrieve sample history.
      operationId: getSampleHistory
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        description: The ID of the sample
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The sample history is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/SampleHistoryList'
  /api/projects/{projectId}/samples/{sampleId}:complete:
    post:
      tags:
      - Project Sample
      summary: Completes the sample after data has been linked to it.
      description: Completes the sample after data has been linked to it. The sample
        status will be set to 'Available' and a sample completed event will be triggered
        as well.
      operationId: completeProjectSample
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The sample is successfully completed.
  /api/projects/{projectId}/samples/{sampleId}:unlink:
    post:
      tags:
      - Project Sample
      summary: Unlink a sample from a project.
      operationId: unlinkSampleFromProject
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The sample is successfully unlinked from the project.
  /api/projects/{projectId}/samples/{sampleId}/projects:
    get:
      tags:
      - Project Sample
      summary: Retrieve a list of projects for this sample.
      operationId: getProjectsForSample
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        description: The ID of the sample
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of projects is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectList'
  /api/projects/{projectId}/samples/{sampleId}/analyses:
    get:
      tags:
      - Project Sample
      summary: Retrieve the list of analyses.
      description: This endpoint only returns V3 items. Use the search endpoint to
        get V4 items.
      operationId: getProjectSampleAnalyses
      parameters:
      - name: reference
        in: query
        description: The reference to filter on.
        schema:
          type: string
      - name: userreference
        in: query
        description: The user-reference to filter on.
        schema:
          type: string
      - name: status
        in: query
        description: The status to filter on.
        schema:
          type: string
      - name: usertag
        in: query
        description: The user-tags to filter on.
        schema:
          type: string
      - name: technicaltag
        in: query
        description: The technical-tags to filter on.
        schema:
          type: string
      - name: referencetag
        in: query
        description: The reference-data-tags to filter on.
        schema:
          type: string
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\n\nThe attributes for which sorting is supported:\n- reference\n\
          - userReference\n- pipeline\n- status\n- startDate\n- endDate\n- summary\n"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        description: The ID of the sample
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of project analyses is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/AnalysisPagedListV3'
      deprecated: true
  /api/projects/{projectId}/samples/{sampleId}/analyses:search:
    post:
      tags:
      - Project Sample
      summary: Search analyses for sample.
      operationId: searchProjectSampleAnalyses
      parameters:
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\n\nThe attributes for which sorting is supported:\n- reference\n\
          - userReference\n- pipeline\n- status\n- startDate\n- endDate\n- summary\n"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        description: The ID of the sample
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/AnalysisQueryParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisQueryParameters'
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of project analyses is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/AnalysisPagedListV4'
  /api/projects/{projectId}/samples/{sampleId}/data:
    get:
      tags:
      - Project Sample
      summary: Retrieve the list of sample data.
      operationId: getSampleDataList
      parameters:
      - name: fullText
        in: query
        description: To search through multiple fields of data.
        schema:
          type: string
      - name: id
        in: query
        description: The ids to filter on. This will always match exact.
        schema:
          type: array
          items:
            type: string
      - name: filename
        in: query
        description: The filenames to filter on. The filenameMatchMode-parameter determines
          how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: filenameMatchMode
        in: query
        description: 'How the filenames are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: filePath
        in: query
        description: The paths of the files to filter on.
        schema:
          type: array
          items:
            type: string
      - name: filePathMatchMode
        in: query
        description: "How the file paths are filtered: \n - STARTS_WITH_CASE_INSENSITIVE:\
          \ Filters the file path to start with the value of the 'filePath' parameter,\
          \ regardless of upper/lower casing. This allows e.g. listing all data in\
          \ a folder and all it's sub-folders (recursively).\n - FULL_CASE_INSENSITIVE:\
          \ Filters the file path to fully match the value of the 'filePath' parameter,\
          \ regardless of upper/lower casing. Note that this can result in multiple\
          \ results if e.g. two files exist with the same filename but different casing\
          \ (abc.txt and ABC.txt)."
        schema:
          type: string
          default: STARTS_WITH_CASE_INSENSITIVE
          enum:
          - STARTS_WITH_CASE_INSENSITIVE
          - FULL_CASE_INSENSITIVE
      - name: status
        in: query
        description: The statuses to filter on.
        schema:
          type: array
          items:
            type: string
            enum:
            - PARTIAL
            - AVAILABLE
            - ARCHIVING
            - ARCHIVED
            - UNARCHIVING
            - DELETING
      - name: formatId
        in: query
        description: The IDs of the formats to filter on.
        schema:
          type: array
          items:
            type: string
      - name: formatCode
        in: query
        description: The codes of the formats to filter on.
        schema:
          type: array
          items:
            type: string
      - name: type
        in: query
        description: The type to filter on.
        schema:
          type: string
          enum:
          - FILE
          - FOLDER
      - name: parentFolderId
        in: query
        description: "The IDs of parents folders to filter on. Lists all files and\
          \ folders within the folder for the given ID, non-recursively."
        schema:
          type: array
          items:
            type: string
      - name: parentFolderPath
        in: query
        description: "The full path of the parent folder. Should start and end with\
          \ a '/'. Lists all files and folders within the folder for the given path,\
          \ non-recursively. This can be used to browse through the hierarchical tree\
          \ of folders, e.g. traversing one level up can be done by removing the last\
          \ part of the path. This does not work for contents from a linked folder\
          \ apposed to individual linked files."
        schema:
          type: string
      - name: creationDateAfter
        in: query
        description: "The date after which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z'\
          \ eg: 2021-01-30T08:30:00Z"
        schema:
          type: string
          format: date-time
      - name: creationDateBefore
        in: query
        description: "The date before which the data is created. Format: yyyy-MM-dd'T'HH:mm:ss'Z'\
          \ eg: 2021-01-30T08:30:00Z"
        schema:
          type: string
          format: date-time
      - name: statusDateAfter
        in: query
        description: "The date after which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z'\
          \ eg: 2021-01-30T08:30:00Z"
        schema:
          type: string
          format: date-time
      - name: statusDateBefore
        in: query
        description: "The date before which the status has been updated. Format: yyyy-MM-dd'T'HH:mm:ss'Z'\
          \ eg: 2021-01-30T08:30:00Z"
        schema:
          type: string
          format: date-time
      - name: userTag
        in: query
        description: The usertags to filter on. The userTagMatchMode-parameter determines
          how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: userTagMatchMode
        in: query
        description: 'How the usertags are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: runInputTag
        in: query
        description: The runInputTags to filter on. The runInputTagMatchMode-parameter
          determines how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: runInputTagMatchMode
        in: query
        description: 'How the runInputTags are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: runOutputTag
        in: query
        description: The runOutputTags to filter on. The runOutputTagMatchMode-parameter
          determines how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: runOutputTagMatchMode
        in: query
        description: 'How the runOutputTags are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: connectorTag
        in: query
        description: The connectorTags to filter on. The connectorTagMatchMode-parameter
          determines how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: connectorTagMatchMode
        in: query
        description: 'How the connectorTags are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: technicalTag
        in: query
        description: The technicalTags to filter on. The techTagMatchMode-parameter
          determines how the filtering is done.
        schema:
          type: array
          items:
            type: string
      - name: technicalTagMatchMode
        in: query
        description: 'How the technicalTags are filtered. '
        schema:
          type: string
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
      - name: notInRun
        in: query
        description: "When set to true, the data will be filtered on data which is\
          \ not used in a run."
        schema:
          type: boolean
      - name: instrumentRunId
        in: query
        description: The instrument run IDs of the sequencing runs to filter on.
        schema:
          type: array
          items:
            type: string
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\n\nThe attributes for which sorting is supported:\n- timeCreated\n\
          - timeModified\n- name\n- path\n- fileSizeInBytes\n- status\n- format\n\
          - dataType\n- willBeArchivedAt\n- willBeDeletedAt"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        description: The ID of the sample to retrieve data for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of sample data is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/DataPagedList'
  /api/projects/{projectId}/samples/{sampleId}/data/{dataId}:
    post:
      tags:
      - Project Sample
      summary: Link data to a sample.
      operationId: linkDataToSample
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        description: The ID of the sample
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        description: The ID of the data to link
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The data is successfully linked to the sample.
  /api/projects/{projectId}/samples/{sampleId}/data/{dataId}:unlink:
    post:
      tags:
      - Project Sample
      summary: Unlink data from a sample.
      operationId: unlinkDataFromSample
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        description: The ID of the sample
        required: true
        schema:
          type: string
      - name: dataId
        in: path
        description: The ID of the data to unlink
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The data is successfully unlinked from the sample.
  /api/projects/{projectId}/samples/{sampleId}:deleteDeep:
    post:
      tags:
      - Project Sample
      summary: Delete a sample together with all of its data.
      description: "Endpoint deleting a sample together with all of its data.This\
        \ is a non-RESTful endpoint, as the path of this endpoint is not representing\
        \ a REST resource."
      operationId: deepDeleteSample
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        description: The ID of the sample
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The sample and all of its data are successfully deleted.
  /api/projects/{projectId}/samples/{sampleId}:deleteWithInput:
    post:
      tags:
      - Project Sample
      summary: Delete a sample as well as its input data.
      description: "Endpoint for deleting a sample as well as its input data.This\
        \ is a non-RESTful endpoint, as the path of this endpoint is not representing\
        \ a REST resource."
      operationId: deleteSampleWithInput
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        description: The ID of the sample
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The sample and its input data are successfully deleted.
  /api/projects/{projectId}/samples/{sampleId}:deleteMark:
    post:
      tags:
      - Project Sample
      summary: Mark a sample deleted.
      description: "Endpoint for marking a sample as deleted.This is a non-RESTful\
        \ endpoint, as the path of this endpoint is not representing a REST resource."
      operationId: markSampleDeleted
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        description: The ID of the sample
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The sample is successfully marked as deleted.
  /api/projects/{projectId}/samples/{sampleId}:deleteUnlink:
    post:
      tags:
      - Project Sample
      summary: Delete a sample and unlink its data.
      description: "Endpoint for deleting a sample while unlinking its data.This is\
        \ a non-RESTful endpoint, as the path of this endpoint is not representing\
        \ a REST resource."
      operationId: deleteAndUnlinkSample
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        description: The ID of the sample
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The sample is successfully deleted and the its data is successfully
            unlinked.
  /api/projects/{projectId}/samples/{sampleId}/metadata/{metadataModelId}:
    post:
      tags:
      - Project Sample
      summary: Add a metadata model to a sample.
      operationId: addMetadataModelToSample
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        description: The ID of the sample
        required: true
        schema:
          type: string
      - name: metadataModelId
        in: path
        description: The ID of the metadata model
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The metadata model is successfully added to the sample.
      deprecated: true
  /api/projects/{projectId}/samples/{sampleId}/metadata:updateFields:
    post:
      tags:
      - Project Sample
      summary: Update metadata fields.
      description: "Endpoint for updating metadata fields.This is a non-RESTful endpoint,\
        \ as the path of this endpoint is not representing a REST resource."
      operationId: updateSampleMetadataFields
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/UpdateMetadata'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMetadata'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The metadata is successfully updated.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/Sample'
  /api/projects/{projectId}/samples/{sampleId}/metadata/field/{fieldId}:
    get:
      tags:
      - Project Sample
      summary: Retrieve a metadata field.
      description: Returns a list of values for the field with identifier fieldId
        belonging to the sample with identifier sampleId. If the field is a group
        field that can occur more than once or belongs to a group field that can occur
        more than once the return value will have one entry in the list for each occurrence.
        If not the return value will be a single value list
      operationId: getSampleMetadataField
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        description: The ID of the sample
        required: true
        schema:
          type: string
      - name: fieldId
        in: path
        description: The ID of the field
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: 'The metadata field is successfully retrieved. '
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/Field'
  /api/projects/{projectId}/samples/{sampleId}/metadata/{fieldId}/fieldCount:
    get:
      tags:
      - Project Sample
      summary: Retrieves the number of occurrences of a given field.
      description: Returns a list of values for the field with identifier fieldId
        belonging to the sample with identifier sampleId. If the field is a group
        field that can occur more than once or belongs to a group field that can occur
        more than once the return value will have one entry in the list for each occurrence.
        If not the return value will be a single value list
      operationId: getSampleMetadataFieldCount
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: sampleId
        in: path
        description: The ID of the sample
        required: true
        schema:
          type: string
      - name: fieldId
        in: path
        description: The ID of the field
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: 'The number of occurrences is successfully retrieved. '
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/Field'
  /api/projects/{projectId}/sampleCreationBatch:
    post:
      tags:
      - Project Sample Batch
      summary: Create a sample creation batch.
      operationId: createSampleCreationBatch
      parameters:
      - name: Idempotency-Key
        in: header
        description: "The Idempotency-Key header can be used to prevent duplicate\
          \ requests and support retries. It is implemented according to the IETF\
          \ spec, with one exception (see below). The header value is allowed to be\
          \ max 255 characters long. If the header is supplied for a successful response\
          \ (HTTP status code < 400) then the response \nwill be saved for 7 days\
          \ for the specific API endpoint, header value and user reference. When the\
          \ same user makes \na new request within 7 days to the same API endpoint\
          \ with the same Idempotency-Key header value, following use cases can occur:<br\
          \ /><ul><li>the request body is the same as the previous request and an\
          \ answer is stored => the stored response is returned without executing\
          \ the request again.</li><li>the request body is the same as the previous\
          \ request and no answer is stored because the previous request has not finished\
          \ => 409 error response, which indicates that the original call is still\
          \ in progress.</li><li>the request body is not the same as the previous\
          \ request => 422 error response, as this is not allowed.</li></ul>This means\
          \ that each time when executing a new API request using the Idempotency-Key\
          \ header, the request has to contain a\nnew header value that hasn't been\
          \ used (successfully) in the past 7 days for that specific API endpoint\
          \ and by the specific user.\nFor error responses (HTTP status code >= 400)\
          \ we allow clients to retry the call. This is where we don't follow the\
          \ IETF specification."
        schema:
          maxLength: 255
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateSampleCreationBatch'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateSampleCreationBatch'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSampleCreationBatch'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The sample creation batch is successfully created.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/SampleCreationBatch'
  /api/projects/{projectId}/sampleCreationBatch/{batchId}:
    get:
      tags:
      - Project Sample Batch
      summary: Retrieve a sample creation batch.
      operationId: getSampleCreationBatch
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        description: The ID of the sample creation batch
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The sample creation batch is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/SampleCreationBatch'
  /api/projects/{projectId}/sampleCreationBatch/{batchId}/items:
    get:
      tags:
      - Project Sample Batch
      summary: Retrieve a list of sample creation batch items.
      operationId: getSampleCreationBatchItems
      parameters:
      - name: status
        in: query
        description: The statuses to filter on.
        schema:
          type: array
          items:
            type: string
            enum:
            - INITIALIZED
            - WAITING_RESOURCES
            - RUNNING
            - SUCCEEDED
            - PARTIALLY_SUCCEEDED
            - FAILED
            - STOPPED
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        description: The ID of the sample creation batch
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of sample creation batch items is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/SampleCreationBatchItemPagedList'
  /api/projects/{projectId}/sampleCreationBatch/{batchId}/items/{itemId}:
    get:
      tags:
      - Project Sample Batch
      summary: Retrieve a sample creation batch item.
      operationId: getSampleCreationBatchItem
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: batchId
        in: path
        description: The ID of the sample creation batch
        required: true
        schema:
          type: string
          format: uuid
      - name: itemId
        in: path
        description: The ID of the sample creation batch item
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The sample creation batch item is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/SampleCreationBatchSampleItem'
  /api/projects/{projectId}/workflowSessions:
    get:
      tags:
      - Project Workflow Session
      summary: Retrieve the list of workflow sessions.
      description: This endpoint only returns V3 items. Use the search endpoint to
        get V4 items.
      operationId: getWorkflowSessions
      parameters:
      - name: reference
        in: query
        description: The reference to filter on.
        schema:
          type: string
      - name: userreference
        in: query
        description: The user-reference to filter on.
        schema:
          type: string
      - name: status
        in: query
        description: The status to filter on.
        schema:
          type: string
      - name: usertag
        in: query
        description: The user-tags to filter on.
        schema:
          type: string
      - name: technicaltag
        in: query
        description: The technical-tags to filter on.
        schema:
          type: string
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\n\nThe attributes for which sorting is supported:\n- reference\n\
          - userReference\n- pipeline\n- status\n- startDate\n- endDate\n- workflow\n"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of project workflow sessions is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/WorkflowSessionPagedListV3'
      deprecated: true
  /api/projects/{projectId}/workflowSessions/{workflowSessionId}/inputs:
    get:
      tags:
      - Project Workflow Session
      summary: Retrieve the inputs of a workflow session.
      operationId: getWorkflowSessionInputs
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: workflowSessionId
        in: path
        description: The ID of the workflow session to retrieve the inputs for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The inputs of the workflow session are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/WorkflowSessionInputList'
  /api/projects/{projectId}/workflowSessions/{workflowSessionId}/configurations:
    get:
      tags:
      - Project Workflow Session
      summary: Retrieve the configurations of a workflow session.
      operationId: getWorkflowSessionConfigurations
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: workflowSessionId
        in: path
        description: The ID of the workflow session to retrieve the configuration
          for
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The configurations of the workflow session are successfully
            retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/WorkflowSessionConfigurationList'
  /api/projects/{projectId}/workflowSessions/{workflowSessionId}/analyses:search:
    post:
      tags:
      - Project Workflow Session
      summary: Search analyses orchestrated by the workflow session.
      operationId: searchOrchestratedAnalyses
      parameters:
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\n\nThe attributes for which sorting is supported:\n- reference\n\
          - userReference\n- pipeline\n- status\n- startDate\n- endDate\n- summary\n"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: workflowSessionId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/AnalysisQueryParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisQueryParameters'
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of orchestrated analyses is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/WorkflowSessionAnalysisPagedListV4'
  /api/projects/{projectId}/workflowSessions:search:
    post:
      tags:
      - Project Workflow Session
      summary: Search workflow sessions.
      operationId: searchWorkflowSessions
      parameters:
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\n\nThe attributes for which sorting is supported:\n- reference\n\
          - userReference\n- pipeline\n- status\n- startDate\n- endDate\n- workflow\n"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/AnalysisQueryParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisQueryParameters'
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of project workflow sessions is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/WorkflowSessionPagedListV4'
  /api/referenceSets:
    get:
      tags:
      - Reference Set
      summary: Retrieve a list of of reference sets.
      operationId: getReferenceSets
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of reference sets is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ReferenceSetList'
  /api/referenceSets/{referenceSetId}/species:
    get:
      tags:
      - Reference Set
      summary: Retrieve a list of species linked to the reference set.
      operationId: getSpecies
      parameters:
      - name: referenceSetId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of species is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/SpeciesList'
  /api/regions:
    get:
      tags:
      - Region
      summary: Retrieve a list of regions. Only the regions the user has access to
        through his/her entitlements are returned.
      operationId: getRegions
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of regions is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/RegionList'
  /api/regions/{regionId}:
    get:
      tags:
      - Region
      summary: Retrieve a region. Only the regions the user has access to through
        his/her entitlements can be retrieved.
      operationId: getRegion
      parameters:
      - name: regionId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The region is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/Region'
  /api/samples:
    get:
      tags:
      - Sample
      summary: Retrieve a list of samples.
      operationId: getSamples
      parameters:
      - name: region
        in: query
        description: The ID of the region to filter on. This parameter is required.
        required: true
        schema:
          type: string
      - name: search
        in: query
        description: To search through multiple fields of data.
        schema:
          type: string
      - name: userTags
        in: query
        description: The user tags to filter on.
        schema:
          type: string
      - name: technicalTags
        in: query
        description: The technical tags to filter on.
        schema:
          type: string
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\n\nThe attributes for which sorting is supported:\n- timeCreated\n\
          - timeModified\n- name\n- description\n- metadataValid\n- status"
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of samples is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/SamplePagedList'
  /api/sequencingRuns/{sequencingRunId}:
    get:
      tags:
      - Sequencing Run
      summary: Retrieve a sequencing run.
      operationId: getSequencingRun
      parameters:
      - name: sequencingRunId
        in: path
        description: The ID of the sequencing run to retrieve
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The sequencing run is successfully retrieved.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/SequencingRun'
  /api/storageBundles:
    get:
      tags:
      - Storage Bundle
      summary: Retrieve a list of storage bundles.
      operationId: getStorageBundles
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of storage bundles is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/StorageBundleList'
  /api/storageConfigurations:
    get:
      tags:
      - Storage Configuration
      summary: Retrieve a list of storage configurations.
      operationId: getStorageConfigurations
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of storage configurations is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/StorageConfigurationWithDetailsList'
    post:
      tags:
      - Storage Configuration
      summary: Create a new storage configuration
      operationId: createStorageConfiguration
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateStorageConfiguration'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStorageConfiguration'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The storage configuration is successfully created.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/StorageConfiguration'
  /api/storageConfigurations/{storageConfigurationId}:
    get:
      tags:
      - Storage Configuration
      summary: Retrieve a storage configuration.
      operationId: getStorageConfiguration
      parameters:
      - name: storageConfigurationId
        in: path
        description: The ID of the storage configuration to retrieve
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The storage configuration is successfully retrieved.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/StorageConfiguration'
  /api/storageConfigurations/{storageConfigurationId}/details:
    get:
      tags:
      - Storage Configuration
      summary: Retrieve a storage configuration detail.
      operationId: getStorageConfigurationDetails
      parameters:
      - name: storageConfigurationId
        in: path
        description: The ID of the storage configuration to retrieve
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The storage configuration detail is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/StorageConfigurationDetails'
  /api/storageConfigurations/{storageConfigurationId}:share:
    post:
      tags:
      - Storage Configuration
      summary: Share your own storage configuration with tenant.
      description: Here you share your own storage configuration with all the other
        users in your tenant.
      operationId: shareStorageConfiguration
      parameters:
      - name: storageConfigurationId
        in: path
        description: The ID of the storage configuration to share
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The storage configuration is successfully shared.
  /api/storageConfigurations/{storageConfigurationId}:validate:
    post:
      tags:
      - Storage Configuration
      summary: Start validation of your storage configuration.
      description: Here you start the validation of your storage configuration.
      operationId: validateStorageConfiguration
      parameters:
      - name: storageConfigurationId
        in: path
        description: The ID of the storage configuration to validate
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The storage configuration validation is successfully started.
  /api/storageCredentials:
    get:
      tags:
      - Storage Credentials
      summary: Retrieve a list of storage credentials.
      operationId: getStorageCredentials
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of storage credentials is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/StorageCredentialList'
    post:
      tags:
      - Storage Credentials
      summary: Create a new storage credential
      operationId: createStorageCredential
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateStorageCredential'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStorageCredential'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The storage credential is successfully created.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/StorageCredential'
  /api/storageCredentials/{storageCredentialId}:
    get:
      tags:
      - Storage Credentials
      summary: Retrieve a storage credential.
      operationId: getStorageCredential
      parameters:
      - name: storageCredentialId
        in: path
        description: The ID of the storage credential to retrieve
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The storage credential is successfully retrieved.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/StorageCredential'
  /api/storageCredentials/{storageCredentialId}:share:
    post:
      tags:
      - Storage Credentials
      summary: Share your own storage credentials with tenant.
      description: Here you share your own storage credentials with all the other
        users in your tenant.
      operationId: shareStorageCredential
      parameters:
      - name: storageCredentialId
        in: path
        description: The ID of the storage credential to share
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The storage credential is successfully shared.
  /api/storageCredentials/{storageCredentialId}:updateSecrets:
    post:
      tags:
      - Storage Credentials
      summary: Update a storage credential's secrets.
      description: When your storage credentials change or get updated due to security
        reasons you need to update them here.
      operationId: updateStorageCredentialSecrets
      parameters:
      - name: storageCredentialId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/UpdateStorageCredentialSecrets'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStorageCredentialSecrets'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The storage credential secrets are successfully updated.
  /api/system/info:
    get:
      tags:
      - System
      summary: Retrieve system information.
      operationId: getSystemInfo
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The system information is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/SystemInfo'
  /api/tokens:
    post:
      tags:
      - Token
      summary: "Generate a JWT using an API-key, Basic Authentication or a psToken."
      description: "Generate a JWT using an API-key, Basic Authentication or a psToken.\
        \ When using Basic Authentication, and you are member of several tenants,\
        \ also provide the tenant request parameter to indicate for which tenant you\
        \ want to authenticate. Note that Basic Authentication will not work for SSO\
        \ (Single Sign On) enabled authentication."
      operationId: createJwtToken
      parameters:
      - name: tenant
        in: query
        description: The name of your tenant in case you have access to multiple tenants.
        schema:
          type: string
          nullable: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The JWT is successfully generated.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/Token'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      - PsTokenAuth: []
  /api/tokens:refresh:
    post:
      tags:
      - Token
      summary: "Refresh a JWT using a not yet expired, still valid JWT."
      description: "When still having a valid JWT, this endpoint can be used to extend\
        \ the validity.<br>Refreshing the JWT is not possible if it has been created\
        \ using an API-key."
      operationId: refreshJwtToken
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The JWT is successfully refreshed.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/Token'
      security:
      - JwtAuth: []
  /api/users:
    get:
      tags:
      - User
      summary: Retrieve a list of users.
      operationId: getUsers
      parameters:
      - name: emailAddress
        in: query
        description: The email address to filter on
        schema:
          type: string
          nullable: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of users is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/UserList'
  /api/users/{userId}:
    get:
      tags:
      - User
      summary: Retrieve a user.
      operationId: getUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The user is successfully retrieved.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
      - User
      summary: Update a user.
      description: |-
        Fields which can be updated:
        - greeting
        - two factor authentication
        - job title
        - first name
        - last name
        - mobile phone number
        - phone number
        - fax number
        - address lines
        - postal code
        - city
        - country
        - state
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: If-Match
        in: header
        description: "Optional header parameter to enable conflict exposure. If the\
          \ client provides this header, then it must contains the client's most recent\
          \ value of the 'ETag' response header, and the server will respond with\
          \ a 409 code if it detects a conflict. If the client does not provide this\
          \ header, then the server will not do a conflict check, which means that\
          \ as a client you can override the resource even when the server has a more\
          \ recent version."
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/User'
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The user is successfully updated.
          headers:
            ETag:
              description: The current version of the resource. Can be passed to the
                corresponding PUT endpoint to enable conflict exposure (409 response).
              style: simple
              schema:
                type: string
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/User'
  /api/users/{userId}:approve:
    post:
      tags:
      - User
      summary: Approve a user.
      description: "Endpoint for approving a user.This is a non-RESTful endpoint,\
        \ as the path of this endpoint is not representing a REST resource."
      operationId: approveUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The user is successfully approved.
  /api/users/{userId}:assignTenantAdministratorRights:
    post:
      tags:
      - User
      summary: Assign tenant administrator rights to a user.
      description: "Endpoint for assigning tenant administrator rights to a user.This\
        \ is a non-RESTful endpoint, as the path of this endpoint is not representing\
        \ a REST resource."
      operationId: assignTenantAdminRightsToUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The tenant administrator rights are successfully assigned.
  /api/users/{userId}:revokeTenantAdministratorRights:
    post:
      tags:
      - User
      summary: Revoke tenant administrator rights to a user.
      description: "Endpoint for revoking tenant administrator rights to a user.This\
        \ is a non-RESTful endpoint, as the path of this endpoint is not representing\
        \ a REST resource."
      operationId: revokeTenantAdminRightsToUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "204":
          description: The tenant administrator rights are successfully revoked.
  /api/workgroups:
    get:
      tags:
      - Workgroup
      summary: Retrieve a list of workgroups.
      operationId: getWorkgroups
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of workgroups is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/WorkgroupList'
  /api/workgroups/{workgroupId}:
    get:
      tags:
      - Workgroup
      summary: Retrieve a workgroup.
      operationId: getWorkgroup
      parameters:
      - name: workgroupId
        in: path
        description: The ID of the workgroup to retrieve
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The workgroup is successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/Workgroup'
  /api/eventLog:search:
    post:
      tags:
      - Event Log
      summary: Search event logs.
      operationId: searchEventLogs
      parameters:
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\n\nThe attributes for which sorting is supported:\n- timeCreated\n"
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v4+json:
            schema:
              $ref: '#/components/schemas/EventLogQueryParametersV4'
          application/json:
            schema:
              $ref: '#/components/schemas/EventLogQueryParametersV4'
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The list of event logs is successfully retrieved.
          content:
            application/vnd.illumina.v4+json:
              schema:
                $ref: '#/components/schemas/EventLogPagedListV4'
  /api/projects/{projectId}/data:createFile:
    post:
      tags:
      - Project Data
      summary: Create a file in this project.
      operationId: createFile
      parameters:
      - name: Idempotency-Key
        in: header
        description: "The Idempotency-Key header can be used to prevent duplicate\
          \ requests and support retries. It is implemented according to the IETF\
          \ spec, with one exception (see below). The header value is allowed to be\
          \ max 255 characters long. If the header is supplied for a successful response\
          \ (HTTP status code < 400) then the response \nwill be saved for 7 days\
          \ for the specific API endpoint, header value and user reference. When the\
          \ same user makes \na new request within 7 days to the same API endpoint\
          \ with the same Idempotency-Key header value, following use cases can occur:<br\
          \ /><ul><li>the request body is the same as the previous request and an\
          \ answer is stored => the stored response is returned without executing\
          \ the request again.</li><li>the request body is the same as the previous\
          \ request and no answer is stored because the previous request has not finished\
          \ => 409 error response, which indicates that the original call is still\
          \ in progress.</li><li>the request body is not the same as the previous\
          \ request => 422 error response, as this is not allowed.</li></ul>This means\
          \ that each time when executing a new API request using the Idempotency-Key\
          \ header, the request has to contain a\nnew header value that hasn't been\
          \ used (successfully) in the past 7 days for that specific API endpoint\
          \ and by the specific user.\nFor error responses (HTTP status code >= 400)\
          \ we allow clients to retry the call. This is where we don't follow the\
          \ IETF specification."
        schema:
          maxLength: 255
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The file to create.
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateFileData'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFileData'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The file is successfully created in this project.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectData'
  /api/projects/{projectId}/data:createFileWithTemporaryCredentials:
    post:
      tags:
      - Project Data
      summary: "Create a file in this project, and retrieve temporary credentials\
        \ for it."
      operationId: createFileWithTemporaryCredentials
      parameters:
      - name: Idempotency-Key
        in: header
        description: "The Idempotency-Key header can be used to prevent duplicate\
          \ requests and support retries. It is implemented according to the IETF\
          \ spec, with one exception (see below). The header value is allowed to be\
          \ max 255 characters long. If the header is supplied for a successful response\
          \ (HTTP status code < 400) then the response \nwill be saved for 7 days\
          \ for the specific API endpoint, header value and user reference. When the\
          \ same user makes \na new request within 7 days to the same API endpoint\
          \ with the same Idempotency-Key header value, following use cases can occur:<br\
          \ /><ul><li>the request body is the same as the previous request and an\
          \ answer is stored => the stored response is returned without executing\
          \ the request again.</li><li>the request body is the same as the previous\
          \ request and no answer is stored because the previous request has not finished\
          \ => 409 error response, which indicates that the original call is still\
          \ in progress.</li><li>the request body is not the same as the previous\
          \ request => 422 error response, as this is not allowed.</li></ul>This means\
          \ that each time when executing a new API request using the Idempotency-Key\
          \ header, the request has to contain a\nnew header value that hasn't been\
          \ used (successfully) in the past 7 days for that specific API endpoint\
          \ and by the specific user.\nFor error responses (HTTP status code >= 400)\
          \ we allow clients to retry the call. This is where we don't follow the\
          \ IETF specification."
        schema:
          maxLength: 255
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The data to create.
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateFileAndTemporaryCredentials'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFileAndTemporaryCredentials'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: "The data is successfully created in this project, and the\
            \ temporary credentials are successfully retrieved."
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataAndTemporaryCredentials'
  /api/projects/{projectId}/data:createFileWithUploadUrl:
    post:
      tags:
      - Project Data
      summary: "Create a file in this project, and retrieve an upload url for it."
      operationId: createFileWithUploadUrl
      parameters:
      - name: Idempotency-Key
        in: header
        description: "The Idempotency-Key header can be used to prevent duplicate\
          \ requests and support retries. It is implemented according to the IETF\
          \ spec, with one exception (see below). The header value is allowed to be\
          \ max 255 characters long. If the header is supplied for a successful response\
          \ (HTTP status code < 400) then the response \nwill be saved for 7 days\
          \ for the specific API endpoint, header value and user reference. When the\
          \ same user makes \na new request within 7 days to the same API endpoint\
          \ with the same Idempotency-Key header value, following use cases can occur:<br\
          \ /><ul><li>the request body is the same as the previous request and an\
          \ answer is stored => the stored response is returned without executing\
          \ the request again.</li><li>the request body is the same as the previous\
          \ request and no answer is stored because the previous request has not finished\
          \ => 409 error response, which indicates that the original call is still\
          \ in progress.</li><li>the request body is not the same as the previous\
          \ request => 422 error response, as this is not allowed.</li></ul>This means\
          \ that each time when executing a new API request using the Idempotency-Key\
          \ header, the request has to contain a\nnew header value that hasn't been\
          \ used (successfully) in the past 7 days for that specific API endpoint\
          \ and by the specific user.\nFor error responses (HTTP status code >= 400)\
          \ we allow clients to retry the call. This is where we don't follow the\
          \ IETF specification."
        schema:
          maxLength: 255
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The data to create.
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateFileAndUploadUrl'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFileAndUploadUrl'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: "The data is successfully created in this project, and the\
            \ upload URL is successfully retrieved."
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectFileAndUploadUrl'
  /api/projects/{projectId}/data:createFolder:
    post:
      tags:
      - Project Data
      summary: Create a folder in this project.
      operationId: createFolder
      parameters:
      - name: Idempotency-Key
        in: header
        description: "The Idempotency-Key header can be used to prevent duplicate\
          \ requests and support retries. It is implemented according to the IETF\
          \ spec, with one exception (see below). The header value is allowed to be\
          \ max 255 characters long. If the header is supplied for a successful response\
          \ (HTTP status code < 400) then the response \nwill be saved for 7 days\
          \ for the specific API endpoint, header value and user reference. When the\
          \ same user makes \na new request within 7 days to the same API endpoint\
          \ with the same Idempotency-Key header value, following use cases can occur:<br\
          \ /><ul><li>the request body is the same as the previous request and an\
          \ answer is stored => the stored response is returned without executing\
          \ the request again.</li><li>the request body is the same as the previous\
          \ request and no answer is stored because the previous request has not finished\
          \ => 409 error response, which indicates that the original call is still\
          \ in progress.</li><li>the request body is not the same as the previous\
          \ request => 422 error response, as this is not allowed.</li></ul>This means\
          \ that each time when executing a new API request using the Idempotency-Key\
          \ header, the request has to contain a\nnew header value that hasn't been\
          \ used (successfully) in the past 7 days for that specific API endpoint\
          \ and by the specific user.\nFor error responses (HTTP status code >= 400)\
          \ we allow clients to retry the call. This is where we don't follow the\
          \ IETF specification."
        schema:
          maxLength: 255
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The folder to create.
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateFolder'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFolder'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The folder is successfully created in this project.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectData'
  /api/projects/{projectId}/data:createFolderWithTemporaryCredentials:
    post:
      tags:
      - Project Data
      summary: "Create a folder in this project, and and retrieve temporary credentials\
        \ for it."
      operationId: createFolderWithTemporaryCredentials
      parameters:
      - name: Idempotency-Key
        in: header
        description: "The Idempotency-Key header can be used to prevent duplicate\
          \ requests and support retries. It is implemented according to the IETF\
          \ spec, with one exception (see below). The header value is allowed to be\
          \ max 255 characters long. If the header is supplied for a successful response\
          \ (HTTP status code < 400) then the response \nwill be saved for 7 days\
          \ for the specific API endpoint, header value and user reference. When the\
          \ same user makes \na new request within 7 days to the same API endpoint\
          \ with the same Idempotency-Key header value, following use cases can occur:<br\
          \ /><ul><li>the request body is the same as the previous request and an\
          \ answer is stored => the stored response is returned without executing\
          \ the request again.</li><li>the request body is the same as the previous\
          \ request and no answer is stored because the previous request has not finished\
          \ => 409 error response, which indicates that the original call is still\
          \ in progress.</li><li>the request body is not the same as the previous\
          \ request => 422 error response, as this is not allowed.</li></ul>This means\
          \ that each time when executing a new API request using the Idempotency-Key\
          \ header, the request has to contain a\nnew header value that hasn't been\
          \ used (successfully) in the past 7 days for that specific API endpoint\
          \ and by the specific user.\nFor error responses (HTTP status code >= 400)\
          \ we allow clients to retry the call. This is where we don't follow the\
          \ IETF specification."
        schema:
          maxLength: 255
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The data to create.
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateFolderAndTemporaryCredentials'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFolderAndTemporaryCredentials'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: "The data is successfully created in this project, and the\
            \ temporary credentials are successfully retrieved."
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectDataAndTemporaryCredentials'
  /api/projects/{projectId}/data:createFolderWithUploadSession:
    post:
      tags:
      - Project Data
      summary: "Create a folder in this project, and create a trackable folder upload\
        \ session."
      operationId: createFolderWithUploadSession
      parameters:
      - name: Idempotency-Key
        in: header
        description: "The Idempotency-Key header can be used to prevent duplicate\
          \ requests and support retries. It is implemented according to the IETF\
          \ spec, with one exception (see below). The header value is allowed to be\
          \ max 255 characters long. If the header is supplied for a successful response\
          \ (HTTP status code < 400) then the response \nwill be saved for 7 days\
          \ for the specific API endpoint, header value and user reference. When the\
          \ same user makes \na new request within 7 days to the same API endpoint\
          \ with the same Idempotency-Key header value, following use cases can occur:<br\
          \ /><ul><li>the request body is the same as the previous request and an\
          \ answer is stored => the stored response is returned without executing\
          \ the request again.</li><li>the request body is the same as the previous\
          \ request and no answer is stored because the previous request has not finished\
          \ => 409 error response, which indicates that the original call is still\
          \ in progress.</li><li>the request body is not the same as the previous\
          \ request => 422 error response, as this is not allowed.</li></ul>This means\
          \ that each time when executing a new API request using the Idempotency-Key\
          \ header, the request has to contain a\nnew header value that hasn't been\
          \ used (successfully) in the past 7 days for that specific API endpoint\
          \ and by the specific user.\nFor error responses (HTTP status code >= 400)\
          \ we allow clients to retry the call. This is where we don't follow the\
          \ IETF specification."
        schema:
          maxLength: 255
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The data to create.
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateFolderAndTemporaryCredentials'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFolderAndTemporaryCredentials'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: "The data is successfully created in this project, and the\
            \ folder upload session is successfully created."
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectFolderAndUploadSession'
  /api/projects/{projectId}/data:createNonIndexedFolder:
    post:
      tags:
      - Project Data
      summary: Create a non indexed folder in this project. The folder will be created
        as a top-level folder.
      operationId: createNonIndexedFolder
      parameters:
      - name: Idempotency-Key
        in: header
        description: "The Idempotency-Key header can be used to prevent duplicate\
          \ requests and support retries. It is implemented according to the IETF\
          \ spec, with one exception (see below). The header value is allowed to be\
          \ max 255 characters long. If the header is supplied for a successful response\
          \ (HTTP status code < 400) then the response \nwill be saved for 7 days\
          \ for the specific API endpoint, header value and user reference. When the\
          \ same user makes \na new request within 7 days to the same API endpoint\
          \ with the same Idempotency-Key header value, following use cases can occur:<br\
          \ /><ul><li>the request body is the same as the previous request and an\
          \ answer is stored => the stored response is returned without executing\
          \ the request again.</li><li>the request body is the same as the previous\
          \ request and no answer is stored because the previous request has not finished\
          \ => 409 error response, which indicates that the original call is still\
          \ in progress.</li><li>the request body is not the same as the previous\
          \ request => 422 error response, as this is not allowed.</li></ul>This means\
          \ that each time when executing a new API request using the Idempotency-Key\
          \ header, the request has to contain a\nnew header value that hasn't been\
          \ used (successfully) in the past 7 days for that specific API endpoint\
          \ and by the specific user.\nFor error responses (HTTP status code >= 400)\
          \ we allow clients to retry the call. This is where we don't follow the\
          \ IETF specification."
        schema:
          maxLength: 255
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The non indexed folder to create.
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/CreateNonIndexedFolder'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNonIndexedFolder'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "201":
          description: The non indexed folder is successfully created in this project.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectData'
  /api/projects/{projectId}/data:createDownloadUrls:
    post:
      tags:
      - Project Data
      summary: Retrieve download URLs for the data.
      description: "Can be used to download files directly from the region where it\
        \ is located, no connector is needed. Not applicable for Folders."
      operationId: createDownloadUrlsForData
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/DataIdOrPathList'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The download URLs are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/DataUrlWithPathList'
  /api/projects/{projectId}/samples:search:
    post:
      tags:
      - Project Sample
      summary: Retrieve project samples.
      description: "Endpoint for retrieving project samples. This is a non-RESTful\
        \ endpoint, as the path of this endpoint is not representing a REST resource."
      operationId: getProjectSamples
      parameters:
      - name: pageOffset
        in: query
        description: "[only use with offset-based paging]<br>The amount of rows to\
          \ skip in the result. Ideally this is a multiple of the size parameter.\
          \ Offset-based pagination has a result limit of 200K rows and does not guarantee\
          \ unique results across pages"
        schema:
          type: string
      - name: pageToken
        in: query
        description: "[only use with cursor-based paging]<br>The cursor to get subsequent\
          \ results. The value to use is returned in the result when using cursor-based\
          \ pagination. Cursor-based pagination guarantees complete and unique results\
          \ across all pages."
        schema:
          type: string
      - name: pageSize
        in: query
        description: "[can be used with both offset- and cursor-based paging]<br>The\
          \ amount of rows to return. Use in combination with the offset (when using\
          \ offset-based pagination) or cursor (when using cursor-based pagination)\
          \ parameter to get subsequent results"
        schema:
          type: string
      - name: sort
        in: query
        description: "[only use with offset-based paging]<br>Which field to order\
          \ the results by. The default order is ascending, suffix with ' desc' to\
          \ sort descending (suffix ' asc' also works for ascending). Multiple values\
          \ should be separated with commas. An example: \"?sort=sortAttribute1, sortAttribute2\
          \ desc\"\nThe attributes for which sorting is supported:\n- timeCreated\n\
          - timeModified\n- name\n- description\n- metadataValid\n- status"
        schema:
          type: string
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.illumina.v3+json:
            schema:
              $ref: '#/components/schemas/FindProjectSamples'
          application/json:
            schema:
              $ref: '#/components/schemas/FindProjectSamples'
        required: true
      responses:
        default:
          description: A problem occurred.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "200":
          description: The project samples are successfully retrieved.
          content:
            application/vnd.illumina.v3+json:
              schema:
                $ref: '#/components/schemas/ProjectSamplePagedList'
components:
  schemas:
    Problem:
      required:
      - parameters
      - status
      - timestamp
      - title
      - type
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          description: "A URI reference that identifies the problem type. This specification\
            \ encourages that, when dereferenced, it provide human-readable documentation\
            \ for the problem type. When this member is not present, its value is\
            \ assumed to be \"about:blank\"."
          format: uri
        title:
          type: string
          description: "A short, human-readable summary of the problem type. It SHOULD\
            \ NOT change from occurrence to occurrence of the problem, except for\
            \ purposes of localization (e.g., using proactive content negotiation;"
        status:
          type: integer
          description: "The HTTP status code ([RFC7231], Section 6) generated by the\
            \ origin server for this occurrence of the problem."
          format: int32
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of
            the problem.
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of
            the problem.  It may or may not yield further information if dereferenced.
          format: uri
        parameters:
          type: object
          additionalProperties:
            type: string
            description: Problem parameters for e.g. request body attribute validation.
              This attribute is not in scope of RFC 7807.
          description: Problem parameters for e.g. request body attribute validation.
            This attribute is not in scope of RFC 7807.
        timestamp:
          type: string
          format: date-time
      description: RFC 7807 Problem object (https://tools.ietf.org/html/rfc7807)
    AnalysisStorageV3:
      required:
      - id
      - name
      - ownerId
      - tenantId
      - timeCreated
      - timeModified
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: The name of the storage option
        description:
          type: string
          description: The description about the storage option
          nullable: true
    AnalysisStorageListV3:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AnalysisStorageV3'
    Bundle:
      required:
      - id
      - name
      - ownerId
      - region
      - releaseVersion
      - status
      - tenantId
      - timeCreated
      - timeModified
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        name:
          maxLength: 255
          minLength: 1
          type: string
        shortDescription:
          maxLength: 4000
          minLength: 1
          type: string
          nullable: true
        region:
          $ref: '#/components/schemas/Region'
        metadataModel:
          $ref: '#/components/schemas/MetadataModel'
        releaseVersion:
          maxLength: 255
          minLength: 1
          type: string
        versionComment:
          maxLength: 4000
          minLength: 1
          type: string
          nullable: true
        status:
          type: string
          enum:
          - DRAFT
          - RELEASED
          - DEPRECATED
        categories:
          type: array
          description: category tags as string array
          nullable: true
          items:
            type: string
            description: category tags as string array
            nullable: true
        links:
          $ref: '#/components/schemas/Links'
      nullable: true
    BundlePagedList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Bundle'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    Country:
      required:
      - code
      - id
      - name
      - ownerId
      - region
      - tenantId
      - timeCreated
      - timeModified
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        code:
          type: string
          description: The country code as defined by ISO.
        name:
          type: string
          description: The full name of the country.
        region:
          type: string
          description: The region where the country belong to.
    Link:
      required:
      - name
      - url
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The name of the link
        url:
          maxLength: 2048
          minLength: 1
          type: string
          description: The url of the link
    Links:
      type: object
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        licenses:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        homepages:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        publications:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      nullable: true
    MetadataModel:
      required:
      - id
      - name
      - ownerId
      - state
      - tenantId
      - timeCreated
      - timeModified
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        name:
          maxLength: 255
          minLength: 1
          type: string
        description:
          maxLength: 1000
          minLength: 0
          type: string
          nullable: true
        state:
          type: string
          enum:
          - DRAFT
          - PUBLISHED
        parentModelId:
          type: string
          format: uuid
          nullable: true
      nullable: true
    Region:
      required:
      - cityName
      - code
      - country
      - id
      - ownerId
      - tenantId
      - timeCreated
      - timeModified
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        code:
          maxLength: 255
          minLength: 1
          type: string
        country:
          $ref: '#/components/schemas/Country'
        cityName:
          maxLength: 255
          minLength: 1
          type: string
    CreateBundle:
      required:
      - bundleReleaseVersion
      - bundleStatus
      - categories
      - name
      - regionId
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
        shortDescription:
          maxLength: 4000
          minLength: 1
          type: string
          nullable: true
        bundleReleaseVersion:
          type: string
        bundleVersionComment:
          type: string
          nullable: true
        regionId:
          type: string
          format: uuid
        metadataModelId:
          type: string
          format: uuid
          nullable: true
        bundleStatus:
          type: string
          enum:
          - DRAFT
          - RELEASED
          - DEPRECATED
        categories:
          type: array
          description: category tags as string array
          items:
            type: string
            description: category tags as string array
        links:
          $ref: '#/components/schemas/Links'
    TermsOfUse:
      required:
      - requiresUserAcceptance
      - termsOfUse
      type: object
      properties:
        termsOfUse:
          type: string
          description: Terms of Use for a bundle. Supports plain text or HTML.
        requiresUserAcceptance:
          type: boolean
          description: Flag indicating whether the Terms of Use should be accepted
            before using/viewing the bundle.
        releaseVersion:
          type: string
          description: Version number of the Terms of Use.
    TermsOfUseAcceptance:
      required:
      - accepted
      - firstAcceptanceDate
      - versionTermsOfUseFirstAccept
      type: object
      properties:
        accepted:
          type: boolean
          description: Are the terms of use accepted
        firstAcceptanceDate:
          type: string
          description: Date of the first time the terms of use were accepted.
          format: date-time
        versionTermsOfUseFirstAccept:
          type: string
          description: Version of the first accepted Terms of Use.
        lastAcceptanceDate:
          type: string
          description: Date of the last time the terms of use were accepted.
          format: date-time
        versionTermsOfUseLastAccept:
          type: string
          description: Version of the last accepted Terms of Use.
    CreateTermsOfUse:
      required:
      - releaseVersion
      - requiresUserAcceptance
      - resetAcceptanceRecords
      - termsOfUse
      type: object
      properties:
        termsOfUse:
          maxLength: 2147483647
          minLength: 1
          type: string
          description: Terms of Use for a bundle. Supports plain text or HTML.
        requiresUserAcceptance:
          type: boolean
          description: Flag indicating whether the Terms of Use should be accepted
            before using/viewing the bundle.
        releaseVersion:
          maxLength: 4000
          minLength: 1
          type: string
          description: Version number of the Terms of Use.
        resetAcceptanceRecords:
          type: boolean
          description: Do you want to reset the acceptance records.
    ApplicationV4:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      nullable: true
    BundleData:
      required:
      - bundleId
      - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Data'
        bundleId:
          type: string
          format: uuid
      nullable: true
    BundleDataPagedList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/BundleData'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    DataDetails:
      required:
      - dataType
      - name
      - owningProjectId
      - status
      - tags
      - tenantId
      - timeCreated
      - timeModified
      type: object
      properties:
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        creatorId:
          type: string
          format: uuid
          nullable: true
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        owningProjectId:
          type: string
          format: uuid
        owningProjectName:
          type: string
          nullable: true
        name:
          type: string
          description: The name of the file/folder as it was uploaded.
        path:
          type: string
          description: The user friendly path of the parent of this data.
          nullable: true
        fileSizeInBytes:
          type: integer
          description: The size of the file in bytes. Folders do not have a size.
          format: int64
          nullable: true
        status:
          type: string
          enum:
          - PARTIAL
          - AVAILABLE
          - ARCHIVING
          - ARCHIVED
          - UNARCHIVING
          - DELETING
        tags:
          $ref: '#/components/schemas/DataTag'
        format:
          $ref: '#/components/schemas/DataFormat'
        dataType:
          type: string
          enum:
          - FILE
          - FOLDER
        objectETag:
          type: string
          description: "The file's ETag, as received from the cloud provider. Not\
            \ to be confused with the ETag reponse header of this API."
          nullable: true
        storedForTheFirstTimeAt:
          type: string
          description: Specifies when the data object was stored for the first time
          format: date-time
          nullable: true
        region:
          $ref: '#/components/schemas/Region'
        application:
          $ref: '#/components/schemas/ApplicationV4'
        willBeArchivedAt:
          type: string
          description: Specifies when the data object will be archived.
          format: date-time
          nullable: true
        willBeDeletedAt:
          type: string
          description: Specifies when the data object will be deleted.
          format: date-time
          nullable: true
        sequencingRun:
          $ref: '#/components/schemas/SequencingRun'
      nullable: true
    Data:
      required:
      - id
      type: object
      properties:
        id:
          maxLength: 255
          minLength: 1
          type: string
          description: The id of the file/folder as it was uploaded.
        urn:
          maxLength: 2000
          minLength: 1
          type: string
          description: "The URN of this data. The format is urn:ilmn:ica:region:\\\
            <ID of the region\\>:data:\\<ID of the data\\>#\\<optional data path\\\
            >. The path can be omitted, in that case the hashtag (#) must also be\
            \ omitted."
          nullable: true
        details:
          $ref: '#/components/schemas/DataDetails'
        folderDetails:
          $ref: '#/components/schemas/FolderDetails'
    DataFormat:
      required:
      - code
      - id
      - ownerId
      - tenantId
      - timeCreated
      - timeModified
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        code:
          maxLength: 255
          minLength: 1
          type: string
          description: "The code of the format. For example: FASTQ, BAM, ..."
        description:
          maxLength: 4000
          minLength: 1
          type: string
          nullable: true
        mimeType:
          maxLength: 255
          minLength: 1
          type: string
          nullable: true
      nullable: true
    DataTag:
      type: object
      properties:
        technicalTags:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        userTags:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        connectorTags:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        runInTags:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        runOutTags:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        referenceTags:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
    FolderDetails:
      required:
      - nonIndexed
      type: object
      properties:
        nonIndexed:
          type: boolean
          description: Indicates this is a non-indexed folder
      nullable: true
    SequencingRun:
      required:
      - id
      - instrumentRunId
      - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        instrumentRunId:
          maxLength: 255
          minLength: 0
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
      nullable: true
    Application:
      required:
      - id
      - name
      - type
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: The unique name identifying the application
        type:
          type: string
          description: The type of the application
          enum:
          - MAIN
          - WEBSOLUTION
          - EXTERNAL
        displayName:
          type: string
          description: The display name of the application
          nullable: true
      nullable: true
    BundleDataLinkingBatch:
      required:
      - id
      - job
      type: object
      properties:
        id:
          type: string
          format: uuid
        job:
          $ref: '#/components/schemas/Job'
    Job:
      required:
      - id
      - owner
      - status
      - subjectId
      - subjectType
      - timeCreated
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          type: string
          enum:
          - INITIALIZED
          - WAITING_FOR_RESOURCES
          - RUNNING
          - STOPPED
          - SUCCEEDED
          - PARTIALLY_SUCCEEDED
          - FAILED
        additionalStatusInformation:
          type: string
          description: Additional information regarding the status of this job.
          nullable: true
        subjectType:
          type: string
          description: The type of the subject for which this job provides execution.
          example: SampleCreationBatch
        subjectId:
          type: string
          description: The id of the subject for which this job provides execution.
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeStarted:
          type: string
          format: date-time
          nullable: true
        timeFinished:
          type: string
          format: date-time
          nullable: true
        owner:
          $ref: '#/components/schemas/User'
        project:
          $ref: '#/components/schemas/Project'
        bundle:
          $ref: '#/components/schemas/Bundle'
      nullable: true
    Project:
      required:
      - active
      - billingMode
      - id
      - name
      - ownerId
      - region
      - tags
      - tenantId
      - timeCreated
      - timeModified
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        urn:
          maxLength: 2000
          minLength: 1
          type: string
          description: "The URN of the project. The format is urn:ilmn:ica:\\<type\
            \ of the object\\>:\\<ID of the object\\>#\\<optional human readable hint\
            \ representing the object\\>. The hint can be omitted, in that case the\
            \ hashtag (#) must also be omitted."
          nullable: true
        name:
          maxLength: 255
          minLength: 1
          type: string
        active:
          type: boolean
          description: Indicates whether the project is active or hidden.
        baseEnabled:
          type: boolean
          description: Indicates whether the project is base enabled.
          nullable: true
        shortDescription:
          maxLength: 4000
          minLength: 1
          type: string
          nullable: true
        information:
          type: string
          description: Information about the project. Note that the value of this
            field can be arbitrary large.
          nullable: true
        region:
          $ref: '#/components/schemas/Region'
        billingMode:
          type: string
          description: The billing mode of the project. It determines who pays for
            the costs linked to the project.
          enum:
          - PROJECT
          - TENANT
        dataSharingEnabled:
          type: boolean
          description: Indicates whether the Data and Samples created in this Project
            can be linked to other Projects.
          nullable: true
        tags:
          $ref: '#/components/schemas/ProjectTag'
        storageBundle:
          $ref: '#/components/schemas/StorageBundle'
        selfManagedStorageConfiguration:
          $ref: '#/components/schemas/StorageConfiguration'
        analysisPriority:
          type: string
          description: "Indicates the priority given to a project and its analyses\
            \ within a single tenant. Note that for a PUT call, when not providing\
            \ a value for this attribute (null value or absent attribute), the persisted\
            \ value will not change."
          nullable: true
          enum:
          - LOW
          - MEDIUM
          - HIGH
        metadataModel:
          $ref: '#/components/schemas/MetadataModel'
        application:
          $ref: '#/components/schemas/Application'
    ProjectTag:
      required:
      - technicalTags
      - userTags
      type: object
      properties:
        technicalTags:
          type: array
          items:
            type: string
        userTags:
          type: array
          items:
            type: string
    StorageBundle:
      required:
      - bundleName
      - entitlementName
      - id
      - ownerId
      - region
      - tenantId
      - timeCreated
      - timeModified
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        bundleName:
          maxLength: 255
          minLength: 1
          type: string
          description: The name of the storage bundle
        entitlementName:
          maxLength: 255
          minLength: 1
          type: string
          description: The name of the parent entitlement
        region:
          $ref: '#/components/schemas/Region'
    StorageConfiguration:
      required:
      - id
      - isDefault
      - name
      - ownerId
      - region
      - status
      - tenantId
      - timeCreated
      - timeModified
      - type
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        name:
          type: string
          description: The name of the storage configuration
        description:
          maxLength: 1000
          minLength: 0
          type: string
          description: An optional description
          nullable: true
        type:
          type: string
          enum:
          - AWS_S3
        status:
          type: string
          enum:
          - INITIALIZING
          - OK
          - ERROR
        errorMessage:
          maxLength: 1000
          minLength: 0
          type: string
          description: An optional error message when something went wrong with the
            configuration
          nullable: true
        region:
          $ref: '#/components/schemas/Region'
        isDefault:
          type: boolean
          description: An indication if this is the default in region for new projects
    User:
      required:
      - active
      - email
      - emailVerified
      - id
      - ownerId
      - tenantAdministrator
      - tenantId
      - timeCreated
      - timeModified
      - twoFactorAuthentication
      - username
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        username:
          maxLength: 255
          minLength: 1
          type: string
        email:
          maxLength: 255
          minLength: 1
          type: string
        firstname:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        lastname:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        active:
          type: boolean
        tenantAdministrator:
          type: boolean
        jobTitle:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        greeting:
          type: string
          nullable: true
          enum:
          - MR
          - MRS
          - MS
          - MISS
          - DR
          - HR
          - SR
        mobilePhoneNumber:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        phoneNumber:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        faxNumber:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        emailVerified:
          type: boolean
        twoFactorAuthentication:
          type: boolean
        country:
          $ref: '#/components/schemas/Country'
        addressLine1:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        addressLine2:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        addressLine3:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        postalCode:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        city:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        state:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
    CreateBundleDataLinkingBatch:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CreateBundleDataLinkingBatchItem'
    CreateBundleDataLinkingBatchItem:
      required:
      - dataId
      type: object
      properties:
        dataId:
          type: string
    BundleDataLinkingBatchItem:
      required:
      - id
      - processing
      - request
      type: object
      properties:
        id:
          type: string
          format: uuid
        request:
          $ref: '#/components/schemas/BundleDataLinkingBatchItemRequest'
        processing:
          $ref: '#/components/schemas/BundleDataLinkingBatchItemProcessing'
        bundleData:
          $ref: '#/components/schemas/BundleData'
    BundleDataLinkingBatchItemPagedList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/BundleDataLinkingBatchItem'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    BundleDataLinkingBatchItemProcessing:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          description: "Possible values are: INITIALISED, WAITING_RESOURCES, RUNNING,\
            \ LINKED, ALREADY_LINKED, FAILED, PARTIALLY_LINKED. More types could be\
            \ added in a future release."
        additionalStatusInformation:
          type: string
          description: Additional information regarding the status of this batch item.
          nullable: true
    BundleDataLinkingBatchItemRequest:
      required:
      - dataId
      type: object
      properties:
        dataId:
          type: string
    BundleDataUnlinkingBatch:
      required:
      - id
      - job
      type: object
      properties:
        id:
          type: string
          format: uuid
        job:
          $ref: '#/components/schemas/Job'
    CreateBundleDataUnlinkingBatch:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CreateBundleDataUnlinkingBatchItem'
    CreateBundleDataUnlinkingBatchItem:
      required:
      - dataId
      type: object
      properties:
        dataId:
          type: string
    BundleDataUnlinkingBatchItem:
      required:
      - id
      - processing
      - request
      type: object
      properties:
        id:
          type: string
          format: uuid
        request:
          $ref: '#/components/schemas/BundleDataUnlinkingBatchItemRequest'
        processing:
          $ref: '#/components/schemas/BundleDataUnlinkingBatchItemProcessing'
    BundleDataUnlinkingBatchItemPagedList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/BundleDataUnlinkingBatchItem'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    BundleDataUnlinkingBatchItemProcessing:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          description: "Possible values are: INITIALISED, WAITING_RESOURCES, RUNNING,\
            \ UNLINKED, ALREADY_UNLINKED, FAILED, PARTIALLY_UNLINKED. More types could\
            \ be added in a future release."
        additionalStatusInformation:
          type: string
          description: Additional information regarding the status of this batch item.
          nullable: true
    BundleDataUnlinkingBatchItemRequest:
      required:
      - dataId
      type: object
      properties:
        dataId:
          type: string
    BundlePipeline:
      required:
      - bundleId
      - pipeline
      type: object
      properties:
        pipeline:
          $ref: '#/components/schemas/PipelineV3'
        bundleId:
          type: string
          format: uuid
    BundlePipelineList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/BundlePipeline'
    PipelineV3:
      required:
      - analysisStorage
      - code
      - description
      - id
      - language
      - ownerId
      - pipelineTags
      - tenantId
      - timeCreated
      - timeModified
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        code:
          maxLength: 255
          minLength: 1
          type: string
          description: The code of the pipeline
        urn:
          maxLength: 2000
          minLength: 1
          type: string
          description: "The URN of the pipeline. The format is urn:ilmn:ica:\\<type\
            \ of the object\\>:\\<ID of the object\\>#\\<optional human readable hint\
            \ representing the object\\>. The hint can be omitted, in that case the\
            \ hashtag (#) must also be omitted."
          nullable: true
        description:
          maxLength: 4000
          minLength: 1
          type: string
          description: The description of the pipeline
        status:
          type: string
          description: The status of the pipeline
          nullable: true
          enum:
          - DRAFT
          - RELEASED
        language:
          type: string
          description: The language that is used by the pipeline
          enum:
          - CWL
          - NEXTFLOW
          - UNKNOWN
        languageVersion:
          $ref: '#/components/schemas/PipelineLanguageVersion'
        pipelineTags:
          $ref: '#/components/schemas/PipelineTag'
        analysisStorage:
          $ref: '#/components/schemas/AnalysisStorageV3'
        proprietary:
          type: boolean
          description: A boolean which indicates if the code of this pipeline is proprietary
          nullable: true
          default: false
        inputFormType:
          type: string
          description: The type of the inputform used.
          enum:
          - XML
          - JSON
    PipelineLanguageVersion:
      required:
      - id
      - language
      - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: The name of the version
        language:
          type: string
          description: The language of the version
          enum:
          - CWL
          - NEXTFLOW
          - UNKNOWN
      nullable: true
    PipelineTag:
      required:
      - technicalTags
      type: object
      properties:
        technicalTags:
          type: array
          description: Technical tags
          items:
            type: string
            description: Technical tags
    BundleSample:
      required:
      - bundleId
      - sample
      type: object
      properties:
        sample:
          $ref: '#/components/schemas/Sample'
        bundleId:
          type: string
          format: uuid
    BundleSamplePagedList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/BundleSample'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    MetadataField:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        index:
          type: integer
          format: int32
        name:
          type: string
        fieldType:
          type: string
          enum:
          - TEXT
          - NUMERIC
          - BOOLEAN
          - DATE
          - GROUP
        values:
          type: array
          items:
            type: string
        groupValues:
          type: array
          items:
            $ref: '#/components/schemas/MetadataField'
      description: The metadata of the sample
    Sample:
      required:
      - id
      - metadata
      - metadataValid
      - name
      - ownerId
      - region
      - status
      - tags
      - tenantId
      - timeCreated
      - timeModified
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: The name of the sample
        description:
          maxLength: 255
          minLength: 1
          type: string
          description: The description of the sample
          nullable: true
        tags:
          $ref: '#/components/schemas/SampleTag'
        region:
          $ref: '#/components/schemas/Region'
        application:
          $ref: '#/components/schemas/ApplicationV4'
        status:
          type: string
          enum:
          - DELETED
          - AVAILABLE
          - PARTIAL
        metadataValid:
          type: boolean
          description: Whether the metadata is valid
        metadata:
          type: array
          description: The metadata of the sample
          items:
            $ref: '#/components/schemas/MetadataField'
        sequencingRuns:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/SequencingRun'
    SampleTag:
      required:
      - connectorTags
      - runInTags
      - technicalTags
      - userTags
      type: object
      properties:
        technicalTags:
          type: array
          items:
            type: string
        userTags:
          type: array
          items:
            type: string
        connectorTags:
          type: array
          items:
            type: string
        runInTags:
          type: array
          items:
            type: string
    BundleTool:
      required:
      - cwlToolDefinition
      type: object
      properties:
        cwlToolDefinition:
          $ref: '#/components/schemas/CWLToolDefinition'
    BundleToolsList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/BundleTool'
    CWLToolDefinition:
      required:
      - id
      - name
      - ownerId
      - status
      - tenantId
      - timeCreated
      - timeModified
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: Name of the tool definition
        description:
          maxLength: 4000
          minLength: 1
          type: string
          description: Description of the tool definition
          nullable: true
        status:
          type: string
          description: Status of the tool definition
          enum:
          - DRAFT
          - RELEASED
          - DEPRECATED
          - RELEASECANDIDATE
          - BUILDING
          - BUILDFAILED
        versionComment:
          maxLength: 4000
          minLength: 1
          type: string
          description: version comment of the tool definition
          nullable: true
        releaseVersion:
          type: integer
          description: release version of the tool definition
          format: int32
          nullable: true
        links:
          $ref: '#/components/schemas/Link'
        categories:
          type: array
          description: category tags as string array
          nullable: true
          items:
            type: string
            description: category tags as string array
            nullable: true
    CwlToolDefinitionList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CWLToolDefinition'
    Connector:
      required:
      - active
      - code
      - connected
      - id
      - installationStatus
      - mode
      - newConnectorVersionAvailable
      - os
      - ownerId
      - technicalCode
      - tenantId
      - timeCreated
      - timeModified
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        code:
          maxLength: 255
          minLength: 1
          type: string
        active:
          type: boolean
        connected:
          type: boolean
          description: "Indicates if the connector is connected or not. This is cached\
            \ so even when the connector is no longer connected, for a short time\
            \ this still may return true."
        technicalCode:
          maxLength: 255
          minLength: 1
          type: string
          description: Technical code to be used for processing.
        initializationKey:
          maxLength: 255
          minLength: 1
          type: string
          description: The key provided via other channels to initialize the installation.
          nullable: true
        description:
          type: string
          description: The general description of the connector instance including
            its purpose.
          nullable: true
        mode:
          type: string
          description: The mode the connector runs in.
          enum:
          - DOWNLOAD
          - UPLOAD
          - BOTH
          - NONE
        maxBandwidth:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: The maximum bandwidth defined in MB per second.
          nullable: true
        maxConcurrentTransfers:
          minimum: 1
          type: integer
          description: The maximum amount of concurrent transfers that this connector
            can execute.
          format: int32
          nullable: true
        os:
          type: string
          description: The target OS of the original connector installer.
          enum:
          - WINDOWS
          - LINUX
          - OSX
        installationStatus:
          type: string
          enum:
          - PENDING_INSTALLATION
          - INSTALLED
          - ERROR
          - UNKNOWN
          - CANCELLED
        newConnectorVersionAvailable:
          type: boolean
      nullable: true
    ConnectorList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Connector'
    CreateConnector:
      required:
      - active
      - code
      - mode
      - os
      type: object
      properties:
        code:
          maxLength: 255
          minLength: 1
          type: string
        active:
          type: boolean
        description:
          type: string
          description: The general description of the connector instance including
            its purpose.
          nullable: true
        mode:
          type: string
          description: The mode the connector runs in.
          enum:
          - DOWNLOAD
          - UPLOAD
          - BOTH
          - NONE
        maxBandwidth:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: The maximum bandwidth defined in MB per second.
          nullable: true
        maxConcurrentTransfers:
          minimum: 1
          type: integer
          description: The maximum amount of concurrent transfers that this connector
            can execute.
          format: int32
          nullable: true
          default: 2
        os:
          type: string
          description: The target OS of the original connector installer.
          enum:
          - WINDOWS
          - LINUX
          - OSX
    UploadRule:
      required:
      - code
      - filePattern
      - id
      - localFolder
      - ownerId
      - project
      - tenantId
      - timeCreated
      - timeModified
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        code:
          maxLength: 300
          minLength: 1
          type: string
        active:
          type: boolean
          nullable: true
        description:
          maxLength: 255
          minLength: 1
          type: string
          nullable: true
        localFolder:
          maxLength: 255
          minLength: 1
          type: string
          description: The local folder to monitor. Files in this folder on your local
            environment will be uploaded to the specified project. Only files matching
            the filePattern will be uploaded.
        filePattern:
          maxLength: 255
          minLength: 1
          type: string
          description: "The regular expression to match a file name. eg: to match\
            \ all files use '.*'"
        dataFormat:
          $ref: '#/components/schemas/DataFormat'
        project:
          $ref: '#/components/schemas/Project'
    UploadRuleList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/UploadRule'
    CreateUploadRule:
      required:
      - code
      - filePattern
      - localFolder
      - projectId
      type: object
      properties:
        code:
          maxLength: 300
          minLength: 1
          type: string
        active:
          type: boolean
          nullable: true
        description:
          maxLength: 255
          minLength: 1
          type: string
          nullable: true
        localFolder:
          maxLength: 255
          minLength: 1
          type: string
          description: The local folder to monitor. Files in this folder on your local
            environment will be uploaded to the specified project. Only files matching
            the filePattern will be uploaded.
        filePattern:
          maxLength: 255
          minLength: 1
          type: string
          description: "The regular expression to match a file name. eg: to match\
            \ all files use '.*'"
        dataFormatId:
          type: string
          description: "The format which will be assigned to the uploaded data. If\
            \ not specified, an auto-detection of the format will be done."
          format: uuid
          nullable: true
        projectId:
          type: string
          description: The project to which the data will be uploaded.
    DownloadRule:
      required:
      - code
      - id
      - ownerId
      - sequence
      - targetLocalFolder
      - tenantId
      - timeCreated
      - timeModified
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        code:
          type: string
        active:
          type: boolean
          nullable: true
        description:
          maxLength: 255
          minLength: 1
          type: string
          nullable: true
        sequence:
          minimum: 0
          type: integer
          description: Defines the order of the rule.
          format: int32
        formatCode:
          maxLength: 255
          minLength: 1
          type: string
          description: Regular expression to select which format this rule applies
            to.
          nullable: true
        projectName:
          maxLength: 255
          minLength: 1
          type: string
          description: Regular expression to select which project this rule applies
            to.
          nullable: true
        targetLocalFolder:
          maxLength: 255
          minLength: 1
          type: string
          description: The local folder where to write the data.
        fileNameExpression:
          type: string
          description: Will allow the filename to be modified including a set of variables
          nullable: true
    DownloadRuleList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DownloadRule'
    CreateDownloadRule:
      required:
      - code
      - sequence
      - targetLocalFolder
      type: object
      properties:
        code:
          type: string
        active:
          type: boolean
          nullable: true
        description:
          maxLength: 255
          minLength: 1
          type: string
          nullable: true
        sequence:
          minimum: 0
          type: integer
          description: Defines the order of the rule.
          format: int32
        formatCode:
          maxLength: 255
          minLength: 1
          type: string
          description: Regular expression to filter which format this rule applies
            to.
          nullable: true
        projectName:
          maxLength: 255
          minLength: 1
          type: string
          description: Regular expression to filter which project this rule applies
            to.
          nullable: true
        targetLocalFolder:
          maxLength: 255
          minLength: 1
          type: string
          description: The local folder where to write the data.
        fileNameExpression:
          type: string
          description: Will allow the filename to be modified including a set of variables
          nullable: true
    InlineView:
      required:
      - url
      type: object
      properties:
        url:
          type: string
          description: A pre-signed url which is temporarily available for inline
            viewing the data.
    Download:
      required:
      - url
      type: object
      properties:
        url:
          type: string
          description: A pre-signed url which is temporarily available for downloading
            the data.
    DataFormatPagedList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DataFormat'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    BenchSettings:
      required:
      - access
      - clusterCompatible
      type: object
      properties:
        clusterCompatible:
          type: boolean
        access:
          $ref: '#/components/schemas/DockerImageAccess'
      nullable: true
    DockerImageAccess:
      required:
      - console
      - web
      type: object
      properties:
        web:
          type: boolean
        console:
          type: boolean
    DockerImage:
      required:
      - id
      - name
      - owner
      - status
      - tenant
      - timeCreated
      - timeModified
      - type
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        owner:
          $ref: '#/components/schemas/UserIdentifier'
        tenant:
          $ref: '#/components/schemas/TenantIdentifier'
        name:
          type: string
        version:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        status:
          type: string
          enum:
          - PARTIAL
          - AVAILABLE
          - DELETED
          - BUILDFAILED
          - DELETING
        type:
          type: string
          enum:
          - TOOL
          - BENCH
        internalDockerImageSettings:
          $ref: '#/components/schemas/InternalDockerImageSettings'
        externalDockerImageSettings:
          $ref: '#/components/schemas/ExternalDockerImageSettings'
        benchSettings:
          $ref: '#/components/schemas/BenchSettings'
    DockerImageList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DockerImage'
    DockerImageRegion:
      type: object
      properties:
        region:
          $ref: '#/components/schemas/RegionV4'
        url:
          type: string
          nullable: true
      nullable: true
    ExternalDockerImageSettings:
      required:
      - url
      type: object
      properties:
        url:
          type: string
      nullable: true
    InternalDockerImageSettings:
      type: object
      properties:
        regions:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/DockerImageRegion'
      nullable: true
    RegionV4:
      required:
      - code
      - id
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          maxLength: 255
          minLength: 1
          type: string
      nullable: true
    TenantIdentifier:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: The unique name of the tenant.
    UserIdentifier:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          format: uuid
    CreateExternalDockerImage:
      required:
      - name
      - type
      - url
      - version
      type: object
      properties:
        url:
          type: string
        name:
          maxLength: 255
          minLength: 1
          type: string
        version:
          maxLength: 255
          minLength: 1
          type: string
        description:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        type:
          type: string
          enum:
          - TOOL
          - BENCH
    CreateInternalDockerImage:
      required:
      - dockerDataId
      - dockerDataProjectId
      - name
      - regions
      - type
      - version
      type: object
      properties:
        dockerDataId:
          type: string
          description: The id of the data for which an Docker image will be created.
        dockerDataProjectId:
          type: string
          description: The id of the project where the Docker data resides.
          format: uuid
        name:
          maxLength: 255
          minLength: 1
          type: string
        version:
          maxLength: 255
          minLength: 1
          type: string
        description:
          maxLength: 255
          minLength: 0
          type: string
          nullable: true
        type:
          type: string
          enum:
          - TOOL
          - BENCH
        regions:
          type: array
          description: The UUID of the regions where the Docker image will be made
            available.
          items:
            type: string
            description: The UUID of the regions where the Docker image will be made
              available.
            format: uuid
    DockerImageRegionList:
      required:
      - regionIds
      type: object
      properties:
        regionIds:
          type: array
          items:
            type: string
            format: uuid
    ActivationCodeDetail:
      required:
      - allowedSlots
      - id
      - movedSlots
      - originalSlots
      - pipelineBundle
      - usages
      - usedSlots
      type: object
      properties:
        id:
          type: string
          format: uuid
        allowedSlots:
          minimum: -1
          type: integer
          description: "The allowed slot within this code, -1 means unlimited"
          format: int32
        usedSlots:
          minimum: 0
          type: integer
          description: Indicates how many slots can are used.
          format: int32
        movedSlots:
          minimum: 0
          type: integer
          description: The slots that where moved to another activation code
          format: int32
        originalSlots:
          minimum: -1
          type: integer
          description: "The assigned allowed slot within this code, -1 means unlimited"
          format: int32
        pipelineBundle:
          $ref: '#/components/schemas/PipelineBundle'
        usages:
          type: array
          items:
            $ref: '#/components/schemas/ActivationCodeDetailUsage'
    ActivationCodeDetailUsage:
      required:
      - allowedSlots
      - id
      - usedSlots
      type: object
      properties:
        id:
          type: string
          format: uuid
        project:
          $ref: '#/components/schemas/Project'
        usedSlots:
          minimum: -1
          type: integer
          description: "Indicates how many slots can are used, -1 means unused"
          format: int32
        allowedSlots:
          minimum: -1
          type: integer
          description: "Indicates how many slots can be used, -1 means unlimited"
          format: int32
    PipelineBundle:
      required:
      - activePipelines
      - analysisStorages
      - canceledPipelines
      - id
      - maxNumberOfAllowedSlots
      - name
      - regions
      - retiredPipelines
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        maxNumberOfAllowedSlots:
          minimum: -1
          type: integer
          format: int32
        activePipelines:
          type: array
          items:
            $ref: '#/components/schemas/PipelineV3'
        canceledPipelines:
          type: array
          items:
            $ref: '#/components/schemas/PipelineV3'
        retiredPipelines:
          type: array
          items:
            $ref: '#/components/schemas/PipelineV3'
        regions:
          type: array
          items:
            $ref: '#/components/schemas/Region'
        analysisStorages:
          type: array
          items:
            $ref: '#/components/schemas/AnalysisStorageV3'
    AnalysisBaseSpaceDataDetails:
      type: object
      properties:
        workgroupId:
          type: string
          nullable: true
        extensions:
          type: string
          nullable: true
        pathPrefix:
          type: string
          nullable: true
    AnalysisDataInput:
      required:
      - parameterCode
      type: object
      properties:
        parameterCode:
          type: string
        dataIds:
          type: array
          items:
            type: string
        mounts:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisInputDataMount'
        externalData:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisInputExternalData'
    AnalysisInputDataMount:
      required:
      - dataId
      - mountPath
      type: object
      properties:
        dataId:
          type: string
        mountPath:
          type: string
          description: "The mount path is the location where the input file will be\
            \ located on the machine that is running the pipeline. The use of a relative\
            \ path is encouraged, but an absolute path is also allowed. The path should\
            \ end with the file name, which may differ from the original input data."
      nullable: true
    AnalysisInputExternalData:
      required:
      - type
      - url
      type: object
      properties:
        url:
          type: string
        type:
          pattern: s3|http|basespace
          type: string
        mountPath:
          type: string
          description: "The mount path is the location where the input file will be\
            \ located on the machine that is running the pipeline. The use of a relative\
            \ path is encouraged, but an absolute path is also allowed. The path should\
            \ end with the file name, which may differ from the original input data."
          nullable: true
        s3Details:
          $ref: '#/components/schemas/AnalysisS3DataDetails'
        basespaceDetails:
          $ref: '#/components/schemas/AnalysisBaseSpaceDataDetails'
      nullable: true
    AnalysisParameterInput:
      type: object
      properties:
        code:
          type: string
        value:
          type: string
          description: The value for single-value parameters.
          nullable: true
        multiValue:
          type: array
          description: The values for multi-value parameters.
          nullable: true
          items:
            type: string
            description: The values for multi-value parameters.
            nullable: true
      description: "Supports multi-value parameters, only one of attributes 'value'\
        \ or 'multiValue' must be provided"
      nullable: true
    AnalysisReferenceDataParameter:
      type: object
      properties:
        parameterCode:
          type: string
        referenceDataId:
          type: string
          format: uuid
      nullable: true
    AnalysisS3DataDetails:
      type: object
      properties:
        storageCredentialsId:
          type: string
          description: The storage credentials with the S3 access key.
          format: uuid
          nullable: true
    CwlAnalysisInput:
      type: object
      description: This object contains a "oneOf" construct. With the "objectType"
        attribute you can specify which object type you want to provide. Use "STRUCTURED"
        for type "CreateAnalysisStructuredInput" or use "JSON" for type "CreateAnalysisJsonInput".
      discriminator:
        propertyName: objectType
        mapping:
          STRUCTURED: '#/components/schemas/CwlAnalysisStructuredInput'
          JSON: '#/components/schemas/CwlAnalysisJsonInput'
      oneOf:
      - $ref: '#/components/schemas/CwlAnalysisStructuredInput'
      - $ref: '#/components/schemas/CwlAnalysisJsonInput'
    CwlAnalysisJsonInput:
      required:
      - inputJson
      - objectType
      type: object
      properties:
        objectType:
          type: string
          enum:
          - STRUCTURED
          - JSON
        inputJson:
          type: string
          description: "Contains the input JSON, as an escaped JSON String."
        dataIds:
          type: array
          items:
            type: string
        mounts:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisInputDataMount'
        externalData:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisInputExternalData'
    CwlAnalysisStructuredInput:
      required:
      - inputs
      - objectType
      type: object
      properties:
        objectType:
          type: string
          enum:
          - STRUCTURED
          - JSON
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/AnalysisDataInput'
        parameters:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisParameterInput'
        referenceDataParameters:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisReferenceDataParameter'
    SearchMatchingActivationCodesForCwlAnalysis:
      required:
      - analysisInput
      - pipelineId
      - projectId
      type: object
      properties:
        projectId:
          type: string
        pipelineId:
          type: string
        analysisInput:
          $ref: '#/components/schemas/CwlAnalysisInput'
    NextflowAnalysisInput:
      required:
      - inputs
      type: object
      properties:
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/AnalysisDataInput'
        parameters:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisParameterInput'
        referenceDataParameters:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisReferenceDataParameter'
    SearchMatchingActivationCodesForNextflowAnalysis:
      required:
      - analysisInput
      - pipelineId
      - projectId
      type: object
      properties:
        projectId:
          type: string
        pipelineId:
          type: string
        analysisInput:
          $ref: '#/components/schemas/NextflowAnalysisInput'
    ActivationCodeDetailList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ActivationCodeDetail'
    EventCode:
      required:
      - description
      - eventCode
      type: object
      properties:
        eventCode:
          maxLength: 20
          minLength: 1
          type: string
          description: The event code that can be used for creating event subscriptions
        description:
          maxLength: 200
          minLength: 1
          type: string
          description: A short description about the event code
    EventCodeList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/EventCode'
    EventLogV3:
      required:
      - code
      - description
      - eventTypeCategory
      - id
      - ownerId
      - tenantId
      - timeCreated
      - timeModified
      - userId
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        code:
          maxLength: 255
          minLength: 1
          type: string
          description: The code of the event
        description:
          maxLength: 1000
          minLength: 1
          type: string
          description: The details of the event
        eventTypeCategory:
          type: string
          description: The type of the event
          enum:
          - ERROR
          - WARN
          - INFO
        userId:
          type: string
          format: uuid
    EventLogListV3:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/EventLogV3'
    JobPagedList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Job'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    MetadataModelList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/MetadataModel'
    Field:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        fieldType:
          type: string
          enum:
          - TEXT
          - NUMERIC
          - BOOLEAN
          - DATE
          - ENUMERATION
          - FIELDGROUP
          - PIPELINE_REFERENCE
        required:
          type: boolean
        multivalued:
          type: boolean
        filledByPipeline:
          type: boolean
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
        enumerationValues:
          type: array
          items:
            type: string
      nullable: true
    FieldList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Field'
    Model:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        state:
          type: string
          enum:
          - DRAFT
          - PUBLISHED
        models:
          type: array
          items:
            $ref: '#/components/schemas/Model'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
    NotificationChannel:
      required:
      - address
      - enabled
      - id
      - ownerId
      - tenantId
      - timeCreated
      - timeModified
      - type
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        enabled:
          type: boolean
          description: Should this channel be enabled or not?
        type:
          type: string
          description: "The type of delivery target (MAIL, SQS, SNS, HTTP, ...)"
          enum:
          - MAIL
          - SQS
          - SNS
          - HTTP
        address:
          maxLength: 255
          minLength: 1
          type: string
          description: "The address where to send a notification to (email address,\
            \ url, ...)"
        awsRegion:
          maxLength: 255
          minLength: 0
          type: string
          description: The AWS region of the SNS notification channel
          nullable: true
        application:
          $ref: '#/components/schemas/ApplicationV4'
    CreateNotificationChannel:
      required:
      - address
      - enabled
      - type
      type: object
      properties:
        enabled:
          type: boolean
          description: Should this channel be enabled or not?
        type:
          type: string
          description: "The type of delivery target (MAIL, SQS, SNS, HTTP, ...)"
          enum:
          - MAIL
          - SQS
          - SNS
          - HTTP
        address:
          maxLength: 100
          minLength: 1
          type: string
          description: "The address where to send a notification to (email address,\
            \ url, ...)"
        awsRegion:
          maxLength: 255
          minLength: 1
          type: string
          description: The AWS region of the SNS notification channel
          nullable: true
    NotificationChannelList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/NotificationChannel'
    PipelineList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PipelineV3'
    InputParameter:
      required:
      - code
      - id
      - multiValue
      - required
      type: object
      properties:
        id:
          type: string
          description: The ID of the parameter
        code:
          maxLength: 255
          minLength: 1
          type: string
          description: The code of the parameter
        required:
          type: boolean
          description: Indicates whether this parameter is required
        multiValue:
          type: boolean
          description: Indicates whether multiple values are allowed for this parameter
    InputParameterList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/InputParameter'
    IntegerSettings:
      type: object
      properties:
        defaultValues:
          type: array
          items:
            type: integer
            format: int32
    OptionSettings:
      type: object
      properties:
        options:
          type: array
          items:
            type: string
        defaultValues:
          type: array
          items:
            type: string
    PipelineConfigurationParameter:
      required:
      - code
      - multiValue
      - required
      - type
      type: object
      properties:
        code:
          maxLength: 255
          minLength: 1
          type: string
          description: The code of the parameter
        required:
          type: boolean
          description: Indicates whether this parameter is required
        multiValue:
          type: boolean
          description: Indicates whether multiple values are allowed for this parameter
        type:
          type: string
          description: The type for each parameter
        settings:
          $ref: '#/components/schemas/Settings'
    PipelineConfigurationParameterList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PipelineConfigurationParameter'
    Settings:
      type: object
      description: "This object contains a \"oneOf\" construct. Depending on which\
        \ type, you will receive a StringSettings-, IntegerSettings or OptionsSettings\
        \ object."
      oneOf:
      - $ref: '#/components/schemas/StringSettings'
      - $ref: '#/components/schemas/IntegerSettings'
      - $ref: '#/components/schemas/OptionSettings'
    StringSettings:
      type: object
      properties:
        defaultValues:
          type: array
          items:
            type: string
    ReferenceData:
      required:
      - id
      - name
      - ownerId
      - tenantId
      - timeCreated
      - timeModified
      - typeList
      - version
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: The name of the reference data
        species:
          $ref: '#/components/schemas/Species'
        dataFormat:
          $ref: '#/components/schemas/DataFormat'
        version:
          maxLength: 255
          minLength: 1
          type: string
          description: The version of the reference data
        typeList:
          $ref: '#/components/schemas/ReferenceDataTypeList'
    ReferenceDataList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ReferenceData'
    ReferenceDataType:
      required:
      - id
      - name
      - ownerId
      - tenantId
      - timeCreated
      - timeModified
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: The name of the reference data type
    ReferenceDataTypeList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ReferenceDataType'
    ReferenceSet:
      required:
      - id
      - name
      - ownerId
      - referenceDataList
      - tenantId
      - timeCreated
      - timeModified
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: The name of the reference set
        referenceDataList:
          $ref: '#/components/schemas/ReferenceDataList'
    ReferenceSetList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ReferenceSet'
    Species:
      required:
      - id
      - name
      - ownerId
      - tenantId
      - timeCreated
      - timeModified
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: The name of the species
    PipelineHtmlDocumentation:
      required:
      - content
      type: object
      properties:
        content:
          type: string
          description: The content of the HTML documentation
    PipelineFile:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          maxLength: 255
          minLength: 1
          type: string
    PipelineFileList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PipelineFile'
    PipelineLanguageVersionList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PipelineLanguageVersion'
    AnalysisV3:
      required:
      - id
      - ownerId
      - pipeline
      - reference
      - status
      - tags
      - tenantId
      - timeCreated
      - timeModified
      - userReference
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        reference:
          maxLength: 255
          minLength: 1
          type: string
          description: The unique reference of the analysis
        userReference:
          maxLength: 255
          minLength: 1
          type: string
          description: The user reference of the analysis
        pipeline:
          $ref: '#/components/schemas/PipelineV3'
        workflowSession:
          $ref: '#/components/schemas/WorkflowSessionV3'
        status:
          type: string
          description: The status of the analysis
          enum:
          - REQUESTED
          - AWAITINGINPUT
          - INPROGRESS
          - SUCCEEDED
          - FAILED
          - FAILEDFINAL
          - ABORTED
        startDate:
          type: string
          description: When the analysis was started
          format: date-time
          nullable: true
        endDate:
          type: string
          description: When the analysis was finished
          format: date-time
          nullable: true
        summary:
          type: string
          description: The summary of the analysis
          nullable: true
        analysisStorage:
          $ref: '#/components/schemas/AnalysisStorageV3'
        analysisPriority:
          type: string
          description: The priority of the analysis
          nullable: true
          enum:
          - LOW
          - MEDIUM
          - HIGH
        tags:
          $ref: '#/components/schemas/AnalysisTag'
        application:
          $ref: '#/components/schemas/ApplicationV4'
    AnalysisPagedListV3:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AnalysisV3'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    AnalysisTag:
      required:
      - referenceTags
      - technicalTags
      - userTags
      type: object
      properties:
        technicalTags:
          type: array
          description: Technical tags
          items:
            type: string
            description: Technical tags
        userTags:
          type: array
          description: User tags
          items:
            type: string
            description: User tags
        referenceTags:
          type: array
          description: Reference tags
          items:
            type: string
            description: Reference tags
    WorkflowV3:
      required:
      - analysisStorage
      - code
      - description
      - id
      - urn
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          maxLength: 255
          minLength: 1
          type: string
          description: The code of the workflow
        urn:
          maxLength: 2000
          minLength: 1
          type: string
          description: "The URN of the workflow. The format is urn:ilmn:ica:\\<type\
            \ of the object\\>:\\<ID of the object\\>#\\<optional human readable hint\
            \ representing the object\\>. The hint can be omitted, in that case the\
            \ hashtag (#) must also be omitted."
        description:
          maxLength: 4000
          minLength: 1
          type: string
          description: The description of the workflow
        languageVersion:
          $ref: '#/components/schemas/PipelineLanguageVersion'
        workflowTags:
          $ref: '#/components/schemas/PipelineTag'
        analysisStorage:
          $ref: '#/components/schemas/AnalysisStorageV3'
    WorkflowSessionV3:
      required:
      - id
      - ownerId
      - status
      - tags
      - tenantId
      - timeCreated
      - userReference
      - workflow
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        userReference:
          maxLength: 255
          minLength: 1
          type: string
          description: The user reference of the workflow session
        workflow:
          $ref: '#/components/schemas/WorkflowV3'
        status:
          type: string
          description: The status of the workflow session
          enum:
          - REQUESTED
          - AWAITINGINPUT
          - INPROGRESS
          - SUCCEEDED
          - FAILED
          - FAILEDFINAL
          - ABORTED
        startDate:
          type: string
          description: When the workflow session was started
          format: date-time
          nullable: true
        endDate:
          type: string
          description: When the workflow session was finished
          format: date-time
          nullable: true
        summary:
          type: string
          description: The summary of the workflow session
          nullable: true
        tags:
          $ref: '#/components/schemas/WorkflowSessionTag'
    WorkflowSessionTag:
      type: object
      properties:
        technicalTags:
          type: array
          description: Technical tags
          nullable: true
          items:
            type: string
            description: Technical tags
            nullable: true
        userTags:
          type: array
          description: User tags
          nullable: true
          items:
            type: string
            description: User tags
            nullable: true
    AnalysisV4:
      required:
      - id
      - owner
      - pipeline
      - reference
      - status
      - tags
      - tenant
      - timeCreated
      - timeModified
      - userReference
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        owner:
          $ref: '#/components/schemas/UserIdentifier'
        tenant:
          $ref: '#/components/schemas/TenantIdentifier'
        reference:
          maxLength: 255
          minLength: 1
          type: string
          description: The unique reference of the analysis
        userReference:
          maxLength: 255
          minLength: 1
          type: string
          description: The user reference of the analysis
        pipeline:
          $ref: '#/components/schemas/PipelineV4'
        workflowSession:
          $ref: '#/components/schemas/WorkflowSessionV4'
        status:
          pattern: REQUESTED|QUEUED|INITIALIZING|PREPARING_INPUTS|IN_PROGRESS|GENERATING_OUTPUTS|AWAITING_INPUT|ABORTING|SUCCEEDED|FAILED|FAILED_FINAL|ABORTED
          type: string
          description: The status of the analysis
        startDate:
          type: string
          description: When the analysis was started
          format: date-time
          nullable: true
        endDate:
          type: string
          description: When the analysis was finished
          format: date-time
          nullable: true
        summary:
          type: string
          description: The summary of the analysis
          nullable: true
        analysisStorage:
          $ref: '#/components/schemas/AnalysisStorageV4'
        analysisPriority:
          pattern: LOW|MEDIUM|HIGH
          type: string
          description: The priority of the analysis
          nullable: true
        tags:
          $ref: '#/components/schemas/AnalysisTag'
        application:
          $ref: '#/components/schemas/ApplicationV4'
    AnalysisStorageV4:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: The name of the storage option
        description:
          type: string
          description: The description about the storage option
          nullable: true
    PipelineV4:
      required:
      - analysisStorage
      - code
      - description
      - id
      - language
      - owner
      - pipelineTags
      - tenant
      - timeCreated
      - timeModified
      type: object
      properties:
        id:
          type: string
          format: uuid
        urn:
          maxLength: 2000
          minLength: 1
          type: string
          description: "The URN of the pipeline. The format is urn:ilmn:ica:\\<type\
            \ of the object\\>:\\<ID of the object\\>#\\<optional human readable hint\
            \ representing the object\\>. The hint can be omitted, in that case the\
            \ hashtag (#) must also be omitted."
          nullable: true
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        owner:
          $ref: '#/components/schemas/UserIdentifier'
        tenant:
          $ref: '#/components/schemas/TenantIdentifier'
        code:
          maxLength: 255
          minLength: 1
          type: string
          description: The code of the pipeline
        description:
          maxLength: 4000
          minLength: 1
          type: string
          description: The description of the pipeline
        status:
          type: string
          description: The status of the pipeline
          nullable: true
          enum:
          - DRAFT
          - RELEASED
        language:
          type: string
          description: The language that is used by the pipeline
          enum:
          - CWL
          - NEXTFLOW
          - UNKNOWN
        languageVersion:
          $ref: '#/components/schemas/PipelineLanguageVersion'
        pipelineTags:
          $ref: '#/components/schemas/PipelineTag'
        analysisStorage:
          $ref: '#/components/schemas/AnalysisStorageV4'
        proprietary:
          type: boolean
          description: A boolean which indicates if the code of this pipeline is proprietary
          nullable: true
          default: false
        inputFormType:
          type: string
          description: The type of the inputform used.
          enum:
          - XML
          - JSON
    WorkflowV4:
      required:
      - analysisStorage
      - code
      - description
      - id
      - urn
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          maxLength: 255
          minLength: 1
          type: string
          description: The code of the workflow
        urn:
          maxLength: 2000
          minLength: 1
          type: string
          description: "The URN of the workflow. The format is urn:ilmn:ica:\\<type\
            \ of the object\\>:\\<ID of the object\\>#\\<optional human readable hint\
            \ representing the object\\>. The hint can be omitted, in that case the\
            \ hashtag (#) must also be omitted."
        description:
          maxLength: 4000
          minLength: 1
          type: string
          description: The description of the workflow
        languageVersion:
          $ref: '#/components/schemas/PipelineLanguageVersion'
        workflowTags:
          $ref: '#/components/schemas/PipelineTag'
        analysisStorage:
          $ref: '#/components/schemas/AnalysisStorageV4'
    WorkflowSessionV4:
      required:
      - id
      - owner
      - status
      - tags
      - tenant
      - timeCreated
      - userReference
      - workflow
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        owner:
          $ref: '#/components/schemas/UserIdentifier'
        tenant:
          $ref: '#/components/schemas/TenantIdentifier'
        userReference:
          maxLength: 255
          minLength: 1
          type: string
          description: The user reference of the workflow session
        workflow:
          $ref: '#/components/schemas/WorkflowV4'
        status:
          pattern: REQUESTED|QUEUED|INITIALIZING|PREPARING_INPUTS|IN_PROGRESS|GENERATING_OUTPUTS|AWAITING_INPUT|ABORTING|SUCCEEDED|FAILED|FAILED_FINAL|ABORTED
          type: string
          description: The status of the workflow session
        startDate:
          type: string
          description: When the workflow session was started
          format: date-time
          nullable: true
        endDate:
          type: string
          description: When the workflow session was finished
          format: date-time
          nullable: true
        summary:
          type: string
          description: The summary of the workflow session
          nullable: true
        tags:
          $ref: '#/components/schemas/WorkflowSessionTag'
    AnalysisStep:
      required:
      - id
      - logs
      - name
      - status
      - technical
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        status:
          type: string
          description: The status of the analysis step
          enum:
          - FAILED
          - DONE
          - RUNNING
          - INTERRUPTED
          - ABORTED
          - WAITING
        queueDate:
          type: string
          description: When the analysis step was queued
          format: date-time
          nullable: true
        startDate:
          type: string
          description: When the analysis step was started
          format: date-time
          nullable: true
        endDate:
          type: string
          description: When the analysis step was finished
          format: date-time
          nullable: true
        technical:
          type: boolean
          description: Indicates which kind of step was executed
        logs:
          $ref: '#/components/schemas/AnalysisStepLogs'
        exitCode:
          type: integer
          description: The exit code of the analysis step
          format: int32
          nullable: true
    AnalysisStepList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AnalysisStep'
    AnalysisStepLogs:
      type: object
      properties:
        stdOutData:
          $ref: '#/components/schemas/Data'
        stdOutStream:
          type: string
          description: A WebSocket URL for reading the standard output log stream.
            Might be closed by ICA as soon as the analysis step execution has finished.
          nullable: true
        stdErrData:
          $ref: '#/components/schemas/Data'
        stdErrStream:
          type: string
          description: A WebSocket URL for reading the standard error log stream.
            Might be closed by ICA as soon as the analysis step execution has finished.
          nullable: true
      description: "Contains references to the standard output (stdout) and standard\
        \ error (stderr) log streams of an analysis step. In this object both log\
        \ streams could be provided in 2 different formats: as a WebSocket stream\
        \ URL or as an ICA Data reference. The status of the analysis step determines\
        \ which format is provided: a WebSocket URL during step execution, a Data\
        \ reference after step execution. Note however that an analysis step might\
        \ not expose log streams at all, which would result in this object being empty. "
    AnalysisData:
      required:
      - dataId
      - dataType
      - format
      - name
      type: object
      properties:
        children:
          type: array
          items:
            $ref: '#/components/schemas/AnalysisData'
        dataId:
          maxLength: 255
          minLength: 1
          type: string
          description: The id of the file/folder.
        format:
          $ref: '#/components/schemas/DataFormat'
        name:
          type: string
          description: The name of the file/folder as it was processed by the analysis.
        dataType:
          type: string
          enum:
          - FILE
          - FOLDER
        mountPath:
          type: string
          description: The requested location where the input file was located on
            the machine that was running the pipeline.
    AnalysisExternalData:
      required:
      - mountPath
      - type
      - url
      type: object
      properties:
        url:
          type: string
        type:
          type: string
          description: "Possible values are: s3, http, basespace. More types could\
            \ be added in a future release."
        mountPath:
          type: string
      description: The external data used as input by the analysis.
      nullable: true
    AnalysisInput:
      required:
      - code
      type: object
      properties:
        code:
          type: string
          description: The name of the input-parameter.
        analysisData:
          type: array
          description: The analysis-data used as input by the analysis.
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisData'
        externalData:
          type: array
          description: The external data used as input by the analysis.
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisExternalData'
    AnalysisInputList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AnalysisInput'
    AnalysisOutput:
      required:
      - code
      type: object
      properties:
        code:
          type: string
          description: The name of the output-parameter.
        projectId:
          type: string
          description: The ID of the project containing the analysis-data produced
            by the analysis for the output-parameter.
          format: uuid
        data:
          type: array
          items:
            $ref: '#/components/schemas/AnalysisData'
    AnalysisOutputList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AnalysisOutput'
    AnalysisRawOutput:
      required:
      - rawOutput
      type: object
      properties:
        rawOutput:
          type: string
          description: The raw output of the analysis.
    ExecutionConfiguration:
      required:
      - multiValue
      - name
      - values
      type: object
      properties:
        name:
          type: string
          description: The name of the configuration
        multiValue:
          type: boolean
          description: Whether the configuration has multiple values
        values:
          type: array
          description: The configuration values
          items:
            type: string
            description: The configuration values
    ExecutionConfigurationList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ExecutionConfiguration'
    InputFormBaseSpaceDataDetails:
      type: object
      properties:
        workgroupId:
          type: string
          nullable: true
        extensions:
          type: string
          nullable: true
        pathPrefix:
          type: string
          nullable: true
    InputFormData:
      required:
      - dataId
      type: object
      properties:
        dataId:
          type: string
        mountPath:
          type: string
      description: Use 'dataValues' for data fields.
      nullable: true
    InputFormExternalData:
      required:
      - type
      - url
      type: object
      properties:
        url:
          type: string
        type:
          pattern: s3|http|basespace
          type: string
        s3Details:
          $ref: '#/components/schemas/InputFormS3DataDetails'
        basespaceDetails:
          $ref: '#/components/schemas/InputFormBaseSpaceDataDetails'
    InputFormFieldChoice:
      type: object
      properties:
        value:
          type: string
        text:
          type: string
        selected:
          type: boolean
        disabled:
          type: boolean
    InputFormFieldDataFilter:
      type: object
      properties:
        nameFilter:
          type: string
        dataFormat:
          type: array
          items:
            type: string
        dataType:
          type: string
          enum:
          - FILE
          - DIRECTORY
    InputFormField:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        label:
          type: string
        minValues:
          type: integer
          format: int32
        maxValues:
          type: integer
          format: int32
        minMaxValuesMessage:
          type: string
        helpText:
          type: string
        placeHolderText:
          type: string
        values:
          type: array
          items:
            type: string
        dataValues:
          type: array
          items:
            $ref: '#/components/schemas/InputFormWithExternalData'
        groupValues:
          type: array
          items:
            $ref: '#/components/schemas/InputFormGroupFieldValues'
        minLength:
          type: integer
          format: int32
        maxLength:
          type: integer
          format: int32
        min:
          type: number
        max:
          type: number
        choices:
          type: array
          items:
            $ref: '#/components/schemas/InputFormFieldChoice'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/InputFormGroupField'
        dataFilter:
          $ref: '#/components/schemas/InputFormFieldDataFilter'
        regex:
          type: string
        regexErrorMessage:
          type: string
        hidden:
          type: boolean
        disabled:
          type: boolean
        emptyValuesAllowed:
          type: boolean
        updateRenderOnChange:
          type: boolean
        sensitive:
          type: boolean
    InputFormFieldList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/InputFormField'
    InputFormFieldValues:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        values:
          type: array
          description: Use 'values' for all fields except data fields. Use string
            values to avoid rounding of numbers with a high precision.
          nullable: true
          items:
            type: string
            description: Use 'values' for all fields except data fields. Use string
              values to avoid rounding of numbers with a high precision.
            nullable: true
        dataValues:
          type: array
          description: Use 'dataValues' for data fields.
          nullable: true
          items:
            $ref: '#/components/schemas/InputFormData'
        externalDataValues:
          type: array
          description: Use 'externalDataValues' for external data
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisInputExternalData'
    InputFormGroupField:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        label:
          type: string
        minValues:
          type: integer
          format: int32
        maxValues:
          type: integer
          format: int32
        minMaxValuesMessage:
          type: string
        helpText:
          type: string
        placeHolderText:
          type: string
        values:
          type: array
          items:
            type: string
        dataValues:
          type: array
          items:
            $ref: '#/components/schemas/InputFormWithExternalData'
        minLength:
          type: integer
          format: int32
        maxLength:
          type: integer
          format: int32
        min:
          type: number
        max:
          type: number
        choices:
          type: array
          items:
            $ref: '#/components/schemas/InputFormFieldChoice'
        dataFilter:
          $ref: '#/components/schemas/InputFormFieldDataFilter'
        regex:
          type: string
        regexErrorMessage:
          type: string
        hidden:
          type: boolean
        disabled:
          type: boolean
        emptyValuesAllowed:
          type: boolean
        updateRenderOnChange:
          type: boolean
    InputFormGroupFieldValues:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/InputFormFieldValues'
    InputFormS3DataDetails:
      type: object
      properties:
        storageCredentialsId:
          type: string
          description: The storage credentials with the S3 access key.
          format: uuid
          nullable: true
    InputFormWithExternalData:
      type: object
      properties:
        dataId:
          type: string
        externalData:
          $ref: '#/components/schemas/InputFormExternalData'
        mountPath:
          type: string
    AnalysisPrice:
      type: object
      properties:
        amount:
          type: number
          description: The amount of the analysis price
        currency:
          type: string
          description: The currency of the analysis price
          default: iCredit
      nullable: true
    AnalysisUsageDetails:
      type: object
      properties:
        price:
          $ref: '#/components/schemas/AnalysisPrice'
    AnalysisCreationBatch:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          format: uuid
        job:
          $ref: '#/components/schemas/Job'
    AnalysisOutputMapping:
      required:
      - sourcePath
      - targetPath
      - targetProjectId
      type: object
      properties:
        sourcePath:
          type: string
        type:
          type: string
          enum:
          - FILE
          - FOLDER
        targetProjectId:
          type: string
        targetPath:
          type: string
        actionOnExist:
          type: string
      nullable: true
    CreateAnalysisCreationBatch:
      type: object
      properties:
        cwlItems:
          type: array
          items:
            $ref: '#/components/schemas/CreateCwlAnalysis'
        nextflowItems:
          type: array
          items:
            $ref: '#/components/schemas/CreateNextflowAnalysis'
        nextflowJsonItems:
          type: array
          items:
            $ref: '#/components/schemas/CreateNextflowJsonAnalysis'
    CreateAnalysisTag:
      type: object
      properties:
        technicalTags:
          type: array
          description: Technical tags
          nullable: true
          items:
            type: string
            description: Technical tags
            nullable: true
        userTags:
          type: array
          description: User tags
          nullable: true
          items:
            type: string
            description: User tags
            nullable: true
        referenceTags:
          type: array
          description: Reference tags
          nullable: true
          items:
            type: string
            description: Reference tags
            nullable: true
    CreateCwlAnalysis:
      required:
      - analysisInput
      - pipelineId
      - userReference
      type: object
      properties:
        userReference:
          maxLength: 255
          minLength: 1
          pattern: "^[a-zA-Z0-9 _-]*(/[a-zA-Z0-9 _-]+)*$"
          type: string
          description: The user-reference of the analysis. This should be something
            meaningful for the user.
        pipelineId:
          type: string
          description: The pipeline for which an analysis will be created.
        tags:
          $ref: '#/components/schemas/CreateAnalysisTag'
        analysisStorageId:
          type: string
          description: The id of the storage to use for the analysis.
          format: uuid
          nullable: true
        outputParentFolderId:
          type: string
          description: The id or the urn of the folder in which the output folder
            should be created.
          nullable: true
        analysisOutput:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisOutputMapping'
        analysisInput:
          $ref: '#/components/schemas/CwlAnalysisInput'
        activationCodeDetailId:
          type: string
          description: Indicates under which activation code the pipeline is executed.
          format: uuid
          nullable: true
    CreateNextflowAnalysis:
      required:
      - analysisInput
      - pipelineId
      - userReference
      type: object
      properties:
        userReference:
          maxLength: 255
          minLength: 1
          pattern: "^[a-zA-Z0-9 _-]*(/[a-zA-Z0-9 _-]+)*$"
          type: string
          description: The user-reference of the analysis. This should be something
            meaningful for the user.
        pipelineId:
          type: string
          description: The pipeline for which an analysis will be created.
        tags:
          $ref: '#/components/schemas/CreateAnalysisTag'
        analysisStorageId:
          type: string
          description: The id of the storage to use for the analysis.
          format: uuid
          nullable: true
        outputParentFolderId:
          type: string
          description: The id or the urn of the folder in which the output folder
            should be created.
          nullable: true
        analysisOutput:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisOutputMapping'
        analysisInput:
          $ref: '#/components/schemas/NextflowAnalysisInput'
        activationCodeDetailId:
          type: string
          description: Indicates under which activation code the pipeline is executed.
          format: uuid
          nullable: true
    CreateNextflowJsonAnalysis:
      required:
      - inputFormValues
      - pipelineId
      - userReference
      type: object
      properties:
        userReference:
          maxLength: 255
          minLength: 1
          pattern: "^[a-zA-Z0-9 _-]*(/[a-zA-Z0-9 _-]+)*$"
          type: string
          description: The user-reference of the analysis. This should be something
            meaningful for the user.
        pipelineId:
          type: string
          description: The pipeline for which an analysis will be created.
        tags:
          $ref: '#/components/schemas/CreateAnalysisTag'
        analysisStorageId:
          type: string
          description: The id of the storage to use for the analysis.
          format: uuid
          nullable: true
        outputParentFolderId:
          type: string
          description: The id or the urn of the folder in which the output folder
            should be created.
          nullable: true
        analysisOutput:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisOutputMapping'
        inputFormValues:
          $ref: '#/components/schemas/NextflowJsonAnalysisInput'
    InputFormGroup:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/InputFormGroupFieldValues'
    NextflowJsonAnalysisInput:
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/InputFormFieldValues'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/InputFormGroup'
    AnalysisCreationBatchItemV4:
      required:
      - id
      - processing
      - request
      type: object
      properties:
        id:
          type: string
          format: uuid
        request:
          $ref: '#/components/schemas/AnalysisCreationBatchItemRequest'
        processing:
          $ref: '#/components/schemas/AnalysisCreationBatchItemProcessing'
        createdAnalysis:
          $ref: '#/components/schemas/AnalysisV4'
    AnalysisCreationBatchItemPagedListV4:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AnalysisCreationBatchItemV4'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    AnalysisCreationBatchItemProcessing:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          enum:
          - RUNNING
          - WAITING_RESOURCES
          - SUCCEEDED
          - FAILED
        additionalStatusInformation:
          type: string
          description: Additional information regarding the status of this batch item.
          nullable: true
    AnalysisCreationBatchItemRequest:
      required:
      - pipelineId
      - tags
      - userReference
      type: object
      properties:
        userReference:
          type: string
        pipelineId:
          type: string
          description: The pipeline for which an analysis will be created.
        tags:
          $ref: '#/components/schemas/AnalysisTag'
    AnalysisCreationBatchItemV3:
      required:
      - id
      - processing
      - request
      type: object
      properties:
        id:
          type: string
          format: uuid
        request:
          $ref: '#/components/schemas/AnalysisCreationBatchItemRequest'
        processing:
          $ref: '#/components/schemas/AnalysisCreationBatchItemProcessing'
        createdAnalysis:
          $ref: '#/components/schemas/AnalysisV3'
    AnalysisCreationBatchItemPagedListV3:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AnalysisCreationBatchItemV3'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    AnalysisPagedListV4:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AnalysisV4'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    AnalysisQueryParameters:
      type: object
      properties:
        reference:
          type: string
          description: The reference to filter on.
          nullable: true
        userReference:
          type: string
          description: The user-reference to filter on.
          nullable: true
        status:
          type: array
          items:
            pattern: REQUESTED|QUEUED|INITIALIZING|PREPARING_INPUTS|IN_PROGRESS|GENERATING_OUTPUTS|AWAITING_INPUT|ABORTING|SUCCEEDED|FAILED|FAILED_FINAL|ABORTED
            type: string
            description: The status to filter on.
            nullable: true
        userTags:
          type: array
          description: The user-tags to filter on.
          nullable: true
          items:
            type: string
            description: The user-tags to filter on.
            nullable: true
        technicalTags:
          type: array
          description: The technical-tags to filter on.
          nullable: true
          items:
            type: string
            description: The technical-tags to filter on.
            nullable: true
        referenceTags:
          type: array
          description: The reference-data-tags to filter on.
          nullable: true
          items:
            type: string
            description: The reference-data-tags to filter on.
            nullable: true
    CreateCwlJsonAnalysis:
      required:
      - inputFormValues
      - pipelineId
      - userReference
      type: object
      properties:
        userReference:
          maxLength: 255
          minLength: 1
          pattern: "^[a-zA-Z0-9 _-]*(/[a-zA-Z0-9 _-]+)*$"
          type: string
          description: The user-reference of the analysis. This should be something
            meaningful for the user.
        pipelineId:
          type: string
          description: The pipeline for which an analysis will be created.
        tags:
          $ref: '#/components/schemas/CreateAnalysisTag'
        analysisStorageId:
          type: string
          description: The id of the storage to use for the analysis.
          format: uuid
          nullable: true
        outputParentFolderId:
          type: string
          description: The id or the urn of the folder in which the output folder
            should be created.
          nullable: true
        analysisOutput:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisOutputMapping'
        inputFormValues:
          $ref: '#/components/schemas/CwlJsonAnalysisInput'
    CwlJsonAnalysisInput:
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/InputFormFieldValues'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/InputFormGroup'
    CreateCwlWithJsonInputAnalysis:
      required:
      - analysisInput
      - pipelineId
      - userReference
      type: object
      properties:
        userReference:
          maxLength: 255
          minLength: 1
          pattern: "^[a-zA-Z0-9 _-]*(/[a-zA-Z0-9 _-]+)*$"
          type: string
          description: The user-reference of the analysis. This should be something
            meaningful for the user.
        pipelineId:
          type: string
          description: The pipeline for which an analysis will be created.
        tags:
          $ref: '#/components/schemas/CreateAnalysisTag'
        analysisStorageId:
          type: string
          description: The id of the storage to use for the analysis.
          format: uuid
          nullable: true
        outputParentFolderId:
          type: string
          description: The id or the urn of the folder in which the output folder
            should be created.
          nullable: true
        analysisOutput:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisOutputMapping'
        analysisInput:
          $ref: '#/components/schemas/CwlAnalysisWithJsonInput'
    CwlAnalysisWithJsonInput:
      required:
      - inputJson
      type: object
      properties:
        inputJson:
          type: string
          description: "Contains the input JSON, as an escaped JSON String."
        dataIds:
          type: array
          items:
            type: string
        mounts:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisInputDataMount'
        externalData:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisInputExternalData'
    CreateCwlWithStructuredInputAnalysis:
      required:
      - analysisInput
      - pipelineId
      - userReference
      type: object
      properties:
        userReference:
          maxLength: 255
          minLength: 1
          pattern: "^[a-zA-Z0-9 _-]*(/[a-zA-Z0-9 _-]+)*$"
          type: string
          description: The user-reference of the analysis. This should be something
            meaningful for the user.
        pipelineId:
          type: string
          description: The pipeline for which an analysis will be created.
        tags:
          $ref: '#/components/schemas/CreateAnalysisTag'
        analysisStorageId:
          type: string
          description: The id of the storage to use for the analysis.
          format: uuid
          nullable: true
        outputParentFolderId:
          type: string
          description: The id or the urn of the folder in which the output folder
            should be created.
          nullable: true
        analysisOutput:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisOutputMapping'
        analysisInput:
          $ref: '#/components/schemas/CwlAnalysisWithStructuredInput'
    CwlAnalysisWithStructuredInput:
      required:
      - inputs
      type: object
      properties:
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/AnalysisDataInput'
        parameters:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisParameterInput'
        referenceDataParameters:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisReferenceDataParameter'
    CreateNextflowWithCustomInputAnalysis:
      required:
      - analysisInput
      - pipelineId
      - userReference
      type: object
      properties:
        userReference:
          maxLength: 255
          minLength: 1
          pattern: "^[a-zA-Z0-9 _-]*(/[a-zA-Z0-9 _-]+)*$"
          type: string
          description: The user-reference of the analysis. This should be something
            meaningful for the user.
        pipelineId:
          type: string
          description: The pipeline for which an analysis will be created.
        tags:
          $ref: '#/components/schemas/CreateAnalysisTag'
        analysisStorageId:
          type: string
          description: The id of the storage to use for the analysis.
          format: uuid
          nullable: true
        outputParentFolderId:
          type: string
          description: The id or the urn of the folder in which the output folder
            should be created.
          nullable: true
        analysisOutput:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisOutputMapping'
        analysisInput:
          $ref: '#/components/schemas/NextflowAnalysisWithCustomInput'
    NextflowAnalysisWithCustomInput:
      required:
      - customInput
      type: object
      properties:
        customInput:
          type: string
          description: "Contains the custom input, in YAML format or as an escaped\
            \ JSON string."
        dataIds:
          type: array
          items:
            type: string
        mounts:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisInputDataMount'
        externalData:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AnalysisInputExternalData'
    AnalysisStorageListV4:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AnalysisStorageV4'
    ProjectPagedList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    CreateProject:
      required:
      - billingMode
      - dataSharingEnabled
      - name
      - regionId
      - storageBundleId
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          pattern: "[a-zA-Z][a-zA-Z0-9_\\s-]*"
          type: string
        shortDescription:
          maxLength: 4000
          minLength: 1
          type: string
          nullable: true
        information:
          type: string
          description: Information about the project. Note that the value of this
            field can be arbitrary large.
          nullable: true
        projectOwnerId:
          type: string
          description: Owner of the project. Defaults to the current user.
          format: uuid
          nullable: true
        regionId:
          type: string
          description: The region of the project. All data and pipeline executions
            will reside in this region.
          format: uuid
        billingMode:
          type: string
          description: The billing mode of the project. It determines who pays for
            the costs linked to the project.
          enum:
          - PROJECT
          - TENANT
        dataSharingEnabled:
          type: boolean
          description: Indicates whether the Data and Samples created in this Project
            can be linked to other Projects.
        tags:
          $ref: '#/components/schemas/ProjectTag'
        storageBundleId:
          type: string
          format: uuid
        metadataModelId:
          type: string
          format: uuid
          nullable: true
        storageConfigurationId:
          type: string
          description: An optional storage configuration id to have self managed storage.
          format: uuid
          nullable: true
        storageConfigurationSubfolder:
          type: string
          description: "An optional subfolder that determines the object prefix of\
            \ your self managed storage.  If not used, you will not be able to use\
            \ this storage configuration for any future projects."
          nullable: true
        analysisPriority:
          type: string
          description: "Indicates the priority given to a project and its analyses\
            \ within a single tenant, where MEDIUM is the default value."
          nullable: true
          default: MEDIUM
          enum:
          - LOW
          - MEDIUM
          - HIGH
    ProjectBundle:
      required:
      - bundle
      - projectId
      type: object
      properties:
        bundle:
          $ref: '#/components/schemas/Bundle'
        projectId:
          type: string
          format: uuid
        application:
          $ref: '#/components/schemas/ApplicationV4'
    ProjectBundleList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProjectBundle'
    ChangeProjectOwner:
      required:
      - newOwnerId
      type: object
      properties:
        newOwnerId:
          type: string
          description: The id of the new project owner.
    BaseConnection:
      required:
      - accessToken
      - authenticator
      - databaseName
      - dnsName
      - roleName
      - schemaName
      - userPrincipalName
      - warehouseName
      type: object
      properties:
        authenticator:
          type: string
          description: Specifies the supported snowflake authenticator to use. Currently
            'oauth' only is supported
        accessToken:
          type: string
          description: Specifies the OAuth token to use for authentication
        dnsName:
          type: string
          description: snowflake dns name. Usually something like '<<account>>.snowflakecomputing.com'
        userPrincipalName:
          type: string
          description: Specifies the user principal name. This is required for some
            snowflake client (snowSQL for instance)
        databaseName:
          type: string
          description: Specifies the database name bound to the project specified
        schemaName:
          type: string
          description: Specifies the schema name bound to the project specified
        warehouseName:
          type: string
          description: Specifies the warehouse name bound to the project specified
        roleName:
          type: string
          description: Specifies the role name bound to the project specified
    BaseJob:
      required:
      - id
      - ownerId
      - status
      - tenantId
      - timeCreated
      - timeModified
      - type
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        description:
          type: string
          description: A short description of the base job
          nullable: true
        table:
          $ref: '#/components/schemas/ProjectBaseTable'
        type:
          type: string
          description: The type of the job
          enum:
          - COPYTABLE
          - EXPORTTABLE
          - CREATETABLE
          - EXECUTEQUERY
          - LOADDATA
          - PREPAREDATA
        status:
          type: string
          description: The status of the job
          enum:
          - CREATED
          - SUCCEEDED
          - FAILED
          - PENDING
          - INPROGRESS
          - ABORTED
        overallDuration:
          type: integer
          description: The duration of the job expressed in milliseconds
          format: int64
          nullable: true
        details:
          type: string
          description: Detailed description of the job
          nullable: true
        bytesBilled:
          type: integer
          description: Bytes billed
          format: int64
          nullable: true
    BaseJobList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/BaseJob'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    ProjectBaseTable:
      required:
      - id
      - name
      - ownerId
      - status
      - tenantId
      - timeCreated
      - timeModified
      - type
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: The name of the table which should be used in writing queries
        description:
          maxLength: 4000
          minLength: 1
          type: string
          description: The description of the table
          nullable: true
        type:
          type: string
          description: The type of the table
          enum:
          - TABLE
          - VIEW
        status:
          type: string
          description: The status of the table
          enum:
          - AVAILABLE
          - DELETED
          - PENDING
        numberOfRecords:
          type: integer
          description: The number of record in the table
          format: int64
          nullable: true
        dataSize:
          type: integer
          description: The amount of Data contained in this table in bytes
          format: int64
          nullable: true
      nullable: true
    ProjectBaseTableList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProjectBaseTable'
    LoadDataInBaseRequest:
      required:
      - dataId
      type: object
      properties:
        allowQuotedNewlines:
          type: boolean
          description: "Enable to include newlines contained in quoted data sections\
            \ in the cell’s value. When disabled, newlines will signal a new row"
          nullable: true
          default: false
        dataId:
          type: string
          description: ID of the data to load into the table
        delimiter:
          type: string
          description: field delimiter
          nullable: true
          default: ","
        encoding:
          type: string
          description: Encoding
          nullable: true
          default: UTF8
          enum:
          - UTF8
          - ISO88591
        forceLoad:
          type: boolean
          description: "When false (default): the data will not be loaded if it was\
            \ already previously loaded to table ; when true, the data will be loaded\
            \ even if already loaded in the past"
          nullable: true
          default: false
        headerRowsToSkip:
          type: integer
          description: number of rows to skip (usually for headers)
          format: int32
          nullable: true
          default: 1
        ignoreUnknownValues:
          type: boolean
          description: "When enabled, rows with extra column values that do not match\
            \ the schema will be ignored and will not be loaded into the table, rows\
            \ with too few values will receive default value null"
          default: false
        includeReferences:
          type: boolean
          description: Include references
          nullable: true
          default: true
        includeDataReference:
          type: boolean
          description: Include Data Reference
          nullable: true
          default: true
        includeSampleReference:
          type: boolean
          description: Include Sample Reference
          nullable: true
          default: true
        includePipelineReference:
          type: boolean
          description: Include Pipeline Reference
          nullable: true
          default: true
        includePipelineExecutionReference:
          type: boolean
          description: Include Pipeline Execution Reference
          nullable: true
          default: true
        includeTenantReference:
          type: boolean
          description: Include Tenant Reference
          nullable: true
          default: true
        nullMarker:
          type: string
          description: Specifies a string that represents a null value in a CSV/TSV
            file.
          nullable: true
        numberOfErrorsAllowed:
          type: integer
          description: The maximum number of bad records that Base can ignore when
            running the job
          format: int32
          nullable: true
          default: 0
        quote:
          type: string
          description: The value that is used to quote data sections in a CSV/TSV
            file
          nullable: true
        writePreference:
          type: string
          description: specifies how to write data in the table.
          nullable: true
          default: APPENDTOTABLE
          enum:
          - WRITEIFEMPTY
          - APPENDTOTABLE
          - OVERWRITETABLE
    CreateCustomEvent:
      required:
      - code
      - content
      type: object
      properties:
        code:
          maxLength: 50
          minLength: 1
          type: string
          description: The event code that should match a custom subscription.
        content:
          type: object
          description: The content that will be forwarded to the configured custom
            subscription destinations.
          example:
            info: free-form event content
    CustomNotificationSubscription:
      required:
      - customEventCode
      - enabled
      - id
      - notificationChannel
      - ownerId
      - tenantId
      - timeCreated
      - timeModified
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        customEventCode:
          maxLength: 20
          minLength: 1
          type: string
          description: The custom event code to subscribe to
        filterExpression:
          maxLength: 2000
          minLength: 1
          type: string
          description: To be used when a notification applies to specific conditions.
          nullable: true
        enabled:
          type: boolean
          description: Should this subscription be enabled or not?
        notificationChannel:
          $ref: '#/components/schemas/NotificationChannel'
        application:
          $ref: '#/components/schemas/ApplicationV4'
    CreateCustomNotificationSubscription:
      required:
      - customEventCode
      - enabled
      - notificationChannelId
      type: object
      properties:
        customEventCode:
          maxLength: 20
          minLength: 1
          type: string
          description: The custom event code to subscribe to
        filterExpression:
          maxLength: 2000
          minLength: 1
          type: string
          description: To be used when a notification applies to specific conditions.
          nullable: true
        enabled:
          type: boolean
          description: Should this subscription be enabled or not?
        notificationChannelId:
          type: string
          description: The id of the notification channel used to send on
          format: uuid
    CustomNotificationSubscriptionList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CustomNotificationSubscription'
    CwlAnalysisInputJson:
      required:
      - inputJson
      type: object
      properties:
        inputJson:
          type: string
          description: The input json of the CWL analysis.
    CwlAnalysisOutputJson:
      required:
      - outputJson
      type: object
      properties:
        outputJson:
          type: string
          description: The output json of the CWL analysis.
    ProjectData:
      required:
      - data
      - projectId
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Data'
        projectId:
          type: string
          format: uuid
    ProjectDataPagedList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProjectData'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    DataPagedList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Data'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    CreateData:
      required:
      - dataType
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the file/folder as how it will be created.
        folderId:
          type: string
          description: "The id of the folder you want to create this new data in.\
            \ Alternatively, the folderPath attribute could be used as well for this."
          nullable: true
        folderPath:
          pattern: .*/$
          type: string
          description: "The absolute path of the folder you want to create this new\
            \ data in which must end with '/'. Alternatively, the folderId attribute\
            \ could be used as well for this. In case the folder path does not yet\
            \ exist, it will be automatically created."
          nullable: true
        formatCode:
          type: string
          description: "The code of the format you would like to assign at creation\
            \ time. This is only allowed for file data. If not specified, auto format\
            \ assignment will be done."
          nullable: true
        dataType:
          type: string
          enum:
          - FILE
          - FOLDER
    DataList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Data'
    ProjectList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    Upload:
      required:
      - url
      type: object
      properties:
        url:
          type: string
          description: A pre-signed url which is temporarily available for uploading
            the data.
    AwsTempCredentials:
      required:
      - accessKey
      - bucket
      - objectPrefix
      - region
      - secretKey
      - sessionToken
      type: object
      properties:
        accessKey:
          type: string
          description: The S3 access key.
        secretKey:
          type: string
          description: The S3 secret key.
        sessionToken:
          type: string
          description: The S3 session token.
        region:
          type: string
          description: The S3 region.
        bucket:
          type: string
          description: The S3 bucket name.
        objectPrefix:
          type: string
          description: The S3 object prefix these temporary credentials will give
            access to.
        serverSideEncryptionAlgorithm:
          type: string
          description: "Used to specify the type of server-side encryption (SSE) to\
            \ be used on the object provider. This value is used to determine the\
            \ Amazon S3 header \"x-amz-server-side-encryption\" value. For example,\
            \ specify \"AES256\" for SSE-S3, or \"AWS:KMS\" for SSE-KMS. By default\
            \ if none is specified, \"AES256\" will be used."
          nullable: true
        serverSideEncryptionKey:
          type: string
          description: "Used to specify the server-side encryption key that might\
            \ be associated with the specified server-side encryption algorithm. This\
            \ value can be the AWS KMS arn key, to be used for the Amazon S3 header\
            \ \"x-amz-server-side-encryption-aws-kms-key-id\" value. Value will be\
            \ ignored if encryption is \"AES256\""
          nullable: true
      nullable: true
    RcloneTempCredentials:
      required:
      - config
      - expirationTime
      - filePathPrefix
      - storageType
      type: object
      properties:
        config:
          type: object
          additionalProperties:
            type: string
            description: The config in key value format.
          description: The config in key value format.
        filePathPrefix:
          type: string
          description: The prefix of the file path.
        storageType:
          type: string
          description: The type of the object storage.
        expirationTime:
          type: string
          description: The timestamp when the credentials expire.
        uploadSessionId:
          type: string
          description: The folder upload session id which can be used after upload
            to complete the upload session.
          nullable: true
      nullable: true
    TempCredentials:
      type: object
      properties:
        awsTempCredentials:
          $ref: '#/components/schemas/AwsTempCredentials'
        rcloneTempCredentials:
          $ref: '#/components/schemas/RcloneTempCredentials'
      nullable: true
    CreateTemporaryCredentials:
      type: object
      properties:
        credentialsFormat:
          type: string
          description: "The format in which temporary credentials have to be returned.\
            \ If not provided, temporary credentials will be returned in a cloud specific\
            \ format."
          nullable: true
          enum:
          - RCLONE
        readOnlyCredentials:
          type: boolean
          description: The temporary credentials will be read-only.
          nullable: true
      nullable: true
    DataTransfer:
      required:
      - data
      - dataTransferred
      - direction
      - id
      - ownerId
      - reference
      - status
      - tenantId
      - timeCreated
      - timeModified
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        reference:
          maxLength: 255
          minLength: 1
          type: string
        direction:
          type: string
          enum:
          - UPLOAD
          - DOWNLOAD
          - IMPORT
        connector:
          $ref: '#/components/schemas/Connector'
        protocol:
          type: string
          nullable: true
          enum:
          - HTTPS
        dataTransferred:
          minimum: 0
          type: integer
          description: The data transferred so far in bytes.
          format: int64
        status:
          type: string
          enum:
          - REQUESTED
          - ONGOING
          - SUCCEEDED
          - FAILED
          - ABORTED
          - ABORTREQUESTED
          - SCHEDULED
        statusMessage:
          maxLength: 1000
          minLength: 1
          type: string
          description: A message explaining the reason why the transfer is in the
            current status.
          nullable: true
        duration:
          minimum: 0
          type: integer
          description: The overall duration of of the transfer defined in seconds.
          format: int64
          nullable: true
        project:
          $ref: '#/components/schemas/Project'
        data:
          $ref: '#/components/schemas/Data'
    ScheduleDownload:
      type: object
      properties:
        connectorId:
          type: string
          format: uuid
        protocol:
          type: string
          enum:
          - HTTPS
        localPath:
          type: string
        disableHashing:
          type: boolean
    FolderUploadSession:
      required:
      - id
      - status
      - timeCreated
      - timeSessionExpires
      type: object
      properties:
        id:
          type: string
          description: The id of the folder upload session.
        timeCreated:
          type: string
          description: The time the folder upload session was created.
          format: date-time
        status:
          type: string
          description: The status of the folder upload session.
          enum:
          - OPEN
          - CLOSED
          - COMPLETED
        timeSessionExpires:
          type: string
          description: The time the folder upload session will expire as it is only
            temporarily valid.
          format: date-time
        timeCompleted:
          type: string
          description: The time the folder upload session completed.
          format: date-time
          nullable: true
        timeClosed:
          type: string
          description: The time the folder upload session was closed.
          format: date-time
          nullable: true
        tempCredentials:
          $ref: '#/components/schemas/TempCredentials'
    CompleteFolderUploadSession:
      required:
      - numberOfExpectedUploadedFiles
      type: object
      properties:
        numberOfExpectedUploadedFiles:
          type: integer
          description: The number of expected uploaded files within this session.
          format: int32
    ProjectDataCopyBatch:
      required:
      - actionOnExist
      - copyInstrumentInfo
      - copyTechnicalTags
      - copyUserTags
      - id
      - job
      type: object
      properties:
        id:
          type: string
          format: uuid
        job:
          $ref: '#/components/schemas/Job'
        destinationFolderId:
          type: string
        copyUserTags:
          type: boolean
        copyTechnicalTags:
          type: boolean
        copyInstrumentInfo:
          type: boolean
        actionOnExist:
          type: string
    CreateProjectDataCopyBatch:
      required:
      - actionOnExist
      - copyInstrumentInfo
      - copyTechnicalTags
      - copyUserTags
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CreateProjectDataCopyBatchItem'
        destinationFolderId:
          type: string
        copyUserTags:
          type: boolean
        copyTechnicalTags:
          type: boolean
        copyInstrumentInfo:
          type: boolean
        actionOnExist:
          pattern: OVERWRITE|SKIP|RENAME
          type: string
          description: "only applicable on files, not on folders"
    CreateProjectDataCopyBatchItem:
      required:
      - dataId
      type: object
      properties:
        dataId:
          type: string
    ProjectDataCopyBatchItem:
      required:
      - id
      - processing
      - request
      type: object
      properties:
        id:
          type: string
          format: uuid
        request:
          $ref: '#/components/schemas/ProjectDataCopyBatchItemRequest'
        processing:
          $ref: '#/components/schemas/ProjectDataCopyBatchItemProcessing'
        createdProjectData:
          $ref: '#/components/schemas/ProjectData'
    ProjectDataCopyBatchItemPagedList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProjectDataCopyBatchItem'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    ProjectDataCopyBatchItemProcessing:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          enum:
          - QUEUED
          - COPYING
          - COPIED
          - PARTIALLY_COPIED
          - FAILED
        additionalStatusInformation:
          type: string
          description: Additional information regarding the status of this batch item.
          nullable: true
    ProjectDataCopyBatchItemRequest:
      required:
      - dataId
      type: object
      properties:
        dataId:
          type: string
    ProjectDataLinkingBatch:
      required:
      - id
      - job
      type: object
      properties:
        id:
          type: string
          format: uuid
        job:
          $ref: '#/components/schemas/Job'
    CreateProjectDataLinkingBatch:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CreateProjectDataLinkingBatchItem'
    CreateProjectDataLinkingBatchItem:
      required:
      - dataId
      type: object
      properties:
        dataId:
          type: string
    ProjectDataLinkingBatchItemPagedListV4:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProjectDataLinkingBatchItemV4'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    ProjectDataLinkingBatchItemProcessingV4:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          description: "Possible values are: INITIALISED, WAITING_RESOURCES, RUNNING,\
            \ LINKED, ALREADY_LINKED, FAILED, PARTIALLY_LINKED. More types could be\
            \ added in a future release."
        additionalStatusInformation:
          type: string
          description: Additional information regarding the status of this batch item.
          nullable: true
    ProjectDataLinkingBatchItemRequest:
      required:
      - dataId
      type: object
      properties:
        dataId:
          type: string
    ProjectDataLinkingBatchItemV4:
      required:
      - id
      - processing
      - request
      type: object
      properties:
        id:
          type: string
          format: uuid
        request:
          $ref: '#/components/schemas/ProjectDataLinkingBatchItemRequest'
        processing:
          $ref: '#/components/schemas/ProjectDataLinkingBatchItemProcessingV4'
        createdProjectData:
          $ref: '#/components/schemas/ProjectData'
    ProjectDataLinkingBatchItem:
      required:
      - id
      - processing
      - request
      type: object
      properties:
        id:
          type: string
          format: uuid
        request:
          $ref: '#/components/schemas/ProjectDataLinkingBatchItemRequest'
        processing:
          $ref: '#/components/schemas/ProjectDataLinkingBatchItemProcessing'
        createdProjectData:
          $ref: '#/components/schemas/ProjectData'
    ProjectDataLinkingBatchItemPagedList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProjectDataLinkingBatchItem'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    ProjectDataLinkingBatchItemProcessing:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          enum:
          - INITIALISED
          - WAITING_RESOURCES
          - RUNNING
          - LINKED
          - ALREADY_LINKED
          - FAILED
        additionalStatusInformation:
          type: string
          description: Additional information regarding the status of this batch item.
          nullable: true
    ProjectDataMoveBatch:
      required:
      - id
      - job
      type: object
      properties:
        id:
          type: string
          format: uuid
        job:
          $ref: '#/components/schemas/Job'
        destinationFolderId:
          type: string
    CreateProjectDataMoveBatch:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CreateProjectDataMoveBatchItem'
        destinationFolderId:
          type: string
    CreateProjectDataMoveBatchItem:
      required:
      - dataId
      type: object
      properties:
        dataId:
          type: string
    ProjectDataMoveBatchItem:
      required:
      - id
      - processing
      - request
      type: object
      properties:
        id:
          type: string
          format: uuid
        request:
          $ref: '#/components/schemas/ProjectDataMoveBatchItemRequest'
        processing:
          $ref: '#/components/schemas/ProjectDataMoveBatchItemProcessing'
        createdProjectData:
          $ref: '#/components/schemas/ProjectData'
    ProjectDataMoveBatchItemPagedList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProjectDataMoveBatchItem'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    ProjectDataMoveBatchItemProcessing:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          description: "The status of the batch item. Possible values are: QUEUED,\
            \ MOVING, MOVED, PARTIALLY_MOVED, FAILED. More statuses could be added\
            \ in a future release."
        additionalStatusInformation:
          type: string
          description: Additional information regarding the status of this batch item.
          nullable: true
    ProjectDataMoveBatchItemRequest:
      required:
      - dataId
      type: object
      properties:
        dataId:
          type: string
    ProjectDataMoveBatchItemQueryParameters:
      type: object
      properties:
        status:
          type: array
          items:
            pattern: QUEUED|MOVING|MOVED|PARTIALLY_MOVED|FAILED
            type: string
            description: The status to filter on.
            nullable: true
    DataTransferPagedList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DataTransfer'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    ProjectDataUnlinkingBatch:
      required:
      - id
      - job
      type: object
      properties:
        id:
          type: string
          format: uuid
        job:
          $ref: '#/components/schemas/Job'
    CreateProjectDataUnlinkingBatch:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CreateProjectDataUnlinkingBatchItem'
    CreateProjectDataUnlinkingBatchItem:
      required:
      - dataId
      type: object
      properties:
        dataId:
          type: string
    ProjectDataUnlinkingBatchItem:
      required:
      - id
      - processing
      - request
      type: object
      properties:
        id:
          type: string
          format: uuid
        request:
          $ref: '#/components/schemas/ProjectDataUnlinkingBatchItemRequest'
        processing:
          $ref: '#/components/schemas/ProjectDataUnlinkingBatchItemProcessing'
    ProjectDataUnlinkingBatchItemPagedList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProjectDataUnlinkingBatchItem'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    ProjectDataUnlinkingBatchItemProcessing:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          description: "Possible values are: INITIALISED, WAITING_RESOURCES, RUNNING,\
            \ UNLINKED, ALREADY_UNLINKED, FAILED, PARTIALLY_UNLINKED. More types could\
            \ be added in a future release."
        additionalStatusInformation:
          type: string
          description: Additional information regarding the status of this batch item.
          nullable: true
    ProjectDataUnlinkingBatchItemRequest:
      required:
      - dataId
      type: object
      properties:
        dataId:
          type: string
    ProjectDataUpdateBatch:
      required:
      - id
      - job
      type: object
      properties:
        id:
          type: string
          format: uuid
        job:
          $ref: '#/components/schemas/Job'
    CreateProjectDataUpdateBatch:
      required:
      - dataUpdateGroups
      type: object
      properties:
        dataUpdateGroups:
          type: array
          items:
            $ref: '#/components/schemas/DataUpdateGroup'
    DataUpdateGroup:
      required:
      - dataIds
      type: object
      properties:
        dataIds:
          type: array
          items:
            type: string
        userTags:
          $ref: '#/components/schemas/TagUpdate'
        technicalTags:
          $ref: '#/components/schemas/TagUpdate'
        willBeArchivedAt:
          type: string
          description: The timestamp when the data should be archived.
          format: date-time
        willBeDeletedAt:
          type: string
          description: The timestamp when the data should be deleted.
          format: date-time
      description: Updates to apply.
    TagUpdate:
      type: object
      properties:
        addTags:
          type: array
          items:
            type: string
        removeTags:
          type: array
          items:
            type: string
      nullable: true
    ProjectDataUpdateBatchItem:
      required:
      - id
      - processing
      - request
      type: object
      properties:
        id:
          type: string
          format: uuid
        request:
          $ref: '#/components/schemas/ProjectDataUpdateBatchItemRequest'
        processing:
          $ref: '#/components/schemas/ProjectDataUpdateBatchItemProcessing'
    ProjectDataUpdateBatchItemPagedList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProjectDataUpdateBatchItem'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    ProjectDataUpdateBatchItemProcessing:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          enum:
          - INITIALISED
          - WAITING_RESOURCES
          - UPDATING
          - UPDATED
          - PARTIALLY_UPDATED
          - FAILED
        additionalStatusInformation:
          type: string
          description: Additional information regarding the status of this batch item.
          nullable: true
    ProjectDataUpdateBatchItemRequest:
      required:
      - dataId
      type: object
      properties:
        dataId:
          type: string
          description: "Data to apply the update to (recursively, if it's a folder)."
        userTags:
          $ref: '#/components/schemas/TagUpdate'
        technicalTags:
          $ref: '#/components/schemas/TagUpdate'
        willBeArchivedAt:
          type: string
          description: The timestamp when the data should be archived.
          format: date-time
        willBeDeletedAt:
          type: string
          description: The timestamp when the data should be deleted.
          format: date-time
    NotificationSubscription:
      required:
      - enabled
      - eventCode
      - id
      - notificationChannel
      - ownerId
      - tenantId
      - timeCreated
      - timeModified
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        eventCode:
          maxLength: 20
          minLength: 1
          type: string
          description: The event code to subscribe to
        payloadVersion:
          type: string
          description: "The version of the notification event payload in case multiple\
            \ versions exist. For analysis events possible values are [V3,V4]"
          nullable: true
        filterExpression:
          maxLength: 2000
          minLength: 1
          type: string
          description: To be used when a notification applies to specific conditions.
          nullable: true
        enabled:
          type: boolean
          description: Should this subscription be enabled or not?
        notificationChannel:
          $ref: '#/components/schemas/NotificationChannel'
        application:
          $ref: '#/components/schemas/ApplicationV4'
    CreateNotificationSubscription:
      required:
      - enabled
      - eventCode
      - notificationChannelId
      type: object
      properties:
        eventCode:
          maxLength: 20
          minLength: 1
          type: string
          description: The event code to subscribe to
        payloadVersion:
          type: string
          description: "The version of the notification event payload in case multiple\
            \ versions exist. For analysis events possible values are [V3,V4]"
          nullable: true
        filterExpression:
          maxLength: 2000
          minLength: 1
          type: string
          description: To be used when a notification applies to specific conditions.
          nullable: true
        enabled:
          type: boolean
          description: Should this subscription be enabled or not?
        notificationChannelId:
          type: string
          description: The ID of the notification channel used to send on
          format: uuid
    NotificationSubscriptionList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/NotificationSubscription'
    ProjectPermissionListV4:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProjectPermissionV4'
    ProjectPermissionV4:
      required:
      - downloadAllowed
      - id
      - membershipType
      - ownerId
      - roleBase
      - roleBench
      - roleFlow
      - roleProject
      - tenantId
      - timeCreated
      - timeModified
      - uploadAllowed
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        roleProject:
          type: string
          description: "Possible values are: NONE, VIEWER, CONTRIBUTOR, ADMINISTRATOR,\
            \ DATA_PROVIDER. More types could be added in a future release."
        roleFlow:
          type: string
          description: "Possible values are: NONE, VIEWER, CONTRIBUTOR. More types\
            \ could be added in a future release."
        roleBase:
          type: string
          description: "Possible values are: NONE, VIEWER, CONTRIBUTOR. More types\
            \ could be added in a future release."
        roleBench:
          type: string
          description: "Possible values are: NONE, CONTRIBUTOR, ADMINISTRATOR. More\
            \ types could be added in a future release."
        membershipType:
          type: string
          enum:
          - USER
          - EMAIL
          - WORKGROUP
        user:
          $ref: '#/components/schemas/User'
        emailAddress:
          type: string
          description: Only present when membershipType is EMAIL
          nullable: true
        workgroup:
          $ref: '#/components/schemas/Workgroup'
        invitationAccepted:
          type: boolean
          description: Only present when membershipType is EMAIL
          nullable: true
        invitationRejected:
          type: boolean
          description: Only present when user is invited by EMAIL
          nullable: true
        uploadAllowed:
          type: boolean
        downloadAllowed:
          type: boolean
        application:
          $ref: '#/components/schemas/ApplicationV4'
    Workgroup:
      required:
      - description
      - id
      - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          maxLength: 100
          minLength: 1
          type: string
        description:
          maxLength: 1000
          minLength: 1
          type: string
    ProjectPermission:
      required:
      - downloadAllowed
      - id
      - membershipType
      - ownerId
      - roleBase
      - roleBench
      - roleFlow
      - roleProject
      - tenantId
      - timeCreated
      - timeModified
      - uploadAllowed
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        roleProject:
          type: string
          enum:
          - NONE
          - VIEWER
          - CONTRIBUTOR
          - ADMINISTRATOR
          - DATA_PROVIDER
        roleFlow:
          type: string
          enum:
          - NONE
          - VIEWER
          - CONTRIBUTOR
        roleBase:
          type: string
          enum:
          - NONE
          - VIEWER
          - CONTRIBUTOR
        roleBench:
          type: string
          enum:
          - NONE
          - CONTRIBUTOR
        membershipType:
          type: string
          enum:
          - USER
          - EMAIL
          - WORKGROUP
        user:
          $ref: '#/components/schemas/User'
        emailAddress:
          type: string
          description: Only present when membershipType is EMAIL
          nullable: true
        workgroup:
          $ref: '#/components/schemas/Workgroup'
        invitationAccepted:
          type: boolean
          description: Only present when membershipType is EMAIL
          nullable: true
        invitationRejected:
          type: boolean
          description: Only present when user is invited by EMAIL
          nullable: true
        uploadAllowed:
          type: boolean
        downloadAllowed:
          type: boolean
        application:
          $ref: '#/components/schemas/ApplicationV4'
    ProjectPermissionList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProjectPermission'
    CreateProjectPermissionV4:
      required:
      - downloadAllowed
      - membershipType
      - roleBase
      - roleBench
      - roleFlow
      - roleProject
      - uploadAllowed
      type: object
      properties:
        roleProject:
          pattern: NONE|VIEWER|CONTRIBUTOR|ADMINISTRATOR|DATA_PROVIDER
          type: string
        roleFlow:
          pattern: NONE|VIEWER|CONTRIBUTOR
          type: string
        roleBase:
          pattern: NONE|VIEWER|CONTRIBUTOR
          type: string
        roleBench:
          pattern: NONE|CONTRIBUTOR|ADMINISTRATOR
          type: string
        membershipType:
          type: string
          description: How users are invited to the project
          enum:
          - USER
          - EMAIL
          - WORKGROUP
        userId:
          type: string
          description: "the id of the user that should be given access, required when\
            \ membershipType is USER"
          format: uuid
          nullable: true
        emailAddress:
          type: string
          description: "The email to invite a user on, required when membershipType\
            \ is EMAIL"
          nullable: true
        workgroupId:
          type: string
          description: "the id of the workgroup to give access, required when membershipType\
            \ is WORKGROUP"
          format: uuid
          nullable: true
        uploadAllowed:
          type: boolean
          description: Indicates if uploading data is allowed or not.
        downloadAllowed:
          type: boolean
          description: Indicates if downloading data is allowed or not.
    CreateProjectPermission:
      required:
      - downloadAllowed
      - membershipType
      - roleBase
      - roleBench
      - roleFlow
      - roleProject
      - uploadAllowed
      type: object
      properties:
        roleProject:
          type: string
          enum:
          - NONE
          - VIEWER
          - CONTRIBUTOR
          - ADMINISTRATOR
          - DATA_PROVIDER
        roleFlow:
          type: string
          enum:
          - NONE
          - VIEWER
          - CONTRIBUTOR
        roleBase:
          type: string
          enum:
          - NONE
          - VIEWER
          - CONTRIBUTOR
        roleBench:
          type: string
          enum:
          - NONE
          - CONTRIBUTOR
        membershipType:
          type: string
          description: How users are invited to the project
          enum:
          - USER
          - EMAIL
          - WORKGROUP
        userId:
          type: string
          description: "the id of the user that should be given access, required when\
            \ membershipType is USER"
          format: uuid
          nullable: true
        emailAddress:
          type: string
          description: "The email to invite a user on, required when membershipType\
            \ is EMAIL"
          nullable: true
        workgroupId:
          type: string
          description: "the id of the workgroup to give access, required when membershipType\
            \ is WORKGROUP"
          format: uuid
          nullable: true
        uploadAllowed:
          type: boolean
          description: Indicates if uploading data is allowed or not.
        downloadAllowed:
          type: boolean
          description: Indicates if downloading data is allowed or not.
    BundleList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Bundle'
    ProjectPipeline:
      required:
      - bundleLinks
      - pipeline
      - projectId
      type: object
      properties:
        pipeline:
          $ref: '#/components/schemas/PipelineV3'
        projectId:
          type: string
          format: uuid
        bundleLinks:
          $ref: '#/components/schemas/BundleList'
    ProjectPipelineList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProjectPipeline'
    PipelineFileContentSpec:
      required:
      - content
      type: object
      properties:
        content:
          type: string
          format: binary
    InputPart:
      type: object
      properties:
        mediaType:
          type: object
          properties:
            type:
              type: string
            subtype:
              type: string
            parameters:
              type: object
              additionalProperties:
                type: string
            wildcardType:
              type: boolean
            wildcardSubtype:
              type: boolean
        contentTypeFromMessage:
          type: boolean
        bodyAsString:
          type: string
        headers:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    MultipartFormDataInput:
      type: object
      properties:
        formData:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/InputPart'
        formDataMap:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/InputPart'
        parts:
          type: array
          items:
            $ref: '#/components/schemas/InputPart'
        preamble:
          type: string
    CreateNextflowJsonPipeline:
      required:
      - analysisStorageId
      - code
      - description
      - inputFormFile
      - mainNextflowFile
      type: object
      properties:
        code:
          maxLength: 255
          minLength: 1
          pattern: "^[a-zA-Z0-9 _-]*(/[a-zA-Z0-9 _-]+)*$"
          type: string
          description: The code of the pipeline
        pipelineLanguageVersionId:
          type: string
          description: The id of the Nextflow version to use for the pipeline.
          format: uuid
          nullable: true
        description:
          maxLength: 4000
          minLength: 1
          type: string
          description: The description of the pipeline
        mainNextflowFile:
          type: string
          description: The main Nextflow file.
          format: binary
        nextflowConfigFile:
          type: string
          description: The Nextflow config file.
          format: binary
        otherNextflowFiles:
          type: array
          items:
            type: string
            description: Other Nextflow files referenced from the main Nextflow file.
            format: binary
        inputFormFile:
          type: string
          description: The JSON based input form.
          format: binary
        onRenderFile:
          type: string
          description: A file that will render the current state of the input form.
          format: binary
        onSubmitFile:
          type: string
          description: A file that will submit the current state of the input form.
          format: binary
        otherInputFormFiles:
          type: array
          items:
            type: string
            description: Other input form files referenced from the main input form
              file.
            format: binary
        metadataModelFile:
          type: string
          description: The metadata model json file(contents can be retrieved from
            the controlplane).
          format: binary
          nullable: true
        links:
          $ref: '#/components/schemas/Links'
        versionComment:
          type: string
          nullable: true
        categories:
          maxItems: 4000
          minItems: 1
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        htmlDocumentation:
          type: string
          nullable: true
        analysisStorageId:
          type: string
          description: The id of the storage to use for the pipeline.
          format: uuid
        proprietary:
          type: boolean
          description: A boolean which indicates if the code of this pipeline is proprietary
          nullable: true
          default: false
    CreateNextflowPipeline:
      required:
      - analysisStorageId
      - code
      - description
      - mainNextflowFile
      - parametersXmlFile
      type: object
      properties:
        code:
          maxLength: 255
          minLength: 1
          pattern: "^[a-zA-Z0-9 _-]*(/[a-zA-Z0-9 _-]+)*$"
          type: string
          description: The code of the pipeline
        pipelineLanguageVersionId:
          type: string
          description: The id of the Nextflow version to use for the pipeline.
          format: uuid
          nullable: true
        description:
          maxLength: 4000
          minLength: 1
          type: string
          description: The description of the pipeline
        mainNextflowFile:
          type: string
          description: The main Nextflow file.
          format: binary
        nextflowConfigFile:
          type: string
          description: The Nextflow config file.
          format: binary
        otherNextflowFiles:
          type: array
          items:
            type: string
            description: Other Nextflow files referenced from the main Nextflow file.
            format: binary
        parametersXmlFile:
          type: string
          format: binary
        metadataModelFile:
          type: string
          description: The metadata model json file(contents can be retrieved from
            the controlplane).
          format: binary
          nullable: true
        links:
          $ref: '#/components/schemas/Links'
        versionComment:
          type: string
          nullable: true
        categories:
          maxItems: 4000
          minItems: 1
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        htmlDocumentation:
          type: string
          nullable: true
        analysisStorageId:
          type: string
          description: The id of the storage to use for the pipeline.
          format: uuid
        proprietary:
          type: boolean
          description: A boolean which indicates if the code of this pipeline is proprietary
          nullable: true
          default: false
    ProjectPipelineV4:
      required:
      - bundleLinks
      - pipeline
      - projectId
      type: object
      properties:
        pipeline:
          $ref: '#/components/schemas/PipelineV4'
        projectId:
          type: string
          format: uuid
        bundleLinks:
          $ref: '#/components/schemas/BundleList'
    CreateCwlJsonPipeline:
      required:
      - analysisStorageId
      - code
      - description
      - inputFormFile
      - workflowCwlFile
      type: object
      properties:
        code:
          maxLength: 255
          minLength: 1
          pattern: "^[a-zA-Z0-9 _-]*(/[a-zA-Z0-9 _-]+)*$"
          type: string
          description: The code of the CWL pipeline
        description:
          maxLength: 4000
          minLength: 1
          type: string
          description: The description of the CWL pipeline
        workflowCwlFile:
          type: string
          description: The CWL workflow file.
          format: binary
        toolCwlFiles:
          type: array
          items:
            type: string
            description: The CWL tool files referenced from the workflow file.
            format: binary
        inputFormFile:
          type: string
          description: The JSON based input form.
          format: binary
        onRenderFile:
          type: string
          description: A file that will render the current state of the input form.
          format: binary
        onSubmitFile:
          type: string
          description: A file that will submit the current state of the input form.
          format: binary
        otherInputFormFiles:
          type: array
          items:
            type: string
            description: Other input form files referenced from the main input form
              file.
            format: binary
        metadataModelFile:
          type: string
          description: The metadata model json file(contents can be retrieved from
            the controlplane).
          format: binary
          nullable: true
        links:
          $ref: '#/components/schemas/Links'
        versionComment:
          type: string
          nullable: true
        categories:
          maxItems: 4000
          minItems: 1
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        htmlDocumentation:
          type: string
          nullable: true
        analysisStorageId:
          type: string
          description: The id of the storage to use for the pipeline.
          format: uuid
        proprietary:
          type: boolean
          description: A boolean which indicates if the code of this pipeline is proprietary
          nullable: true
          default: false
    CreateCwlPipeline:
      required:
      - analysisStorageId
      - code
      - description
      - parametersXmlFile
      - workflowCwlFile
      type: object
      properties:
        code:
          maxLength: 255
          minLength: 1
          pattern: "^[a-zA-Z0-9 _-]*(/[a-zA-Z0-9 _-]+)*$"
          type: string
          description: The code of the CWL pipeline
        description:
          maxLength: 4000
          minLength: 1
          type: string
          description: The description of the CWL pipeline
        workflowCwlFile:
          type: string
          description: The CWL workflow file.
          format: binary
        toolCwlFiles:
          type: array
          items:
            type: string
            description: The CWL tool files referenced from the workflow file.
            format: binary
        parametersXmlFile:
          type: string
          format: binary
        metadataModelFile:
          type: string
          description: The metadata model json file(contents can be retrieved from
            the controlplane).
          format: binary
          nullable: true
        links:
          $ref: '#/components/schemas/Links'
        versionComment:
          type: string
          nullable: true
        categories:
          maxItems: 4000
          minItems: 1
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        htmlDocumentation:
          type: string
          nullable: true
        analysisStorageId:
          type: string
          description: The id of the storage to use for the pipeline.
          format: uuid
        proprietary:
          type: boolean
          description: A boolean which indicates if the code of this pipeline is proprietary
          nullable: true
          default: false
    ProjectSample:
      required:
      - projectId
      - sample
      type: object
      properties:
        sample:
          $ref: '#/components/schemas/Sample'
        projectId:
          type: string
          format: uuid
    CreateSample:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: The name of the sample.
        description:
          maxLength: 255
          minLength: 1
          type: string
          description: The description of the sample.
          nullable: true
        tags:
          $ref: '#/components/schemas/OptionalSampleTags'
    OptionalSampleTags:
      type: object
      properties:
        technicalTags:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        userTags:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        connectorTags:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
        runInTags:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
      nullable: true
    SampleHistory:
      required:
      - occurredAt
      - source
      - text
      type: object
      properties:
        occurredAt:
          type: string
          description: When the change was made
          format: date-time
        user:
          type: string
          description: The user that made the change
          format: uuid
          nullable: true
        run:
          type: string
          description: In which execution context the change was made
          format: uuid
          nullable: true
        source:
          type: string
          description: In which context the change was made
        text:
          type: string
          description: What was changed
        project:
          type: string
          description: In which project context the change was made
          format: uuid
          nullable: true
        model:
          type: integer
          description: In which model context the change was made
          format: int64
          nullable: true
    SampleHistoryList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SampleHistory'
    FieldId:
      required:
      - id
      type: object
      properties:
        id:
          type: string
      nullable: true
    UpdateMetadata:
      type: object
      properties:
        updateSingleMetadataFields:
          type: array
          description: List of metadata fields to be updated
          nullable: true
          items:
            $ref: '#/components/schemas/UpdateSingleMetadataField'
        updateMetadataFieldGroups:
          type: array
          description: List of metadata field groups to be updated
          nullable: true
          items:
            $ref: '#/components/schemas/UpdateMetadataFieldGroup'
    UpdateMetadataFieldGroup:
      required:
      - index
      - updateSingleMetadataFields
      type: object
      properties:
        fieldId:
          $ref: '#/components/schemas/FieldId'
        fieldName:
          type: string
          description: The field name to be updated. Either the field ID or field
            name is required.
          nullable: true
        index:
          type: integer
          description: Which metadata row index to update
          format: int32
        updateSingleMetadataFields:
          type: array
          description: List of metadata fields to be updated
          items:
            $ref: '#/components/schemas/UpdateSingleMetadataField'
      description: List of metadata field groups to be updated
      nullable: true
    UpdateSingleMetadataField:
      type: object
      properties:
        fieldId:
          $ref: '#/components/schemas/FieldId'
        fieldName:
          type: string
          description: The field name to be updated. Either the field ID or field
            name is required.
          nullable: true
        values:
          type: array
          description: The updated value(s)
          items:
            type: string
            description: The updated value(s)
      description: List of metadata fields to be updated
    SampleCreationBatch:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          format: uuid
        job:
          $ref: '#/components/schemas/Job'
        sequencingRunId:
          type: string
          description: The sequencingRunId to link to all created samples and linked
            data
          format: uuid
          nullable: true
    CreateSampleCreationBatchDataItem:
      required:
      - dataId
      type: object
      properties:
        dataId:
          type: string
      description: The data to be linked to the new sample.
      nullable: true
    CreateSampleCreationBatch:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CreateSampleCreationBatchSampleItem'
    CreateSampleCreationBatchSampleItem:
      required:
      - completeSample
      - sampleToCreate
      type: object
      properties:
        sampleToCreate:
          $ref: '#/components/schemas/CreateSample'
        dataToLink:
          type: array
          description: The data to be linked to the new sample.
          nullable: true
          items:
            $ref: '#/components/schemas/CreateSampleCreationBatchDataItem'
        completeSample:
          type: boolean
          description: Indicates whether the sample must be completed.
    SampleCreationBatchItemPagedList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SampleCreationBatchSampleItem'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    SampleCreationBatchItemProcessing:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          enum:
          - INITIALIZED
          - WAITING_RESOURCES
          - RUNNING
          - SUCCEEDED
          - PARTIALLY_SUCCEEDED
          - FAILED
          - STOPPED
        additionalStatusInformation:
          type: string
          description: Additional information regarding the status of this batch item.
          nullable: true
    SampleCreationBatchItemRequest:
      required:
      - completeSample
      - sampleToCreate
      type: object
      properties:
        sampleToCreate:
          $ref: '#/components/schemas/CreateSample'
        completeSample:
          type: boolean
          description: Indicates whether the sample must be completed.
    SampleCreationBatchSampleItem:
      required:
      - id
      - processing
      - request
      type: object
      properties:
        id:
          type: string
          format: uuid
        request:
          $ref: '#/components/schemas/SampleCreationBatchItemRequest'
        processing:
          $ref: '#/components/schemas/SampleCreationBatchItemProcessing'
        createdSample:
          $ref: '#/components/schemas/Sample'
    WorkflowSessionPagedListV3:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowSessionV3'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    WorkflowSessionData:
      required:
      - dataId
      - dataType
      - format
      - name
      type: object
      properties:
        dataId:
          maxLength: 255
          minLength: 1
          type: string
          description: The id of the file/folder.
        format:
          $ref: '#/components/schemas/DataFormat'
        name:
          type: string
          description: The name of the file/folder as it was processed by the workflow
            session.
        dataType:
          type: string
          enum:
          - FILE
          - FOLDER
        mountPath:
          type: string
          description: The requested location where the input file was located on
            the machine that was running the workflow.
      description: The workflow-session-data used as input by the workflow session.
      nullable: true
    WorkflowSessionExternalData:
      required:
      - mountPath
      - type
      - url
      type: object
      properties:
        url:
          type: string
        type:
          type: string
          description: "Possible values are: s3, http, basespace. More types could\
            \ be added in a future release."
        mountPath:
          type: string
      description: The external data used as input by the workflow session.
      nullable: true
    WorkflowSessionInput:
      required:
      - code
      type: object
      properties:
        code:
          type: string
          description: The name of the input-parameter.
        analysisData:
          type: array
          description: The workflow-session-data used as input by the workflow session.
          nullable: true
          items:
            $ref: '#/components/schemas/WorkflowSessionData'
        externalData:
          type: array
          description: The external data used as input by the workflow session.
          nullable: true
          items:
            $ref: '#/components/schemas/WorkflowSessionExternalData'
    WorkflowSessionInputList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowSessionInput'
    WorkflowSessionConfiguration:
      required:
      - multiValue
      - name
      - values
      type: object
      properties:
        name:
          type: string
          description: The name of the configuration
        multiValue:
          type: boolean
          description: Whether the configuration has multiple values
        values:
          type: array
          description: The configuration values
          items:
            type: string
            description: The configuration values
    WorkflowSessionConfigurationList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowSessionConfiguration'
    WorkflowSessionAnalysisV4:
      required:
      - analysis
      - project
      - workflowSessionId
      type: object
      properties:
        analysis:
          $ref: '#/components/schemas/AnalysisV4'
        project:
          $ref: '#/components/schemas/Project'
        workflowSessionId:
          type: string
          format: uuid
    WorkflowSessionAnalysisPagedListV4:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowSessionAnalysisV4'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    WorkflowSessionPagedListV4:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowSessionV4'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    SpeciesList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Species'
    RegionList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Region'
    SamplePagedList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Sample'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    StorageBundleList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/StorageBundle'
    AWSDetails:
      required:
      - bucketName
      type: object
      properties:
        bucketName:
          maxLength: 63
          minLength: 3
          type: string
          description: The name of the s3 bucket
        keyPrefix:
          pattern: ^(?!/).*/$
          type: string
          description: "Key prefix within the bucket for ICA to operate within. Data\
            \ may only be created having this prefix and the given credentials will\
            \ only give access to it. If not set, default is to allow operation on\
            \ the full bucket. No leading slash, and must end with a trailing slash."
          nullable: true
        serverSideEncryptionAlgorithm:
          type: string
          description: "Used to specify the type of server-side encryption (SSE) to\
            \ be used on the object provider. This value is used to determine the\
            \ Amazon S3 header \"x-amz-server-side-encryption\" value. For example,\
            \ specify \"AES256\" for SSE-S3, or \"AWS:KMS\" for SSE-KMS. By default\
            \ if none is specified, \"AES256\" will be used."
          nullable: true
        serverSideEncryptionKey:
          type: string
          description: "Used to specify the server-side encryption key that might\
            \ be associated with the specified server-side encryption algorithm. This\
            \ value can be the AWS KMS arn key, to be used for the Amazon S3 header\
            \ \"x-amz-server-side-encryption-aws-kms-key-id\" value. Value will be\
            \ ignored if encryption is \"AES256\"."
          nullable: true
      nullable: true
    CreateStorageConfiguration:
      required:
      - name
      - regionId
      - storageCredentialId
      - type
      type: object
      properties:
        name:
          maxLength: 15
          minLength: 3
          pattern: "^[a-z0-9][a-z0-9.-]*[a-z0-9]$"
          type: string
          description: The name of the configuration
        description:
          maxLength: 1000
          minLength: 0
          type: string
          description: An optional description
          nullable: true
        storageCredentialId:
          type: string
          description: The id of the storage credential
          format: uuid
        type:
          type: string
          description: The type of configuration
          enum:
          - AWS_S3
        awsDetails:
          $ref: '#/components/schemas/AWSDetails'
        regionId:
          type: string
          description: The id of the region where the bucket will be located
          format: uuid
    StorageConfigurationDetails:
      type: object
      properties:
        awsS3:
          $ref: '#/components/schemas/AWSDetails'
    StorageConfigurationWithDetails:
      required:
      - id
      - isDefault
      - name
      - ownerId
      - region
      - status
      - storageConfigurationDetails
      - tenantId
      - timeCreated
      - timeModified
      - type
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        name:
          type: string
          description: The name of the storage configuration
        description:
          maxLength: 1000
          minLength: 0
          type: string
          description: An optional description
          nullable: true
        type:
          type: string
          enum:
          - AWS_S3
        status:
          type: string
          enum:
          - INITIALIZING
          - OK
          - ERROR
        errorMessage:
          maxLength: 1000
          minLength: 0
          type: string
          description: An optional error message when something went wrong with the
            configuration
          nullable: true
        region:
          $ref: '#/components/schemas/Region'
        isDefault:
          type: boolean
          description: An indication if this is the default in region for new projects
        storageConfigurationDetails:
          $ref: '#/components/schemas/StorageConfigurationDetails'
    StorageConfigurationWithDetailsList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/StorageConfigurationWithDetails'
    StorageCredential:
      required:
      - id
      - name
      - ownerId
      - tenantId
      - timeCreated
      - timeModified
      - type
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        tenantName:
          type: string
          nullable: true
        name:
          maxLength: 150
          minLength: 1
          type: string
        type:
          type: string
          enum:
          - AWS_USER
    AwsCredentials:
      required:
      - accessKeyId
      - secretAccessKey
      type: object
      properties:
        accessKeyId:
          maxLength: 100
          minLength: 1
          pattern: "[^=,]*"
          type: string
          description: The access key found in aws console
        secretAccessKey:
          maxLength: 100
          minLength: 1
          pattern: "[^=,]*"
          type: string
          description: The secret access key found in aws console
      nullable: true
    CreateStorageCredential:
      required:
      - name
      - type
      type: object
      properties:
        name:
          maxLength: 150
          minLength: 1
          pattern: "^[a-zA-Z0-9_-]*$"
          type: string
          description: The name of the credentials
        type:
          type: string
          description: The type of the credentials
          enum:
          - AWS_USER
        awsCredentials:
          $ref: '#/components/schemas/AwsCredentials'
    StorageCredentialList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/StorageCredential'
    UpdateStorageCredentialSecrets:
      type: object
      properties:
        awsCredentials:
          $ref: '#/components/schemas/AwsCredentials'
    SystemInfo:
      required:
      - name
      - version
      type: object
      properties:
        name:
          type: string
        version:
          type: string
    Token:
      type: object
      properties:
        token:
          type: string
    UserList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/User'
    WorkgroupList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Workgroup'
    EventLogV4:
      required:
      - code
      - description
      - eventTypeCategory
      - id
      - owner
      - tenant
      - timeCreated
      type: object
      properties:
        id:
          type: string
          format: uuid
        timeCreated:
          type: string
          format: date-time
        owner:
          $ref: '#/components/schemas/UserIdentifier'
        tenant:
          $ref: '#/components/schemas/TenantIdentifier'
        code:
          maxLength: 255
          minLength: 1
          type: string
          description: The code of the event
        description:
          maxLength: 1000
          minLength: 1
          type: string
          description: The details of the event
        eventTypeCategory:
          pattern: ERROR|WARN|INFO
          type: string
          description: The type of the event
    EventLogPagedListV4:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/EventLogV4'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    EventLogQueryParametersV4:
      type: object
      properties:
        code:
          type: string
          description: The code to filter on.
          nullable: true
        category:
          pattern: ERROR|WARN|INFO
          type: string
          description: The category to filter on
          nullable: true
        dateFrom:
          type: string
          description: The date from to search in.
          format: date-time
          nullable: true
        dateUntil:
          type: string
          description: The date until to search in.
          format: date-time
          nullable: true
    CreateFileData:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the file as how it will be created.
        folderId:
          type: string
          description: "The id of the folder you want to create this new file in.\
            \ Alternatively, the folderPath attribute could be used as well for this."
          nullable: true
        folderPath:
          pattern: .*/$
          type: string
          description: "The absolute path of the folder you want to create this new\
            \ file in which must end with '/'. Alternatively, the folderId attribute\
            \ could be used as well for this. In case the folder path does not yet\
            \ exist, it will be automatically created."
          nullable: true
        formatCode:
          type: string
          description: "The code of the format you would like to assign at creation\
            \ time. If not specified, auto format assignment will be done."
          nullable: true
    ProjectDataAndTemporaryCredentials:
      required:
      - data
      - projectId
      - tempCredentials
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Data'
        projectId:
          type: string
          format: uuid
        tempCredentials:
          $ref: '#/components/schemas/TempCredentials'
    CreateFileAndTemporaryCredentials:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the file as how it will be created.
        folderId:
          type: string
          description: "The id of the folder you want to create this new file in.\
            \ Alternatively, the folderPath attribute could be used as well for this."
          nullable: true
        folderPath:
          pattern: .*/$
          type: string
          description: "The absolute path of the folder you want to create this new\
            \ file in which must end with '/'. Alternatively, the folderId attribute\
            \ could be used as well for this. In case the folder path does not yet\
            \ exist, it will be automatically created."
          nullable: true
        formatCode:
          type: string
          description: "The code of the format you would like to assign at creation\
            \ time. If not specified, auto format assignment will be done."
          nullable: true
        temporaryCredentials:
          $ref: '#/components/schemas/CreateTemporaryCredentials'
    ProjectFileAndUploadUrl:
      required:
      - data
      - projectId
      - uploadUrl
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Data'
        projectId:
          type: string
          format: uuid
        uploadUrl:
          type: string
          description: A pre-signed url which is temporarily available for uploading
            the data.
    CreateFileAndUploadUrl:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the file as how it will be created.
        folderId:
          type: string
          description: "The id of the folder you want to create this new file in.\
            \ Alternatively, the folderPath attribute could be used as well for this."
          nullable: true
        folderPath:
          pattern: .*/$
          type: string
          description: "The absolute path of the folder you want to create this new\
            \ file in which must end with '/'. Alternatively, the folderId attribute\
            \ could be used as well for this. In case the folder path does not yet\
            \ exist, it will be automatically created."
          nullable: true
        formatCode:
          type: string
          description: "The code of the format you would like to assign at creation\
            \ time. If not specified, auto format assignment will be done."
          nullable: true
        fileType:
          type: string
          description: "The expected content type for the upload, to include in the\
            \ upload url."
          nullable: true
        hash:
          type: string
          description: "The expected md5 hash for the upload content, to include in\
            \ the upload url."
          nullable: true
    CreateFolder:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the folder as how it will be created.
        folderId:
          type: string
          description: "The id of the folder you want to create this new folder in.\
            \ Alternatively, the folderPath attribute could be used as well for this."
          nullable: true
        folderPath:
          pattern: .*/$
          type: string
          description: "The absolute path of the folder you want to create this new\
            \ folder in which must end with '/'. Alternatively, the folderId attribute\
            \ could be used as well for this. In case the folder path does not yet\
            \ exist, it will be automatically created."
          nullable: true
    CreateFolderAndTemporaryCredentials:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the folder as how it will be created.
        folderId:
          type: string
          description: "The id of the folder you want to create this new folder in.\
            \ Alternatively, the folderPath attribute could be used as well for this."
          nullable: true
        folderPath:
          pattern: .*/$
          type: string
          description: "The absolute path of the folder you want to create this new\
            \ folder in which must end with '/'. Alternatively, the folderId attribute\
            \ could be used as well for this. In case the folder path does not yet\
            \ exist, it will be automatically created."
          nullable: true
        nonIndexed:
          type: boolean
          description: "If you want to create a non-indexed folder. Only possible\
            \ as a top-level folder, which means the folderId and folderPath attributes\
            \ are not allowed."
          nullable: true
          default: false
        temporaryCredentials:
          $ref: '#/components/schemas/CreateTemporaryCredentials'
    ProjectFolderAndUploadSession:
      required:
      - data
      - projectId
      - uploadSession
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Data'
        projectId:
          type: string
          format: uuid
        uploadSession:
          $ref: '#/components/schemas/FolderUploadSession'
    CreateNonIndexedFolder:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the non indexed folder.
    DataUrlWithPath:
      required:
      - dataId
      - dataPath
      - dataUrn
      - url
      type: object
      properties:
        dataId:
          type: string
          description: The id of the file/folder as it was uploaded.
        dataUrn:
          type: string
          description: "The URN of this data. The format is urn:ilmn:ica:region:\\\
            <ID of the region\\>:data:\\<ID of the data\\>#\\<optional data path\\\
            >. The path can be omitted, in that case the hashtag (#) must also be\
            \ omitted."
        dataPath:
          type: string
        url:
          type: string
    DataUrlWithPathList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DataUrlWithPath'
    DataIdOrPathList:
      type: object
      properties:
        dataIds:
          maxItems: 2147483647
          minItems: 1
          type: array
          items:
            type: string
        dataPaths:
          maxItems: 2147483647
          minItems: 1
          type: array
          items:
            type: string
    ProjectSamplePagedList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProjectSample'
        nextPageToken:
          x-faker:
            helpers.arrayElement: [[ "page1", "" ]]
          maxLength: 2000
          minLength: 0
          type: string
          description: The cursor to request the next page. For offset-based paging
            the value is an empty string.
          nullable: true
        remainingRecords:
          minimum: 0
          type: integer
          description: The number of records remaining (used in cursor based pagination)
          format: int64
          nullable: true
        totalItemCount:
          minimum: 0
          type: integer
          description: The total number of records matching the search criteria (used
            in offset based pagination)
          format: int64
          nullable: true
    FindProjectSamples:
      required:
      - booleanConditions
      - conditions
      - dateConditions
      - numberConditions
      type: object
      properties:
        conditions:
          type: array
          description: Adds a condition on a string field.
          items:
            $ref: '#/components/schemas/FindSampleCondition'
        dateConditions:
          type: array
          description: Adds a condition on a date metadate field. If both the dateBefore
            and dateAfter parameter are null it will return any sample that has no
            value for the date field.
          items:
            $ref: '#/components/schemas/FindSampleDateCondition'
        numberConditions:
          type: array
          description: Adds a condition on a number metadata field. If both the lowerBoundary
            and upperBoundary parameter are null it will return any sample that has
            no value for the number field.
          items:
            $ref: '#/components/schemas/FindSampleNumberCondition'
        booleanConditions:
          type: array
          description: Adds a condition on a boolean field.
          items:
            $ref: '#/components/schemas/FindSampleBooleanCondition'
        fullTextSearchString:
          type: string
          description: "Adds a fuzzy matching condition for the text on all string\
            \ fields of the sample i.e. on both the fixed fields (name, description)\
            \ as any metadata text field."
          nullable: true
        includeDeleted:
          type: boolean
          description: Indicates whether deleted samples should be included.
          nullable: true
          default: false
        userTags:
          type: array
          description: The usertags to filter on. The userTagMatchMode-parameter determines
            how the filtering is done.
          nullable: true
          items:
            type: string
            description: The usertags to filter on. The userTagMatchMode-parameter
              determines how the filtering is done.
            nullable: true
        userTagMatchMode:
          type: string
          description: How the usertags are filtered.
          nullable: true
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
        runInputTags:
          type: array
          description: The runInputTags to filter on. The runInputTagMatchMode-parameter
            determines how the filtering is done.
          nullable: true
          items:
            type: string
            description: The runInputTags to filter on. The runInputTagMatchMode-parameter
              determines how the filtering is done.
            nullable: true
        runInputTagMatchMode:
          type: string
          description: How the runInputTags are filtered.
          nullable: true
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
        connectorTags:
          type: array
          description: The connectorTags to filter on. The connectorTagMatchMode-parameter
            determines how the filtering is done.
          nullable: true
          items:
            type: string
            description: The connectorTags to filter on. The connectorTagMatchMode-parameter
              determines how the filtering is done.
            nullable: true
        connectorTagMatchMode:
          type: string
          description: How the connectorTags are filtered.
          nullable: true
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
        techTags:
          type: array
          description: The technicalTags to filter on. The techTagMatchMode-parameter
            determines how the filtering is done.
          nullable: true
          items:
            type: string
            description: The technicalTags to filter on. The techTagMatchMode-parameter
              determines how the filtering is done.
            nullable: true
        techTagMatchMode:
          type: string
          description: How the technicalTags are filtered.
          nullable: true
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
        instrumentRunIds:
          type: array
          nullable: true
          items:
            type: string
            nullable: true
    FindSampleBooleanCondition:
      type: object
      properties:
        metadataField:
          $ref: '#/components/schemas/Field'
        field:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
      description: Adds a condition on a boolean field.
    FindSampleCondition:
      required:
      - values
      type: object
      properties:
        metadataField:
          $ref: '#/components/schemas/FieldId'
        field:
          type: string
          nullable: true
        matchMode:
          type: string
          description: Defines how the value will be matched.
          nullable: true
          enum:
          - EXACT
          - EXCLUDE
          - FUZZY
        values:
          uniqueItems: true
          type: array
          items:
            type: string
      description: Adds a condition on a string field.
    FindSampleDateCondition:
      type: object
      properties:
        metadataField:
          $ref: '#/components/schemas/FieldId'
        field:
          type: string
          nullable: true
        beforeDate:
          type: string
          description: "Before date. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z"
          nullable: true
        afterDate:
          type: string
          description: "After date. Format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z' eg: 2017-01-10T10:47:56.039Z"
          nullable: true
      description: Adds a condition on a date metadate field. If both the dateBefore
        and dateAfter parameter are null it will return any sample that has no value
        for the date field.
    FindSampleNumberCondition:
      type: object
      properties:
        metadataField:
          $ref: '#/components/schemas/FieldId'
        field:
          type: string
          nullable: true
        lowerBound:
          type: string
          nullable: true
        upperBound:
          type: string
          nullable: true
      description: Adds a condition on a number metadata field. If both the lowerBoundary
        and upperBoundary parameter are null it will return any sample that has no
        value for the number field.
  securitySchemes:
    JwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    PsTokenAuth:
      type: http
      scheme: bearer
      bearerFormat: psToken
    ApiKeyAuth:
      type: apiKey
      name: X-API-Key
      in: header
    BasicAuth:
      type: http
      scheme: basic
